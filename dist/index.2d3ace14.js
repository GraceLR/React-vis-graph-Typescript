// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1xC6H":[function(require,module,exports) {
var Refresh = require("react-refresh/runtime");
var ErrorOverlay = require("react-error-overlay");
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};
ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
    let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${errorLocation.colNumber || 1}`;
    fetch(`/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
});
ErrorOverlay.startReportingRuntimeErrors({
    onError: function() {}
});
window.addEventListener("parcelhmraccept", ()=>{
    ErrorOverlay.dismissRuntimeErrors();
});

},{"react-refresh/runtime":"786KC","react-error-overlay":"1dldy"}],"786KC":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-refresh-runtime.development.js");

},{"./cjs/react-refresh-runtime.development.js":"hdge7"}],"hdge7":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
    }
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === "function" ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== "function") {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += "\n---\n" + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== "function" && typeof type !== "object") return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === "object" && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + "$render");
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + "$type");
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = "needsSignature";
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case "needsSignature":
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === "function";
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = "needsCustomHooks";
                    }
                    break;
                case "needsCustomHooks":
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = "resolved";
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case "function":
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== "constructor") // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === "string" && /^[A-Z]/.test(name);
            case "object":
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"1dldy":[function(require,module,exports) {
var process = require("process");
!function(e, t) {
    module.exports = t();
}(window, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var o = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var o in e)r.d(n, o, (function(t) {
                return e[t];
            }).bind(null, o));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 15);
    }([
        function(e, t, r) {
            e.exports = r(8);
        },
        function(e, t) {
            t.getArg = function(e, t, r) {
                if (t in e) return e[t];
                if (3 === arguments.length) return r;
                throw new Error('"' + t + '" is a required argument.');
            };
            var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/, n = /^data:.+\,.+$/;
            function o(e) {
                var t = e.match(r);
                return t ? {
                    scheme: t[1],
                    auth: t[2],
                    host: t[3],
                    port: t[4],
                    path: t[5]
                } : null;
            }
            function a(e) {
                var t = "";
                return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
            }
            function i(e) {
                var r = e, n = o(e);
                if (n) {
                    if (!n.path) return e;
                    r = n.path;
                }
                for(var i, l = t.isAbsolute(r), u = r.split(/\/+/), c = 0, s = u.length - 1; s >= 0; s--)"." === (i = u[s]) ? u.splice(s, 1) : ".." === i ? c++ : c > 0 && ("" === i ? (u.splice(s + 1, c), c = 0) : (u.splice(s, 2), c--));
                return "" === (r = u.join("/")) && (r = l ? "/" : "."), n ? (n.path = r, a(n)) : r;
            }
            t.urlParse = o, t.urlGenerate = a, t.normalize = i, t.join = function(e, t) {
                "" === e && (e = "."), "" === t && (t = ".");
                var r = o(t), l = o(e);
                if (l && (e = l.path || "/"), r && !r.scheme) return l && (r.scheme = l.scheme), a(r);
                if (r || t.match(n)) return t;
                if (l && !l.host && !l.path) return l.host = t, a(l);
                var u = "/" === t.charAt(0) ? t : i(e.replace(/\/+$/, "") + "/" + t);
                return l ? (l.path = u, a(l)) : u;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0) || !!e.match(r);
            }, t.relative = function(e, t) {
                "" === e && (e = "."), e = e.replace(/\/$/, "");
                for(var r = 0; 0 !== t.indexOf(e + "/");){
                    var n = e.lastIndexOf("/");
                    if (n < 0) return t;
                    if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++r;
                }
                return Array(r + 1).join("../") + t.substr(e.length + 1);
            };
            var l = !("__proto__" in Object.create(null));
            function u(e) {
                return e;
            }
            function c(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
                for(var r = t - 10; r >= 0; r--)if (36 !== e.charCodeAt(r)) return !1;
                return !0;
            }
            function s(e, t) {
                return e === t ? 0 : e > t ? 1 : -1;
            }
            t.toSetString = l ? u : function(e) {
                return c(e) ? "$" + e : e;
            }, t.fromSetString = l ? u : function(e) {
                return c(e) ? e.slice(1) : e;
            }, t.compareByOriginalPositions = function(e, t, r) {
                var n = e.source - t.source;
                return 0 !== n ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) || r ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) ? n : 0 !== (n = e.generatedLine - t.generatedLine) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsDeflated = function(e, t, r) {
                var n = e.generatedLine - t.generatedLine;
                return 0 !== n ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) || r ? n : 0 !== (n = e.source - t.source) ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsInflated = function(e, t) {
                var r = e.generatedLine - t.generatedLine;
                return 0 !== r ? r : 0 !== (r = e.generatedColumn - t.generatedColumn) ? r : 0 !== (r = s(e.source, t.source)) ? r : 0 !== (r = e.originalLine - t.originalLine) ? r : 0 !== (r = e.originalColumn - t.originalColumn) ? r : s(e.name, t.name);
            };
        },
        function(e, t) {
            function r(e, t) {
                for(var r = 0, n = e.length - 1; n >= 0; n--){
                    var o = e[n];
                    "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
                }
                if (t) for(; r--; r)e.unshift("..");
                return e;
            }
            function n(e, t) {
                if (e.filter) return e.filter(t);
                for(var r = [], n = 0; n < e.length; n++)t(e[n], n, e) && r.push(e[n]);
                return r;
            }
            t.resolve = function() {
                for(var e = "", t = !1, o = arguments.length - 1; o >= -1 && !t; o--){
                    var a = o >= 0 ? arguments[o] : process.cwd();
                    if ("string" != typeof a) throw new TypeError("Arguments to path.resolve must be strings");
                    a && (e = a + "/" + e, t = "/" === a.charAt(0));
                }
                return (t ? "/" : "") + (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !t).join("/")) || ".";
            }, t.normalize = function(e) {
                var a = t.isAbsolute(e), i = "/" === o(e, -1);
                return (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !a).join("/")) || a || (e = "."), e && i && (e += "/"), (a ? "/" : "") + e;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0);
            }, t.join = function() {
                var e = Array.prototype.slice.call(arguments, 0);
                return t.normalize(n(e, function(e, t) {
                    if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
                    return e;
                }).join("/"));
            }, t.relative = function(e, r) {
                function n(e) {
                    for(var t = 0; t < e.length && "" === e[t]; t++);
                    for(var r = e.length - 1; r >= 0 && "" === e[r]; r--);
                    return t > r ? [] : e.slice(t, r - t + 1);
                }
                e = t.resolve(e).substr(1), r = t.resolve(r).substr(1);
                for(var o = n(e.split("/")), a = n(r.split("/")), i = Math.min(o.length, a.length), l = i, u = 0; u < i; u++)if (o[u] !== a[u]) {
                    l = u;
                    break;
                }
                var c = [];
                for(u = l; u < o.length; u++)c.push("..");
                return (c = c.concat(a.slice(l))).join("/");
            }, t.sep = "/", t.delimiter = ":", t.dirname = function(e) {
                if ("string" != typeof e && (e += ""), 0 === e.length) return ".";
                for(var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, a = e.length - 1; a >= 1; --a)if (47 === (t = e.charCodeAt(a))) {
                    if (!o) {
                        n = a;
                        break;
                    }
                } else o = !1;
                return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
            }, t.basename = function(e, t) {
                var r = function(e) {
                    "string" != typeof e && (e += "");
                    var t, r = 0, n = -1, o = !0;
                    for(t = e.length - 1; t >= 0; --t)if (47 === e.charCodeAt(t)) {
                        if (!o) {
                            r = t + 1;
                            break;
                        }
                    } else -1 === n && (o = !1, n = t + 1);
                    return -1 === n ? "" : e.slice(r, n);
                }(e);
                return t && r.substr(-1 * t.length) === t && (r = r.substr(0, r.length - t.length)), r;
            }, t.extname = function(e) {
                "string" != typeof e && (e += "");
                for(var t = -1, r = 0, n = -1, o = !0, a = 0, i = e.length - 1; i >= 0; --i){
                    var l = e.charCodeAt(i);
                    if (47 !== l) -1 === n && (o = !1, n = i + 1), 46 === l ? -1 === t ? t = i : 1 !== a && (a = 1) : -1 !== t && (a = -1);
                    else if (!o) {
                        r = i + 1;
                        break;
                    }
                }
                return -1 === t || -1 === n || 0 === a || 1 === a && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
            };
            var o = "b" === "ab".substr(-1) ? function(e, t, r) {
                return e.substr(t, r);
            } : function(e, t, r) {
                return t < 0 && (t = e.length + t), e.substr(t, r);
            };
        },
        function(e, t, r) {
            t.SourceMapGenerator = r(4).SourceMapGenerator, t.SourceMapConsumer = r(11).SourceMapConsumer, t.SourceNode = r(14).SourceNode;
        },
        function(e, t, r) {
            var n = r(5), o = r(1), a = r(6).ArraySet, i = r(10).MappingList;
            function l(e) {
                e || (e = {}), this._file = o.getArg(e, "file", null), this._sourceRoot = o.getArg(e, "sourceRoot", null), this._skipValidation = o.getArg(e, "skipValidation", !1), this._sources = new a, this._names = new a, this._mappings = new i, this._sourcesContents = null;
            }
            l.prototype._version = 3, l.fromSourceMap = function(e) {
                var t = e.sourceRoot, r = new l({
                    file: e.file,
                    sourceRoot: t
                });
                return e.eachMapping(function(e) {
                    var n = {
                        generated: {
                            line: e.generatedLine,
                            column: e.generatedColumn
                        }
                    };
                    null != e.source && (n.source = e.source, null != t && (n.source = o.relative(t, n.source)), n.original = {
                        line: e.originalLine,
                        column: e.originalColumn
                    }, null != e.name && (n.name = e.name)), r.addMapping(n);
                }), e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && r.setSourceContent(t, n);
                }), r;
            }, l.prototype.addMapping = function(e) {
                var t = o.getArg(e, "generated"), r = o.getArg(e, "original", null), n = o.getArg(e, "source", null), a = o.getArg(e, "name", null);
                this._skipValidation || this._validateMapping(t, r, n, a), null != n && (n = String(n), this._sources.has(n) || this._sources.add(n)), null != a && (a = String(a), this._names.has(a) || this._names.add(a)), this._mappings.add({
                    generatedLine: t.line,
                    generatedColumn: t.column,
                    originalLine: null != r && r.line,
                    originalColumn: null != r && r.column,
                    source: n,
                    name: a
                });
            }, l.prototype.setSourceContent = function(e, t) {
                var r = e;
                null != this._sourceRoot && (r = o.relative(this._sourceRoot, r)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[o.toSetString(r)] = t) : this._sourcesContents && (delete this._sourcesContents[o.toSetString(r)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
            }, l.prototype.applySourceMap = function(e, t, r) {
                var n = t;
                if (null == t) {
                    if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
                    n = e.file;
                }
                var i = this._sourceRoot;
                null != i && (n = o.relative(i, n));
                var l = new a, u = new a;
                this._mappings.unsortedForEach(function(t) {
                    if (t.source === n && null != t.originalLine) {
                        var a = e.originalPositionFor({
                            line: t.originalLine,
                            column: t.originalColumn
                        });
                        null != a.source && (t.source = a.source, null != r && (t.source = o.join(r, t.source)), null != i && (t.source = o.relative(i, t.source)), t.originalLine = a.line, t.originalColumn = a.column, null != a.name && (t.name = a.name));
                    }
                    var c = t.source;
                    null == c || l.has(c) || l.add(c);
                    var s = t.name;
                    null == s || u.has(s) || u.add(s);
                }, this), this._sources = l, this._names = u, e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && (null != r && (t = o.join(r, t)), null != i && (t = o.relative(i, t)), this.setSourceContent(t, n));
                }, this);
            }, l.prototype._validateMapping = function(e, t, r, n) {
                if (t && "number" != typeof t.line && "number" != typeof t.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
                if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || r || n) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && r)) throw new Error("Invalid mapping: " + JSON.stringify({
                    generated: e,
                    source: r,
                    original: t,
                    name: n
                }));
            }, l.prototype._serializeMappings = function() {
                for(var e, t, r, a, i = 0, l = 1, u = 0, c = 0, s = 0, f = 0, d = "", p = this._mappings.toArray(), h = 0, g = p.length; h < g; h++){
                    if (e = "", (t = p[h]).generatedLine !== l) for(i = 0; t.generatedLine !== l;)e += ";", l++;
                    else if (h > 0) {
                        if (!o.compareByGeneratedPositionsInflated(t, p[h - 1])) continue;
                        e += ",";
                    }
                    e += n.encode(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (a = this._sources.indexOf(t.source), e += n.encode(a - f), f = a, e += n.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += n.encode(t.originalColumn - u), u = t.originalColumn, null != t.name && (r = this._names.indexOf(t.name), e += n.encode(r - s), s = r)), d += e;
                }
                return d;
            }, l.prototype._generateSourcesContent = function(e, t) {
                return e.map(function(e) {
                    if (!this._sourcesContents) return null;
                    null != t && (e = o.relative(t, e));
                    var r = o.toSetString(e);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, r) ? this._sourcesContents[r] : null;
                }, this);
            }, l.prototype.toJSON = function() {
                var e = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
            }, l.prototype.toString = function() {
                return JSON.stringify(this.toJSON());
            }, t.SourceMapGenerator = l;
        },
        function(e, t, r) {
            var n = r(9);
            t.encode = function(e) {
                var t, r = "", o = function(e) {
                    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
                }(e);
                do t = 31 & o, (o >>>= 5) > 0 && (t |= 32), r += n.encode(t);
                while (o > 0);
                return r;
            }, t.decode = function(e, t, r) {
                var o, a, i, l, u = e.length, c = 0, s = 0;
                do {
                    if (t >= u) throw new Error("Expected more digits in base 64 VLQ value.");
                    if (-1 === (a = n.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
                    o = !!(32 & a), c += (a &= 31) << s, s += 5;
                }while (o);
                r.value = (l = (i = c) >> 1, 1 == (1 & i) ? -l : l), r.rest = t;
            };
        },
        function(e, t, r) {
            var n = r(1), o = Object.prototype.hasOwnProperty, a = "undefined" != typeof Map;
            function i() {
                this._array = [], this._set = a ? new Map : Object.create(null);
            }
            i.fromArray = function(e, t) {
                for(var r = new i, n = 0, o = e.length; n < o; n++)r.add(e[n], t);
                return r;
            }, i.prototype.size = function() {
                return a ? this._set.size : Object.getOwnPropertyNames(this._set).length;
            }, i.prototype.add = function(e, t) {
                var r = a ? e : n.toSetString(e), i = a ? this.has(e) : o.call(this._set, r), l = this._array.length;
                i && !t || this._array.push(e), i || (a ? this._set.set(e, l) : this._set[r] = l);
            }, i.prototype.has = function(e) {
                if (a) return this._set.has(e);
                var t = n.toSetString(e);
                return o.call(this._set, t);
            }, i.prototype.indexOf = function(e) {
                if (a) {
                    var t = this._set.get(e);
                    if (t >= 0) return t;
                } else {
                    var r = n.toSetString(e);
                    if (o.call(this._set, r)) return this._set[r];
                }
                throw new Error('"' + e + '" is not in the set.');
            }, i.prototype.at = function(e) {
                if (e >= 0 && e < this._array.length) return this._array[e];
                throw new Error("No element indexed by " + e);
            }, i.prototype.toArray = function() {
                return this._array.slice();
            }, t.ArraySet = i;
        },
        function(e, t, r) {
            "use strict";
            function n(e) {
                return Array.isArray(e) || (e = [
                    e
                ]), Promise.all(e.map(function(e) {
                    return e.then(function(e) {
                        return {
                            isFulfilled: !0,
                            isRejected: !1,
                            value: e
                        };
                    }).catch(function(e) {
                        return {
                            isFulfilled: !1,
                            isRejected: !0,
                            reason: e
                        };
                    });
                }));
            }
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.settle = n, t.default = n;
        },
        function(e, t, r) {
            var n = function(e) {
                "use strict";
                var t, r = Object.prototype, n = r.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, a = o.iterator || "@@iterator", i = o.asyncIterator || "@@asyncIterator", l = o.toStringTag || "@@toStringTag";
                function u(e, t, r) {
                    return Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }), e[t];
                }
                try {
                    u({}, "");
                } catch (e1) {
                    u = function(e, t, r) {
                        return e[t] = r;
                    };
                }
                function c(e, t, r, n) {
                    var o = t && t.prototype instanceof m ? t : m, a = Object.create(o.prototype), i = new T(n || []);
                    return a._invoke = function(e, t, r) {
                        var n = f;
                        return function(o, a) {
                            if (n === p) throw new Error("Generator is already running");
                            if (n === h) {
                                if ("throw" === o) throw a;
                                return L();
                            }
                            for(r.method = o, r.arg = a;;){
                                var i = r.delegate;
                                if (i) {
                                    var l = _(i, r);
                                    if (l) {
                                        if (l === g) continue;
                                        return l;
                                    }
                                }
                                if ("next" === r.method) r.sent = r._sent = r.arg;
                                else if ("throw" === r.method) {
                                    if (n === f) throw n = h, r.arg;
                                    r.dispatchException(r.arg);
                                } else "return" === r.method && r.abrupt("return", r.arg);
                                n = p;
                                var u = s(e, t, r);
                                if ("normal" === u.type) {
                                    if (n = r.done ? h : d, u.arg === g) continue;
                                    return {
                                        value: u.arg,
                                        done: r.done
                                    };
                                }
                                "throw" === u.type && (n = h, r.method = "throw", r.arg = u.arg);
                            }
                        };
                    }(e, r, i), a;
                }
                function s(e, t, r) {
                    try {
                        return {
                            type: "normal",
                            arg: e.call(t, r)
                        };
                    } catch (e1) {
                        return {
                            type: "throw",
                            arg: e1
                        };
                    }
                }
                e.wrap = c;
                var f = "suspendedStart", d = "suspendedYield", p = "executing", h = "completed", g = {};
                function m() {}
                function v() {}
                function y() {}
                var b = {};
                b[a] = function() {
                    return this;
                };
                var w = Object.getPrototypeOf, k = w && w(w(P([])));
                k && k !== r && n.call(k, a) && (b = k);
                var E = y.prototype = m.prototype = Object.create(b);
                function S(e) {
                    [
                        "next",
                        "throw",
                        "return"
                    ].forEach(function(t) {
                        u(e, t, function(e) {
                            return this._invoke(t, e);
                        });
                    });
                }
                function x(e, t) {
                    var r;
                    this._invoke = function(o, a) {
                        function i() {
                            return new t(function(r, i) {
                                !function r(o, a, i, l) {
                                    var u = s(e[o], e, a);
                                    if ("throw" !== u.type) {
                                        var c = u.arg, f = c.value;
                                        return f && "object" == typeof f && n.call(f, "__await") ? t.resolve(f.__await).then(function(e) {
                                            r("next", e, i, l);
                                        }, function(e) {
                                            r("throw", e, i, l);
                                        }) : t.resolve(f).then(function(e) {
                                            c.value = e, i(c);
                                        }, function(e) {
                                            return r("throw", e, i, l);
                                        });
                                    }
                                    l(u.arg);
                                }(o, a, r, i);
                            });
                        }
                        return r = r ? r.then(i, i) : i();
                    };
                }
                function _(e, r) {
                    var n = e.iterator[r.method];
                    if (n === t) {
                        if (r.delegate = null, "throw" === r.method) {
                            if (e.iterator.return && (r.method = "return", r.arg = t, _(e, r), "throw" === r.method)) return g;
                            r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return g;
                    }
                    var o = s(n, e.iterator, r.arg);
                    if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, g;
                    var a = o.arg;
                    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, g) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, g);
                }
                function C(e) {
                    var t = {
                        tryLoc: e[0]
                    };
                    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
                }
                function O(e) {
                    var t = e.completion || {};
                    t.type = "normal", delete t.arg, e.completion = t;
                }
                function T(e) {
                    this.tryEntries = [
                        {
                            tryLoc: "root"
                        }
                    ], e.forEach(C, this), this.reset(!0);
                }
                function P(e) {
                    if (e) {
                        var r = e[a];
                        if (r) return r.call(e);
                        if ("function" == typeof e.next) return e;
                        if (!isNaN(e.length)) {
                            var o = -1, i = function r() {
                                for(; ++o < e.length;)if (n.call(e, o)) return r.value = e[o], r.done = !1, r;
                                return r.value = t, r.done = !0, r;
                            };
                            return i.next = i;
                        }
                    }
                    return {
                        next: L
                    };
                }
                function L() {
                    return {
                        value: t,
                        done: !0
                    };
                }
                return v.prototype = E.constructor = y, y.constructor = v, v.displayName = u(y, l, "GeneratorFunction"), e.isGeneratorFunction = function(e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === v || "GeneratorFunction" === (t.displayName || t.name));
                }, e.mark = function(e) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(e, y) : (e.__proto__ = y, u(e, l, "GeneratorFunction")), e.prototype = Object.create(E), e;
                }, e.awrap = function(e) {
                    return {
                        __await: e
                    };
                }, S(x.prototype), x.prototype[i] = function() {
                    return this;
                }, e.AsyncIterator = x, e.async = function(t, r, n, o, a) {
                    void 0 === a && (a = Promise);
                    var i = new x(c(t, r, n, o), a);
                    return e.isGeneratorFunction(r) ? i : i.next().then(function(e) {
                        return e.done ? e.value : i.next();
                    });
                }, S(E), u(E, l, "Generator"), E[a] = function() {
                    return this;
                }, E.toString = function() {
                    return "[object Generator]";
                }, e.keys = function(e) {
                    var t = [];
                    for(var r in e)t.push(r);
                    return t.reverse(), function r() {
                        for(; t.length;){
                            var n = t.pop();
                            if (n in e) return r.value = n, r.done = !1, r;
                        }
                        return r.done = !0, r;
                    };
                }, e.values = P, T.prototype = {
                    constructor: T,
                    reset: function(e) {
                        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(O), !e) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                    },
                    stop: function() {
                        this.done = !0;
                        var e = this.tryEntries[0].completion;
                        if ("throw" === e.type) throw e.arg;
                        return this.rval;
                    },
                    dispatchException: function(e) {
                        if (this.done) throw e;
                        var r = this;
                        function o(n, o) {
                            return l.type = "throw", l.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                        }
                        for(var a = this.tryEntries.length - 1; a >= 0; --a){
                            var i = this.tryEntries[a], l = i.completion;
                            if ("root" === i.tryLoc) return o("end");
                            if (i.tryLoc <= this.prev) {
                                var u = n.call(i, "catchLoc"), c = n.call(i, "finallyLoc");
                                if (u && c) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                } else if (u) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                } else {
                                    if (!c) throw new Error("try statement without catch or finally");
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                }
                            }
                        }
                    },
                    abrupt: function(e, t) {
                        for(var r = this.tryEntries.length - 1; r >= 0; --r){
                            var o = this.tryEntries[r];
                            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                                var a = o;
                                break;
                            }
                        }
                        a && ("break" === e || "continue" === e) && a.tryLoc <= t && t <= a.finallyLoc && (a = null);
                        var i = a ? a.completion : {};
                        return i.type = e, i.arg = t, a ? (this.method = "next", this.next = a.finallyLoc, g) : this.complete(i);
                    },
                    complete: function(e, t) {
                        if ("throw" === e.type) throw e.arg;
                        return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), g;
                    },
                    finish: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), O(r), g;
                        }
                    },
                    catch: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.tryLoc === e) {
                                var n = r.completion;
                                if ("throw" === n.type) {
                                    var o = n.arg;
                                    O(r);
                                }
                                return o;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    delegateYield: function(e, r, n) {
                        return this.delegate = {
                            iterator: P(e),
                            resultName: r,
                            nextLoc: n
                        }, "next" === this.method && (this.arg = t), g;
                    }
                }, e;
            }(e.exports);
            try {
                regeneratorRuntime = n;
            } catch (e1) {
                Function("r", "regeneratorRuntime = r")(n);
            }
        },
        function(e, t) {
            var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
            t.encode = function(e) {
                if (0 <= e && e < r.length) return r[e];
                throw new TypeError("Must be between 0 and 63: " + e);
            }, t.decode = function(e) {
                return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1;
            };
        },
        function(e, t, r) {
            var n = r(1);
            function o() {
                this._array = [], this._sorted = !0, this._last = {
                    generatedLine: -1,
                    generatedColumn: 0
                };
            }
            o.prototype.unsortedForEach = function(e, t) {
                this._array.forEach(e, t);
            }, o.prototype.add = function(e) {
                var t, r, o, a, i, l;
                t = this._last, r = e, o = t.generatedLine, a = r.generatedLine, i = t.generatedColumn, l = r.generatedColumn, a > o || a == o && l >= i || n.compareByGeneratedPositionsInflated(t, r) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
            }, o.prototype.toArray = function() {
                return this._sorted || (this._array.sort(n.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
            }, t.MappingList = o;
        },
        function(e, t, r) {
            var n = r(1), o = r(12), a = r(6).ArraySet, i = r(5), l = r(13).quickSort;
            function u(e) {
                var t = e;
                return "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new f(t) : new c(t);
            }
            function c(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sources"), i = n.getArg(t, "names", []), l = n.getArg(t, "sourceRoot", null), u = n.getArg(t, "sourcesContent", null), c = n.getArg(t, "mappings"), s = n.getArg(t, "file", null);
                if (r != this._version) throw new Error("Unsupported version: " + r);
                o = o.map(String).map(n.normalize).map(function(e) {
                    return l && n.isAbsolute(l) && n.isAbsolute(e) ? n.relative(l, e) : e;
                }), this._names = a.fromArray(i.map(String), !0), this._sources = a.fromArray(o, !0), this.sourceRoot = l, this.sourcesContent = u, this._mappings = c, this.file = s;
            }
            function s() {
                this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
            }
            function f(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sections");
                if (r != this._version) throw new Error("Unsupported version: " + r);
                this._sources = new a, this._names = new a;
                var i = {
                    line: -1,
                    column: 0
                };
                this._sections = o.map(function(e) {
                    if (e.url) throw new Error("Support for url field in sections not implemented.");
                    var t = n.getArg(e, "offset"), r = n.getArg(t, "line"), o = n.getArg(t, "column");
                    if (r < i.line || r === i.line && o < i.column) throw new Error("Section offsets must be ordered and non-overlapping.");
                    return i = t, {
                        generatedOffset: {
                            generatedLine: r + 1,
                            generatedColumn: o + 1
                        },
                        consumer: new u(n.getArg(e, "map"))
                    };
                });
            }
            u.fromSourceMap = function(e) {
                return c.fromSourceMap(e);
            }, u.prototype._version = 3, u.prototype.__generatedMappings = null, Object.defineProperty(u.prototype, "_generatedMappings", {
                get: function() {
                    return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
                }
            }), u.prototype.__originalMappings = null, Object.defineProperty(u.prototype, "_originalMappings", {
                get: function() {
                    return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
                }
            }), u.prototype._charIsMappingSeparator = function(e, t) {
                var r = e.charAt(t);
                return ";" === r || "," === r;
            }, u.prototype._parseMappings = function(e, t) {
                throw new Error("Subclasses must implement _parseMappings");
            }, u.GENERATED_ORDER = 1, u.ORIGINAL_ORDER = 2, u.GREATEST_LOWER_BOUND = 1, u.LEAST_UPPER_BOUND = 2, u.prototype.eachMapping = function(e, t, r) {
                var o, a = t || null;
                switch(r || u.GENERATED_ORDER){
                    case u.GENERATED_ORDER:
                        o = this._generatedMappings;
                        break;
                    case u.ORIGINAL_ORDER:
                        o = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.");
                }
                var i = this.sourceRoot;
                o.map(function(e) {
                    var t = null === e.source ? null : this._sources.at(e.source);
                    return null != t && null != i && (t = n.join(i, t)), {
                        source: t,
                        generatedLine: e.generatedLine,
                        generatedColumn: e.generatedColumn,
                        originalLine: e.originalLine,
                        originalColumn: e.originalColumn,
                        name: null === e.name ? null : this._names.at(e.name)
                    };
                }, this).forEach(e, a);
            }, u.prototype.allGeneratedPositionsFor = function(e) {
                var t = n.getArg(e, "line"), r = {
                    source: n.getArg(e, "source"),
                    originalLine: t,
                    originalColumn: n.getArg(e, "column", 0)
                };
                if (null != this.sourceRoot && (r.source = n.relative(this.sourceRoot, r.source)), !this._sources.has(r.source)) return [];
                r.source = this._sources.indexOf(r.source);
                var a = [], i = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, o.LEAST_UPPER_BOUND);
                if (i >= 0) {
                    var l = this._originalMappings[i];
                    if (void 0 === e.column) for(var u = l.originalLine; l && l.originalLine === u;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                    else for(var c = l.originalColumn; l && l.originalLine === t && l.originalColumn == c;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                }
                return a;
            }, t.SourceMapConsumer = u, c.prototype = Object.create(u.prototype), c.prototype.consumer = u, c.fromSourceMap = function(e) {
                var t = Object.create(c.prototype), r = t._names = a.fromArray(e._names.toArray(), !0), o = t._sources = a.fromArray(e._sources.toArray(), !0);
                t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;
                for(var i = e._mappings.toArray().slice(), u = t.__generatedMappings = [], f = t.__originalMappings = [], d = 0, p = i.length; d < p; d++){
                    var h = i[d], g = new s;
                    g.generatedLine = h.generatedLine, g.generatedColumn = h.generatedColumn, h.source && (g.source = o.indexOf(h.source), g.originalLine = h.originalLine, g.originalColumn = h.originalColumn, h.name && (g.name = r.indexOf(h.name)), f.push(g)), u.push(g);
                }
                return l(t.__originalMappings, n.compareByOriginalPositions), t;
            }, c.prototype._version = 3, Object.defineProperty(c.prototype, "sources", {
                get: function() {
                    return this._sources.toArray().map(function(e) {
                        return null != this.sourceRoot ? n.join(this.sourceRoot, e) : e;
                    }, this);
                }
            }), c.prototype._parseMappings = function(e, t) {
                for(var r, o, a, u, c, f = 1, d = 0, p = 0, h = 0, g = 0, m = 0, v = e.length, y = 0, b = {}, w = {}, k = [], E = []; y < v;)if (";" === e.charAt(y)) f++, y++, d = 0;
                else if ("," === e.charAt(y)) y++;
                else {
                    for((r = new s).generatedLine = f, u = y; u < v && !this._charIsMappingSeparator(e, u); u++);
                    if (a = b[o = e.slice(y, u)]) y += o.length;
                    else {
                        for(a = []; y < u;)i.decode(e, y, w), c = w.value, y = w.rest, a.push(c);
                        if (2 === a.length) throw new Error("Found a source, but no line and column");
                        if (3 === a.length) throw new Error("Found a source and line, but no column");
                        b[o] = a;
                    }
                    r.generatedColumn = d + a[0], d = r.generatedColumn, a.length > 1 && (r.source = g + a[1], g += a[1], r.originalLine = p + a[2], p = r.originalLine, r.originalLine += 1, r.originalColumn = h + a[3], h = r.originalColumn, a.length > 4 && (r.name = m + a[4], m += a[4])), E.push(r), "number" == typeof r.originalLine && k.push(r);
                }
                l(E, n.compareByGeneratedPositionsDeflated), this.__generatedMappings = E, l(k, n.compareByOriginalPositions), this.__originalMappings = k;
            }, c.prototype._findMapping = function(e, t, r, n, a, i) {
                if (e[r] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
                if (e[n] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[n]);
                return o.search(e, t, a, i);
            }, c.prototype.computeColumnSpans = function() {
                for(var e = 0; e < this._generatedMappings.length; ++e){
                    var t = this._generatedMappings[e];
                    if (e + 1 < this._generatedMappings.length) {
                        var r = this._generatedMappings[e + 1];
                        if (t.generatedLine === r.generatedLine) {
                            t.lastGeneratedColumn = r.generatedColumn - 1;
                            continue;
                        }
                    }
                    t.lastGeneratedColumn = 1 / 0;
                }
            }, c.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", n.compareByGeneratedPositionsDeflated, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (r >= 0) {
                    var o = this._generatedMappings[r];
                    if (o.generatedLine === t.generatedLine) {
                        var a = n.getArg(o, "source", null);
                        null !== a && (a = this._sources.at(a), null != this.sourceRoot && (a = n.join(this.sourceRoot, a)));
                        var i = n.getArg(o, "name", null);
                        return null !== i && (i = this._names.at(i)), {
                            source: a,
                            line: n.getArg(o, "originalLine", null),
                            column: n.getArg(o, "originalColumn", null),
                            name: i
                        };
                    }
                }
                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, c.prototype.hasContentsOfAllSources = function() {
                return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(e) {
                    return null == e;
                });
            }, c.prototype.sourceContentFor = function(e, t) {
                if (!this.sourcesContent) return null;
                if (null != this.sourceRoot && (e = n.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
                var r;
                if (null != this.sourceRoot && (r = n.urlParse(this.sourceRoot))) {
                    var o = e.replace(/^file:\/\//, "");
                    if ("file" == r.scheme && this._sources.has(o)) return this.sourcesContent[this._sources.indexOf(o)];
                    if ((!r.path || "/" == r.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)];
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, c.prototype.generatedPositionFor = function(e) {
                var t = n.getArg(e, "source");
                if (null != this.sourceRoot && (t = n.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
                var r = {
                    source: t = this._sources.indexOf(t),
                    originalLine: n.getArg(e, "line"),
                    originalColumn: n.getArg(e, "column")
                }, o = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (o >= 0) {
                    var a = this._originalMappings[o];
                    if (a.source === r.source) return {
                        line: n.getArg(a, "generatedLine", null),
                        column: n.getArg(a, "generatedColumn", null),
                        lastColumn: n.getArg(a, "lastGeneratedColumn", null)
                    };
                }
                return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
            }, t.BasicSourceMapConsumer = c, f.prototype = Object.create(u.prototype), f.prototype.constructor = u, f.prototype._version = 3, Object.defineProperty(f.prototype, "sources", {
                get: function() {
                    for(var e = [], t = 0; t < this._sections.length; t++)for(var r = 0; r < this._sections[t].consumer.sources.length; r++)e.push(this._sections[t].consumer.sources[r]);
                    return e;
                }
            }), f.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = o.search(t, this._sections, function(e, t) {
                    var r = e.generatedLine - t.generatedOffset.generatedLine;
                    return r || e.generatedColumn - t.generatedOffset.generatedColumn;
                }), a = this._sections[r];
                return a ? a.consumer.originalPositionFor({
                    line: t.generatedLine - (a.generatedOffset.generatedLine - 1),
                    column: t.generatedColumn - (a.generatedOffset.generatedLine === t.generatedLine ? a.generatedOffset.generatedColumn - 1 : 0),
                    bias: e.bias
                }) : {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, f.prototype.hasContentsOfAllSources = function() {
                return this._sections.every(function(e) {
                    return e.consumer.hasContentsOfAllSources();
                });
            }, f.prototype.sourceContentFor = function(e, t) {
                for(var r = 0; r < this._sections.length; r++){
                    var n = this._sections[r].consumer.sourceContentFor(e, !0);
                    if (n) return n;
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, f.prototype.generatedPositionFor = function(e) {
                for(var t = 0; t < this._sections.length; t++){
                    var r = this._sections[t];
                    if (-1 !== r.consumer.sources.indexOf(n.getArg(e, "source"))) {
                        var o = r.consumer.generatedPositionFor(e);
                        if (o) return {
                            line: o.line + (r.generatedOffset.generatedLine - 1),
                            column: o.column + (r.generatedOffset.generatedLine === o.line ? r.generatedOffset.generatedColumn - 1 : 0)
                        };
                    }
                }
                return {
                    line: null,
                    column: null
                };
            }, f.prototype._parseMappings = function(e, t) {
                this.__generatedMappings = [], this.__originalMappings = [];
                for(var r = 0; r < this._sections.length; r++)for(var o = this._sections[r], a = o.consumer._generatedMappings, i = 0; i < a.length; i++){
                    var u = a[i], c = o.consumer._sources.at(u.source);
                    null !== o.consumer.sourceRoot && (c = n.join(o.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);
                    var s = o.consumer._names.at(u.name);
                    this._names.add(s), s = this._names.indexOf(s);
                    var f = {
                        source: c,
                        generatedLine: u.generatedLine + (o.generatedOffset.generatedLine - 1),
                        generatedColumn: u.generatedColumn + (o.generatedOffset.generatedLine === u.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
                        originalLine: u.originalLine,
                        originalColumn: u.originalColumn,
                        name: s
                    };
                    this.__generatedMappings.push(f), "number" == typeof f.originalLine && this.__originalMappings.push(f);
                }
                l(this.__generatedMappings, n.compareByGeneratedPositionsDeflated), l(this.__originalMappings, n.compareByOriginalPositions);
            }, t.IndexedSourceMapConsumer = f;
        },
        function(e, t) {
            t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function(e, r, n, o) {
                if (0 === r.length) return -1;
                var a = function e(r, n, o, a, i, l) {
                    var u = Math.floor((n - r) / 2) + r, c = i(o, a[u], !0);
                    return 0 === c ? u : c > 0 ? n - u > 1 ? e(u, n, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? n < a.length ? n : -1 : u : u - r > 1 ? e(r, u, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? u : r < 0 ? -1 : r;
                }(-1, r.length, e, r, n, o || t.GREATEST_LOWER_BOUND);
                if (a < 0) return -1;
                for(; a - 1 >= 0 && 0 === n(r[a], r[a - 1], !0);)--a;
                return a;
            };
        },
        function(e, t) {
            function r(e, t, r) {
                var n = e[t];
                e[t] = e[r], e[r] = n;
            }
            function n(e, t, o, a) {
                if (o < a) {
                    var i = o - 1;
                    r(e, (s = o, f = a, Math.round(s + Math.random() * (f - s))), a);
                    for(var l = e[a], u = o; u < a; u++)t(e[u], l) <= 0 && r(e, i += 1, u);
                    r(e, i + 1, u);
                    var c = i + 1;
                    n(e, t, o, c - 1), n(e, t, c + 1, a);
                }
                var s, f;
            }
            t.quickSort = function(e, t) {
                n(e, t, 0, e.length - 1);
            };
        },
        function(e, t, r) {
            var n = r(4).SourceMapGenerator, o = r(1), a = /(\r?\n)/, i = "$$$isSourceNode$$$";
            function l(e, t, r, n, o) {
                this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == r ? null : r, this.name = null == o ? null : o, this[i] = !0, null != n && this.add(n);
            }
            l.fromStringWithSourceMap = function(e, t, r) {
                var n = new l, i = e.split(a), u = 0, c = function() {
                    return e() + (e() || "");
                    function e() {
                        return u < i.length ? i[u++] : void 0;
                    }
                }, s = 1, f = 0, d = null;
                return t.eachMapping(function(e) {
                    if (null !== d) {
                        if (!(s < e.generatedLine)) {
                            var t = (r = i[u]).substr(0, e.generatedColumn - f);
                            return i[u] = r.substr(e.generatedColumn - f), f = e.generatedColumn, p(d, t), void (d = e);
                        }
                        p(d, c()), s++, f = 0;
                    }
                    for(; s < e.generatedLine;)n.add(c()), s++;
                    if (f < e.generatedColumn) {
                        var r = i[u];
                        n.add(r.substr(0, e.generatedColumn)), i[u] = r.substr(e.generatedColumn), f = e.generatedColumn;
                    }
                    d = e;
                }, this), u < i.length && (d && p(d, c()), n.add(i.splice(u).join(""))), t.sources.forEach(function(e) {
                    var a = t.sourceContentFor(e);
                    null != a && (null != r && (e = o.join(r, e)), n.setSourceContent(e, a));
                }), n;
                function p(e, t) {
                    if (null === e || void 0 === e.source) n.add(t);
                    else {
                        var a = r ? o.join(r, e.source) : e.source;
                        n.add(new l(e.originalLine, e.originalColumn, a, t, e.name));
                    }
                }
            }, l.prototype.add = function(e) {
                if (Array.isArray(e)) e.forEach(function(e) {
                    this.add(e);
                }, this);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    e && this.children.push(e);
                }
                return this;
            }, l.prototype.prepend = function(e) {
                if (Array.isArray(e)) for(var t = e.length - 1; t >= 0; t--)this.prepend(e[t]);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    this.children.unshift(e);
                }
                return this;
            }, l.prototype.walk = function(e) {
                for(var t, r = 0, n = this.children.length; r < n; r++)(t = this.children[r])[i] ? t.walk(e) : "" !== t && e(t, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name
                });
            }, l.prototype.join = function(e) {
                var t, r, n = this.children.length;
                if (n > 0) {
                    for(t = [], r = 0; r < n - 1; r++)t.push(this.children[r]), t.push(e);
                    t.push(this.children[r]), this.children = t;
                }
                return this;
            }, l.prototype.replaceRight = function(e, t) {
                var r = this.children[this.children.length - 1];
                return r[i] ? r.replaceRight(e, t) : "string" == typeof r ? this.children[this.children.length - 1] = r.replace(e, t) : this.children.push("".replace(e, t)), this;
            }, l.prototype.setSourceContent = function(e, t) {
                this.sourceContents[o.toSetString(e)] = t;
            }, l.prototype.walkSourceContents = function(e) {
                for(var t = 0, r = this.children.length; t < r; t++)this.children[t][i] && this.children[t].walkSourceContents(e);
                var n = Object.keys(this.sourceContents);
                for(t = 0, r = n.length; t < r; t++)e(o.fromSetString(n[t]), this.sourceContents[n[t]]);
            }, l.prototype.toString = function() {
                var e = "";
                return this.walk(function(t) {
                    e += t;
                }), e;
            }, l.prototype.toStringWithSourceMap = function(e) {
                var t = {
                    code: "",
                    line: 1,
                    column: 0
                }, r = new n(e), o = !1, a = null, i = null, l = null, u = null;
                return this.walk(function(e, n) {
                    t.code += e, null !== n.source && null !== n.line && null !== n.column ? (a === n.source && i === n.line && l === n.column && u === n.name || r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    }), a = n.source, i = n.line, l = n.column, u = n.name, o = !0) : o && (r.addMapping({
                        generated: {
                            line: t.line,
                            column: t.column
                        }
                    }), a = null, o = !1);
                    for(var c = 0, s = e.length; c < s; c++)10 === e.charCodeAt(c) ? (t.line++, t.column = 0, c + 1 === s ? (a = null, o = !1) : o && r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    })) : t.column++;
                }), this.walkSourceContents(function(e, t) {
                    r.setSourceContent(e, t);
                }), {
                    code: t.code,
                    map: r
                };
            }, t.SourceNode = l;
        },
        function(e, t, r) {
            "use strict";
            r.r(t), r.d(t, "setEditorHandler", function() {
                return ue;
            }), r.d(t, "reportBuildError", function() {
                return ce;
            }), r.d(t, "reportRuntimeError", function() {
                return se;
            }), r.d(t, "dismissBuildError", function() {
                return fe;
            }), r.d(t, "startReportingRuntimeErrors", function() {
                return de;
            }), r.d(t, "dismissRuntimeErrors", function() {
                return he;
            }), r.d(t, "stopReportingRuntimeErrors", function() {
                return ge;
            });
            var n = null;
            function o(e, t) {
                if (t.error) {
                    var r = t.error;
                    r instanceof Error ? e(r) : e(new Error(r));
                }
            }
            function a(e, t) {
                null === n && (n = o.bind(void 0, t), e.addEventListener("error", n));
            }
            var i = null;
            function l(e, t) {
                if (null == t || null == t.reason) return e(new Error("Unknown"));
                var r = t.reason;
                return r instanceof Error ? e(r) : e(new Error(r));
            }
            function u(e, t) {
                null === i && (i = l.bind(void 0, t), e.addEventListener("unhandledrejection", i));
            }
            var c = !1, s = 10, f = 50;
            var d = [], p = function() {
                "undefined" != typeof console && (console.reactStack = function(e) {
                    return d.push(e);
                }, console.reactStackEnd = function(e) {
                    return d.pop();
                });
            }, h = function() {
                "undefined" != typeof console && (console.reactStack = void 0, console.reactStackEnd = void 0);
            }, g = function(e, t) {
                if ("undefined" != typeof console) {
                    var r = console[e];
                    "function" == typeof r && (console[e] = function() {
                        try {
                            var e = arguments[0];
                            "string" == typeof e && d.length > 0 && t(e, d[d.length - 1]);
                        } catch (e1) {
                            setTimeout(function() {
                                throw e1;
                            });
                        }
                        return r.apply(this, arguments);
                    });
                }
            };
            function m(e, t) {
                return (m = Object.setPrototypeOf || function(e, t) {
                    return e.__proto__ = t, e;
                })(e, t);
            }
            function v(e, t, r) {
                return (v = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }() ? Reflect.construct : function(e, t, r) {
                    var n = [
                        null
                    ];
                    n.push.apply(n, t);
                    var o = new (Function.bind.apply(e, n));
                    return r && m(o, r.prototype), o;
                }).apply(null, arguments);
            }
            function y(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for(var r = 0, n = new Array(t); r < t; r++)n[r] = e[r];
                return n;
            }
            function b(e) {
                return function(e) {
                    if (Array.isArray(e)) return y(e);
                }(e) || function(e) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);
                }(e) || function(e, t) {
                    if (e) {
                        if ("string" == typeof e) return y(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? y(e, t) : void 0;
                    }
                }(e) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
            }
            function w(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            function k(e, t, r) {
                return t && w(e.prototype, t), r && w(e, r), e;
            }
            function E(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            var S = function e(t, r) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                E(this, e), this.lineNumber = t, this.content = r, this.highlight = n;
            }, x = function() {
                function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, u = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
                    E(this, e), t && 0 === t.indexOf("Object.") && (t = t.slice(7)), "friendlySyntaxErrorLabel" !== t && "exports.__esModule" !== t && "<anonymous>" !== t && t || (t = null), this.functionName = t, this.fileName = r, this.lineNumber = n, this.columnNumber = o, this._originalFunctionName = i, this._originalFileName = l, this._originalLineNumber = u, this._originalColumnNumber = c, this._scriptCode = a, this._originalScriptCode = s;
                }
                return k(e, [
                    {
                        key: "getFunctionName",
                        value: function() {
                            return this.functionName || "(anonymous function)";
                        }
                    },
                    {
                        key: "getSource",
                        value: function() {
                            var e = "";
                            return null != this.fileName && (e += this.fileName + ":"), null != this.lineNumber && (e += this.lineNumber + ":"), null != this.columnNumber && (e += this.columnNumber + ":"), e.slice(0, -1);
                        }
                    },
                    {
                        key: "toString",
                        value: function() {
                            var e = this.getFunctionName(), t = this.getSource();
                            return "".concat(e).concat(t ? " (".concat(t, ")") : "");
                        }
                    }
                ]), e;
            }(), _ = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
            function C(e) {
                return _.exec(e).slice(1).map(function(e) {
                    var t = Number(e);
                    return isNaN(t) ? e : t;
                });
            }
            var O = /^\s*(at|in)\s.+(:\d+)/, T = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
            function P(e) {
                return e.filter(function(e) {
                    return O.test(e) || T.test(e);
                }).map(function(e) {
                    if (T.test(e)) {
                        var t = !1;
                        / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ":$1"), t = !0);
                        var r = e.split(/[@]/g), n = r.pop();
                        return v(x, [
                            r.join("@") || (t ? "eval" : null)
                        ].concat(b(C(n))));
                    }
                    -1 !== e.indexOf("(eval ") && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")), -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
                    var o = e.trim().split(/\s+/g).slice(1), a = o.pop();
                    return v(x, [
                        o.join(" ") || null
                    ].concat(b(C(a))));
                });
            }
            function L(e) {
                if (null == e) throw new Error("You cannot pass a null object.");
                if ("string" == typeof e) return P(e.split("\n"));
                if (Array.isArray(e)) return P(e);
                if ("string" == typeof e.stack) return P(e.stack.split("\n"));
                throw new Error("The error you provided does not contain a stack trace.");
            }
            var R = r(0), A = r.n(R);
            function N(e, t, r, n, o, a, i) {
                try {
                    var l = e[a](i), u = l.value;
                } catch (e1) {
                    return void r(e1);
                }
                l.done ? t(u) : Promise.resolve(u).then(n, o);
            }
            function j(e) {
                return function() {
                    var t = this, r = arguments;
                    return new Promise(function(n, o) {
                        var a = e.apply(t, r);
                        function i(e) {
                            N(a, n, o, i, l, "next", e);
                        }
                        function l(e) {
                            N(a, n, o, i, l, "throw", e);
                        }
                        i(void 0);
                    });
                };
            }
            var M = r(3), I = function() {
                function e(t) {
                    E(this, e), this.__source_map = t;
                }
                return k(e, [
                    {
                        key: "getOriginalPosition",
                        value: function(e, t) {
                            var r = this.__source_map.originalPositionFor({
                                line: e,
                                column: t
                            });
                            return {
                                line: r.line,
                                column: r.column,
                                source: r.source
                            };
                        }
                    },
                    {
                        key: "getGeneratedPosition",
                        value: function(e, t, r) {
                            var n = this.__source_map.generatedPositionFor({
                                source: e,
                                line: t,
                                column: r
                            });
                            return {
                                line: n.line,
                                column: n.column
                            };
                        }
                    },
                    {
                        key: "getSource",
                        value: function(e) {
                            return this.__source_map.sourceContentFor(e);
                        }
                    },
                    {
                        key: "getSources",
                        value: function() {
                            return this.__source_map.sources;
                        }
                    }
                ]), e;
            }();
            function D(e, t) {
                for(var r = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, n = null;;){
                    var o = r.exec(t);
                    if (null == o) break;
                    n = o;
                }
                return n && n[1] ? Promise.resolve(n[1].toString()) : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
            }
            function z(e, t) {
                return q.apply(this, arguments);
            }
            function q() {
                return (q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l, u;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return e.next = 2, D(t, r);
                            case 2:
                                if (0 !== (n = e.sent).indexOf("data:")) {
                                    e.next = 14;
                                    break;
                                }
                                if (o = /^data:application\/json;([\w=:"-]+;)*base64,/, a = n.match(o)) {
                                    e.next = 8;
                                    break;
                                }
                                throw new Error("Sorry, non-base64 inline source-map encoding is not supported.");
                            case 8:
                                return n = n.substring(a[0].length), n = window.atob(n), n = JSON.parse(n), e.abrupt("return", new I(new M.SourceMapConsumer(n)));
                            case 14:
                                return i = t.lastIndexOf("/"), l = t.substring(0, i + 1) + n, e.next = 18, fetch(l).then(function(e) {
                                    return e.json();
                                });
                            case 18:
                                return u = e.sent, e.abrupt("return", new I(new M.SourceMapConsumer(u)));
                            case 20:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            function F(e, t, r) {
                "string" == typeof r && (r = r.split("\n"));
                for(var n = [], o = Math.max(0, e - 1 - t); o <= Math.min(r.length - 1, e - 1 + t); ++o)n.push(new S(o + 1, r[o], o === e - 1));
                return n;
            }
            var U = r(7);
            function B(e) {
                return H.apply(this, arguments);
            }
            function H() {
                return (H = j(A.a.mark(function e(t) {
                    var r, n, o, a = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return r = a.length > 1 && void 0 !== a[1] ? a[1] : 3, n = {}, o = [], t.forEach(function(e) {
                                    var t = e.fileName;
                                    null != t && -1 === o.indexOf(t) && o.push(t);
                                }), e.next = 6, Object(U.settle)(o.map(function() {
                                    var e = j(A.a.mark(function e(t) {
                                        var r, o, a;
                                        return A.a.wrap(function(e) {
                                            for(;;)switch(e.prev = e.next){
                                                case 0:
                                                    return r = 0 === t.indexOf("webpack-internal:") ? "/__get-internal-source?fileName=".concat(encodeURIComponent(t)) : t, e.next = 3, fetch(r).then(function(e) {
                                                        return e.text();
                                                    });
                                                case 3:
                                                    return o = e.sent, e.next = 6, z(t, o);
                                                case 6:
                                                    a = e.sent, n[t] = {
                                                        fileSource: o,
                                                        map: a
                                                    };
                                                case 8:
                                                case "end":
                                                    return e.stop();
                                            }
                                        }, e);
                                    }));
                                    return function(t) {
                                        return e.apply(this, arguments);
                                    };
                                }()));
                            case 6:
                                return e.abrupt("return", t.map(function(e) {
                                    var t = e.functionName, o = e.fileName, a = e.lineNumber, i = e.columnNumber, l = n[o] || {}, u = l.map, c = l.fileSource;
                                    if (null == u || null == a) return e;
                                    var s = u.getOriginalPosition(a, i), f = s.source, d = s.line, p = s.column, h = null == f ? [] : u.getSource(f);
                                    return new x(t, o, a, i, F(a, r, c), t, f, d, p, F(d, r, h));
                                }));
                            case 7:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var $ = r(2), V = r.n($);
            function W(e, t) {
                var r = -1, n = -1;
                do ++r, n = t.indexOf(e, n + 1);
                while (-1 !== n);
                return r;
            }
            function G(e, t) {
                return Q.apply(this, arguments);
            }
            function Q() {
                return (Q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                if (n = l.length > 2 && void 0 !== l[2] ? l[2] : 3, o = "object" == typeof t ? t.contents : null, a = "object" == typeof t ? t.uri : t, null != o) {
                                    e.next = 7;
                                    break;
                                }
                                return e.next = 6, fetch(a).then(function(e) {
                                    return e.text();
                                });
                            case 6:
                                o = e.sent;
                            case 7:
                                return e.next = 9, z(a, o);
                            case 9:
                                return i = e.sent, e.abrupt("return", r.map(function(e) {
                                    var t = e.functionName, r = e.lineNumber, l = e.columnNumber;
                                    if (null != e._originalLineNumber) return e;
                                    var u = e.fileName;
                                    if (u && (u = V.a.normalize(u.replace(/[\\]+/g, "/"))), null == u) return e;
                                    var c = u, s = i.getSources().map(function(e) {
                                        return e.replace(/[\\]+/g, "/");
                                    }).filter(function(e) {
                                        var t = (e = V.a.normalize(e)).lastIndexOf(c);
                                        return -1 !== t && t === e.length - c.length;
                                    }).map(function(e) {
                                        return {
                                            token: e,
                                            seps: W(V.a.sep, V.a.normalize(e)),
                                            penalties: W("node_modules", e) + W("~", e)
                                        };
                                    }).sort(function(e, t) {
                                        var r = Math.sign(e.seps - t.seps);
                                        return 0 !== r ? r : Math.sign(e.penalties - t.penalties);
                                    });
                                    if (s.length < 1 || null == r) return new x(null, null, null, null, null, t, c, r, l, null);
                                    var f = s[0].token, d = i.getGeneratedPosition(f, r, l), p = d.line, h = d.column, g = i.getSource(f);
                                    return new x(t, a, p, h || null, F(p, n, o || []), t, c, r, l, F(r, n, g));
                                }));
                            case 11:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var Y = function(e) {
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3, r = L(e);
                return (e.__unmap_source ? G(e.__unmap_source, r, t) : B(r, t)).then(function(e) {
                    return 0 === e.map(function(e) {
                        return e._originalFileName;
                    }).filter(function(e) {
                        return null != e && -1 === e.indexOf("node_modules");
                    }).length ? null : e.filter(function(e) {
                        var t = e.functionName;
                        return null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__");
                    });
                });
            }, X = function(e) {
                return function(t) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    Y(t, r, 3).then(function(n) {
                        null != n && e({
                            error: t,
                            unhandledRejection: r,
                            contextSize: 3,
                            stackFrames: n
                        });
                    }).catch(function(e) {
                        console.log("Could not get the stack frames of error:", e);
                    });
                };
            };
            function K(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/static/js/bundle.js", r = X(e);
                return a(window, function(e) {
                    return r(e, !1);
                }), u(window, function(e) {
                    return r(e, !0);
                }), function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f;
                    if (!c) try {
                        s = Error.stackTraceLimit, Error.stackTraceLimit = e, c = !0;
                    } catch (e1) {}
                }(), p(), g("error", function(e, n) {
                    var o = function(e, t) {
                        for(var r, n, o = function(e) {
                            return e.split("\n").filter(function(e) {
                                return !e.match(/^\s*in/);
                            }).join("\n");
                        }(e), a = "", i = 0; i < t.length; ++i){
                            var l = t[i], u = l.fileName, c = l.lineNumber;
                            if (null != u && null != c && !(u === r && "number" == typeof c && "number" == typeof n && Math.abs(c - n) < 3)) {
                                r = u, n = c;
                                var s = t[i].name;
                                a += "in ".concat(s = s || "(anonymous function)", " (at ").concat(u, ":").concat(c, ")\n");
                            }
                        }
                        return {
                            message: o,
                            stack: a
                        };
                    }(e, n);
                    r({
                        message: o.message,
                        stack: o.stack,
                        __unmap_source: t
                    }, !1);
                }), function() {
                    var e;
                    !function() {
                        if (c) try {
                            Error.stackTraceLimit = s, c = !1;
                        } catch (e) {}
                    }(), e = window, null !== i && (e.removeEventListener("unhandledrejection", i), i = null), function(e) {
                        null !== n && (e.removeEventListener("error", n), n = null);
                    }(window), h();
                };
            }
            var J = {
                position: "fixed",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                border: "none",
                "z-index": 2147483647
            };
            var Z = '/*! For license information please see iframe-bundle.js.LICENSE.txt */\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=208)}([function(e,t,r){"use strict";e.exports=r(183)},function(e,t,r){var n=r(8),o=r(35).f,a=r(18),i=r(21),l=r(38),u=r(60),c=r(64);e.exports=function(e,t){var r,s,f,d,p,h=e.target,g=e.global,v=e.stat;if(r=g?n:v?n[h]||l(h,{}):(n[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(r,s))&&p.value:r[s],!c(g?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(r,s,d,e)}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,r){var n=r(2),o=r(66),a=r(26),i=r(7),l=r(45),u=r(69),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var s,f,d,p,h,g,v,m=r&&r.that,y=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),w=!(!r||!r.INTERRUPTED),k=i(t,m,1+y+w),E=function(e){return s&&u(s),new c(!0,e)},x=function(e){return y?(n(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(b)s=e;else{if("function"!=typeof(f=l(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=x(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(g=s.next;!(v=g.call(s)).done;){try{h=x(v.value)}catch(e){throw u(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,r){var n=r(8),o=r(40),a=r(11),i=r(31),l=r(44),u=r(67),c=o("wks"),s=n.Symbol,f=u?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)||(l&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,r){var n=r(5);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||function(){return this}()||Function("return this")()}).call(this,r(34))},function(e,t,r){var n=r(61),o=r(11),a=r(82),i=r(14).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(61),o=r(8),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e])||a(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,r){var n=r(16),o=r(57),a=r(2),i=r(29),l=Object.defineProperty;t.f=n?l:function(e,t,r){if(a(e),t=i(t,!0),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Map.prototype.entries.call(e)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){var n=r(2),o=r(5),a=r(6)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||void 0==(r=n(i)[a])?t:o(r)}},function(e,t,r){var n=r(16),o=r(14),a=r(23);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Set.prototype.values.call(e)}},function(e,t,r){var n=r(56),o=r(37);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(8),o=r(18),a=r(11),i=r(38),l=r(59),u=r(24),c=u.get,s=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,l){var u,c=!!l&&!!l.unsafe,d=!!l&&!!l.enumerable,p=!!l&&!!l.noTargetGet;"function"==typeof r&&("string"!=typeof t||a(r,"name")||o(r,"name",t),(u=s(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:i(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(e,t,r){var n=r(14).f,o=r(11),a=r(6)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n,o,a,i=r(92),l=r(8),u=r(13),c=r(18),s=r(11),f=r(39),d=r(30),p=r(25),h=l.WeakMap;if(i){var g=f.state||(f.state=new h),v=g.get,m=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},o=function(e){return v.call(g,e)||{}},a=function(e){return m.call(g,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,c(e,b,t),t},o=function(e){return s(e,b)?e[b]:{}},a=function(e){return s(e,b)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},function(e,t){e.exports={}},function(e,t,r){var n=r(42),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,r){var n=r(37);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,r){var n=r(40),o=r(31),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)}},function(e,t,r){var n,o=r(2),a=r(99),i=r(43),l=r(25),u=r(100),c=r(58),s=r(30),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=n?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=c("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};l[f]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d.prototype=o(e),r=new d,d.prototype=null,r[f]=e):r=h(),void 0===t?r:a(r,t)}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return n(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,r){return(new e).ansiToHtml(t,r)}},{key:"ansiToJson",value:function(t,r){return(new e).ansiToJson(t,r)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),n(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(o[e][t].color);for(var r=[0,95,135,175,215,255],n=function(e,t,n){return r[e]+", "+r[t]+", "+r[n]},a=0;a<6;++a)for(var i=0;i<6;++i)for(var l=0;l<6;++l)this.PALETTE_COLORS.push(n(a,i,l));for(var u=8,c=0;c<24;++c,u+=10)this.PALETTE_COLORS.push(n(u,u,u))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,r){var n=this,o=e.split(/\\033\\[/),a=o.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=o.map((function(e){return n.processChunk(e,t,r)}));if(t&&t.json){var l=this.processChunkJson("");return l.content=a,l.clearLine=t.clearLine,i.unshift(l),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(a),i.join("")}},{key:"processChunkJson",value:function(e,t,r){var n=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,a=t.key=n?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},l=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!l)return i;i.content=l[4];var u=l[2].split(";");if(""!==l[1]||"m"!==l[3])return i;if(!r)return i;var c=this;for(c.decoration=null;u.length>0;){var s=u.shift(),f=parseInt(s);if(isNaN(f)||0===f)c.fg=c.bg=c.decoration=null;else if(1===f)c.decoration="bold";else if(2===f)c.decoration="dim";else if(3==f)c.decoration="italic";else if(4==f)c.decoration="underline";else if(5==f)c.decoration="blink";else if(7===f)c.decoration="reverse";else if(8===f)c.decoration="hidden";else if(9===f)c.decoration="strikethrough";else if(39==f)c.fg=null;else if(49==f)c.bg=null;else if(f>=30&&f<38)c.fg=o[0][f%10][a];else if(f>=90&&f<98)c.fg=o[1][f%10][a];else if(f>=40&&f<48)c.bg=o[0][f%10][a];else if(f>=100&&f<108)c.bg=o[1][f%10][a];else if(38===f||48===f){var d=38===f;if(u.length>=1){var p=u.shift();if("5"===p&&u.length>=1){var h=parseInt(u.shift());if(h>=0&&h<=255)if(n){var g=h>=16?"ansi-palette-"+h:o[h>7?1:0][h%8].class;d?c.fg=g:c.bg=g}else this.PALETTE_COLORS||c.setupPalette(),d?c.fg=this.PALETTE_COLORS[h]:c.bg=this.PALETTE_COLORS[h]}else if("2"===p&&u.length>=3){var v=parseInt(u.shift()),m=parseInt(u.shift()),y=parseInt(u.shift());if(v>=0&&v<=255&&m>=0&&m<=255&&y>=0&&y<=255){var b=v+", "+m+", "+y;n?d?(c.fg="ansi-truecolor",c.fg_truecolor=b):(c.bg="ansi-truecolor",c.bg_truecolor=b):d?c.fg=b:c.bg=b}}}}}if(null===c.fg&&null===c.bg&&null===c.decoration)return i;return i.fg=c.fg,i.bg=c.bg,i.fg_truecolor=c.fg_truecolor,i.bg_truecolor=c.bg_truecolor,i.decoration=c.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,r){var n=this;t=t||{};var o=this.processChunkJson(e,t,r);if(t.json)return o;if(o.isEmpty())return"";if(!o.was_processed)return o.content;var a=t.use_classes,i=[],l=[],u={},c=function(e){var t=[],r=void 0;for(r in e)e.hasOwnProperty(r)&&t.push("data-"+r+\'="\'+n.escapeForHtml(e[r])+\'"\');return t.length>0?" "+t.join(" "):""};return o.fg&&(a?(l.push(o.fg+"-fg"),null!==o.fg_truecolor&&(u["ansi-truecolor-fg"]=o.fg_truecolor,o.fg_truecolor=null)):i.push("color:rgb("+o.fg+")")),o.bg&&(a?(l.push(o.bg+"-bg"),null!==o.bg_truecolor&&(u["ansi-truecolor-bg"]=o.bg_truecolor,o.bg_truecolor=null)):i.push("background-color:rgb("+o.bg+")")),o.decoration&&(a?l.push("ansi-"+o.decoration):"bold"===o.decoration?i.push("font-weight:bold"):"dim"===o.decoration?i.push("opacity:0.5"):"italic"===o.decoration?i.push("font-style:italic"):"reverse"===o.decoration?i.push("filter:invert(100%)"):"hidden"===o.decoration?i.push("visibility:hidden"):"strikethrough"===o.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+o.decoration)),a?\'<span class="\'+l.join(" ")+\'"\'+c(u)+">"+o.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(u)+">"+o.content+"</span>"}}]),e}();e.exports=a},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(16),o=r(55),a=r(23),i=r(20),l=r(29),u=r(11),c=r(57),s=Object.getOwnPropertyDescriptor;t.f=n?s:function(e,t){if(e=i(e),t=l(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return a(!o.f.call(e,t),e[t])}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,r){var n=r(8),o=r(18);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(8),o=r(38),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},function(e,t,r){var n=r(3),o=r(39);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"\xa9 2021 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){var n=r(62),o=r(43).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,r){var n=r(12);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(68),o=r(27),a=r(6)("iterator");e.exports=function(e){if(void 0!=e)return e[a]||e["@@iterator"]||o[n(e)]}},function(e,t,r){var n={};n[r(6)("toStringTag")]="z",e.exports="[object z]"===String(n)},function(e,t,r){"use strict";var n=r(1),o=r(102),a=r(76),i=r(72),l=r(22),u=r(18),c=r(21),s=r(6),f=r(3),d=r(27),p=r(75),h=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,v=s("iterator"),m="keys",y="values",b="entries",w=function(){return this};e.exports=function(e,t,r,s,p,k,E){o(r,t,s);var x,S,_,T=function(e){if(e===p&&N)return N;if(!g&&e in P)return P[e];switch(e){case m:case y:case b:return function(){return new r(this,e)}}return function(){return new r(this)}},C=t+" Iterator",O=!1,P=e.prototype,R=P[v]||P["@@iterator"]||p&&P[p],N=!g&&R||T(p),L="Array"==t&&P.entries||R;if(L&&(x=a(L.call(new e)),h!==Object.prototype&&x.next&&(f||a(x)===h||(i?i(x,h):"function"!=typeof x[v]&&u(x,v,w)),l(x,C,!0,!0),f&&(d[C]=w))),p==y&&R&&R.name!==y&&(O=!0,N=function(){return R.call(this)}),f&&!E||P[v]===N||u(P,v,N),d[t]=N,p)if(S={values:T(y),keys:k?N:T(m),entries:T(b)},E)for(_ in S)(g||O||!(_ in P))&&c(P,_,S[_]);else n({target:t,proto:!0,forced:g||O},S);return S}},function(e,t,r){var n=r(2),o=r(45);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},function(e,t,r){var n=r(36);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),c=1;c<arguments.length;c++){for(var s in r=Object(arguments[c]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var f=0;f<l.length;f++)a.call(r,l[f])&&(u[l[f]]=r[l[f]])}}return u}},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"===typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){var n=r(191);e.exports=function(e,t){var r;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=n(e))||t&&e&&"number"===typeof e.length){r&&(e=r);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){u=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(u)throw i}}}}},function(e,t,r){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(184)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(64),i=r(21),l=r(65),u=r(4),c=r(70),s=r(13),f=r(12),d=r(71),p=r(22),h=r(97);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),v=-1!==e.indexOf("Weak"),m=g?"set":"add",y=o[e],b=y&&y.prototype,w=y,k={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(a(e,"function"!=typeof y||!(v||b.forEach&&!f((function(){(new y).entries().next()})))))w=r.getConstructor(t,e,g,m),l.REQUIRED=!0;else if(a(e,!0)){var x=new w,S=x[m](v?{}:-0,1)!=x,_=f((function(){x.has(1)})),T=d((function(e){new y(e)})),C=!v&&f((function(){for(var e=new y,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,r){c(t,w,e);var n=h(new y,t,w);return void 0!=r&&u(r,n[m],{that:n,AS_ENTRIES:g}),n}))).prototype=b,b.constructor=w),(_||C)&&(E("delete"),E("has"),g&&E("get")),(C||S)&&E(m),v&&b.clear&&delete b.clear}return k[e]=w,n({global:!0,forced:w!=y},k),p(w,e),v||r.setStrong(w,e,g),w}},function(e,t,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!n.call({1:2},1);t.f=a?function(e){var t=o(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(12),o=r(36),a="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},function(e,t,r){var n=r(16),o=r(12),a=r(58);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(8),o=r(13),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){var n=r(39),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),o=r(93),a=r(35),i=r(14);e.exports=function(e,t){for(var r=o(t),l=i.f,u=a.f,c=0;c<r.length;c++){var s=r[c];n(e,s)||l(e,s,u(t,s))}}},function(e,t,r){var n=r(8);e.exports=n},function(e,t,r){var n=r(11),o=r(20),a=r(94).indexOf,i=r(25);e.exports=function(e,t){var r,l=o(e),u=0,c=[];for(r in l)!n(i,r)&&n(l,r)&&c.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(c,r)||c.push(r));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(12),o=/#|\\.prototype\\./,a=function(e,t){var r=l[i(e)];return r==c||r!=u&&("function"==typeof t?n(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},function(e,t,r){var n=r(25),o=r(13),a=r(11),i=r(14).f,l=r(31),u=r(96),c=l("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return u&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};n[c]=!0},function(e,t,r){var n=r(6),o=r(27),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},function(e,t,r){var n=r(44);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,r){var n=r(46),o=r(36),a=r(6)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},function(e,t,r){var n=r(2);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},function(e,t,r){var n=r(6)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},function(e,t,r){var n=r(2),o=r(98);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,a){return n(r),o(a),t?e.call(r,a):r.__proto__=a,r}}():void 0)},function(e,t,r){"use strict";var n=r(14).f,o=r(32),a=r(101),i=r(7),l=r(70),u=r(4),c=r(47),s=r(104),f=r(16),d=r(65).fastKey,p=r(24),h=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,c){var s=e((function(e,n){l(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=n&&u(n,e[c],{that:e,AS_ENTRIES:r})})),p=g(t),v=function(e,t,r){var n,o,a=p(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=d(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=p(e),o=d(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),f&&n(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,r){var n=t+" Iterator",o=g(t),a=g(n);c(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),s(t)}}},function(e,t,r){var n=r(62),o=r(43);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n,o,a,i=r(12),l=r(76),u=r(18),c=r(11),s=r(6),f=r(3),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(n=o):p=!0);var h=void 0==n||i((function(){var e={};return n[d].call(e)!==e}));h&&(n={}),f&&!h||c(n,d)||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(11),o=r(28),a=r(30),i=r(103),l=a("IE_PROTO"),u=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),n(e,l)?e[l]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(46),o=r(21),a=r(105);n||o(Object.prototype,"toString",a,{unsafe:!0})},function(e,t,r){"use strict";var n=r(107).charAt,o=r(24),a=r(47),i="String Iterator",l=o.set,u=o.getterFor(i);a(String,"String",(function(e){l(this,{type:i,string:String(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e,t=n(this),r=o(t.delete),a=!0,i=0,l=arguments.length;i<l;i++)e=r.call(t,arguments[i]),a=a&&e;return!!a}},function(e,t,r){"use strict";var n=r(5),o=r(7),a=r(4);e.exports=function(e){var t,r,i,l,u=arguments.length,c=u>1?arguments[1]:void 0;return n(this),(t=void 0!==c)&&n(c),void 0==e?new this:(r=[],t?(i=0,l=o(c,u>2?arguments[2]:void 0,2),a(e,(function(e){r.push(l(e,i++))}))):a(e,r.push,{that:r}),new this(r))}},function(e,t,r){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,r){var n=r(6);t.f=n},function(e,t,r){var n=r(13),o=r(49),a=r(6)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){"use strict";var n=r(29),o=r(14),a=r(23);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},function(e,t,r){var n,o,a=r(8),i=r(168),l=a.process,u=l&&l.versions,c=u&&u.v8;c?o=(n=c.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\\/(\\d+)/))&&(o=n[1]),e.exports=o&&+o},function(e,t,r){"use strict";var n=r(178);function o(){}var a=null,i={};function l(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._U=0,this._V=0,this._W=null,this._X=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._V;)e=e._W;if(l._Y&&l._Y(e),0===e._V)return 0===e._U?(e._U=1,void(e._X=t)):1===e._U?(e._U=2,void(e._X=[e._X,t])):void e._X.push(t);!function(e,t){n((function(){var r=1===e._V?t.onFulfilled:t.onRejected;if(null!==r){var n=function(e,t){try{return e(t)}catch(e){return a=e,i}}(r,e._W);n===i?s(t.promise,a):c(t.promise,n)}else 1===e._V?c(t.promise,e._W):s(t.promise,e._W)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var r=function(e){try{return e.then}catch(e){return a=e,i}}(t);if(r===i)return s(e,a);if(r===e.then&&t instanceof l)return e._V=3,e._W=t,void f(e);if("function"===typeof r)return void p(r.bind(t),e)}e._V=1,e._W=t,f(e)}function s(e,t){e._V=2,e._W=t,l._Z&&l._Z(e,t),f(e)}function f(e){if(1===e._U&&(u(e,e._X),e._X=null),2===e._U){for(var t=0;t<e._X.length;t++)u(e,e._X[t]);e._X=null}}function d(e,t,r){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=r}function p(e,t){var r=!1,n=function(e,t,r){try{e(t,r)}catch(e){return a=e,i}}(e,(function(e){r||(r=!0,c(t,e))}),(function(e){r||(r=!0,s(t,e))}));r||n!==i||(r=!0,s(t,a))}e.exports=l,l._Y=null,l._Z=null,l._0=o,l.prototype.then=function(e,t){if(this.constructor!==l)return function(e,t,r){return new e.constructor((function(n,a){var i=new l(o);i.then(n,a),u(e,new d(t,r,i))}))}(this,e,t);var r=new l(o);return u(this,new d(e,t,r)),r}},function(e,t,r){var n=r(204),o={};for(var a in n)n.hasOwnProperty(a)&&(o[n[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var l in i)if(i.hasOwnProperty(l)){if(!("channels"in i[l]))throw new Error("missing channels property: "+l);if(!("labels"in i[l]))throw new Error("missing channel labels property: "+l);if(i[l].labels.length!==i[l].channels)throw new Error("channel and label counts mismatch: "+l);var u=i[l].channels,c=i[l].labels;delete i[l].channels,delete i[l].labels,Object.defineProperty(i[l],"channels",{value:u}),Object.defineProperty(i[l],"labels",{value:c})}i.rgb.hsl=function(e){var t,r,n=e[0]/255,o=e[1]/255,a=e[2]/255,i=Math.min(n,o,a),l=Math.max(n,o,a),u=l-i;return l===i?t=0:n===l?t=(o-a)/u:o===l?t=2+(a-n)/u:a===l&&(t=4+(n-o)/u),(t=Math.min(60*t,360))<0&&(t+=360),r=(i+l)/2,[t,100*(l===i?0:r<=.5?u/(l+i):u/(2-l-i)),100*r]},i.rgb.hsv=function(e){var t,r,n,o,a,i=e[0]/255,l=e[1]/255,u=e[2]/255,c=Math.max(i,l,u),s=c-Math.min(i,l,u),f=function(e){return(c-e)/6/s+.5};return 0===s?o=a=0:(a=s/c,t=f(i),r=f(l),n=f(u),i===c?o=n-r:l===c?o=1/3+t-n:u===c&&(o=2/3+r-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*c]},i.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},i.rgb.cmyk=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-o)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=o[e];if(t)return t;var r,a,i,l=1/0;for(var u in n)if(n.hasOwnProperty(u)){var c=n[u],s=(a=e,i=c,Math.pow(a[0]-i[0],2)+Math.pow(a[1]-i[1],2)+Math.pow(a[2]-i[2],2));s<l&&(l=s,r=u)}return r},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),r=t[0],n=t[1],o=t[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},i.hsl.rgb=function(e){var t,r,n,o,a,i=e[0]/360,l=e[1]/100,u=e[2]/100;if(0===l)return[a=255*u,a,a];t=2*u-(r=u<.5?u*(1+l):u+l-u*l),o=[0,0,0];for(var c=0;c<3;c++)(n=i+1/3*-(c-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,o[c]=255*a;return o},i.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,o=r,a=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=a<=1?a:2-a,[t,100*(0===n?2*o/(a+o):2*r/(n+r)),100*((n+r)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,o=Math.floor(t)%6,a=t-Math.floor(t),i=255*n*(1-r),l=255*n*(1-r*a),u=255*n*(1-r*(1-a));switch(n*=255,o){case 0:return[n,u,i];case 1:return[l,n,i];case 2:return[i,n,u];case 3:return[i,l,n];case 4:return[u,i,n];case 5:return[n,i,l]}},i.hsv.hsl=function(e){var t,r,n,o=e[0],a=e[1]/100,i=e[2]/100,l=Math.max(i,.01);return n=(2-a)*i,r=a*l,[o,100*(r=(r/=(t=(2-a)*l)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,r,n,o,a,i,l,u=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),n=6*u-(t=Math.floor(6*u)),0!==(1&t)&&(n=1-n),o=c+n*((r=1-s)-c),t){default:case 6:case 0:a=r,i=o,l=c;break;case 1:a=o,i=r,l=c;break;case 2:a=c,i=r,l=o;break;case 3:a=c,i=o,l=r;break;case 4:a=o,i=c,l=r;break;case 5:a=r,i=c,l=o}return[255*a,255*i,255*l]},i.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},i.xyz.rgb=function(e){var t,r,n,o=e[0]/100,a=e[1]/100,i=e[2]/100;return r=-.9689*o+1.8758*a+.0415*i,n=.0557*o+-.204*a+1.057*i,t=(t=3.2406*o+-1.5372*a+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,r,n,o=e[0];t=e[1]/500+(r=(o+16)/116),n=r-e[2]/200;var a=Math.pow(r,3),i=Math.pow(t,3),l=Math.pow(n,3);return r=a>.008856?a:(r-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,n=l>.008856?l:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},i.lab.lch=function(e){var t,r=e[0],n=e[1],o=e[2];return(t=360*Math.atan2(o,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+o*o),t]},i.lch.lab=function(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],o=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var a=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map((function(e){return e+e})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255,a=Math.max(Math.max(r,n),o),i=Math.min(Math.min(r,n),o),l=a-i;return t=l<=0?0:a===r?(n-o)/l%6:a===n?2+(o-r)/l:4+(r-n)/l+4,t/=6,[360*(t%=1),100*l,100*(l<1?i/(1-l):0)]},i.hsl.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=1,o=0;return(n=r<.5?2*t*r:2*t*(1-r))<1&&(o=(r-.5*n)/(1-n)),[e[0],100*n,100*o]},i.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var o,a=[0,0,0],i=t%1*6,l=i%1,u=1-l;switch(Math.floor(i)){case 0:a[0]=1,a[1]=l,a[2]=0;break;case 1:a[0]=u,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=l;break;case 3:a[0]=0,a[1]=u,a[2]=1;break;case 4:a[0]=l,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=u}return o=(1-r)*n,[255*(r*a[0]+o),255*(r*a[1]+o),255*(r*a[2]+o)]},i.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},i.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},i.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},i.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(187);t.XmlEntities=n.XmlEntities;var o=r(188);t.Html4Entities=o.Html4Entities;var a=r(189);t.Html5Entities=a.Html5Entities,t.AllHtmlEntities=a.Html5Entities},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!a){a=!0;var i="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(i,"DeprecationWarning");else{var l=new Error(i);l.name="DeprecationWarning",console.warn(new Error(i))}}var u={start:{column:n=Math.max(n,0),line:r}};return c(t,u,o)};var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(190));function o(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=!1;function i(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function u(e,t,r){var n=Object.assign({column:0,line:-1},e.start),o=Object.assign({},n,e.end),a=r||{},i=a.linesAbove,l=void 0===i?2:i,u=a.linesBelow,c=void 0===u?3:u,s=n.line,f=n.column,d=o.line,p=o.column,h=Math.max(s-(l+1),0),g=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(g=t.length);var v=d-s,m={};if(v)for(var y=0;y<=v;y++){var b=y+s;if(f)if(0===y){var w=t[b-1].length;m[b]=[f,w-f+1]}else if(y===v)m[b]=[0,p];else{var k=t[b-y].length;m[b]=[0,k]}else m[b]=!0}else m[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:g,markerLines:m}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(r.highlightCode||r.forceColor)&&(0,n.shouldHighlight)(r),a=(0,n.getChalk)(r),c=i(a),s=function(e,t){return o?e(t):t},f=e.split(l),d=u(t,f,r),p=d.start,h=d.end,g=d.markerLines,v=t.start&&"number"===typeof t.start.column,m=String(h).length,y=o?(0,n.default)(e,r):e,b=y.split(l).slice(p,h).map((function(e,t){var n=p+1+t,o=" ".concat(n).slice(-m),a=" ".concat(o," | "),i=g[n],l=!g[n+1];if(i){var u="";if(Array.isArray(i)){var f=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),d=i[1]||1;u=["\\n ",s(c.gutter,a.replace(/\\d/g," ")),f,s(c.marker,"^").repeat(d)].join(""),l&&r.message&&(u+=" "+s(c.message,r.message))}return[s(c.marker,">"),s(c.gutter,a),e,u].join("")}return" ".concat(s(c.gutter,a)).concat(e)})).join("\\n");return r.message&&!v&&(b="".concat(" ".repeat(m+1)).concat(r.message,"\\n").concat(b)),o?a.reset(b):b}}).call(this,r(51))},function(e,t,r){"use strict";r(91),r(77),r(106),r(78),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(117),r(118),r(119),r(120),r(121),r(122),r(123),r(124),r(125),r(126),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(149),r(181).polyfill()},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(8),o=r(59),a=n.WeakMap;e.exports="function"===typeof a&&/native code/.test(o(a))},function(e,t,r){var n=r(10),o=r(41),a=r(63),i=r(2);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(i(e)),r=a.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(20),o=r(26),a=r(95),i=function(e){return function(t,r,i){var l,u=n(t),c=o(u.length),s=a(i,c);if(e&&r!=r){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,r){var n=r(42),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(13),o=r(72);e.exports=function(e,t,r){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==r&&n(i=a.prototype)&&i!==r.prototype&&o(e,i),e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,r){var n=r(16),o=r(14),a=r(2),i=r(74);e.exports=n?Object.defineProperties:function(e,t){a(e);for(var r,n=i(t),l=n.length,u=0;l>u;)o.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(10);e.exports=n("document","documentElement")},function(e,t,r){var n=r(21);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(75).IteratorPrototype,o=r(32),a=r(23),i=r(22),l=r(27),u=function(){return this};e.exports=function(e,t,r){var c=t+" Iterator";return e.prototype=o(n,{next:a(1,r)}),i(e,c,!1,!0),l[c]=u,e}},function(e,t,r){var n=r(12);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){"use strict";var n=r(10),o=r(14),a=r(6),i=r(16),l=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[l]&&r(t,l,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(46),o=r(68);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(42),o=r(37),a=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),c=l.length;return u<0||u>=c?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===c||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r,o){if(!n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){n(r,e,t)&&d.call(o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Map",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{groupBy:function(e,t){var r=new this;a(t);var n=a(r.has),i=a(r.get),l=a(r.set);return o(e,(function(e){var o=t(e);n.call(r,o)?i.call(r,o).push(e):l.call(r,o,[e])})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(116),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return u(i(a(this)),(function(t,r,n){if(l(r,e))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{keyBy:function(e,t){var r=new this;a(t);var n=a(r.set);return o(e,(function(e){n.call(r,t(e),e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return l(i(a(this)),(function(t,r,n){if(r===e)return n(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,n(r,e,t),r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,e,n(r,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),r=i(t.set),n=0;n<arguments.length;)l(arguments[n++],r,{that:t,AS_ENTRIES:!0});return t}})},function(e,t,r){r(1)({target:"Map",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r,a){n?(n=!1,o=a):o=e(o,a,r,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty map with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5);n({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var r=a(this),n=arguments.length;i(t);var o=r.has(e);if(!o&&n<3)throw TypeError("Updating absent value");var l=o?r.get(e):i(n>2?arguments[2]:void 0)(e,r);return r.set(e,t(l,e,r)),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(127);n({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e=n(this),t=o(e.add),r=0,a=arguments.length;r<a;r++)t.call(e,arguments[r]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete);return c(e,(function(e){n.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r){if(!n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){n(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Set",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),r=new(u(t,a("Set"))),n=l(t.has),o=l(r.add);return c(e,(function(e){n.call(t,e)&&o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!0===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(48),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=u(this),r=i(e),n=r.has;return"function"!=typeof n&&(r=new(a("Set"))(e),n=l(r.has)),!c(t,(function(e,t){if(!1===n.call(r,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!1===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(19),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),r=i(t),n=void 0===e?",":String(e),o=[];return l(r,o.push,{that:o,IS_ITERATOR:!0}),o.join(n)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){d.call(o,n(e,e,t))}),{IS_ITERATOR:!0}),o}})},function(e,t,r){r(1)({target:"Set",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r){n?(n=!1,o=r):o=e(o,r,r,t)}),{IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty set with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete),o=l(r.add);return c(e,(function(e){n.call(r,e)||o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),r=new(u(t,a("Set")))(t);return c(e,l(r.add),{that:r}),r}})},function(e,t,r){var n=r(8),o=r(146),a=r(147),i=r(18),l=r(6),u=l("iterator"),c=l("toStringTag"),s=a.values;for(var f in o){var d=n[f],p=d&&d.prototype;if(p){if(p[u]!==s)try{i(p,u,s)}catch(e){p[u]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){"use strict";var n=r(20),o=r(148),a=r(27),i=r(24),l=r(47),u="Array Iterator",c=i.set,s=i.getterFor(u);e.exports=l(Array,"Array",(function(e,t){c(this,{type:u,target:n(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(e,t,r){var n=r(6),o=r(32),a=r(14),i=n("unscopables"),l=Array.prototype;void 0==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),e.exports=function(e){l[i][e]=!0}},function(e,t,r){"use strict";r(150),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(169),r(172),r(173),r(77),r(78),r(174),r(175),r(176),"undefined"===typeof Promise&&(r(177).enable(),self.Promise=r(179)),"undefined"!==typeof window&&r(180),Object.assign=r(50)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(10),i=r(3),l=r(16),u=r(44),c=r(67),s=r(12),f=r(11),d=r(49),p=r(13),h=r(2),g=r(28),v=r(20),m=r(29),y=r(23),b=r(32),w=r(74),k=r(41),E=r(151),x=r(63),S=r(35),_=r(14),T=r(55),C=r(18),O=r(21),P=r(40),R=r(30),N=r(25),L=r(31),A=r(6),I=r(82),j=r(9),M=r(22),D=r(24),q=r(152).forEach,z=R("hidden"),U="Symbol",F=A("toPrimitive"),B=D.set,V=D.getterFor(U),H=Object.prototype,W=o.Symbol,$=a("JSON","stringify"),G=S.f,Q=_.f,Y=E.f,K=T.f,X=P("symbols"),J=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=l&&s((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=G(H,t);n&&delete H[t],Q(e,t,r),n&&e!==H&&Q(H,t,n)}:Q,ae=function(e,t){var r=X[e]=b(W.prototype);return B(r,{type:U,tag:e,description:t}),l||(r.description=t),r},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},le=function(e,t,r){e===H&&le(J,t,r),h(e);var n=m(t,!0);return h(r),f(X,n)?(r.enumerable?(f(e,z)&&e[z][n]&&(e[z][n]=!1),r=b(r,{enumerable:y(0,!1)})):(f(e,z)||Q(e,z,y(1,{})),e[z][n]=!0),oe(e,n,r)):Q(e,n,r)},ue=function(e,t){h(e);var r=v(t),n=w(r).concat(de(r));return q(n,(function(t){l&&!ce.call(r,t)||le(e,t,r[t])})),e},ce=function(e){var t=m(e,!0),r=K.call(this,t);return!(this===H&&f(X,t)&&!f(J,t))&&(!(r||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||r)},se=function(e,t){var r=v(e),n=m(t,!0);if(r!==H||!f(X,n)||f(J,n)){var o=G(r,n);return!o||!f(X,n)||f(r,z)&&r[z][n]||(o.enumerable=!0),o}},fe=function(e){var t=Y(v(e)),r=[];return q(t,(function(e){f(X,e)||f(N,e)||r.push(e)})),r},de=function(e){var t=e===H,r=Y(t?J:v(e)),n=[];return q(r,(function(e){!f(X,e)||t&&!f(H,e)||n.push(X[e])})),n};(u||(O((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function e(r){this===H&&e.call(J,r),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,y(1,r))};return l&&ne&&oe(H,t,{configurable:!0,set:r}),ae(t,e)}).prototype,"toString",(function(){return V(this).tag})),O(W,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,_.f=le,S.f=se,k.f=E.f=fe,x.f=de,I.f=function(e){return ae(A(e),e)},l&&(Q(W.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),i||O(H,"propertyIsEnumerable",ce,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),q(w(te),(function(e){j(e)})),n({target:U,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:s((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(g(e))}}),$)&&n({target:"JSON",stat:!0,forced:!u||s((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(n=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ie(t))return t}),o[1]=t,$.apply(null,o)}});W.prototype[F]||C(W.prototype,F,W.prototype.valueOf),M(W,U),N[z]=!0},function(e,t,r){var n=r(20),o=r(41).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){var n=r(7),o=r(56),a=r(28),i=r(26),l=r(83),u=[].push,c=function(e){var t=1==e,r=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,g,v,m){for(var y,b,w=a(h),k=o(w),E=n(g,v,3),x=i(k.length),S=0,_=m||l,T=t?_(h,x):r||d?_(h,0):void 0;x>S;S++)if((p||S in k)&&(b=E(y=k[S],S,w),e))if(t)T[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:u.call(T,y)}else switch(e){case 4:return!1;case 7:u.call(T,y)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(e,t,r){"use strict";var n=r(1),o=r(16),a=r(8),i=r(11),l=r(13),u=r(14).f,c=r(60),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,g="Symbol(test)"==String(s("test")),v=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=l(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var r=g?t.slice(7,-1):t.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(e,t,r){r(9)("asyncIterator")},function(e,t,r){r(9)("hasInstance")},function(e,t,r){r(9)("isConcatSpreadable")},function(e,t,r){r(9)("iterator")},function(e,t,r){r(9)("match")},function(e,t,r){r(9)("replace")},function(e,t,r){r(9)("search")},function(e,t,r){r(9)("species")},function(e,t,r){r(9)("split")},function(e,t,r){r(9)("toPrimitive")},function(e,t,r){r(9)("toStringTag")},function(e,t,r){r(9)("unscopables")},function(e,t,r){"use strict";var n=r(1),o=r(12),a=r(49),i=r(13),l=r(28),u=r(26),c=r(84),s=r(83),f=r(167),d=r(6),p=r(85),h=d("isConcatSpreadable"),g=9007199254740991,v="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,o,a,i=l(this),f=s(i,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=u(a.length))>g)throw TypeError(v);for(r=0;r<o;r++,d++)r in a&&c(f,d,a[r])}else{if(d>=g)throw TypeError(v);c(f,d++,a)}return f.length=d,f}})},function(e,t,r){var n=r(12),o=r(6),a=r(85),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){var n=r(10);e.exports=n("navigator","userAgent")||""},function(e,t,r){var n=r(1),o=r(170);n({target:"Array",stat:!0,forced:!r(71)((function(e){Array.from(e)}))},{from:o})},function(e,t,r){"use strict";var n=r(7),o=r(28),a=r(171),i=r(66),l=r(26),u=r(84),c=r(45);e.exports=function(e){var t,r,s,f,d,p,h=o(e),g="function"==typeof this?this:Array,v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m,b=c(h),w=0;if(y&&(m=n(m,v>2?arguments[2]:void 0,2)),void 0==b||g==Array&&i(b))for(r=new g(t=l(h.length));t>w;w++)p=y?m(h[w],w):h[w],u(r,w,p);else for(d=(f=b.call(h)).next,r=new g;!(s=d.call(f)).done;w++)p=y?a(f,m,[s.value,w],!0):s.value,u(r,w,p);return r.length=w,r}},function(e,t,r){var n=r(2),o=r(69);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){throw o(e),t}}},function(e,t,r){var n=r(8);r(22)(n.JSON,"JSON",!0)},function(e,t,r){r(22)(Math,"Math",!0)},function(e,t,r){r(9)("dispose")},function(e,t,r){r(9)("observable")},function(e,t,r){r(9)("patternMatch")},function(e,t,r){"use strict";var n=r(86),o=[ReferenceError,TypeError,RangeError],a=!1;function i(){a=!1,n._Y=null,n._Z=null}function l(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},a&&i();a=!0;var t=0,r=0,u={};function c(t){(e.allRejections||l(u[t].error,e.whitelist||o))&&(u[t].displayId=r++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}n._Y=function(t){2===t._V&&u[t._1]&&(u[t._1].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+u[t].displayId+".")))}(t._1):clearTimeout(u[t._1].timeout),delete u[t._1])},n._Z=function(e,r){0===e._U&&(e._1=t++,u[e._1]={displayId:null,error:r,timeout:setTimeout(c.bind(null,e._1),l(r,o)?100:2e3),logged:!1})}}},function(e,t,r){"use strict";(function(t){function r(e){o.length||(n(),!0),o[o.length]=e}e.exports=r;var n,o=[],a=0;function i(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,r=o.length-a;t<r;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0,!1}var l,u,c,s="undefined"!==typeof t?t:self,f=s.MutationObserver||s.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(n,0),r=setInterval(n,50);function n(){clearTimeout(t),clearInterval(r),e()}}}"function"===typeof f?(l=1,u=new f(i),c=document.createTextNode(""),u.observe(c,{characterData:!0}),n=function(){l=-l,c.data=l}):n=d(i),r.requestFlush=n,r.makeRequestCallFromTimer=d}).call(this,r(34))},function(e,t,r){"use strict";var n=r(86);e.exports=n;var o=s(!0),a=s(!1),i=s(null),l=s(void 0),u=s(0),c=s("");function s(e){var t=new n(n._0);return t._V=1,t._W=e,t}n.resolve=function(e){if(e instanceof n)return e;if(null===e)return i;if(void 0===e)return l;if(!0===e)return o;if(!1===e)return a;if(0===e)return u;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new n(t.bind(e))}catch(e){return new n((function(t,r){r(e)}))}return s(e)};var f=function(e){return"function"===typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};n.all=function(e){var t=f(e);return new n((function(e,r){if(0===t.length)return e([]);var o=t.length;function a(i,l){if(l&&("object"===typeof l||"function"===typeof l)){if(l instanceof n&&l.then===n.prototype.then){for(;3===l._V;)l=l._W;return 1===l._V?a(i,l._W):(2===l._V&&r(l._W),void l.then((function(e){a(i,e)}),r))}var u=l.then;if("function"===typeof u)return void new n(u.bind(l)).then((function(e){a(i,e)}),r)}t[i]=l,0===--o&&e(t)}for(var i=0;i<t.length;i++)a(i,t[i])}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){f(e).forEach((function(e){n.resolve(e).then(t,r)}))}))},n.prototype.catch=function(e){return this.then(null,e)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Headers",(function(){return h})),r.d(t,"Request",(function(){return k})),r.d(t,"Response",(function(){return x})),r.d(t,"DOMException",(function(){return _})),r.d(t,"fetch",(function(){return T}));var n="undefined"!==typeof globalThis&&globalThis||"undefined"!==typeof self&&self||"undefined"!==typeof n&&n,o="URLSearchParams"in n,a="Symbol"in n&&"iterator"in Symbol,i="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(e){return!1}}(),l="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!==typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function g(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function v(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function m(e){var t=new FileReader,r=v(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=g(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=g(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var e,t,r,n=g(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=v(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),p(e)},a&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function k(e,t){if(!(this instanceof k))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof k){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),("GET"===this.method||"HEAD"===this.method)&&("no-store"===t.cache||"no-cache"===t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}k.prototype.clone=function(){return new k(this,{body:this._bodyInit})},b.call(k.prototype),b.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];x.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new x(null,{status:t,headers:{location:e}})};var _=n.DOMException;try{new _}catch(e){(_=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),_.prototype.constructor=_}function T(e,t){return new Promise((function(r,o){var a=new k(e,t);if(a.signal&&a.signal.aborted)return o(new _("Aborted","AbortError"));var l=new XMLHttpRequest;function c(){l.abort()}l.onload=function(){var e,t,n={status:l.status,statusText:l.statusText,headers:(e=l.getAllResponseHeaders()||"",t=new h,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in l?l.responseURL:n.headers.get("X-Request-URL");var o="response"in l?l.response:l.responseText;setTimeout((function(){r(new x(o,n))}),0)},l.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.onabort=function(){setTimeout((function(){o(new _("Aborted","AbortError"))}),0)},l.open(a.method,function(e){try{return""===e&&n.location.href?n.location.href:e}catch(t){return e}}(a.url),!0),"include"===a.credentials?l.withCredentials=!0:"omit"===a.credentials&&(l.withCredentials=!1),"responseType"in l&&(i?l.responseType="blob":u&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(l.responseType="arraybuffer")),!t||"object"!==typeof t.headers||t.headers instanceof h?a.headers.forEach((function(e,t){l.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){l.setRequestHeader(e,d(t.headers[e]))})),a.signal&&(a.signal.addEventListener("abort",c),l.onreadystatechange=function(){4===l.readyState&&a.signal.removeEventListener("abort",c)}),l.send("undefined"===typeof a._bodyInit?null:a._bodyInit)}))}T.polyfill=!0,n.fetch||(n.fetch=T,n.Headers=h,n.Request=k,n.Response=x)},function(e,t,r){(function(t){for(var n=r(182),o="undefined"===typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],u=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],u=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!u){var s=0,f=0,d=[];l=function(e){if(0===d.length){var t=n(),r=Math.max(0,16.666666666666668-(t-s));s=r+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,r(34))},function(e,t,r){(function(t){(function(){var r,n,o,a,i,l;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(r()-i)/1e6},n=t.hrtime,a=(r=function(){var e;return 1e9*(e=n())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(51))},function(e,t,r){"use strict";var n=r(50),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"===typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"===typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function m(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var b=y.prototype=new m;b.constructor=y,n(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,a={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g;function T(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===n?"."+T(u,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),C(i,t,r,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(l=e[c],c);u+=C(l,t,r,s,i)}else if("function"===typeof(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,r,s=n+T(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function N(){var e=R.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error(p(267,e));var a=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return N().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,r){return N().useReducer(e,t,r)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,r){"use strict";var n=r(0),o=r(50),a=r(185);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),d=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},g={};function v(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null===t||"undefined"===typeof t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!p.call(g,e)||!p.call(h,e)&&(d.test(e)?g[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,T=60114,C=60109,O=60110,P=60112,R=60113,N=60120,L=60115,A=60116,I=60121,j=60128,M=60129,D=60130,q=60131;if("function"===typeof Symbol&&Symbol.for){var z=Symbol.for;E=z("react.element"),x=z("react.portal"),S=z("react.fragment"),_=z("react.strict_mode"),T=z("react.profiler"),C=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),R=z("react.suspense"),N=z("react.suspense_list"),L=z("react.memo"),A=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),q=z("react.legacy_hidden")}var U,F="function"===typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\\n( *(at )?)/);U=t&&t[1]||""}return"\\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"===typeof e.stack){for(var o=e.stack.split("\\n"),a=n.stack.split("\\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?V(e):""}function $(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case T:return"Profiler";case _:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return G(e.type);case I:return G(e._render);case A:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof r&&"function"===typeof r.get&&"function"===typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=Y(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Q(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Q(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Q(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Q(r)}}function ce(e,t){var r=Q(t.value),n=Q(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,ve,me=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,r){return null==t||"boolean"===typeof t||""===t?"":r||"number"!==typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=ke(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Pe=null;function Re(e){if(e=eo(e)){if("function"!==typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=ro(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Le(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Ie(e,t,r,n,o){return e(t,r,n,o)}function je(){}var Me=Ae,De=!1,qe=!1;function ze(){null===Oe&&null===Pe||(je(),Le())}function Ue(e,t){var r=e.stateNode;if(null===r)return null;var n=ro(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!==typeof r)throw Error(i(231,t,typeof r));return r}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function Ve(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var He=!1,We=null,$e=!1,Ge=null,Qe={onError:function(e){He=!0,We=e}};function Ye(e,t,r,n,o,a,i,l,u){He=!1,We=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Je(o),e;if(a===n)return Je(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var tt,rt,nt,ot,at=!1,it=[],lt=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function gt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,r,n,o,a),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zn(e.target);if(null!==t){var r=Ke(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Xe(r)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=eo(r))&&rt(t),e.blockedOn=r,!1;t.shift()}return!0}function bt(e,t,r){yt(e)&&r.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&it.shift()}null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),null!==ct&&yt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wt)))}function Et(e){function t(t){return kt(t,e)}if(0<it.length){kt(it[0],e);for(var r=1;r<it.length;r++){var n=it[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==ct&&kt(ct,e),st.forEach(t),ft.forEach(t),r=0;r<dt.length;r++)(n=dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<dt.length&&null===(r=dt[0]).blockedOn;)mt(r),null===r.blockedOn&&dt.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Tt={};function Ct(e){if(_t[e])return _t[e];if(!St[e])return e;var t,r=St[e];for(t in r)if(r.hasOwnProperty(t)&&t in Tt)return _t[e]=r[t];return e}f&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Ct("animationend"),Pt=Ct("animationiteration"),Rt=Ct("animationstart"),Nt=Ct("transitionend"),Lt=new Map,At=new Map,It=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(n,t),Lt.set(n,o),c(o,[n])}}(0,a.unstable_now)();var Mt=8;function Dt(e){if(0!==(1&e))return Mt=15,1;if(0!==(2&e))return Mt=14,2;if(0!==(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!==(32&e)?(Mt=11,32):0!==(t=192&e)?(Mt=10,t):0!==(256&e)?(Mt=9,256):0!==(t=3584&e)?(Mt=8,t):0!==(4096&e)?(Mt=7,4096):0!==(t=4186112&e)?(Mt=6,t):0!==(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!==(134217728&e)?(Mt=3,134217728):0!==(t=805306368&e)?(Mt=2,t):0!==(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function qt(e,t){var r=e.pendingLanes;if(0===r)return Mt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)n=a,o=Mt=15;else if(0!==(a=134217727&r)){var u=a&~i;0!==u?(n=Dt(u),o=Mt):0!==(l&=a)&&(n=Dt(l),o=Mt)}else 0!==(a=r&~i)?(n=Dt(a),o=Mt):0!==l&&(n=Dt(l),o=Mt);if(0===n)return 0;if(n=r&((0>(n=31-Ht(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0===(t&i)){if(Dt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Ht(t)),n|=e[r],t&=~o;return n}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Vt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Ht(t)]=r}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Gt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Yt=!0;function Kt(e,t,r,n){De||je();var o=Jt,a=De;De=!0;try{Ie(o,e,t,r,n)}finally{(De=a)||ze()}}function Xt(e,t,r,n){Qt(Gt,Jt.bind(null,e,t,r,n))}function Jt(e,t,r,n){var o;if(Yt)if((o=0===(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,r,n),it.push(e);else{var a=Zt(e,t,r,n);if(null===a)o&&gt(e,n);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,r,n),void it.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return lt=vt(lt,e,t,r,n,o),!0;case"dragenter":return ut=vt(ut,e,t,r,n,o),!0;case"mouseover":return ct=vt(ct,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,vt(ft.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;gt(e,n)}Ln(e,t,n,null,r)}}}function Zt(e,t,r,n){var o=Te(n);if(null!==(o=Zn(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ln(e,t,n,o,r),null}var er=null,tr=null,rr=null;function nr(){if(rr)return rr;var e,t,r=tr,n=r.length,o="value"in er?er.value:er.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return rr=o.slice(e,1<t?1-t:void 0)}function or(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ar(){return!0}function ir(){return!1}function lr(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ar:ir,this.isPropagationStopped=ir,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ar)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ar)},persist:function(){},isPersistent:ar}),t}var ur,cr,sr,fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dr=lr(fr),pr=o({},fr,{view:0,detail:0}),hr=lr(pr),gr=o({},pr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(ur=e.screenX-sr.screenX,cr=e.screenY-sr.screenY):cr=ur=0,sr=e),ur)},movementY:function(e){return"movementY"in e?e.movementY:cr}}),vr=lr(gr),mr=lr(o({},gr,{dataTransfer:0})),yr=lr(o({},pr,{relatedTarget:0})),br=lr(o({},fr,{animationName:0,elapsedTime:0,pseudoElement:0})),wr=lr(o({},fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kr=lr(o({},fr,{data:0})),Er={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Cr=lr(o({},pr,{key:function(e){if(e.key){var t=Er[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=or(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?or(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?or(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Or=lr(o({},gr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=lr(o({},pr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tr})),Rr=lr(o({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nr=lr(o({},gr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Lr=[9,13,27,32],Ar=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Mr=f&&(!Ar||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),qr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Lr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1;var Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Hr(e,t,r,n){Ne(n),0<(t=In(t,"onChange")).length&&(r=new dr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Wr=null,$r=null;function Gr(e){Tn(e,0)}function Qr(e){if(X(to(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(f){var Xr;if(f){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"===typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Wr&&(Wr.detachEvent("onpropertychange",tn),$r=Wr=null)}function tn(e){if("value"===e.propertyName&&Qr($r)){var t=[];if(Hr(t,$r,e,Te(e)),e=Gr,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,ze()}}}}function rn(e,t,r){"focusin"===e?(en(),$r=r,(Wr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr($r)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},un=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!un.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"===typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,vn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==vn||vn!==J(n)||("selectionStart"in(n=vn)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&cn(yn,n)||(yn=n,0<(n=In(mn,"onSelect")).length&&(t=new dr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var kn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),En=0;En<kn.length;En++)At.set(kn[En],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sn=new Set("cancel close invalid load scroll toggle".split(" ").concat(xn));function _n(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,l,u,c){if(Ye.apply(this,arguments),He){if(!He)throw Error(i(198));var s=We;He=!1,We=null,$e||($e=!0,Ge=s)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!==(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cn(e,t){var r=no(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var On="_reactListening"+Math.random().toString(36).slice(2);function Pn(e){e[On]||(e[On]=!0,l.forEach((function(t){Sn.has(t)||Rn(t,!1,e,null),Rn(t,!0,e,null)})))}function Rn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&Sn.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Nn(a,e,o,t),i.add(l))}function Nn(e,t,r,n){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Xt;break;default:o=Jt}r=o.bind(null,t,r,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Ln(e,t,r,n,o){var a=n;if(0===(1&t)&&0===(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Zn(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}!function(e,t,r){if(qe)return e(t,r);qe=!0;try{Me(e,t,r)}finally{qe=!1,ze()}}((function(){var n=a,o=Te(r),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dr,c=e;switch(e){case"keypress":if(0===or(r))break e;case"keydown":case"keyup":u=Cr;break;case"focusin":c="focus",u=yr;break;case"focusout":c="blur",u=yr;break;case"beforeblur":case"afterblur":u=yr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Ot:case Pt:case Rt:u=br;break;case Nt:u=Rr;break;case"scroll":u=hr;break;case"wheel":u=Nr;break;case"copy":case"cut":case"paste":u=wr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Or}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&(null!=(g=Ue(h,d))&&s.push(An(h,g,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!==(16&t)||!(c=r.relatedTarget||r.fromElement)||!Zn(c)&&!c[Xn])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?Zn(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=vr,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Or,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==c?l:to(c),(l=new s(g,h+"leave",u,r,o)).target=f,l.relatedTarget=p,g=null,Zn(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,g=s),f=g,u&&c)e:{for(d=c,h=0,p=s=u;p;p=jn(p))h++;for(p=0,g=d;g;g=jn(g))p++;for(;0<h-p;)s=jn(s),h--;for(;0<p-h;)d=jn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=jn(s),d=jn(d)}s=null}else s=null;null!==u&&Mn(i,l,u,s,!1),null!==c&&null!==f&&Mn(i,f,c,s,!0)}if("select"===(u=(l=n?to(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yr;else if(Vr(l))if(Kr)v=an;else{v=nn;var m=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Hr(i,v,r,o):(m&&m(e,l,n),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&oe(l,"number",l.value)),m=n?to(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(vn=m,mn=n,yn=null);break;case"focusout":yn=mn=vn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":wn(i,r,o)}var y;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Mr&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fr&&(y=nr()):(tr="value"in(er=o)?er.value:er.textContent,Fr=!0)),0<(m=In(n,b)).length&&(b=new kr(b,e,null,r,o),i.push({event:b,listeners:m}),y?b.data=y:null!==(y=Ur(r))&&(b.data=y))),(y=jr?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(qr=!0,Dr);case"textInput":return(e=t.data)===Dr&&qr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Ar&&zr(e,t)?(e=nr(),rr=tr=er=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))&&(0<(n=In(n,"onBeforeInput")).length&&(o=new kr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=y))}Tn(i,t)}))}function An(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ue(e,r))&&n.unshift(An(e,a,o)),null!=(a=Ue(e,t))&&n.push(An(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ue(r,a))&&i.unshift(An(r,u,l)):o||null!=(u=Ue(r,a))&&i.push(An(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var qn=null,zn=null;function Un(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Bn="function"===typeof setTimeout?setTimeout:void 0,Vn="function"===typeof clearTimeout?clearTimeout:void 0;function Hn(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Gn=0;var Qn=Math.random().toString(36).slice(2),Yn="__reactFiber$"+Qn,Kn="__reactProps$"+Qn,Xn="__reactContainer$"+Qn,Jn="__reactEvents$"+Qn;function Zn(e){var t=e[Yn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Xn]||r[Yn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=$n(e);null!==e;){if(r=e[Yn])return r;e=$n(e)}return t}r=(e=r).parentNode}return null}function eo(e){return!(e=e[Yn]||e[Xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ro(e){return e[Kn]||null}function no(e){var t=e[Jn];return void 0===t&&(t=e[Jn]=new Set),t}var oo=[],ao=-1;function io(e){return{current:e}}function lo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function uo(e,t){ao++,oo[ao]=e.current,e.current=t}var co={},so=io(co),fo=io(!1),po=co;function ho(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!==(e=e.childContextTypes)&&void 0!==e}function vo(){lo(fo),lo(so)}function mo(e,t,r){if(so.current!==co)throw Error(i(168));uo(so,t),uo(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!==typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},r,n)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,po=so.current,uo(so,e),uo(fo,fo.current),!0}function wo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(so),uo(so,e)):lo(fo),uo(fo,r)}var ko=null,Eo=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,To=a.unstable_shouldYield,Co=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Ao=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Mo=void 0!==Co?Co:function(){},Do=null,qo=null,zo=!1,Uo=Oo(),Fo=1e4>Uo?Oo:function(){return Oo()-Uo};function Bo(){switch(Po()){case Ro:return 99;case No:return 98;case Lo:return 97;case Ao:return 96;case Io:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Ro;case 98:return No;case 97:return Lo;case 96:return Ao;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Wo(e,t,r){return e=Vo(e),So(e,t,r)}function $o(){if(null!==qo){var e=qo;qo=null,_o(e)}Go()}function Go(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(Ro,$o),t}finally{zo=!1}}}var Qo=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Ko=io(null),Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Ko.current;lo(Ko),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function fa(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((n&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(u=t,p=r,g.tag){case 1:if("function"===typeof(h=g.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null===(u="function"===typeof(h=g.payload)?h.call(p,d,u):h)||void 0===u)break e;d=o({},d,u);break e;case 2:aa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,ql|=l,e.lanes=l,e.memoizedState=d}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!==typeof o)throw Error(i(191,o));o.call(n)}}}var pa=(new n.Component).refs;function ha(e,t,r,n){r=null===(r=r(n,t=e.memoizedState))||void 0===r?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.tag=1,a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=cu(),n=su(e),o=ua(r,n);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ca(e,o),fu(e,n,r)}};function va(e,t,r,n,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!cn(r,n)||!cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"===typeof a&&null!==a?a=oa(a):(o=go(t)?po:so.current,a=(n=null!==(n=t.contextTypes)&&void 0!==n)?ho(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function ba(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=pa,ia(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=oa(a):(a=go(t)?po:so.current,o.context=ho(e,a)),fa(e,r,o,n),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,r),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),fa(e,r,o,n),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,r){if(null!==(e=r.ref)&&"function"!==typeof e&&"object"!==typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Gu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ka(e,t,r),n.return=e,n):((n=Hu(r.type,r.key,r.props,null,e.mode,n)).ref=ka(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Qu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"===typeof t||"number"===typeof t)return(t=Gu(""+t,e.mode,r)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Hu(t.type,t.key,t.props,null,e.mode,r)).ref=ka(e,null,t),r.return=e,r;case x:return(t=Qu(t,e.mode,r)).return=e,t}if(wa(t)||B(t))return(t=Wu(t,e.mode,r,null)).return=e,t;Ea(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"===typeof r||"number"===typeof r)return null!==o?null:u(e,t,""+r,n);if("object"===typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===S?f(e,t,r.props.children,n,o):c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null}if(wa(r)||B(r))return null!==o?null:f(e,t,r,n,null);Ea(e,r)}return null}function h(e,t,r,n,o){if("string"===typeof n||"number"===typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"===typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===S?f(t,e,n.props.children,o,n.key):c(t,e,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(wa(n)||B(n))return f(t,e=e.get(r)||null,n,o,null);Ea(t,n)}return null}function g(o,i,l,u){for(var c=null,s=null,f=i,g=i=0,v=null;null!==f&&g<l.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,l[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===s?c=m:s.sibling=m,s=m,f=v}if(g===l.length)return r(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=n(o,f);g<l.length;g++)null!==(v=h(f,o,g,l[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=B(u);if("function"!==typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,g=l,v=l=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var b=p(o,g,y.value,c);if(null===b){null===g&&(g=m);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,g=m}if(y.done)return r(o,g),s;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(g=n(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var c="object"===typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var s="object"===typeof a&&null!==a;if(s)switch(a.$$typeof){case E:e:{for(s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===S){r(e,c.sibling),(n=o(c,a.props.children)).return=e,e=n;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(n=o(c,a.props)).ref=ka(e,c,a),n.return=e,e=n;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===S?((n=Wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,n,a),u.return=e,e=u)}return l(e);case x:e:{for(c=a.key;null!==n;){if(n.key===c){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Qu(a,e.mode,u)).return=e,e=n}return l(e)}if("string"===typeof a||"number"===typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Gu(a,e.mode,u)).return=e,e=n),l(e);if(wa(a))return g(e,n,a,u);if(B(a))return v(e,n,a,u);if(s&&Ea(e,a),"undefined"===typeof a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return r(e,n)}}var Sa=xa(!0),_a=xa(!1),Ta={},Ca=io(Ta),Oa=io(Ta),Pa=io(Ta);function Ra(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(uo(Pa,t),uo(Oa,e),uo(Ca,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ca),uo(Ca,t)}function La(){lo(Ca),lo(Oa),lo(Pa)}function Aa(e){Ra(Pa.current);var t=Ra(Ca.current),r=he(t,e.type);t!==r&&(uo(Oa,e),uo(Ca,r))}function Ia(e){Oa.current===e&&(lo(Ca),lo(Oa))}var ja=io(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,qa=null,za=!1;function Ua(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Fa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(za){var t=qa;if(t){var r=t;if(!Fa(e,t)){if(!(t=Wn(r.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ua(Da,r)}Da=e,qa=Wn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fn(t,e.memoizedProps))for(t=qa;t;)Ua(e,t),t=Wn(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){qa=Wn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}qa=null}}else qa=Da?Wn(e.stateNode.nextSibling):null;return!0}function Wa(){qa=Da=null,za=!1}var $a=[];function Ga(){for(var e=0;e<$a.length;e++)$a[e]._workInProgressVersionPrimary=null;$a.length=0}var Qa=k.ReactCurrentDispatcher,Ya=k.ReactCurrentBatchConfig,Ka=0,Xa=null,Ja=null,Za=null,ei=!1,ti=!1;function ri(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function oi(e,t,r,n,o,a){if(Ka=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:Ni,e=r(n,o),ti){a=0;do{if(ti=!1,!(25>a))throw Error(i(301));a+=1,Za=Ja=null,t.updateQueue=null,Qa.current=Li,e=r(n,o)}while(ti)}if(Qa.current=Pi,t=null!==Ja&&null!==Ja.next,Ka=0,Za=Ja=Xa=null,ei=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Za?Xa.memoizedState=Za=e:Za=Za.next=e,Za}function ii(){if(null===Ja){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===Za?Xa.memoizedState:Za.next;if(null!==t)Za=t,Ja=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===Za?Xa.memoizedState=Za=e:Za=Za.next=e}return Za}function li(e,t){return"function"===typeof t?t(e):t}function ui(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Ja,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=n):u=u.next=f,Xa.lanes|=s,ql|=s}c=c.next}while(null!==c&&c!==o);null===u?a=n:u.next=l,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function si(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=n,$a.push(t))),e)return r(t._source);throw $a.push(t),Error(i(350))}function fi(e,t,r,n){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,c=u.useState((function(){return si(o,t,r)})),s=c[1],f=c[0];c=Za;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,g=d.source;d=d.subscribe;var v=Xa;return e.memoizedState={refs:p,source:t,subscribe:n},u.useEffect((function(){p.getSnapshot=r,p.setSnapshot=s;var e=a(t._source);if(!ln(l,e)){e=r(t._source),ln(f,e)||(s(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;n[u]|=e,i&=~c}}}),[r,t,n]),u.useEffect((function(){return n(t._source,(function(){var e=p.getSnapshot,r=p.setSnapshot;try{r(e(t._source));var n=su(v);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(g,t)&&ln(d,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=s=Oi.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,r),c.memoizedState=c.baseState=f),f}function di(e,t,r){return fi(ii(),e,t,r)}function pi(e){var t=ai();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Oi.bind(null,Xa,e),[t.memoizedState,e]}function hi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ai().memoizedState=e}function vi(){return ii().memoizedState}function mi(e,t,r,n){var o=ai();Xa.flags|=e,o.memoizedState=hi(1|t,r,void 0,void 0===n?null:n)}function yi(e,t,r,n){var o=ii();n=void 0===n?null:n;var a=void 0;if(null!==Ja){var i=Ja.memoizedState;if(a=i.destroy,null!==n&&ni(n,i.deps))return void hi(t,r,a,n)}Xa.flags|=e,o.memoizedState=hi(1|t,r,a,n)}function bi(e,t){return mi(516,4,e,t)}function wi(e,t){return yi(516,4,e,t)}function ki(e,t){return yi(4,2,e,t)}function Ei(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,yi(4,2,Ei.bind(null,t,e),r)}function Si(){}function _i(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ci(e,t){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=r}}))}function Oi(e,t,r){var n=cu(),o=su(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)ti=ei=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,r);if(a.eagerReducer=i,a.eagerState=u,ln(u,l))return}catch(e){}fu(e,o,n)}}var Pi={readContext:oa,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Ri={readContext:oa,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:oa,useEffect:bi,useImperativeHandle:function(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,mi(4,2,Ei.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ai();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ai();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Xa,e),[n.memoizedState,e]},useRef:gi,useState:pi,useDebugValue:Si,useDeferredValue:function(e){var t=pi(e),r=t[0],n=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=pi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ai();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},fi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Gn++).toString(36))),Error(i(355))})),r=pi(t)[1];return 0===(2&Xa.mode)&&(Xa.flags|=516,hi(5,(function(){r("r:"+(Gn++).toString(36))}),void 0,null)),t}return pi(t="r:"+(Gn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ui,useRef:vi,useState:function(){return ui(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ui(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(li)[0]},unstable_isNewReconciler:!1},Li={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:vi,useState:function(){return ci(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Ai=k.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?_a(t,null,r,n):Sa(t,e.child,r,n)}function Mi(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!==typeof i||Bu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Hu(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qi(e,t,i,n,o,a))}return i=e.child,0===(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?rl(e,t,a):(t.flags|=1,(e=Vu(i,n)).ref=t.ref,e.return=t,t.child=e)}function qi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0===(a&o))return t.lanes=e.lanes,rl(e,t,a);0!==(16384&e.flags)&&(Ii=!0)}return Fi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0===(4&t.mode))t.memoizedState={baseLanes:0},bu(t,r);else{if(0===(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(t,e),null;t.memoizedState={baseLanes:0},bu(t,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,bu(t,n);return ji(e,t,o,r),t.child}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Fi(e,t,r,n,o){var a=go(r)?po:so.current;return a=ho(t,a),na(t,o),r=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Bi(e,t,r,n,o){if(go(r)){var a=!0;bo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),ba(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;"object"===typeof c&&null!==c?c=oa(c):c=ho(t,c=go(r)?po:so.current);var s=r.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==n||u!==c)&&ya(t,i,n,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,n,i,o),u=t.memoizedState,l!==n||d!==u||fo.current||aa?("function"===typeof s&&(ha(t,r,s,n),u=t.memoizedState),(l=aa||va(t,r,l,n,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4)):("function"===typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"===typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Yo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=r.contextType)&&null!==u?u=oa(u):u=ho(t,u=go(r)?po:so.current);var p=r.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,n,u),aa=!1,d=t.memoizedState,i.state=d,fa(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||fo.current||aa?("function"===typeof p&&(ha(t,r,p,n),h=t.memoizedState),(c=aa||va(t,r,c,n,d,h,u))?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),n=!1)}return Vi(e,t,r,n,a,o)}function Vi(e,t,r,n,o,a){Ui(e,t);var i=0!==(64&t.flags);if(!n&&!i)return o&&wo(t,r,!1),rl(e,t,a);n=t.stateNode,Ai.current=t;var l=i&&"function"!==typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=n.state,o&&wo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var Wi,$i,Gi,Qi={dehydrated:null,retryLane:0};function Yi(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!==(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!==(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(ja,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,e):"number"===typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,t.lanes=33554432,e):((r=$u({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=Ji(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Qi,o):(r=Xi(e,t,o.children,r),t.memoizedState=null,r))}function Ki(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0===(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),r=Wu(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Xi(e,t,r,n){var o=e.child;return e=o.sibling,r=Vu(o,{mode:"visible",children:r}),0===(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function Ji(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:r};return 0===(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=l,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=Vu(i,l),null!==e?n=Vu(e,n):(n=Wu(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}function Zi(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ra(e.return,t)}function el(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function tl(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!==(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!==(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,r);else if(19===e.tag)Zi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(uo(ja,n),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ma(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),el(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}el(t,!0,r,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),ql|=t.lanes,0!==(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Vu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Vu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function nl(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ol(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return La(),lo(fo),lo(so),Ga(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Ra(Pa.current);if(r=t.type,null!==e&&null!=t.stateNode)$i(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),Ha(t)){n=t.stateNode,r=t.type;var l=t.memoizedProps;switch(n[Yn]=t,n[Kn]=l,r){case"dialog":Cn("cancel",n),Cn("close",n);break;case"iframe":case"object":case"embed":Cn("load",n);break;case"video":case"audio":for(e=0;e<xn.length;e++)Cn(xn[e],n);break;case"source":Cn("error",n);break;case"img":case"image":case"link":Cn("error",n),Cn("load",n);break;case"details":Cn("toggle",n);break;case"input":ee(n,l),Cn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Cn("invalid",n);break;case"textarea":ue(n,l),Cn("invalid",n)}for(var c in Se(r,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"===typeof a?n.textContent!==a&&(e=["children",a]):"number"===typeof a&&n.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Cn("scroll",n));switch(r){case"input":K(n),ne(n,l,!0);break;case"textarea":K(n),se(n);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=c.createElement("div")).innerHTML="<script><\\/script>",e=e.removeChild(e.firstChild)):"string"===typeof n.is?e=c.createElement(r,{is:n.is}):(e=c.createElement(r),"select"===r&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,r),e[Yn]=t,e[Kn]=n,Wi(e,t),t.stateNode=e,c=_e(r,n),r){case"dialog":Cn("cancel",e),Cn("close",e),a=n;break;case"iframe":case"object":case"embed":Cn("load",e),a=n;break;case"video":case"audio":for(a=0;a<xn.length;a++)Cn(xn[a],e);a=n;break;case"source":Cn("error",e),a=n;break;case"img":case"image":case"link":Cn("error",e),Cn("load",e),a=n;break;case"details":Cn("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),Cn("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),Cn("invalid",e);break;case"textarea":ue(e,n),a=le(e,n),Cn("invalid",e);break;default:a=n}Se(r,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"===typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"===typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cn("scroll",e):null!=f&&w(e,l,f,c))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Q(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ie(e,!!n.multiple,l,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof a.onClick&&(e.onclick=Dn)}Un(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Gi(0,t,e.memoizedProps,n);else{if("string"!==typeof n&&null===t.stateNode)throw Error(i(166));r=Ra(Pa.current),Ra(Ca.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Yn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Yn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!==(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&ja.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Rl||0===(134217727&ql)&&0===(134217727&zl)||gu(Rl,Ll))),(n||r)&&(t.flags|=4),null);case 4:return La(),null===e&&Pn(t.stateNode.containerInfo),null;case 10:return ta(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(l=0!==(64&t.flags),null===(c=n.rendering))if(l)nl(n,!1);else{if(0!==jl||null!==e&&0!==(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,nl(n,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(l=r).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return uo(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Fo()>Vl&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),nl(n,!0),null===n.tail&&"hidden"===n.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-n.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432);n.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=n.last)?r.sibling=c:t.child=c,n.last=c)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fo(),r.sibling=null,t=ja.current,uo(ja,l?1&t|2:1&t),r):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!==(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),lo(fo),lo(so),Ga(),0!==(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return La(),null;case 10:return ta(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var r="",n=t;do{r+=$(n),n=n.return}while(n);var o=r}catch(e){o="\\nError generating stack: "+e.message+"\\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},$i=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Ra(Ca.current);var i,l=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),l=[];break;case"option":a=ae(e,a),n=ae(e,n),l=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),l=[];break;case"textarea":a=le(e,a),n=le(e,n),l=[];break;default:"function"!==typeof a.onClick&&"function"===typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in n){var s=n[f];if(c=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(r||(r={}),r[i]=s[i])}else r||(l||(l=[]),l.push(f,r)),r=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!==typeof s&&"number"!==typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Cn("scroll",e),l||c===s||(l=[])):"object"===typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}r&&(l=l||[]).push("style",r);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Gi=function(e,t,r,n){r!==n&&(t.flags|=4)};var ul="function"===typeof WeakMap?WeakMap:Map;function cl(e,t,r){(r=ua(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Gl||(Gl=!0,Ql=n),ll(0,t)},r}function sl(e,t,r){(r=ua(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"===typeof n){var o=t.value;r.payload=function(){return ll(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(r.callback=function(){"function"!==typeof n&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var fl="function"===typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function hl(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3===(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!==(4&(o=o.tag))&&0!==(1&o)&&(Iu(r,e),Au(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Un(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Et(r)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function gl(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"===typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,n.style.display=ke("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vl(e,t){if(Eo&&"function"===typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!==(4&n))Iu(t,r);else{n=t;try{o()}catch(e){Du(n,e)}}r=r.next}while(r!==e)}break;case 1:if(dl(t),"function"===typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yl(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?wl(e,r,t):kl(e,r,t)}function wl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!==(r=r._reactRootContainer)&&void 0!==r||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(wl(e,t,r),e=e.sibling;null!==e;)wl(e,t,r),e=e.sibling}function kl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(kl(e,t,r),e=e.sibling;null!==e;)kl(e,t,r),e=e.sibling}function El(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}n?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3===(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Kn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),_e(e,o),t=_e(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(r,u):"dangerouslySetInnerHTML"===l?me(r,u):"children"===l?ye(r,u):w(r,l,u,t)}switch(e){case"input":re(r,n);break;case"textarea":ce(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,Et(r.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),gl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void gl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new fl),t.forEach((function(t){var n=zu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Tl=Math.ceil,Cl=k.ReactCurrentDispatcher,Ol=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,Ll=0,Al=0,Il=io(0),jl=0,Ml=null,Dl=0,ql=0,zl=0,Ul=0,Fl=null,Bl=0,Vl=1/0;function Hl(){Vl=Fo()+500}var Wl,$l=null,Gl=!1,Ql=null,Yl=null,Kl=!1,Xl=null,Jl=90,Zl=[],eu=[],tu=null,ru=0,nu=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function cu(){return 0!==(48&Pl)?Fo():-1!==ou?ou:ou=Fo()}function su(e){if(0===(2&(e=e.mode)))return 1;if(0===(4&e))return 99===Bo()?1:2;if(0===au&&(au=Dl),0!==Qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=au;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!==(4&Pl)&&98===e?e=Ut(12,au):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au),e}function fu(e,t,r){if(50<ru)throw ru=0,nu=null,Error(i(185));if(null===(e=du(e,t)))return null;Vt(e,t,r),e===Rl&&(zl|=t,4===jl&&gu(e,Ll));var n=Bo();1===t?0!==(8&Pl)&&0===(48&Pl)?vu(e):(pu(e,r),0===Pl&&(Hl(),$o())):(0===(4&Pl)||98!==n&&99!==n||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,r)),Fl=e}function du(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pu(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=a[u];if(-1===s){if(0===(c&n)||0!==(c&o)){s=t,Dt(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(n=qt(e,e===Rl?Ll:0),t=Mt,0===n)null!==r&&(r!==jo&&_o(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&_o(r)}15===t?(r=vu.bind(null,e),null===Do?(Do=[r],qo=So(Ro,Go)):Do.push(r),r=jo):14===t?r=Wo(99,vu.bind(null,e)):r=Wo(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),hu.bind(null,e)),e.callbackPriority=t,e.callbackNode=r}}function hu(e){if(ou=-1,iu=au=0,0!==(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var r=qt(e,e===Rl?Ll:0);if(0===r)return null;var n=r,o=Pl;Pl|=16;var a=xu();for(Rl===e&&Ll===n||(Hl(),ku(e,n));;)try{Tu();break}catch(t){Eu(e,t)}if(ea(),Cl.current=a,Pl=o,null!==Nl?n=0:(Rl=null,Ll=0,n=jl),0!==(Dl&zl))ku(e,0);else if(0!==n){if(2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=zt(e))&&(n=Su(e,r))),1===n)throw t=Ml,ku(e,0),gu(e,r),pu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(gu(e,r),(62914560&r)===r&&10<(n=Bl+500-Fo())){if(0!==qt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){cu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Bn(Pu.bind(null,e),n);break}Pu(e);break;case 4:if(gu(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var l=31-Ht(r);a=1<<l,(l=n[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Fo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)){e.timeoutHandle=Bn(Pu.bind(null,e),r);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return pu(e,Fo()),e.callbackNode===t?hu.bind(null,e):null}function gu(e,t){for(t&=~Ul,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ht(t),n=1<<r;e[r]=-1,t&=~n}}function vu(e){if(0!==(48&Pl))throw Error(i(327));if(Lu(),e===Rl&&0!==(e.expiredLanes&Ll)){var t=Ll,r=Su(e,t);0!==(Dl&zl)&&(r=Su(e,t=qt(e,t)))}else r=Su(e,t=qt(e,0));if(0!==e.tag&&2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=zt(e))&&(r=Su(e,t))),1===r)throw r=Ml,ku(e,0),gu(e,t),pu(e,Fo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,Fo()),null}function mu(e,t){var r=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function yu(e,t){var r=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function bu(e,t){uo(Il,Al),Al|=t,Dl|=t}function wu(){Al=Il.current,lo(Il)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Vn(r)),null!==Nl)for(r=Nl.return;null!==r;){var n=r;switch(n.tag){case 1:null!==(n=n.type.childContextTypes)&&void 0!==n&&vo();break;case 3:La(),lo(fo),lo(so),Ga();break;case 5:Ia(n);break;case 4:La();break;case 13:case 19:lo(ja);break;case 10:ta(n);break;case 23:case 24:wu()}r=r.return}Rl=e,Nl=Vu(e.current,null),Ll=Al=Dl=t,jl=0,Ml=null,Ul=zl=ql=0}function Eu(e,t){for(;;){var r=Nl;try{if(ea(),Qa.current=Pi,ei){for(var n=Xa.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ei=!1}if(Ka=0,Za=Ja=Xa=null,ti=!1,Ol.current=null,null===r||null===r.return){jl=1,Ml=t,Nl=null;break}e:{var a=e,i=r.return,l=r,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===typeof u&&"function"===typeof u.then){var c=u;if(0===(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!==(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var g=d.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var m=new Set;m.add(c),d.updateQueue=m}else v.add(c);if(0===(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,ca(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=qu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,cl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0===(64&d.flags)&&("function"===typeof k.getDerivedStateFromError||null!==E&&"function"===typeof E.componentDidCatch&&(null===Yl||!Yl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,sl(d,a,t));break e}}d=d.return}while(null!==d)}Ou(r)}catch(e){t=e,Nl===r&&null!==r&&(Nl=r=r.return);continue}break}}function xu(){var e=Cl.current;return Cl.current=Pi,null===e?Pi:e}function Su(e,t){var r=Pl;Pl|=16;var n=xu();for(Rl===e&&Ll===t||ku(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(ea(),Pl=r,Cl.current=n,null!==Nl)throw Error(i(261));return Rl=null,Ll=0,jl}function _u(){for(;null!==Nl;)Cu(Nl)}function Tu(){for(;null!==Nl&&!To();)Cu(Nl)}function Cu(e){var t=Wl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Ou(e):Nl=t,Ol.current=null}function Ou(e){var t=e;do{var r=t.alternate;if(e=t.return,0===(2048&t.flags)){if(null!==(r=ol(r,t,Al)))return void(Nl=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!==(1073741824&Al)||0===(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0===(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=al(t)))return r.flags&=2047,void(Nl=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===jl&&(jl=5)}function Pu(e){var t=Bo();return Ho(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Lu()}while(null!==Xl);if(0!==(48&Pl))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Ht(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==tu&&0===(24&n)&&tu.has(e)&&tu.delete(e),e===Rl&&(Nl=Rl=null,Ll=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Pl,Pl|=32,Ol.current=null,qn=Yt,hn(l=pn())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,g=0,v=l,m=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)m=v,v=y;for(;;){if(v===l)break t;if(m===u&&++h===a&&(d=f),m===c&&++g===s&&(p=f),null!==(y=v.nextSibling))break;m=(v=m).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zn={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,$l=n;do{try{Nu()}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);lu=null,$l=n;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl($l),$l.flags&=-3;break;case 6:bl($l),$l.flags&=-3,xl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,xl($l.alternate,$l);break;case 4:xl($l.alternate,$l);break;case 8:El(l,u=$l);var E=u.alternate;ml(u),null!==E&&ml(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=zn,w=pn(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==l&&hn(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=fn(b,E),a=fn(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!qn,zn=qn=null,e.current=r,$l=n;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&hl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var _=$l.stateNode;switch($l.tag){case 5:w=_;break;default:w=_}"function"===typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),Pl=o}else e.current=r;if(Kl)Kl=!1,Xl=e,Jl=t;else for($l=n;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(n=e.pendingLanes)&&(Yl=null),1===n?e===nu?ru++:(ru=0,nu=e):ru=0,r=r.stateNode,Eo&&"function"===typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(ko,r,void 0,64===(64&r.current.flags))}catch(e){}if(pu(e,Fo()),Gl)throw Gl=!1,e=Ql,Ql=null,e;return 0!==(8&Pl)||$o(),null}function Nu(){for(;null!==$l;){var e=$l.alternate;uu||null===lu||(0!==(8&$l.flags)?et($l,lu)&&(uu=!0):13===$l.tag&&_l(e,$l)&&et($l,lu)&&(uu=!0));var t=$l.flags;0!==(256&t)&&pl(e,$l),0===(512&t)||Kl||(Kl=!0,Wo(97,(function(){return Lu(),null}))),$l=$l.nextEffect}}function Lu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,ju)}return!1}function Au(e,t){Zl.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!==(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var r=eu;eu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],l=o.destroy;if(o.destroy=void 0,"function"===typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(r=Zl,Zl=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,$o(),!0}function Mu(e,t,r){ca(e,t=cl(0,t=il(r,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Mu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Mu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"===typeof r.type.getDerivedStateFromError||"function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n))){var o=sl(r,e=il(t,e),1);if(ca(r,o),o=cu(),null!==(r=du(r,1)))Vt(r,1,o),pu(r,o);else if("function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function qu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&r,Rl===e&&(Ll&r)===r&&(4===jl||3===jl&&(62914560&Ll)===Ll&&500>Fo()-Bl?ku(e,0):Ul|=r),pu(e,t)}function zu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(0===(2&(t=e.mode))?t=1:0===(4&t)?t=99===Bo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),r=cu(),null!==(e=du(e,t))&&(Vt(e,t,r),pu(e,r))}function Uu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Uu(e,t,r,n)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Hu(e,t,r,n,o,a){var l=2;if(n=e,"function"===typeof e)Bu(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case S:return Wu(r.children,o,a,t);case M:l=8,o|=16;break;case _:l=8,o|=1;break;case T:return(e=Fu(12,r,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case R:return(e=Fu(13,r,t,o)).type=R,e.elementType=R,e.lanes=a,e;case N:return(e=Fu(19,r,t,o)).elementType=N,e.lanes=a,e;case D:return $u(r,o,a,t);case q:return(e=Fu(24,r,t,o)).elementType=q,e.lanes=a,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case P:l=11;break e;case L:l=14;break e;case A:l=16,n=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fu(l,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Wu(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function $u(e,t,r,n){return(e=Fu(23,e,n,t)).elementType=D,e.lanes=r,e}function Gu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function Qu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yu(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Xu(e,t,r,n){var o=t.current,a=cu(),l=su(o);e:if(r){t:{if(Ke(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var c=r.type;if(go(c)){r=yo(r,c,u);break e}}r=u}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),fu(o,l,a),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function ec(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}function tc(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new Yu(e,t,null!=r&&!0===r.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ia(t),e[Xn]=r.current,Pn(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nc(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Ju(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new tc(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Ju(i);u.call(e)}}yu((function(){Xu(t,i,e,o)}))}return Ju(i)}function oc(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(i(200));return Ku(e,t,null,r)}Wl=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Ii=!0;else{if(0===(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Aa(t);break;case 1:go(t.type)&&bo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(r&t.child.childLanes)?Yi(e,t,r):(uo(ja,1&ja.current),null!==(t=rl(e,t,r))?t.sibling:null);uo(ja,1&ja.current);break;case 19:if(n=0!==(r&t.childLanes),0!==(64&e.flags)){if(n)return tl(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return rl(e,t,r)}Ii=0!==(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,so.current),na(t,r),o=oi(null,t,n,e,o,r),t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"===typeof l&&ha(t,n,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,ba(t,n,e,r),t=Vi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"===typeof e)return Bu(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,r);break e;case 1:t=Bi(null,t,o,e,r);break e;case 11:t=Mi(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Fi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Bi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,n,null,r),(n=t.memoizedState.element)===o)Wa(),t=rl(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(qa=Wn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],$a.push(a);for(r=_a(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),Wa();t=t.child}return t;case 5:return Aa(t),null===e&&Ba(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fn(n,o)?l=null:null!==a&&Fn(n,a)&&(t.flags|=16),Ui(e,t),ji(e,t,l,r),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Sa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Mi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(uo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=ln(u,a)?0:0|("function"===typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=rl(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===n&&0!==(s.observedBits&a)){1===u.tag&&((s=ua(-1,r&-r)).tag=2,ca(u,s)),u.lanes|=r,null!==(s=u.alternate)&&(s.lanes|=r),ra(u.return,r),c.lanes|=r;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),n,r);case 15:return qi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,bo(t)):e=!1,na(t,r),ma(t,n,o),ba(t,n,o,r),Vi(null,t,n,!0,e,r);case 19:return tl(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Xn]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},rt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),r=su(e);fu(e,r,t),ec(e,r)}},ot=function(e,t){return t()},Ce=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=ro(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":ce(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ae=mu,Ie=function(e,t,r,n,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Pl=a)&&(Hl(),$o())}},je=function(){0===(49&Pl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Fo())}))}$o()}(),Lu())},Me=function(e,t){var r=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}};var ac={Events:[eo,to,ro,Ne,Le,Lu,{current:!1}]},ic={findFiberByHostInstance:Zn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof{}){var uc={};if(!uc.isDisabled&&uc.supportsFiber)try{ko=uc.inject(lc),Eo=uc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var r=Pl;if(0!==(48&r))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=r,$o()}},t.hydrate=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!0,r)},t.render=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){nc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xn]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!rc(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return nc(e,t,r,!1,n)},t.version="17.0.1"},function(e,t,r){"use strict";e.exports=r(186)},function(e,t,r){"use strict";var n,o,a,i;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"===typeof window||"function"!==typeof MessageChannel){var s=null,f=null,d=function e(){if(null!==s)try{var r=t.unstable_now();s(!0,r),s=null}catch(t){throw setTimeout(e,0),t}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!==typeof console){var g=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!==typeof g&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();w=e+b;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},o=function(e,r){y=p((function(){e(t.unstable_now())}),r)},a=function(){h(y),y=-1}}function x(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>T(i,r))void 0!==u&&0>T(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>T(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var C=[],O=[],P=1,R=null,N=3,L=!1,A=!1,I=!1;function j(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,x(C,t)}t=S(O)}}function M(e){if(I=!1,j(e),!A)if(null!==S(C))A=!0,n(D);else{var t=S(O);null!==t&&o(M,t.startTime-e)}}function D(e,r){A=!1,I&&(I=!1,a()),L=!0;var n=N;try{for(j(r),R=S(C);null!==R&&(!(R.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=R.callback;if("function"===typeof i){R.callback=null,N=R.priorityLevel;var l=i(R.expirationTime<=r);r=t.unstable_now(),"function"===typeof l?R.callback=l:R===S(C)&&_(C),j(r)}else _(C);R=S(C)}if(null!==R)var u=!0;else{var c=S(O);null!==c&&o(M,c.startTime-r),u=!1}return u}finally{R=null,N=n,L=!1}}var q=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||L||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var r=N;N=t;try{return e()}finally{N=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=N;N=e;try{return t()}finally{N=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch("object"===typeof i&&null!==i?i="number"===typeof(i=i.delay)&&0<i?l+i:l:i=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(O,e),null===S(C)&&e===S(O)&&(I?a():I=!0,o(M,i-l))):(e.sortIndex=u,x(C,e),A||L||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var r=N;N=t;try{return e.apply(this,arguments)}finally{N=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},a={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"\'&]/g,(function(e){return a[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];i?(r+="&"+i+";",n++):(r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],a={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],l=o[e];a[r]=String.fromCharCode(l),i[l]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),a=i[o];r+=a?"&"+a+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o={},a={};!function(e,t){var r=n.length;for(;r--;){var o=n[r],a=o[0],i=o[1],l=i[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;if(u&&(c=t[l]=t[l]||{}),i[1]){var s=i[1];e[a]=String.fromCharCode(l)+String.fromCharCode(s),u&&(c[s]=a)}else e[a]=String.fromCharCode(l),u&&(c[""]=a)}}(o,a);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=a[e.charCodeAt(n)];if(o){var i=o[e.charCodeAt(n+1)];if(i?n++:i=o[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];if(i){var l=i[e.charCodeAt(n+1)];if(l?n++:l=i[""],l){r+="&"+l+";",n++;continue}}r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},function(e,t,r){"use strict";var n=r(52),o=r(193);Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=b,t.getChalk=w,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b(t)){var r=w(t),n=f(r);return y(n,e)}return e};var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(195)),l=r(196),u=(a=r(199))&&a.__esModule?a:{default:a};function c(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s=new Set(["as","async","from","get","of","set"]);function f(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}var d,p=/\\r\\n|[\\n\\r\\u2028\\u2029]/,h=/^[()[\\]{}]$/,g=i.matchToToken,v=/^[a-z][\\w-]*$/i,m=function(e,t,r){if("name"===e.type){if((0,l.isKeyword)(e.value)||(0,l.isStrictReservedWord)(e.value,!0)||s.has(e.value))return"keyword";if(v.test(e.value)&&("<"===r[t-1]||"</"==r.substr(t-2,2)))return"jsxIdentifier";if(e.value[0]!==e.value[0].toLowerCase())return"capitalized"}return"punctuator"===e.type&&h.test(e.value)?"bracket":"invalid"!==e.type||"@"!==e.value&&"#"!==e.value?e.type:"punctuator"};function y(e,t){var r,o="",a=n(d(t));try{var i=function(){var t=r.value,n=t.type,a=t.value,i=e[n];o+=i?a.split(p).map((function(e){return i(e)})).join("\\n"):a};for(a.s();!(r=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}return o}function b(e){return u.default.supportsColor||e.forceColor}function w(e){var t=u.default;return e.forceColor&&(t=new u.default.constructor({enabled:!0,level:1})),t}d=o.mark((function e(t){var r,n;return o.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=i.default.exec(t))){e.next=6;break}return n=g(r),e.next=4,{type:m(n,r.index,t),value:n.value};case 4:e.next=0;break;case 6:case"end":return e.stop()}}),e)}))},function(e,t,r){var n=r(192);e.exports=function(e,t){if(e){if("string"===typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},function(e,t,r){e.exports=r(194)},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return R()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var l=_(i,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&n.call(k,a)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,l){var u=s(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a \'throw\' method")}return g}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:R}}function R(){return{value:t,done:!0}}return m.prototype=E.constructor=y,y.constructor=m,m.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(c(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return l.type="throw",l.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return n.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return n.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return n.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var n=r(197),o=r(198)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=s,t.isIdentifierChar=f,t.isIdentifierName=function(e){for(var t=!0,r=0,n=Array.from(e);r<n.length;r++){var o=n[r].codePointAt(0);if(t){if(!s(o))return!1;t=!1}else if(!f(o))return!1}return!t};var n="\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",o="‌‍\xb7̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",a=new RegExp("["+n+"]"),i=new RegExp("["+n+o+"]");n=o=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){for(var r=65536,n=0,o=t.length;n<o;n+=2){if((r+=t[n])>e)return!1;if((r+=t[n+1])>=e)return!0}return!1}function s(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&a.test(String.fromCharCode(e)):c(e,l)))}function f(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,l)||c(e,u))))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=u,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=s,t.isStrictBindReservedWord=function(e,t){return c(e,t)||s(e)},t.isKeyword=function(e){return a.has(e)};var n=["implements","interface","let","package","private","protected","public","static","yield"],o=["eval","arguments"],a=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(n),l=new Set(o);function u(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return u(e,t)||i.has(e)}function s(e){return l.has(e)}},function(e,t,r){"use strict";(function(t){var n=r(52),o=r(200),a=r(201),i=r(206).stdout,l=r(207),u="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),c=["ansi","ansi","ansi256","ansi16m"],s=new Set(["gray"]),f=Object.create(null);function d(e,t){t=t||{};var r=i?i.level:0;e.level=void 0===t.level?r:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function p(e){if(!this||!(this instanceof p)||this.template){var t={};return d(t,e),t.template=function(){var e=[].slice.call(arguments);return T.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,p.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=p,t.template}d(this,e)}u&&(a.blue.open="\x1b[94m");for(var h=function(){var e=v[g];a[e].closeRe=new RegExp(o(a[e].close),"g"),f[e]={get:function(){var t=a[e];return S.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},g=0,v=Object.keys(a);g<v.length;g++)h();f.visible={get:function(){return S.call(this,this._styles||[],!0,"visible")}},a.color.closeRe=new RegExp(o(a.color.close),"g");for(var m=function(){var e=b[y];if(s.has(e))return"continue";f[e]={get:function(){var t=this.level;return function(){var r=a.color[c[t]][e].apply(null,arguments),n={open:r,close:a.color.close,closeRe:a.color.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},y=0,b=Object.keys(a.color.ansi);y<b.length;y++)m();a.bgColor.closeRe=new RegExp(o(a.bgColor.close),"g");for(var w=function(){var e=E[k];if(s.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);f[t]={get:function(){var t=this.level;return function(){var r=a.bgColor[c[t]][e].apply(null,arguments),n={open:r,close:a.bgColor.close,closeRe:a.bgColor.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},k=0,E=Object.keys(a.bgColor.ansi);k<E.length;k++)w();var x=Object.defineProperties((function(){}),f);function S(e,t,r){var n=function e(){return _.apply(e,arguments)};n._styles=e,n._empty=t;var o=this;return Object.defineProperty(n,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(n,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),n.hasGrey=this.hasGrey||"gray"===r||"grey"===r,n.__proto__=x,n}function _(){var e=arguments,t=e.length,r=String(arguments[0]);if(0===t)return"";if(t>1)for(var o=1;o<t;o++)r+=" "+e[o];if(!this.enabled||this.level<=0||!r)return this._empty?"":r;var i=a.dim.open;u&&this.hasGrey&&(a.dim.open="");var l,c=n(this._styles.slice().reverse());try{for(c.s();!(l=c.n()).done;){var s=l.value;r=(r=s.open+r.replace(s.closeRe,s.open)+s.close).replace(/\\r?\\n/g,"".concat(s.close,"$&").concat(s.open))}}catch(e){c.e(e)}finally{c.f()}return a.dim.open=i,r}function T(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],o=1;o<t.length;o++)n.push(String(r[o-1]).replace(/[{}\\\\]/g,"\\\\$&")),n.push(String(t.raw[o]));return l(e,n.join(""))}Object.defineProperties(p.prototype,f),e.exports=p(),e.exports.supportsColor=i,e.exports.default=e.exports}).call(this,r(51))},function(e,t,r){"use strict";var n=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(n,"\\\\$&")}},function(e,t,r){"use strict";(function(e){var t=r(203),n=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(n+r,"m")}},o=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";5;").concat(n,"m")}},a=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";2;").concat(n[0],";").concat(n[1],";").concat(n[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,r={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};r.color.grey=r.color.gray;for(var i=0,l=Object.keys(r);i<l.length;i++){for(var u=l[i],c=r[u],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];r[d]={open:"\x1b[".concat(p[0],"m"),close:"\x1b[".concat(p[1],"m")},c[d]=r[d],e.set(p[0],p[1])}Object.defineProperty(r,u,{value:c,enumerable:!1}),Object.defineProperty(r,"codes",{value:e,enumerable:!1})}var h=function(e){return e},g=function(e,t,r){return[e,t,r]};r.color.close="\x1b[39m",r.bgColor.close="\x1b[49m",r.color.ansi={ansi:n(h,0)},r.color.ansi256={ansi256:o(h,0)},r.color.ansi16m={rgb:a(g,0)},r.bgColor.ansi={ansi:n(h,10)},r.bgColor.ansi256={ansi256:o(h,10)},r.bgColor.ansi16m={rgb:a(g,10)};for(var v=0,m=Object.keys(t);v<m.length;v++){var y=m[v];if("object"===typeof t[y]){var b=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in b&&(r.color.ansi[y]=n(b.ansi16,0),r.bgColor.ansi[y]=n(b.ansi16,10)),"ansi256"in b&&(r.color.ansi256[y]=o(b.ansi256,0),r.bgColor.ansi256[y]=o(b.ansi256,10)),"rgb"in b&&(r.color.ansi16m[y]=a(b.rgb,0),r.bgColor.ansi16m[y]=a(b.rgb,10))}}return r}})}).call(this,r(202)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(87),o=r(205),a={};Object.keys(n).forEach((function(e){a[e]={},Object.defineProperty(a[e],"channels",{value:n[e].channels}),Object.defineProperty(a[e],"labels",{value:n[e].labels});var t=o(e);Object.keys(t).forEach((function(r){var n=t[r];a[e][r]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"===typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),a[e][r].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))})),e.exports=a},function(e,t,r){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,r){var n=r(87);function o(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,o=0;o<r;o++)e[t[o]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var o=r.pop(),a=Object.keys(n[o]),i=a.length,l=0;l<i;l++){var u=a[l],c=t[u];-1===c.distance&&(c.distance=t[o].distance+1,c.parent=o,r.unshift(u))}return t}function a(e,t){return function(r){return t(e(r))}}function i(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}e.exports=function(e){for(var t=o(e),r={},n=Object.keys(t),a=n.length,l=0;l<a;l++){var u=n[l];null!==t[u].parent&&(r[u]=i(u,t))}return r}},function(e,t,r){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,r){"use strict";var n=r(52),o=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,a=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,i=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,l=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,u=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e","\x1b"],["a","\x07"]]);function c(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):u.get(e)||e}function s(e,t){var r,o,a=[],u=t.trim().split(/\\s*,\\s*/g),s=n(u);try{for(s.s();!(o=s.n()).done;){var f=o.value;if(isNaN(f)){if(!(r=f.match(i)))throw new Error("Invalid Chalk template style argument: ".concat(f," (in style \'").concat(e,"\')"));a.push(r[2].replace(l,(function(e,t,r){return t?c(t):r})))}else a.push(Number(f))}}catch(e){s.e(e)}finally{s.f()}return a}function f(e){a.lastIndex=0;for(var t,r=[];null!==(t=a.exec(e));){var n=t[1];if(t[2]){var o=s(n,t[2]);r.push([n].concat(o))}else r.push([n])}return r}function d(e,t){var r,o={},a=n(t);try{for(a.s();!(r=a.n()).done;){var i,l=r.value,u=n(l.styles);try{for(u.s();!(i=u.n()).done;){var c=i.value;o[c[0]]=l.inverse?null:c.slice(1)}}catch(e){u.e(e)}finally{u.f()}}}catch(e){a.e(e)}finally{a.f()}for(var s=e,f=0,d=Object.keys(o);f<d.length;f++){var p=d[f];if(Array.isArray(o[p])){if(!(p in s))throw new Error("Unknown Chalk style: ".concat(p));s=o[p].length>0?s[p].apply(s,o[p]):s[p]}}return s}e.exports=function(e,t){var r=[],n=[],a=[];if(t.replace(o,(function(t,o,i,l,u,s){if(o)a.push(c(o));else if(l){var p=a.join("");a=[],n.push(0===r.length?p:d(e,r)(p)),r.push({inverse:i,styles:f(l)})}else if(u){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(d(e,r)(a.join(""))),a=[],r.pop()}else a.push(s)})),n.push(a.join("")),r.length>0){var i="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(i)}return n.join("")}},function(e,t,r){"use strict";r.r(t),r.d(t,"ThemeContext",(function(){return me}));r(90);var n=r(0),o=r.n(n),a=r(53),i=r.n(a),l=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},u=null;var c=function(e){var t=Object(n.useContext)(me),r=e.shortcutHandler;return Object(n.useEffect)((function(){var e=function(e){r&&r(e.key)};return window.addEventListener("keydown",e),u&&u.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),u&&u.removeEventListener("keydown",e)}}),[r]),o.a.createElement("div",{style:l(t),ref:function(e){if(e){var t=e.ownerDocument;u=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:s(t)},e.line1,o.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},y={fontFamily:"Consolas, Menlo, monospace"};var b=function(e){var t=e.main,r=e.codeHTML,a=Object(n.useContext)(me),i=v(v({},m),{},{backgroundColor:a.primaryPreBackground,color:a.primaryPreColor}),l=v(v({},m),{},{backgroundColor:a.secondaryPreBackground,color:a.secondaryPreColor}),u=t?i:l,c={__html:r};return o.a.createElement("pre",{style:u},o.a.createElement("code",{style:y,dangerouslySetInnerHTML:c}))},w=r(33),k=r.n(w),E=new(r(88).AllHtmlEntities),x=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},S={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var _=function(e,t){for(var r=(new k.a).ansiToJson(E.encode(e),{use_classes:!0}),n="",o=!1,a=0;a<r.length;++a)for(var i=r[a],l=i.content,u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),e}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){return(D="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){return!t||"object"!==D(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function z(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=M(e);if(t){var o=M(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return q(this,r)}}var U=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var F=function(e){var t=e.close,r=Object(n.useContext)(me);return o.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:U(r)},"\xd7")},B={marginBottom:"0.5rem"},V={marginRight:"1em"},H={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(n.useContext)(me),r=e.currentError,a=e.totalErrors,i=e.previous,l=e.next;return o.a.createElement("div",{style:B},o.a.createElement("span",{style:V},o.a.createElement("button",{onClick:i,style:W(t)},"←"),o.a.createElement("button",{onClick:l,style:$(t)},"→")),"".concat(r," of ").concat(a," errors on the page"))};function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{n||null==l.return||l.return()}finally{if(o)throw a}}return r}}(e,t)||function(e,t){if(e){if("string"===typeof e)return Q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var X=r(89);var J=function(e){var t=Object(n.useContext)(me),r=e.lines,a=e.lineNum,i=e.columnNum,l=e.contextSize,u=e.main,c=[],s=1/0;r.forEach((function(e){var t=e.content,r=t.match(/^\\s*/);""!==t&&(s=r&&r[0]?Math.min(s,r[0].length):0)})),r.forEach((function(e){var t=e.content,r=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[r-1]=t}));var f=Object(X.codeFrameColumns)(c.join("\\n"),{start:{line:a,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:l,linesBelow:l}),d=_(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,r=0;r<t.length;++r){var n=t[r];if("span"===n.tagName.toLowerCase()){var o=n.innerText;null!=o&&"|^"===o.replace(/\\s/g,"")&&(n.style.position="absolute",K(e,n))}}}(p);var h=p.childNodes;e:for(var g=0;g<h.length;++g)for(var v=h[g].childNodes,m=0;m<v.length;++m){var y=v[m].innerText;if(null!=y&&-1!==y.indexOf(" "+a+" |"))break e}return o.a.createElement(b,{main:u,codeHTML:p.innerHTML})};function Z(e,t,r,n,o,a,i){var l;if(!i&&e&&"number"===typeof t){var u=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);l=u&&u[1]?u[1]:e,l+=":"+t,r&&(l+=":"+r)}else n&&"number"===typeof o?(l=n+":"+o,a&&(l+=":"+a)):l="unknown";return l.replace("webpack://",".")}var ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!1),2),a=r[0],i=r[1],l=function(){var t=e.frame,r=t._originalFileName,n=t._originalLineNumber;return r?-1!==r.trim().indexOf(" ")?null:{fileName:r,lineNumber:n||1}:null},u=function(){var t=l();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,g=c.columnNumber,v=c._scriptCode,m=c._originalFileName,y=c._originalLineNumber,b=c._originalColumnNumber,w=c._originalScriptCode,k=c.getFunctionName(),E=Z(m,y,b,p,h,g,a),x=null;d&&(a&&v&&0!==v.length&&null!=h?x={lines:v,lineNum:h,columnNum:g,contextSize:s,main:f}:!a&&w&&0!==w.length&&null!=y&&(x={lines:w,lineNum:y,columnNum:b,contextSize:s,main:f}));var S=null!==l()&&null!==e.editorHandler;return o.a.createElement("div",null,o.a.createElement("div",null,k),o.a.createElement("div",{style:{fontSize:"0.9em",marginBottom:"0.9em"}},o.a.createElement("span",{style:S?ee(t):null,onClick:S?u:null,onKeyDown:S?function(e){"Enter"===e.key&&u()}:null,tabIndex:S?"0":null},E)),x&&o.a.createElement("span",null,o.a.createElement("span",{onClick:S?u:null,style:S?{cursor:"pointer"}:null},o.a.createElement(J,x)),o.a.createElement("button",{style:te(t),onClick:function(){i(!a)}},"View "+(a?"source":"compiled"))))},ne={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"1.5em"})},ae=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"0.6em"})};var ie=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!0),2),a=r[0],i=r[1],l=function(){i(!a)},u=e.children.length;return o.a.createElement("div",null,o.a.createElement("button",{onClick:l,style:a?oe(t):ae(t)},(a?"▶":"▼")+" ".concat(u," stack frames were ")+(a?"collapsed.":"expanded.")),o.a.createElement("div",{style:{display:a?"none":"block"}},e.children,o.a.createElement("button",{onClick:l,style:ae(t)},"▲ ".concat(u," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ue={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},ce=function(e){j(r,e);var t=z(r);function r(){return N(this,r),t.apply(this,arguments)}return A(r,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,r=e.errorName,n=e.contextSize,a=e.editorHandler,i=[],l=!1,u=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(r),h=d&&(p||l);d||(l=!0);var g=o.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:n,critical:0===s,showCode:!h,editorHandler:a}),v=s===t.length-1;h&&u.push(g),h&&!v||(1===u.length?i.push(u[0]):u.length>1&&(c++,i.push(o.a.createElement(ie,{key:"bundle-"+c},u))),u=[]),h||i.push(g)})),i}},{key:"render",value:function(){return o.a.createElement("div",{style:ue},this.renderFrames())}}]),r}(n.Component),se={display:"flex",flexDirection:"column"};var fe=function(e){var t=e.errorRecord,r=e.editorHandler,n=t.error,a=t.unhandledRejection,i=t.contextSize,l=t.stackFrames,u=a?"Unhandled Rejection ("+n.name+")":n.name,c=n.message,s=c.match(/^\\w*:/)||!u?c:u+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),o.a.createElement("div",{style:se},o.a.createElement(p,{headerText:s}),o.a.createElement(ce,{stackFrames:l,errorName:u,contextSize:i,editorHandler:r}))},de=function(e){j(r,e);var t=z(r);function r(){var e;N(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={currentIndex:0},e.previous=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},e.next=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},e.shortcutHandler=function(t){"Escape"===t?e.props.close():"ArrowLeft"===t?e.previous():"ArrowRight"===t&&e.next()},e}return A(r,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,r=e.close,n=t.length;return o.a.createElement(c,{shortcutHandler:this.shortcutHandler},o.a.createElement(F,{close:r}),n>1&&o.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:n,previous:this.previous,next:this.next}),o.a.createElement(fe,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),o.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser’s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),r}(n.PureComponent),pe={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},he={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?he:pe,me=Object(n.createContext)();window.updateContent=function(e){var t,r,n,a,l,u=(r=(t=e).currentBuildError,n=t.currentRuntimeErrorRecords,a=t.dismissRuntimeErrors,l=t.editorHandler,r?o.a.createElement(me.Provider,{value:ve},o.a.createElement(R,{error:r,editorHandler:l})):n.length>0?o.a.createElement(me.Provider,{value:ve},o.a.createElement(de,{errorRecords:n,close:a,editorHandler:l})):null);return null===u?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(u,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var r in e.setAttribute("style",""),t)t.hasOwnProperty(r)&&(e.style[r]=t[r])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);', ee = null, te = !1, re = !1, ne = null, oe = null, ae = [], ie = null, le = null;
            function ue(e) {
                ne = e, ee && me();
            }
            function ce(e) {
                oe = e, me();
            }
            function se(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                ie = t, X(pe(t))(e);
            }
            function fe() {
                oe = null, me();
            }
            function de(e) {
                if (null !== le) throw new Error("Already listening");
                e.launchEditorEndpoint && console.warn("Warning: `startReportingRuntimeErrors` doesn’t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor "), ie = e, le = K(pe(e), e.filename);
            }
            var pe = function(e) {
                return function(t) {
                    try {
                        "function" == typeof e.onError && e.onError.call(null);
                    } finally{
                        if (ae.some(function(e) {
                            return e.error === t.error;
                        })) return;
                        ae = ae.concat([
                            t
                        ]), me();
                    }
                };
            };
            function he() {
                ae = [], me();
            }
            function ge() {
                if (null === le) throw new Error("Not currently listening");
                ie = null;
                try {
                    le();
                } finally{
                    le = null;
                }
            }
            function me() {
                if (!te) {
                    if (re) ve();
                    else {
                        te = !0;
                        var e = window.document.createElement("iframe");
                        !function(e, t) {
                            for(var r in e.setAttribute("style", ""), t)t.hasOwnProperty(r) && (e.style[r] = t[r]);
                        }(e, J), e.onload = function() {
                            var t = e.contentDocument;
                            if (null != t && null != t.body) {
                                ee = e;
                                var r = e.contentWindow.document.createElement("script");
                                r.type = "text/javascript", r.innerHTML = Z, t.body.appendChild(r);
                            }
                        }, window.document.body.appendChild(e);
                    }
                }
            }
            function ve() {
                if (!ie) throw new Error("Expected options to be injected.");
                if (!ee) throw new Error("Iframe has not been created yet.");
                ee.contentWindow.updateContent({
                    currentBuildError: oe,
                    currentRuntimeErrorRecords: ae,
                    dismissRuntimeErrors: he,
                    editorHandler: ne
                }) || (window.document.body.removeChild(ee), ee = null, re = !1);
            }
            window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function() {
                re = !0, te = !1, ve();
            };
        }
    ]);
});

},{"process":"d5jf4"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"6FqiZ":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "4d94d0802d3ace14";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"4aBH6":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$2a8f = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$2a8f.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _client = require("react-dom/client");
var _clientDefault = parcelHelpers.interopDefault(_client);
var _reactVisTs = require("react-vis-ts");
var _reactVisTsDefault = parcelHelpers.interopDefault(_reactVisTs);
const graph = {
    nodes: [
        {
            id: 1,
            label: "Node 1",
            title: "node 1 tootip text"
        },
        {
            id: 2,
            label: "Node 2",
            title: "node 2 tootip text"
        },
        {
            id: 3,
            label: "Node 3",
            title: "node 3 tootip text"
        },
        {
            id: 4,
            label: "Node 4",
            title: "node 4 tootip text"
        },
        {
            id: 5,
            label: "Node 5",
            title: "node 5 tootip text"
        }, 
    ],
    edges: [
        {
            from: 1,
            to: 2
        },
        {
            from: 1,
            to: 3
        },
        {
            from: 2,
            to: 4
        },
        {
            from: 2,
            to: 5
        }, 
    ]
};
const events = {
};
const options = {
    layout: {
        hierarchical: false
    },
    nodes: {
        widthConstraint: {
            minimum: 50
        }
    },
    edges: {
        color: "#000000",
        length: "200",
        smooth: {
            enabled: true,
            type: "dynamic"
        }
    }
};
const root = (0, _clientDefault.default).createRoot(document.getElementById("root"));
root.render(/*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _reactDefault.default).StrictMode, {
    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
        style: {
            width: "600px",
            margin: "20px auto"
        },
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h1", {
                children: "react-vis-ts"
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 45,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h2", {
                children: "This is the Demo of using react-vis-ts."
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 46,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("a", {
                href: "https://github.com/GraceLR/react-vis-ts",
                children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("img", {
                        src: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'/%3E%3C/svg%3E",
                        alt: "Github"
                    }, void 0, false, {
                        fileName: "src/index.tsx",
                        lineNumber: 48,
                        columnNumber: 9
                    }, undefined),
                    ` `,
                    "View on GitHub"
                ]
            }, void 0, true, {
                fileName: "src/index.tsx",
                lineNumber: 47,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
                children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _reactVisTsDefault.default), {
                    graph: graph,
                    options: options,
                    events: events,
                    style: {
                        height: "640px"
                    }
                }, void 0, false, {
                    fileName: "src/index.tsx",
                    lineNumber: 55,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "src/index.tsx",
                lineNumber: 54,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "src/index.tsx",
        lineNumber: 44,
        columnNumber: 5
    }, undefined)
}, void 0, false, {
    fileName: "src/index.tsx",
    lineNumber: 43,
    columnNumber: 3
}, undefined));

  $parcel$ReactRefreshHelpers$2a8f.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react":"21dqq","react-dom/client":"lOjBx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru","react-vis-ts":"7rsOJ"}],"iTorj":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-jsx-dev-runtime.development.js");

},{"./cjs/react-jsx-dev-runtime.development.js":"48uCM"}],"48uCM":[function(require,module,exports) {
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    var React = require("react");
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x1) {
                        control = x1;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x2) {
                    control = x2;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = "" + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    var jsxDEV$1 = jsxWithValidation;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = jsxDEV$1;
})();

},{"react":"21dqq"}],"21dqq":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react.development.js");

},{"./cjs/react.development.js":"6YvXz"}],"6YvXz":[function(require,module,exports) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = "18.2.0";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ""; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || "";
        return stack;
    };
    // -----------------------------------------------------------------------------
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.
    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning("warn", format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = assign({}, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = "" + config.key;
            } // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = ".";
    var SUBSEPARATOR = ":";
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return "$" + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === "object" && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape("" + element.key);
        } // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case "string":
            case "number":
                invokeCallback = true;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    // The `if` statement here prevents auto-disabling of the safe
                    // coercion ESLint rule, so we must manually disable it below.
                    // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === "object") {
                // eslint-disable-next-line react-internal/safe-string-coercion
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue) {
        // TODO: Second argument used to be an optional `calculateChangedBits`
        // function. Warn to reserve for future use?
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            // This might throw either because it's missing or throws. If so, we treat it
            // as still uninitialized and try again next time. Which is the same as what
            // happens if the ctor or any wrappers processing the ctor throws. This might
            // end up fixing it if the resolution was a concurrency bug.
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                // In case, we're still uninitialized, then we're waiting for the thenable
                // to resolve. Set it as pending in the meantime.
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject = payload._result;
            if (moduleObject === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            if (!("default" in moduleObject)) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            return moduleObject.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "defaultProps", {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, "propTypes", {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== "function") error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
        else if (render.length !== 0 && render.length !== 2) error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.forwardRef((props, ref) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name; // The inner component shouldn't inherit this display name in most cases,
                // because the component may be used elsewhere.
                // But it's nice for anonymous functions to inherit the name,
                // so that our component-stack generation logic will display their frames.
                // An anonymous function generally suggests a pattern like:
                //   React.memo((props) => {...});
                // This kind of inner function is not used elsewhere so the side effect is okay.
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        // intentionally don't throw our own error because this is in a hot path.
        // Also helps ensure this is inlined.
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x1) {
                        control = x1;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x2) {
                    control = x2;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return "\n\nCheck the render method of `" + name + "`.";
        }
        return "";
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return "";
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== "object") return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === "string") return;
        var propTypes;
        if (typeof type === "function") propTypes = type.propTypes;
        else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = "null";
            else if (isArray(type)) typeString = "array";
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            // read require off the module object to get around the bundlers.
            // we don't want them to detect a require and bundle a Node polyfill.
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
            // version of setImmediate, bypassing fake timers if any.
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
        } catch (_err) {
            // we're in a browser
            // we can't use regular timers because they may still be faked
            // so we try MessageChannel+postMessage instead
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) // This is the outermost `act` scope. Initialize the queue. The reconciler
        // will detect the queue and use it instead of Scheduler.
        ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
            // set to `true` while the given callback is executed, not for updates
            // triggered during an async event, because this is how the legacy
            // implementation of `act` behaved.
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
            // which flushed updates immediately after the scope function exits, even
            // if it's an async function.
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error1) {
            popActScope(prevActScopeDepth);
            throw error1;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
            // for it to resolve before exiting the current scope.
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) // We've exited the outermost act scope. Recursively flush the
                        // queue until there's no remaining work.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        // The callback threw an error.
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== "undefined") // eslint-disable-next-line no-undef
            Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue = result; // The callback is not an async function. Exit the current scope
            // immediately, without awaiting.
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                // Exiting the outermost act scope. Flush the queue.
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                } // Return a thenable. If the user awaits it, we'll flush again in
                // case additional work was scheduled by a microtask.
                var _thenable = {
                    then: function(resolve, reject) {
                        // Confirm we haven't re-entered another `act` scope, in case
                        // the user does something weird like await the thenable
                        // multiple times.
                        if (ReactCurrentActQueue.current === null) {
                            // Recursively flush the queue until there's no remaining work.
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        } else resolve(returnValue);
                    }
                };
                return _thenable;
            } else {
                // Since we're inside a nested `act` scope, the returned thenable
                // immediately resolves. The outer scope will flush the queue.
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    // No additional work was scheduled. Finish.
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            // Prevent re-entrance.
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null);
                }
                queue.length = 0;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"lOjBx":[function(require,module,exports) {
"use strict";
var m = require("react-dom");
var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
exports.createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.createRoot(c, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};
exports.hydrateRoot = function(c, h, o) {
    i.usingClientEntryPoint = true;
    try {
        return m.hydrateRoot(c, h, o);
    } finally{
        i.usingClientEntryPoint = false;
    }
};

},{"react-dom":"j6uA9"}],"j6uA9":[function(require,module,exports) {
"use strict";
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error("^_^");
}
module.exports = require("./cjs/react-dom.development.js");

},{"./cjs/react-dom.development.js":"3iA9v"}],"3iA9v":[function(require,module,exports) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = require("react");
    var Scheduler = require("scheduler");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    } // In DEV, calls to console.warn and console.error get replaced
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
        }
    }
    function error(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== "") {
            format += "%s";
            args = args.concat([
                stack
            ]);
        } // eslint-disable-next-line react-internal/safe-string-coercion
        var argsWithFormat = args.map(function(item) {
            return String(item);
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift("Warning: " + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    // -----------------------------------------------------------------------------
    var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
    // the react-reconciler package.
    var enableNewReconciler = false; // Support legacy Primer support on internal FB www
    var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.
    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
    // React DOM Chopping Block
    //
    // Similar to main Chopping Block but only flags related to React DOM. These are
    // grouped because we will likely batch all of them into a single major release.
    // -----------------------------------------------------------------------------
    // Disable support for comment nodes as React DOM containers. Already disabled
    // in open source, but www codebase still relies on it. Need to remove.
    var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
    // and client rendering, mostly to allow JSX attributes to apply to the custom
    // element's object properties instead of only HTML attributes.
    // https://github.com/facebook/react/issues/11347
    var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
    var warnAboutStringRefs = false; // -----------------------------------------------------------------------------
    // Debugging and DevTools
    // -----------------------------------------------------------------------------
    // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
    // for an experimental timeline tool.
    var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {};
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */ // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
    } // $FlowFixMe only called in DEV, so void return is not possible.
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        // If you ended up here by following an exception call stack, here's what's
        // happened: you supplied an object or symbol value to React (as a prop, key,
        // DOM attribute, CSS property, string ref, etc.) and when React tried to
        // coerce it to a string using `'' + value`, an exception was thrown.
        //
        // The most common types that will cause this exception are `Symbol` instances
        // and Temporal objects like `Temporal.Instant`. But any object that has a
        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
        // exception. (Library authors do this to prevent users from using built-in
        // numeric operators like `+` or comparison operators like `>=` because custom
        // methods are needed to perform accurate arithmetic or comparison.)
        //
        // To fix the problem, coerce this object or symbol value to a string before
        // passing it to React. The most reliable way is usually `String(value)`.
        //
        // To find which value is throwing, check the browser or debugger console.
        // Before this exception was thrown, there should be `console.error` output
        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
        // problem and how that type was used: key, atrribute, input value prop, etc.
        // In most cases, this console output also shows the component and its
        // ancestor components where the exception happened.
        //
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
    }
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error("Invalid attribute name: `%s`", attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case "function":
            case "symbol":
                // eslint-disable-line
                return true;
            case "boolean":
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== "data-" && prefix !== "aria-";
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            "acceptCharset",
            "accept-charset"
        ],
        [
            "className",
            "class"
        ],
        [
            "htmlFor",
            "for"
        ],
        [
            "httpEquiv",
            "http-equiv"
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        "contentEditable",
        "draggable",
        "spellCheck",
        "value"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        "allowFullScreen",
        "async",
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        "checked",
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        "capture",
        "download" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        "cols",
        "rows",
        "size",
        "span" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        "rowSpan",
        "start"
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
    }); // String SVG attributes with the xml namespace.
    [
        "xml:base",
        "xml:lang",
        "xml:space" // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        "tabIndex",
        "crossOrigin"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    [
        "src",
        "href",
        "action",
        "formAction"
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            // eslint-disable-next-line react-internal/safe-string-coercion
            sanitizeURL("" + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                     // eslint-disable-next-line react-internal/safe-string-coercion
                    if (value === "" + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
            else if (stringValue === "" + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === "" + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, "" + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = "";
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = "" + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return "\n" + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x1) {
                        control = x1;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x2) {
                    control = x2;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === "string") {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at "); // If our component frame is labeled "<anonymous>"
                            // but we have a user-provided "displayName"
                            // splice it in to make the stack more readable.
                            if (fn.displayName && _frame.includes("<anonymous>")) _frame = _frame.replace("<anonymous>", fn.displayName);
                            if (typeof fn === "function") componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0);
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        if (typeof fn === "function") componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return "";
        if (typeof type === "function") return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === "string") return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return "";
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return "";
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = "";
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node);
            return info;
        } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber
    function getContextName(type) {
        return type.displayName || "Context";
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
    function getComponentNameFromType(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === "number") error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === "function") return type.displayName || type.name || null;
        if (typeof type === "string") return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if (typeof type === "object") switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    } // Keep in sync with shared/getComponentNameFromType
    function getContextName$1(type) {
        return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return "Cache";
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
                return "DehydratedFragment";
            case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
                return "Fragment";
            case HostComponent:
                // Host component type is the display name (e.g. "div", "View")
                return type;
            case HostPortal:
                return "Portal";
            case HostRoot:
                return "Root";
            case HostText:
                return "Text";
            case LazyComponent:
                // Name comes from the type in this case; we don't have a tag.
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) // Don't be less specific than shared/getComponentNameFromType
                return "StrictMode";
                return "Mode";
            case OffscreenComponent:
                return "Offscreen";
            case Profiler:
                return "Profiler";
            case ScopeComponent:
                return "Scope";
            case SuspenseComponent:
                return "Suspense";
            case SuspenseListComponent:
                return "SuspenseList";
            case TracingMarkerComponent:
                return "TracingMarker";
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === "function") return type.displayName || type.name || null;
                if (typeof type === "string") return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return "";
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function getCurrentFiber() {
        return current;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        // The coercion safety check is performed in getToStringValue().
        // eslint-disable-next-line react-internal/safe-string-coercion
        return "" + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case "boolean":
            case "number":
            case "string":
            case "undefined":
                return value;
            case "object":
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                // function, symbol are assigned as empty strings
                return "";
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = "";
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? "true" : "false";
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = "" + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps("input", props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, "checked", checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === "number") {
                if (value === 0 && node.value === "" || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === "submit" || type === "reset") {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute("value");
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty("value")) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty("defaultValue")) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset"; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== "") node.name = "";
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== "") node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            checkAttributeStringCoercion(name, "name");
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // If a value is not provided, then the children must be simple.
        if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === "string" || typeof child === "number") return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        } // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute("value", toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return "\n\nCheck the render method of `" + ownerName + "`.";
        return "";
    }
    var valuePropNames = [
        "value",
        "defaultValue"
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps("select", props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue["$" + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (isArray(children)) {
                    if (children.length > 1) throw new Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = "";
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg"; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case "svg":
                return SVG_NAMESPACE;
            case "math":
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            "animationDelay",
            "animationDirection",
            "animationDuration",
            "animationFillMode",
            "animationIterationCount",
            "animationName",
            "animationPlayState",
            "animationTimingFunction"
        ],
        background: [
            "backgroundAttachment",
            "backgroundClip",
            "backgroundColor",
            "backgroundImage",
            "backgroundOrigin",
            "backgroundPositionX",
            "backgroundPositionY",
            "backgroundRepeat",
            "backgroundSize"
        ],
        backgroundPosition: [
            "backgroundPositionX",
            "backgroundPositionY"
        ],
        border: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth",
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth",
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth",
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth",
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
        ],
        borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
        ],
        borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
        ],
        borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
        ],
        borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
        ],
        borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
        ],
        borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
        ],
        borderLeft: [
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth"
        ],
        borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
        ],
        borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
        ],
        borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
        ],
        borderTop: [
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
        ],
        columnRule: [
            "columnRuleColor",
            "columnRuleStyle",
            "columnRuleWidth"
        ],
        columns: [
            "columnCount",
            "columnWidth"
        ],
        flex: [
            "flexBasis",
            "flexGrow",
            "flexShrink"
        ],
        flexFlow: [
            "flexDirection",
            "flexWrap"
        ],
        font: [
            "fontFamily",
            "fontFeatureSettings",
            "fontKerning",
            "fontLanguageOverride",
            "fontSize",
            "fontSizeAdjust",
            "fontStretch",
            "fontStyle",
            "fontVariant",
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition",
            "fontWeight",
            "lineHeight"
        ],
        fontVariant: [
            "fontVariantAlternates",
            "fontVariantCaps",
            "fontVariantEastAsian",
            "fontVariantLigatures",
            "fontVariantNumeric",
            "fontVariantPosition"
        ],
        gap: [
            "columnGap",
            "rowGap"
        ],
        grid: [
            "gridAutoColumns",
            "gridAutoFlow",
            "gridAutoRows",
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
        ],
        gridColumn: [
            "gridColumnEnd",
            "gridColumnStart"
        ],
        gridColumnGap: [
            "columnGap"
        ],
        gridGap: [
            "columnGap",
            "rowGap"
        ],
        gridRow: [
            "gridRowEnd",
            "gridRowStart"
        ],
        gridRowGap: [
            "rowGap"
        ],
        gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        listStyle: [
            "listStyleImage",
            "listStylePosition",
            "listStyleType"
        ],
        margin: [
            "marginBottom",
            "marginLeft",
            "marginRight",
            "marginTop"
        ],
        marker: [
            "markerEnd",
            "markerMid",
            "markerStart"
        ],
        mask: [
            "maskClip",
            "maskComposite",
            "maskImage",
            "maskMode",
            "maskOrigin",
            "maskPositionX",
            "maskPositionY",
            "maskRepeat",
            "maskSize"
        ],
        maskPosition: [
            "maskPositionX",
            "maskPositionY"
        ],
        outline: [
            "outlineColor",
            "outlineStyle",
            "outlineWidth"
        ],
        overflow: [
            "overflowX",
            "overflowY"
        ],
        padding: [
            "paddingBottom",
            "paddingLeft",
            "paddingRight",
            "paddingTop"
        ],
        placeContent: [
            "alignContent",
            "justifyContent"
        ],
        placeItems: [
            "alignItems",
            "justifyItems"
        ],
        placeSelf: [
            "alignSelf",
            "justifySelf"
        ],
        textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
        ],
        textEmphasis: [
            "textEmphasisColor",
            "textEmphasisStyle"
        ],
        transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
        ],
        wordWrap: [
            "overflowWrap"
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        "Webkit",
        "ms",
        "Moz",
        "O"
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) return "";
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
        checkCSSPropertyStringCoercion(value, name);
        return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {};
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported style property %s. Did you mean %s?", name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, "ms-")));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error("`NaN` is an invalid value for the `%s` css style property.", name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error("`Infinity` is an invalid value for the `%s` css style property.", name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === "number") {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = "";
        var delimiter = "";
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") styleName = "cssFloat";
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== "object") throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) return typeof props.is === "string";
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== "input" && type !== "textarea" && type !== "select") return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    // This exists to avoid circular dependency between ReactDOMEventReplaying
    // and DOMPluginEventSystem.
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (typeof restoreImpl !== "function") throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            // TODO: Restore state in the microtask, after the discrete updates flush,
            // instead of early flushing them here.
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    } // TODO: Replace with flushSync
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== "function") throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, "passive", {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebook/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (typeof document === "undefined" || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent("Event");
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error != null && typeof error === "object") try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : "invokeguardedcallback"); // Attach our event handlers
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, "event", windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            } // Remove our event listeners
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var ChildDeletion = /*                */ 16;
    var ContentReset = /*                 */ 32;
    var Callback = /*                     */ 64;
    var DidCapture = /*                   */ 128;
    var ForceClientRender = /*            */ 256;
    var Ref = /*                          */ 512;
    var Snapshot = /*                     */ 1024;
    var Passive = /*                      */ 2048;
    var Hydrating = /*                    */ 4096;
    var Visibility = /*                   */ 8192;
    var StoreConsistency = /*             */ 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)
    var HostEffectMask = /*               */ 32767; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 32768;
    var ShouldCapture = /*                */ 65536;
    var ForceUpdateForLegacySuspense = /* */ 131072;
    var Forked = /*                       */ 1048576; // Static tags describe aspects of a fiber that are not specific to a render,
    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
    // This enables us to defer more work in the unmount case,
    // since we can defer traversing the tree during layout to look for Passive effects,
    // and instead rely on the static flag as a signal that there may be cleanup work.
    var RefStatic = /*                    */ 2097152;
    var LayoutStatic = /*                 */ 4194304;
    var PassiveStatic = /*                */ 8388608; // These flags allow us to traverse to fibers that have effects on mount
    // without traversing the entire tree after every commit for
    // double invoking
    var MountLayoutDev = /*               */ 16777216;
    var MountPassiveDev = /*              */ 33554432; // Groups of flags that are used in the commit phase to skip over trees that
    // don't contain effects, by checking subtreeFlags.
    var BeforeMutationMask = // flag logic (see #20043)
    Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask
    var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
    // This allows certain concepts to persist without recalculating them,
    // e.g. whether a subtree contains passive effects or portals.
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode);
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (a.tag !== HostRoot) throw new Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        // Next we'll drill down this component to find the first HostComponent/Text.
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    // This module only exists as an ESM wrapper around the external CommonJS
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    // this doesn't actually exist on the scheduler, but it *does*
    // on scheduler/unstable_mock, which we'll need for internal testing
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) // Conditionally inject these hooks only if Timeline profiler is supported by this build.
            // This gives DevTools a way to feature detect that isn't tied to version number
            // (since profiling and timeline are controlled by different feature flags).
            internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error("React instrumentation encountered an error: %s.", err);
        }
        if (hook.checkDCE) // This is the real DevTools.
        return true;
        else // This is likely a hook installed by Fast Refresh runtime.
        return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === "function") {
            // We're in a test because Scheduler.unstable_yieldValue only exists
            // in SchedulerMock. To reduce the noise in strict mode tests,
            // suppress warnings and disable scheduler yielding during the double render
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
            }
        }
    } // Profiler API hooks
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = /*                         */ 0; // TODO: Remove ConcurrentMode by reading from the root tag instead
    var ConcurrentMode = /*                 */ 1;
    var ProfileMode = /*                    */ 2;
    var StrictLegacyMode = /*               */ 8;
    var StrictEffectsMode = /*              */ 16;
    // TODO: This is pretty well supported by browsers. Maybe we can drop it.
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    // If those values are changed that package should be rebuilt and redeployed.
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var InputContinuousHydrationLane = /*    */ 2;
    var InputContinuousLane = /*             */ 4;
    var DefaultHydrationLane = /*            */ 8;
    var DefaultLane = /*                     */ 16;
    var TransitionHydrationLane = /*                */ 32;
    var TransitionLanes = /*                       */ 4194240;
    var TransitionLane1 = /*                        */ 64;
    var TransitionLane2 = /*                        */ 128;
    var TransitionLane3 = /*                        */ 256;
    var TransitionLane4 = /*                        */ 512;
    var TransitionLane5 = /*                        */ 1024;
    var TransitionLane6 = /*                        */ 2048;
    var TransitionLane7 = /*                        */ 4096;
    var TransitionLane8 = /*                        */ 8192;
    var TransitionLane9 = /*                        */ 16384;
    var TransitionLane10 = /*                       */ 32768;
    var TransitionLane11 = /*                       */ 65536;
    var TransitionLane12 = /*                       */ 131072;
    var TransitionLane13 = /*                       */ 262144;
    var TransitionLane14 = /*                       */ 524288;
    var TransitionLane15 = /*                       */ 1048576;
    var TransitionLane16 = /*                       */ 2097152;
    var RetryLanes = /*                            */ 130023424;
    var RetryLane1 = /*                             */ 4194304;
    var RetryLane2 = /*                             */ 8388608;
    var RetryLane3 = /*                             */ 16777216;
    var RetryLane4 = /*                             */ 33554432;
    var RetryLane5 = /*                             */ 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = /*          */ 134217728;
    var NonIdleLanes = /*                          */ 268435455;
    var IdleHydrationLane = /*               */ 268435456;
    var IdleLane = /*                        */ 536870912;
    var OffscreenLane = /*                   */ 1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
    // It should be kept in sync with the Lanes values above.
    function getLabelForLane(lane) {
        if (lane & SyncLane) return "Sync";
        if (lane & InputContinuousHydrationLane) return "InputContinuousHydration";
        if (lane & InputContinuousLane) return "InputContinuous";
        if (lane & DefaultHydrationLane) return "DefaultHydration";
        if (lane & DefaultLane) return "Default";
        if (lane & TransitionHydrationLane) return "TransitionHydration";
        if (lane & TransitionLanes) return "Transition";
        if (lane & RetryLanes) return "Retry";
        if (lane & SelectiveHydrationLane) return "SelectiveHydration";
        if (lane & IdleHydrationLane) return "IdleHydration";
        if (lane & IdleLane) return "Idle";
        if (lane & OffscreenLane) return "Offscreen";
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
        // even if the work is suspended.
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (// one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) // Keep working on the existing in-progress tree. Do not interrupt.
            return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) // When updates are sync by default, we entangle continuous priority updates
        // and default updates, so they render in the same batch. The only reason
        // they use separate lanes is because continuous updates should interrupt
        // transitions, but default updates should not.
        nextLanes |= pendingLanes & DefaultLane;
         // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        // TODO: Reconsider this. The counter-argument is that the partial work
        // represents an intermediate state, which we don't want to show to the user.
        // And by spending extra time finishing it, we're increasing the amount of
        // time it takes to show the final state, which is what they are actually
        // waiting for.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                // User interactions should expire slightly more quickly.
                //
                // NOTE: This is set to the corresponding constant as in Scheduler.js.
                // When we made it larger, a product metric in www regressed, suggesting
                // there's a user interaction that's being starved by a series of
                // synchronous updates. If that theory is correct, the proper solution is
                // to fix the starvation. However, this scenario supports the idea that
                // expiration times are an important safeguard when starvation
                // does happen.
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                // TODO: Retries should be allowed to expire if they are CPU bound for
                // too long, but when I made this change it caused a spike in browser
                // crashes. There must be some other underlying bug; not super urgent but
                // ideally should figure out why and fix it. Unfortunately we don't have
                // a repro for the crashes, only detected via production metrics.
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                // Anything idle priority or lower should never expire.
                return NoTimestamp;
            default:
                error("Should have found matching lanes. This is a bug in React.");
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    // are suspended.
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        // This is a separate check from includesBlockingLane because a lane can
        // expire after a render has already started.
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
        // Cycle through the lanes, assigning each new transition to the next lane.
        // In most cases, this means every transition gets its own lane, until we
        // run out of lanes and cycle back to the beginning.
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
        // could unblock them. Clear the suspended lanes so that we can try rendering
        // them again.
        //
        // TODO: We really only need to unsuspend only lanes that are in the
        // `subtreeLanes` of the updated fiber, or the update lanes of the return
        // path. This would exclude suspended updates in an unrelated sibling tree,
        // since there's no way for this update to unblock it.
        //
        // We don't do this if the incoming update is idle, because we never process
        // idle updates until after all the regular updates have finished; there's no
        // way it could unblock a transition.
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = NoLanes;
        root.pingedLanes = NoLanes;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        // In addition to entangling each of the given lanes with each other, we also
        // have to consider _transitive_ entanglements. For each lane that is already
        // entangled with *any* of the given lanes, that lane is now transitively
        // entangled with *all* the given lanes.
        //
        // Translated: If C is entangled with A, then entangling A with B also
        // entangles C with B.
        //
        // If this is hard to grasp, it might help to intentionally break this
        // function and look at the tests that fail in ReactTransition-test.js. Try
        // commenting out one of the conditions below.
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                // Everything else is already either a hydration lane, or shouldn't
                // be retried at a hydration lane.
                lane = NoLane;
                break;
        } // Check if the lane we chose is suspended. If so, that indicates that we
        // already attempted and failed to hydrate at that level. Also check if we're
        // already rendering that lane, which is rare but could happen.
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) // Give up trying to hydrate and fall back to client render.
        return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    function getTransitionsForLanes(root, lanes) {
        return null;
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    // This is imported by the event replaying implementation in React DOM. It's
    // in a separate file to break a circular dependency between the renderer and
    // the reconciler.
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    // has this definition built-in.
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case "focusin":
            case "focusout":
                queuedFocus = null;
                break;
            case "dragenter":
            case "dragleave":
                queuedDrag = null;
                break;
            case "mouseover":
            case "mouseout":
                queuedMouse = null;
                break;
            case "pointerover":
            case "pointerout":
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case "gotpointercapture":
            case "lostpointercapture":
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case "focusin":
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case "dragenter":
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case "mouseover":
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case "pointerover":
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case "gotpointercapture":
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        // TODO: This will read the priority if it's dispatched by the React
        // event system but not native events. Should read window.event.type, like
        // we do for updates (getCurrentEventPriority).
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            // Stop once we hit the first target with lower priority than
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        } // We need to clear only if we didn't queue because
        // queueing is accumulative.
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
    // The return_targetInst field above is conceptually part of the return value.
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        return_targetInst = targetInst; // We're not blocked on anything.
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            // Used by SimpleEventPlugin:
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            // eslint-disable-next-line no-fallthrough
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            // eslint-disable-next-line no-fallthrough
            case "beforeblur":
            case "afterblur":
            // eslint-disable-next-line no-fallthrough
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
                return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            // eslint-disable-next-line no-fallthrough
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
                return ContinuousEventPriority;
            case "message":
                // We might be in the Scheduler callback.
                // Eventually this mechanism will be replaced by a check
                // of the current priority on the native scheduler.
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ("value" in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== "unknown") event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== "unknown") // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {},
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ("movementY" in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
        return "";
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === "keypress") return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === "keypress") return getEventCharCode(event);
            if (event.type === "keydown" || event.type === "keyup") return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", [
            "compositionend",
            "keypress",
            "textInput",
            "paste"
        ]);
        registerTwoPhaseEvent("onCompositionEnd", [
            "compositionend",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionStart", [
            "compositionstart",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
        registerTwoPhaseEvent("onCompositionUpdate", [
            "compositionupdate",
            "focusout",
            "keydown",
            "keypress",
            "keyup",
            "mousedown"
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case "compositionstart":
                return "onCompositionStart";
            case "compositionend":
                return "onCompositionEnd";
            case "compositionupdate":
                return "onCompositionUpdate";
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case "keyup":
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = "onCompositionStart";
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = "onCompositionEnd";
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === "onCompositionStart") isComposing = initialize(nativeEventTarget);
            else if (eventType === "onCompositionEnd") {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
            case "keypress":
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case "textInput":
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case "paste":
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case "keypress":
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") return !!supportedInputTypes[elem.type];
        if (nodeName === "textarea") return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent("onChange", [
            "change",
            "click",
            "focusin",
            "focusout",
            "input",
            "keydown",
            "keyup",
            "selectionchange"
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, "number", node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === "focusout") handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent("onMouseEnter", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onMouseLeave", [
            "mouseout",
            "mouseover"
        ]);
        registerDirectEvent("onPointerEnter", [
            "pointerout",
            "pointerover"
        ]);
        registerDirectEvent("onPointerLeave", [
            "pointerout",
            "pointerover"
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ("contains" in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === "function") priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ("selectionStart" in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", [
            "focusout",
            "contextmenu",
            "dragend",
            "focusin",
            "keydown",
            "keyup",
            "mousedown",
            "mouseup",
            "selectionchange"
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case "mousedown":
                mouseDown = true;
                break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case "selectionchange":
                if (skipSelectionChangeEvent) break;
            // falls through
            case "keydown":
            case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {};
    /**
 * Element to check for prefixes on.
 */ var style = {};
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement("div").style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!("TransitionEvent" in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
    //
    // E.g. it needs "pointerDown", not "pointerdown".
    // This is because we derive both React name ("onPointerDown")
    // and DOM name ("pointerdown") from the same list.
    //
    // Exceptions that don't match this convention are listed separately.
    //
    // prettier-ignore
    var simpleEventPluginEvents = [
        "abort",
        "auxClick",
        "cancel",
        "canPlay",
        "canPlayThrough",
        "click",
        "close",
        "contextMenu",
        "copy",
        "cut",
        "drag",
        "dragEnd",
        "dragEnter",
        "dragExit",
        "dragLeave",
        "dragOver",
        "dragStart",
        "drop",
        "durationChange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "gotPointerCapture",
        "input",
        "invalid",
        "keyDown",
        "keyPress",
        "keyUp",
        "load",
        "loadedData",
        "loadedMetadata",
        "loadStart",
        "lostPointerCapture",
        "mouseDown",
        "mouseMove",
        "mouseOut",
        "mouseOver",
        "mouseUp",
        "paste",
        "pause",
        "play",
        "playing",
        "pointerCancel",
        "pointerDown",
        "pointerMove",
        "pointerOut",
        "pointerOver",
        "pointerUp",
        "progress",
        "rateChange",
        "reset",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "submit",
        "suspend",
        "timeUpdate",
        "touchCancel",
        "touchEnd",
        "touchStart",
        "volumeChange",
        "scroll",
        "toggle",
        "touchMove",
        "waiting",
        "wheel"
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        } // Special cases where event names don't match.
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case "keypress":
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case "keydown":
            case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "beforeblur":
            case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case "click":
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            /* falls through */ case "mouseout":
            case "mouseover":
            case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case "copy":
            case "cut":
            case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't foresee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        "abort",
        "canplay",
        "canplaythrough",
        "durationchange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "loadeddata",
        "loadedmetadata",
        "loadstart",
        "pause",
        "play",
        "playing",
        "progress",
        "ratechange",
        "resize",
        "seeked",
        "seeking",
        "stalled",
        "suspend",
        "timeupdate",
        "volumechange",
        "waiting"
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        "cancel",
        "close",
        "invalid",
        "load",
        "scroll",
        "toggle"
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    } // This is only used by createEventHandle when the
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                // We handle selectionchange separately because it
                // doesn't bubble and needs to be on the document.
                if (domEventName !== "selectionchange") {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) // The selectionchange event also needs deduplication
            // but it is attached to the document.
            {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent("selectionchange", false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") isPassiveListener = true;
        }
        targetContainer;
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
             // If we are processing the onBeforeBlur event, then we need to take
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error("Extra attributes from the server: %s", names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) // In concurrent roots, we throw when there's a text mismatch and revert to
        // client rendering, up to the nearest Suspense boundary.
        throw new Error("Text content does not match server-rendered HTML.");
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== "textarea" || nextProp !== "";
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === "number") setTextContent(domElement, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === "script") {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === "select") {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
            case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
            case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = "";
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = "";
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case "input":
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
            case "select":
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
            case "iframe":
            case "object":
            case "embed":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "video":
            case "audio":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case "source":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent("error", domElement);
                break;
            case "img":
            case "image":
            case "link":
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "details":
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent("toggle", domElement);
                break;
            case "input":
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "option":
                validateProps(domElement, rawProps);
                break;
            case "select":
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            case "textarea":
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent("invalid", domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                    break;
                case "checked":
                    break;
                case "selected":
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === "string") {
                    if (domElement.textContent !== nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === "number") {
                    if (domElement.textContent !== "" + nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            "" + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== "function") warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === "onScroll") listenToNonDelegatedEvent("scroll", domElement);
                }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute("style");
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case "input":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case "textarea":
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case "select":
            case "option":
                break;
            default:
                if (typeof rawProps.onClick === "function") // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === "") // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case "input":
                restoreControlledState(domElement, props);
                return;
            case "textarea":
                restoreControlledState$2(domElement, props);
                return;
            case "select":
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        "address",
        "applet",
        "area",
        "article",
        "aside",
        "base",
        "basefont",
        "bgsound",
        "blockquote",
        "body",
        "br",
        "button",
        "caption",
        "center",
        "col",
        "colgroup",
        "dd",
        "details",
        "dir",
        "div",
        "dl",
        "dt",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "frame",
        "frameset",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "iframe",
        "img",
        "input",
        "isindex",
        "li",
        "link",
        "listing",
        "main",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "nav",
        "noembed",
        "noframes",
        "noscript",
        "object",
        "ol",
        "p",
        "param",
        "plaintext",
        "pre",
        "script",
        "section",
        "select",
        "source",
        "style",
        "summary",
        "table",
        "tbody",
        "td",
        "template",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "title",
        "tr",
        "track",
        "ul",
        "wbr",
        "xmp"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        "button"
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        "dd",
        "dt",
        "li",
        "option",
        "optgroup",
        "p",
        "rp",
        "rt"
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") ancestorInfo.formTag = info;
        if (tag === "a") ancestorInfo.aTagInScope = info;
        if (tag === "button") ancestorInfo.buttonTagInScope = info;
        if (tag === "nobr") ancestorInfo.nobrTagInScope = info;
        if (tag === "p") ancestorInfo.pTagInButtonScope = info;
        if (tag === "li") ancestorInfo.listItemTagAutoclosing = info;
        if (tag === "dd" || tag === "dt") ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
                return tag === "option" || tag === "#text";
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case "option":
                return tag === "#text";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case "tbody":
            case "thead":
            case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case "colgroup":
                return tag === "col" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
                return tag === "frame";
            case "#document":
                return tag === "html";
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return ancestorInfo.pTagInButtonScope;
            case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
                return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
            case "button":
                return ancestorInfo.buttonTagInScope;
            case "a":
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case "nobr":
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error("validateDOMNesting: when childText is passed, childTag should be null");
            childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
            if (/\S/.test(childText)) tagDisplayName = "Text nodes";
            else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = "<" + childTag + ">";
        if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, "");
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                return !!props.autoFocus;
            case "img":
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : undefined; // -------------------
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout; // TODO: Determine the best fallback here.
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    } // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                if (newProps.autoFocus) domElement.focus();
                return;
            case "img":
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance; // Delete all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node); // TODO: Warn, we didn't find the end comment boundary.
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
         // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        instance;
        var style = instance.style;
        if (typeof style.setProperty === "function") style.setProperty("display", "none", "important");
        else style.display = "none";
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
        instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = "";
        else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) container.removeChild(container.documentElement);
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a suspense node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
            digest = dataset.dgst;
            message = dataset.msg;
            stack = dataset.stck;
        }
        return {
            message: message,
            digest: digest,
            stack: stack
        };
    // const nextSibling = instance.nextSibling;
    // if (nextSibling) {
    //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
    //   value.message = dataset.msg;
    //   value.hash = dataset.hash;
    //   if (true) {
    //     value.stack = dataset.stack;
    //   }
    // }
    // return value;
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
        // when the legacy root API is removed.
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        // $FlowFixMe: Only Element or Document can be parent nodes.
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
        // TODO: This gets logged by onRecoverableError, too, so we should be
        // able to remove it.
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
        // TODO: This function is only called on host components. I don't think all of
        // these fields are relevant.
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.
        throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== "function") {
                    // eslint-disable-next-line react-internal/prod-error-codes
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error("Unexpected pop.");
            return;
        }
        if (fiber !== fiberStack[index]) error("Unexpected Fiber popped.");
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || "Unknown";
        checkPropTypes(contextTypes, context, "context", name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== "function") {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
        }
        var name = getComponentNameFromFiber(fiber) || "Unknown";
        checkPropTypes(childContextTypes, childContext, "child context", name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        // Only flushes the queue if there's a legacy sync callback scheduled.
        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
        // it might make more sense for the queue to be a list of roots instead of a
        // list of generic callbacks. Then we can have two: one for legacy roots, one
        // for concurrent roots. And this method would only flush the legacy ones.
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrance.
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
                // queue is in the render or commit phases.
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    // TODO: Use the unified fiber stack module instead of this local one?
    // Intentionally not using it yet to derisk the initial implementation, because
    // the way we push/pop these values is a bit unusual. If there's a mistake, I'd
    // rather the ids be wrong than crash the whole reconciler.
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        // This is called right after we reconcile an array (or iterator) of child
        // fibers, because that's the only place where we know how many children in
        // the whole set without doing extra work later, or storing addtional
        // information on the fiber.
        //
        // That's why this function is separate from pushTreeId — it's called during
        // the render phase of the fork parent, not the child, which is where we push
        // the other context values.
        //
        // In the Fizz implementation this is much simpler because the child is
        // rendered in the same callstack as the parent.
        //
        // It might be better to just add a `forks` field to the Fiber type. It would
        // make this module simpler.
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
        // of the id; we use it to account for leading 0s.
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
        // consideration the leading 1 we use to mark the end of the sequence.
        if (length > 30) {
            // We overflowed the bitwise-safe range. Fall back to slower algorithm.
            // This branch assumes the length of the base id is greater than 5; it won't
            // work for smaller ids, because you need 5 bits per character.
            //
            // We encode the id in multiple steps: first the base id, then the
            // remaining digits.
            //
            // Each 5 bit sequence corresponds to a single base 32 character. So for
            // example, if the current id is 23 bits long, we can convert 20 of those
            // bits into a string of 4 characters, with 3 bits left over.
            //
            // First calculate how many bits in the base id represent a complete
            // sequence of characters.
            var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.
            var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.
            var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
            // we made more room, this time it won't overflow.
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            // Normal path
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
        // in its children.
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        // Restore the previous values.
        // This is a bit more complicated than other context-like modules in Fiber
        // because the same Fiber may appear on the stack multiple times and for
        // different reasons. We have to keep popping until the work-in-progress is
        // no longer at the top of the stack.
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
    // due to earlier mismatches or a suspended fiber.
    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating) error("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspendOrErrorDEV) // Inside a boundary that already suspended. We're currently rendering the
        // siblings of a suspended node. The mismatch may be due to the missing
        // data, so it's probably a false positive.
        return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
                    // This simplifies the code for getHostSibling and deleting nodes,
                    // since it doesn't have to consider all Suspense boundaries and
                    // check if they're dehydrated ones or not.
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
                    // it during the first pass. Instead, we'll reenter it later.
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            } // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        } // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them. We also don't delete anything inside the root container.
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            // Successfully completed a forced client render. The errors that occurred
            // during the hydration attempt are now recovered. We will log them in
            // commit phase, once the entire tree has finished.
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(", ");
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedupe strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            // Inlined `enqueueUpdate` to remove interleaved update check
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) // This is the first update. Create a circular list.
                                update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                // If a dehydrated suspense boundary is in this subtree, we don't know
                // if it will have any context consumers in it. The best we can do is
                // mark it as having updates.
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                 // This is intentionally passing this fiber as the parent
                // because we want to schedule this fiber as having work
                // on its children. We'll use the childLanes on
                // this fiber to indicate that a context has changed.
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    // render. When this render exits, either because it finishes or because it is
    // interrupted, the interleaved updates will be transferred onto the main part
    // of the queue.
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) concurrentQueues = [
            queue
        ];
        else concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
        // Transfer the interleaved updates onto the main queue. Each queue has a
        // `pending` field and an `interleaved` field. When they are not null, they
        // point to the last node in a circular linked list. We need to append the
        // interleaved list to the end of the pending list by joining them into a
        // single, circular list.
        if (concurrentQueues !== null) {
            for(var i = 0; i < concurrentQueues.length; i++){
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            concurrentQueues = null;
        }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            // This is the first update. Create a circular list.
            update.next = update; // At the end of the current render, this queue's interleaved updates will
            // be transferred to the pending queue.
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    } // Calling this function outside this module should only be done for backwards
    // compatibility and should always be accompanied by a warning.
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
            // This is an unsafe render phase update. Add directly to the update
            // queue so we can process it immediately during the current render.
            var pending = sharedQueue.pending;
            if (pending === null) // This is the first update. Create a circular list.
            update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
            // this fiber. This is for backwards compatibility in the case where you
            // update a different component during render phase than the one that is
            // currently renderings (a pattern that is accompanied by a warning).
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
            // have finished. We can remove them from the shared queue, which represents
            // a superset of the actually pending lanes. In some cases we may entangle
            // more than we need to, but that's OK. In fact it's worse if we *don't*
            // entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null); // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === "function") {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current = workInProgress.alternate;
            if (current !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && // callback again.
                    update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true);
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
            // process them during this render, but we do need to track which lanes
            // are remaining.
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) // `queue.lanes` is used for entangling transitions. We can set it back to
            // zero once the queue is empty.
            queue.shared.lanes = NoLanes;
             // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (typeof callback !== "function") throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") return;
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                // Invoke the function an extra time to help detect side-effects.
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "replaceState");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, "forceUpdate");
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === "function") error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        if (typeof instance.componentDidUnmount === "function") error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === "function") error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === "function") error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === "function") error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === "function") error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === "function") error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray(_state))) error("%s.state: must be set to an object or null", name);
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== "object") addendum = " However, it is set to a " + typeof contextType + ".";
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = " Did you accidentally pass the Context.Provider instead?";
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = " Did you accidentally pass the Context.Consumer instead?";
                else addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
        }
        if (typeof contextType === "object" && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context); // eslint-disable-line no-new
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = "componentWillMount";
            else if (typeof instance.UNSAFE_componentWillMount === "function") foundWillMountName = "UNSAFE_componentWillMount";
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = "componentWillReceiveProps";
            else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = "componentWillUpdate";
            else if (typeof instance.UNSAFE_componentWillUpdate === "function") foundWillUpdateName = "UNSAFE_componentWillUpdate";
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || "Component");
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === "function") instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function"; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === "function") instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === "function") workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === "function") workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== "object") throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
                 // Assigning this to a const so Flow knows it won't change in the closure
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, "ref");
                var stringRef = "" + mixedRef; // Check if previous string ref matches new string ref
                if (current !== null && current.ref !== null && typeof current.ref === "function" && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== "string") throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + " the following reasons:\n" + "1. You may be adding a ref to a function component\n" + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + "3. You have multiple copies of React loaded\n" + "See https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                // During hydration, the useId algorithm needs to know which fibers are
                // part of a list of children (arrays, iterators).
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    // Move based on index
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== "object" || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                     // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            if (typeof newChild === "object" && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init; // TODO: This function is supposed to be non-recursive.
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            if (typeof newChild === "function") warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // Regular boundaries always capture.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*   */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Insertion = /*  */ 2;
    var Layout = /*    */ 4;
    var Passive$1 = /*   */ 8;
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.
    var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
    // hydration). This counter is global, so client ids are not stable across
    // render attempts.
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += " ";
                    row += newHookName + "\n";
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass);
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
        // render. If this fires, it suggests that we incorrectly reset the static
        // flags in some other part of the codebase. This has happened before, for
        // example, in the SuspenseList implementation.
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current.mode & ConcurrentMode) !== NoMode) error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
        // localIdCounter = 0;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        // This should be called immediately after every renderWithHooks call.
        // Conceptually, it's part of the return value of renderWithHooks; it's only a
        // separate function to avoid using an array tuple.
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
        // complete phase (bubbleProperties).
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrance.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (nextCurrentHook === null) throw new Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.hasEagerState) // If this update is a state update (not a reducer) and was processed eagerly,
                    // we can use the eagerly computed state
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first);
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        } // Interleaved updates are stored on a separate queue. We aren't going to
        // process them during this render, but we do need to track which lanes
        // are remaining.
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) // `queue.lanes` is used for entangling transitions. We can set it back to
        // zero once the queue is empty.
        queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                }
            }
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            //
            // We won't do this if we're hydrating server-rendered content, because if
            // the content is stale, it's already visible anyway. Instead we'll patch
            // it up in a passive effect.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        } // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst; // Schedule an effect to subscribe to the store.
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Schedule an effect to update the mutable instance fields. We will update
        // this whenever subscribe, getSnapshot, or value changes. Because there's no
        // clean-up function, and we track the deps correctly, we can call pushEffect
        // directly, without storing any additional state. For the same reason, we
        // don't need to set a static flag, either.
        // TODO: We can move this to the passive phase once we add a pre-commit
        // consistency check. See the next comment.
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
        // normal rules of React, and only works because store updates are
        // always synchronous.
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]); // Whenever getSnapshot or subscribe changes, we need to check in the
        // commit phase if there was an interleaved mutation. In concurrent mode
        // this can happen all the time, but even in synchronous mode, an earlier
        // effect may have mutated the store.
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
            // Right before committing, we will walk the tree and check if any of the
            // stores were mutated.
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        // These are updated in the passive phase
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
        // have been in an event that fired before the passive effects, or it could
        // have been in a layout effect. In that case, we would have used the old
        // snapsho and getSnapshot values to bail out. We need to check one more time.
        if (checkIfSnapshotChanged(inst)) // Force a re-render.
        forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            // The store changed. Check if the snapshot changed since the last time we
            // read from the store.
            if (checkIfSnapshotChanged(inst)) // Force a re-render.
            forceStoreRerender(fiber);
        }; // Subscribe to the store and return a clean-up function.
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty("current")) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== "function") error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
    }
    function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
            // This is a rerender during a mount.
            hook.memoizedState = value;
            return value;
        } else {
            // This is a rerender during an update.
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
        }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
            // This is an urgent update. If the value has changed, keep using the
            // previous value and spawn a deferred render to update it later.
            if (!objectIs(value, prevValue)) {
                // Schedule a deferred render
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
                // from the latest value. The name "baseState" doesn't really match how we
                // use it because we're reusing a state hook field instead of creating a
                // new one.
                hook.baseState = true;
            } // Reuse the previous value
            return prevValue;
        } else {
            // This is not an urgent update, so we can use the latest value regardless
            // of what it is. No need to defer it.
            // However, if we're currently inside a spawned render, then we need to mark
            // this as an update to prevent the fiber from bailing out.
            //
            // `baseState` is true when the current value is different from the rendered
            // value. The name doesn't really match how we use it because we're reusing
            // a state hook field instead of creating a new one.
            if (hook.baseState) {
                // Flip this back to false.
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
        }
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1]; // The `start` method never changes.
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
        // should do this in Fiber, too? Deferring this decision for now because
        // there's no other place to store the prefix except for an internal field on
        // the public createRoot object, which the fiber tree does not currently have
        // a reference to.
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.
            id = ":" + identifierPrefix + "R" + treeId; // Unless this is the first id at this level, append a number at the end
            // that represents the position of this useId hook among all the useId
            // hooks for this fiber.
            var localId = localIdCounter++;
            if (localId > 0) id += "H" + localId.toString(32);
            id += ":";
        } else {
            // Use a lowercase r prefix for client-generated ids.
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === "function") error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) {
                            // Fast path. We can bail out without scheduling React to re-render.
                            // It's still possible that we'll need to rebase this update later,
                            // if the component re-renders for a different reason and by that
                            // time the reducer has changed.
                            // TODO: Do we still need to entangle transitions in this case?
                            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                            return;
                        }
                    } catch (error1) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    } // TODO: Move to ReactFiberConcurrentUpdates?
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
            // must have finished. We can remove them from the shared queue, which
            // represents a superset of the actually pending lanes. In some cases we
            // may entangle more than we need to, but that's OK. In fact it's worse if
            // we *don't* entangle when we should.
            queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
            // the lane finished since the last time we entangled it. So we need to
            // entangle it again, just to be sure.
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    /**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */ var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
            // Or the root (for the DevTools Profiler to read)
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) // Detached fibers have their state node cleared out.
                        // In this case, the return pointer is also cleared out,
                        // so we won't be able to report the time spent in this Profiler's subtree.
                        parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValueAtFiber(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
        };
    }
    function createCapturedValue(value, digest, stack) {
        return {
            value: value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ""; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console["error"](error); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console["error"](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ""
            });
            if (typeof getDerivedStateFromError !== "function") // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        // Attach a ping listener
        //
        // The data might resolve before we have a chance to commit the fallback. Or,
        // in the case of a refresh, we'll never commit a fallback. So we need to
        // attach a listener now. When it resolves ("pings"), we can decide whether to
        // try rendering the tree again.
        //
        // Only attach a listener if one does not already exist for the lanes
        // we're currently rendering (which acts like a "thread ID" here).
        //
        // We only need to do this in concurrent mode. Legacy Suspense always
        // commits fallbacks synchronously, so there are no pings.
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) // If we have pending work still, restore the original updaters
            restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        // Retry listener
        //
        // If the fallback does commit, we need to attach a different type of
        // listener. This one schedules an update on the Suspense boundary to turn
        // the fallback state off.
        //
        // Stash the wakeable on the boundary fiber so we can access it in the
        // commit phase.
        //
        // When the wakeable resolves, we'll attempt to render the boundary
        // again ("retry").
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        // A legacy mode Suspense quirk, only relevant to hook components.
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
             // This boundary already captured during this render. Continue to the next
            // boundary.
            node = node.return;
        }while (node !== null);
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        // This marks a Suspense boundary so that when we're unwinding the stack,
        // it captures the suspended "exception" and does a second (fallback) pass.
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            // Legacy Mode Suspense
            //
            // If the boundary is in legacy mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. When the Suspense boundary completes,
            // we'll do a second pass to render the fallback.
            if (suspenseBoundary === returnFiber) // Special case where we suspended while reconciling the children of
            // a Suspense boundary's inner Offscreen wrapper fiber. This happens
            // when a React.lazy component is a direct child of a
            // Suspense boundary.
            //
            // Suspense boundaries are implemented as multiple fibers, but they
            // are a single conceptual unit. The legacy mode behavior where we
            // pretend the suspended fiber committed as `null` won't work,
            // because in this case the "suspended" fiber is the inner
            // Offscreen wrapper.
            //
            // Because the contents of the boundary haven't started rendering
            // yet (i.e. nothing in the tree has partially rendered) we can
            // switch to the regular, concurrent mode behavior: mark the
            // boundary with ShouldCapture and enter the unwind phase.
            suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent;
                    else {
                        // When we try rendering again, we should not reuse the current fiber,
                        // since it's known to be in an inconsistent state. Use a force update to
                        // prevent a bail out.
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update, SyncLane);
                    }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.
        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
        // the begin phase to prevent an early bailout.
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) // If we have pending work still, restore the original updaters
        restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
            // This is a wakeable. The component suspended.
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) markDidThrowWhileHydratingDEV();
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
                // commits fallbacks synchronously, so there are no pings.
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                // No boundary was found. Unless this is a sync update, this is OK.
                // We can suspend and wait for more data to arrive.
                if (!includesSyncLane(rootRenderLanes)) {
                    // This is not a sync update. Suspend. Since we're not activating a
                    // Suspense boundary, this will unwind all the way to the root without
                    // performing a second pass to render a fallback. (This is arguably how
                    // refresh transitions should work, too, since we're not going to commit
                    // the fallbacks anyway.)
                    //
                    // This case also applies to initial hydration.
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                } // This is a sync/discrete update. We treat this case like an error
                // because discrete renders are expected to produce a complete tree
                // synchronously to maintain consistency with external state.
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."); // If we're outside a transition, fall through to the regular error path.
                // The error will be caught by the nearest suspense boundary.
                value = uncaughtSuspenseError;
            }
        } else // This is a regular error, not a Suspense wakeable.
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
            // discarding the dehydrated content and switching to a client render.
            // Instead of surfacing the error, find the nearest Suspense boundary
            // and render it again without hydration.
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) // Set a flag to indicate that we should try rendering the normal
                // children again, not the fallback.
                _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
                // still log it so it can be fixed.
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
            }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null);
    }
    function getSuspendedCache() {
        return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
        var currentChild = current.child; // This is always exactly one child
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
                // would during a normal fiber bailout.
                //
                // We don't have strong guarantees that the props object is referentially
                // equal during updates where we can't bail out anyway — like if the props
                // are shallowly equal, but there's a local state or context update in the
                // same batch.
                //
                // However, as a principle, we should aim to make the behavior consistent
                // across different ways of memoizing a component. For example, React.memo
                // has a different internal Fiber layout if you pass a normal function
                // component (SimpleMemoComponent) versus if you pass a different type
                // like forwardRef (MemoComponent). But this is an implementation detail.
                // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
                // affect whether the props object is reused during a bailout.
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumulated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
            // Rendering a hidden tree.
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Consider how Offscreen should work with transitions in the future
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
                // and resume this tree later.
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // This is the second render. The surrounding visible content has already
                // committed. Now we resume rendering the hidden tree.
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            // Rendering a visible tree.
            var _subtreeRenderLanes;
            if (prevState !== null) {
                // We're going from hidden -> visible.
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            // Schedule a Ref effect
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
         // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        // This is used by DevTools to force a boundary to error.
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
                // Is there a better way to do this?
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state
                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component");
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        // being called "element".
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            // This is a hydration root whose shell has not yet hydrated. We should
            // attempt to hydrate.
            // Flip isDehydrated to false to indicate that when this render
            // finishes, the root will no longer be dehydrated.
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
            // have reducer functions so it doesn't need rebasing.
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during a previous attempt to hydrate the shell, so we
                // forced a client render.
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                // The outermost shell has not hydrated yet. Start hydrating.
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    // Mark each child as hydrating. This is a fast path to know whether this
                    // tree is part of a hydrating tree. This is used to determine if a child
                    // node has fully mounted yet, and for scheduling event replaying.
                    // Conceptually this is similar to Placement in that a new subtree is
                    // inserted into the React tree here. It just happens to not need DOM
                    // mutations because it already exists.
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            // Root is not dehydrated. Either this is a client-only root, or it
            // already hydrated.
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        // Revert to client rendering.
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = "";
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) hint = " Did you wrap a component in React.lazy() more than once?";
        // because the fact that it's a separate type of work is an
        // implementation detail.
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
        }
        if (workInProgress.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
            var warningKey = ownerName || "";
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache(),
            transitions: null
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool,
            transitions: prevOffscreenState.transitions
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallback
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else // Attempting the main content
        if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconciliation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current === null) {
            // Initial mount
            // Special path for hydration
            // If we're currently hydrating, try to hydrate this boundary.
            tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            // This is an update.
            // Special path for hydration
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
            }
            if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
        // this wrapper function to constrain it.
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it.
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
            // (We don't do this in legacy mode, because in legacy mode we don't re-use
            // the current tree; see previous branch.)
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        // Falling back to client rendering. Because this has performance
        // implications, it's considered a recoverable error, even though the user
        // likely won't observe anything wrong with the UI.
        //
        // The error is passed in as an argument to enforce that every caller provide
        // a custom message, or explicitly opt out (currently the only path that opts
        // out is legacy mode; every concurrent path provides an error).
        if (recoverableError !== null) queueHydrationError(recoverableError);
         // This will add the old fiber to the deletion list
        reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
        // mounted but this is a new fiber.
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
        // boundary) already mounted but this is a new fiber.
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) // We will have dropped the effect list which contains the
        // deletion. We need to reconcile to delete the current child.
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) // This is a client-only boundary. Since we won't get any content from the server
        // for this, we need to schedule that at a higher priority based on when it would
        // have timed out. In theory we could render it in this pass but it would have the
        // wrong priority associated with it and will prevent hydration of parent path.
        // Instead, we'll leave work left on it to render it in a separate commit.
        // TODO This time should be the time at which the server rendered response that is
        // a parent to this boundary was displayed. However, since we currently don't have
        // a protocol to transfer that time, we'll just estimate it by using the current
        // time. This will mean that Suspense timeouts are slightly shifted to later than
        // they should be.
        // Schedule a normal pri update to render this content.
        workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else // We'll continue hydrating the rest at offscreen priority since we'll already
        // be showing the right content coming from the server, it is no rush.
        workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
        if (!didSuspend) {
            // This is the first render pass. Attempt to hydrate.
            // We should never be hydrating at this point because it is the first pass,
            // but after we've already committed once.
            warnIfHydrating();
            if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null);
            if (isSuspenseInstanceFallback(suspenseInstance)) {
                // This boundary is in a permanent fallback state. In this case, we'll never
                // get an update and we'll never be able to hydrate the final content. Let's just try the
                // client side render instead.
                var digest, message, stack;
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message) // eslint-disable-next-line react-internal/prod-error-codes
                error = new Error(message);
                else error = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
            }
            // any context has changed, we need to treat is as if the input might have changed.
            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
            if (didReceiveUpdate || hasContextChanged) {
                // This boundary has changed since the first render. This means that we are now unable to
                // hydrate it. We might still be able to hydrate it using a higher priority lane.
                var root = getWorkInProgressRoot();
                if (root !== null) {
                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                        // Intentionally mutating since this render will get interrupted. This
                        // is one of the very rare times where we mutate the current tree
                        // during the render phase.
                        suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render
                        var eventTime = NoTimestamp;
                        enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                        scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                    }
                } // If we have scheduled higher pri work above, this will probably just abort the render
                // since we now have higher priority work, but in case it doesn't, we need to prepare to
                // render something, if we time out. Even if that requires us to delete everything and
                // skip hydration.
                // Delay having to do this as long as the suspense timeout allows us.
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
                // This component is still pending more data from the server, so we can't hydrate its
                // content. We treat it as if this component suspended itself. It might seem as if
                // we could just try to render it client-side instead. However, this will perform a
                // lot of unnecessary work and is unlikely to complete since it often will suspend
                // on missing data anyway. Additionally, the server might be able to render more
                // than we can on the client yet. In that case we'd end up with more fallback states
                // on the client than if we just leave it alone. If the server times out or errors
                // these should update this boundary to the permanent Fallback state instead.
                // Mark it as having captured (i.e. suspended).
                workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.
                workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
            } else {
                // This is the first attempt.
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
            }
        } else {
            // This is the second render pass. We already attempted to hydrated, but
            // something either suspended or errored.
            if (workInProgress.flags & ForceClientRender) {
                // Something errored during hydration. Try again without hydrating.
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
            } else if (workInProgress.memoizedState !== null) {
                // Something suspended and we should still be in dehydrated mode.
                // Leave the existing child in place.
                workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
                // but the normal suspense pass doesn't.
                workInProgress.flags |= DidCapture;
                return null;
            } else {
                // Suspended but we should no longer be in dehydrated mode.
                // Therefore we now have to render the fallback.
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            }
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") switch(revealOrder.toLowerCase()){
                case "together":
                case "forwards":
                case "backwards":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case "forward":
                case "backward":
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case "forwards":
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case "backwards":
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case "together":
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== "function") error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            if (current !== null) {
                // A lazy component only mounts if it suspended inside a non-
                // concurrent tree, in an inconsistent state. We want to treat it like
                // a new mount, even though an empty version of it already committed.
                // Disconnect the alternate pointers.
                current.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            }
        }
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) // Reuse previous dependencies
        workInProgress.dependencies = current.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
         // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) // eslint-disable-next-line react-internal/prod-error-codes
        throw new Error("Cannot swap the root fiber.");
         // Disconnect from the old current.
        // It will get deleted.
        current.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
            throw new Error("Expected parent to have a child.");
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) // eslint-disable-next-line react-internal/prod-error-codes
                throw new Error("Expected to find the previous sibling.");
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        // Before performing an early bailout, we must check if there are pending
        // updates or context.
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
         // No pending update, but because context is propagated lazily, we need
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                // Profiler should only call onRender when one of its descendants actually rendered.
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                // Reset effect durations for the next eventual effect phase.
                // These are reset during render to allow the DevTools commit hook a chance to read them,
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
                        // been unsuspended it has committed as a resolved Suspense component.
                        // If it needs to be retried, it should have work scheduled on it.
                        workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
                        // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
                        return null;
                    } // If this boundary is currently timed out, we need to decide
                    // whether to retry the primary children, or to skip over it and
                    // go straight to the fallback. Check the priority of the primary
                    // child fragment.
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        // The primary child fragment does not have pending work marked
                        // on it
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                        // priority. Bailout.
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) // The fallback children have pending work. Skip over the
                        // primary children and work on the fallback.
                        return child.sibling;
                        else // Note: We can return `null` here because we already checked
                        // whether there were nested context consumers, via the call to
                        // `bailoutOnAlreadyFinishedWork` above.
                        return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(current, workInProgress, renderLanes);
                     // If none of the children had any work, that means that none of
                    // them got retried so they'll still be blocked in the same way
                    // as before. We can fast bail out.
                    workInProgress.flags |= DidCapture;
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    // Reset to the "together" mode in case we've started a different
                    // update in the past but didn't complete it.
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else {
                // Neither props nor legacy context changes. Check if there's a pending
                // update or context change.
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress.flags & DidCapture) === NoFlags) {
                    // No pending updates or context. Bail out now.
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
                else // An update was scheduled on this fiber, but there are no new props
                // nor legacy context. Set this to false. If an update queue or context
                // consumer produces a changed value, it will set this to true. Otherwise,
                // the component will assume the children have not changed and bail out.
                didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                // Check if this child belongs to a list of muliple children in
                // its parent.
                //
                // In a true multi-threaded implementation, we would render children on
                // parallel threads. This would represent the beginning of a new render
                // thread for this subtree.
                //
                // We only use this for id generation during hydration, which is why the
                // logic is located in this special branch.
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case "hidden":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case "collapsed":
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
                    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
                    // When work is done, it should bubble to the parent's actualDuration. If
                    // the fiber has not been cloned though, (meaning no work was done), then
                    // this value will reflect the amount of time spent working on a previous
                    // render. In that case it should not bubble. We determine whether it was
                    // cloned by comparing the child pointer.
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            // Bubble up the earliest expiration time.
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                // In profiling mode, resetChildExpirationTime is also used to reset
                // profiler durations.
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
                    // so we should bubble those up even during a bailout. All the other
                    // flags have a lifetime only of a single render + commit, so we should
                    // ignore them.
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
                    // smell because it assumes the commit phase is never concurrent with
                    // the render phase. Will address during refactor to alternate model.
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress);
            resetHydrationState();
            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
        }
        var wasHydrated = popHydrationState(workInProgress);
        if (nextState !== null && nextState.dehydrated !== null) {
            // We might be inside a hydration state the first time we're picking up this
            // Suspense boundary, and also after we've reentered it for further hydration.
            if (current === null) {
                if (!wasHydrated) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            } else {
                // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
                // state since we're now exiting out of it. popHydrationState doesn't do that for us.
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags) // This boundary did not suspend so it's now hydrated and unsuspended.
                workInProgress.memoizedState = null;
                 // If nothing suspended, we need to schedule an effect to mark this boundary
                // as having hydrated so events know that they're free to be invoked.
                // It's also a signal to replay events and the suspense callback.
                // If something suspended, schedule an effect to attach retry listeners.
                // So we might as well always mark this.
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var _primaryChildFragment = workInProgress.child;
                        if (_primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            }
        } else {
            // Successfully completed this tree. If this was a forced client render,
            // there may have been recoverable errors during first hydration
            // attempt. If so, add them to a queue so we can log them in the
            // commit phase.
            upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path
            return true;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            // Schedule an effect to clear this container at the start of the
                            // next commit. This handles the case of React rendering into a
                            // container with previous children. It's also safe to do for
                            // updates too, because current.child would only be null if the
                            // previous render was null (so the container would already
                            // be empty).
                            workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
                            // recoverable errors during first hydration attempt. If so, add
                            // them to a queue so we can log them in the commit phase.
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== "string") {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
                // to its own fiber type so that we can add other kinds of hydration
                // boundaries that aren't associated with a Suspense tree. In anticipation
                // of such a refactor, all the hydration logic is contained in
                // this branch.
                if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                    if (!fallthroughToNormalSuspensePath) {
                        if (workInProgress.flags & ShouldCapture) // Special case. There were remaining unhydrated nodes. We treat
                        // this as a mismatch. Revert to client rendering.
                        return workInProgress;
                        else // Did not finish hydrating, either because this is the initial
                        // render or because something suspended.
                        return null;
                    } // Continue with the normal Suspense path.
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                     // Don't bubble properties in this case.
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                // a passive effect, which is when we process the transitions
                if (nextDidTimeout !== prevDidTimeout) // an effect to toggle the subtree's visibility. When we switch from
                // fallback -> primary, the inner Offscreen fiber schedules this effect
                // as part of its normal complete phase. But when we switch from
                // primary -> fallback, the inner Offscreen fiber does not have a complete
                // phase. So we need to schedule its effect here.
                //
                // We also use this flag to connect/disconnect the effects, but the same
                // logic applies: when re-connecting, the Offscreen fiber's complete
                // phase will handle scheduling the effect. It's only when the fallback
                // is active that we have to do anything special.
                {
                    if (nextDidTimeout) {
                        var _offscreenFiber2 = workInProgress.child;
                        _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
                        // in the concurrent tree already suspended during this render.
                        // This is a known bug.
                        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                            // TODO: Move this back to throwException because this is too late
                            // if this is a large tree which is common for initial loads. We
                            // don't know if we should restart a render or not until we get
                            // this marker, and this is too late.
                            // If this render already had a ping or lower pri updates,
                            // and this is the first time we know we're going to suspend we
                            // should be able to immediately restart from within throwException.
                            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                            // this boundary is ok.
                            renderDidSuspend();
                            else // Otherwise, we're going to have to hide content so we should
                            // suspend for longer if possible.
                            renderDidSuspendDelayIfPossible();
                        }
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) // Schedule an effect to attach a retry listener to the promise.
                // TODO: Move to passive phase
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
                        workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                // Pop provider fiber
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    // We're running in the default, "independent" mode.
                    // We don't do anything in this mode.
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thenables. Instead, we'll transfer its thenables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect flags before doing the second pass since that's now invalid.
                                    // Reset the child fibers to their original state.
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We're done.
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    // Don't bubble properties in this case.
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else // Don't bubble properties for hidden children unless we're rendering
                // at offscreen priority.
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    // Check if there was an insertion or update in the hidden subtree.
                    // If so, we need to hide those nodes in the commit phase, so
                    // schedule a visibility effect.
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
    }
    function unwindWork(current, workInProgress, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    // There was an error during render that wasn't captured by a suspense
                    // boundary. Do a second pass on the root to unmount the children.
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                } // We unwound to the root without completing it. Exit.
                return null;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        // Note: This intentionally doesn't check if we're hydrating because comparing
        // to the current tree provider fiber is just as fast and less error-prone.
        // Ideally we would have a special version of the work loop only
        // for hydration.
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
    // Only used when enableSuspenseLayoutEffectSemantics is enabled.
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null; // Used for Profiling builds to track updaters.
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt mounting.
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    } // Capture errors so they don't interrupt mounting.
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === "function") {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error1) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error1);
                }
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    effect.destroy = create();
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== "function") {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = "useLayoutEffect";
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = "useInsertionEffect";
                        else hookName = "useEffect";
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === "function") addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + "and call it immediately:\n\n" + hookName + "(() => {\n" + "  async function fetchData() {\n" + "    // You can await here\n" + "    const response = await MyAPI.getData(someId);\n" + "    // ...\n" + "  }\n" + "  fetchData();\n" + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = " You returned: " + destroy;
                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect);
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        // Only Profilers with work in their subtree will have an Update effect scheduled.
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
                // It does not get reset until the start of the next commit phase.
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onPostCommit === "function") onPostCommit(id, phase, passiveEffectDuration, commitTime);
                 // Bubble times to the next nearest ancestor Profiler.
                // After we process that Profiler, we'll bubble further up.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    // At this point layout effects have already been destroyed (during mutation phase).
                    // This is done to prevent sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState; // We could update instance props and state here,
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? "mount" : "update";
                if (isCurrentUpdateNested()) phase = "nested-update";
                if (typeof onRender === "function") onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === "function") onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                 // Schedule a passive effect for this Profiler to call onPostCommit hooks.
                // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
                // because the effect is also where times bubble to parent Profilers.
                enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
                // Do not reset these values until the next render so DevTools has a chance to read them first.
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        // Turn on layout effects in a tree that previously disappeared.
        // TODO (Offscreen) Check: flags & LayoutStatic
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // Only hide or unhide the top-most host nodes.
        var hostSubtreeRoot = null;
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                        var instance = node.stateNode;
                        if (isHidden) hideInstance(instance);
                        else unhideInstance(node.stateNode, node.memoizedProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } catch (error1) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error1);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === "function") error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty("current")) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointer to disconnect it from the tree.
        // This enables us to detect and warn against state updates on an unmounted component.
        // It also prevents events from bubbling from within disconnected components.
        //
        // Ideally, we should also clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child.
        // This child itself will be GC:ed when the parent updates the next time.
        //
        // Note that we can't clear child or sibling pointers yet.
        // They're needed for passive effects and for findDOMNode.
        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
        //
        // Don't reset the alternate yet, either. We need that so we can detach the
        // alternate's fields in the passive phase. Clearing the return pointer is
        // sufficient for findDOMNode semantics.
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        } // Note: Defensively using negation instead of < in case
        // Clear cyclical Fiber fields. This level alone is designed to roughly
        // approximate the planned Fiber refactor. In that world, `setState` will be
        // bound to a special "instance" object instead of a Fiber. The Instance
        // object will not have any of these fields. It will only be connected to
        // the fiber tree via a single link at the root. So if this level alone is
        // sufficient to fix memory issues, that bodes well for our plans.
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
        // tree, which has its own pointers to children, parents, and siblings.
        // The other host nodes also point back to fibers, so we should detach that
        // one, too.
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
        fiber._debugOwner = null;
        // Theoretically, nothing in here should be necessary, because we already
        // disconnected the fiber from the tree. So even if something leaks this
        // particular fiber, it won't leak anything else
        //
        // The purpose of this branch is to be super aggressive so we can measure
        // if there's any difference in memory impact. If there is, that could
        // indicate a React leak we don't know about.
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    // Reset the text content of the parent before doing any insertions
                    resetTextContent(parent); // Clear ContentReset from the effect tag
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
                // children to find all the terminal nodes.
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            // eslint-disable-next-line-no-fallthrough
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    } // These are tracked on the stack as we recursively traverse a
    // deleted subtree.
    // TODO: Update these during the whole mutation phase, not just during
    // a deletion.
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root, returnFiber, deletedFiber) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        // Recursively delete all host nodes from the parent, detach refs, clean
        // up mounted layout effects, and call componentWillUnmount.
        // We only need to remove the topmost host child in each branch. But then we
        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
        // could split this into two separate traversals functions, where the second
        // one doesn't include any removeChild logic. This is maybe the same
        // function as "disappearLayoutEffects" (or whatever that turns into after
        // the layout phase is refactored to use recursion).
        // Before starting, find the nearest host parent on the stack so we know
        // which instance/container to remove the children from.
        // TODO: Instead of searching up the fiber return path on every deletion, we
        // can track the nearest host component on the JS stack as we traverse the
        // tree during the commit phase. This would make insertions faster, too.
        var parent = returnFiber;
        findParent: while(parent !== null){
            switch(parent.tag){
                case HostComponent:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                case HostRoot:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                case HostPortal:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
            }
            parent = parent.return;
        }
        if (hostParent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
        detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        // TODO: Use a static flag to skip trees that don't have unmount effects
        var child = parent.child;
        while(child !== null){
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
        }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
        // into their subtree. There are simpler cases in the inner switch
        // that don't modify the stack.
        switch(deletedFiber.tag){
            case HostComponent:
                if (!offscreenSubtreeWasHidden) safelyDetachRef(deletedFiber, nearestMountedAncestor);
                 // Intentional fallthrough to next branch
            // eslint-disable-next-line-no-fallthrough
            case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                    // Now that all the child effects have unmounted, we can remove the
                    // node from the tree.
                    if (hostParentIsContainer) removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
            case DehydratedFragment:
                if (hostParent !== null) {
                    if (hostParentIsContainer) clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
            case HostPortal:
                // When we go into a portal, it becomes the parent to remove from.
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    var updateQueue = deletedFiber.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                if (destroy !== undefined) {
                                    if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                    else if ((tag & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                        if (deletedFiber.mode & ProfileMode) {
                                            startLayoutEffectTimer();
                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                            recordLayoutEffectDuration(deletedFiber);
                                        } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                        markComponentLayoutEffectUnmountStopped();
                                    }
                                }
                                effect = effect.next;
                            }while (effect !== firstEffect);
                        }
                    }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                    var instance = deletedFiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ScopeComponent:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                    // If this offscreen component is hidden, we already unmounted it. Before
                    // deleting the children, track that it's already unmounted so that we
                    // don't attempt to unmount the effects again.
                    // TODO: If the tree is hidden, in most cases we should be able to skip
                    // over the nested children entirely. An exception is we haven't yet found
                    // the topmost host node to delete, which we already track on the stack.
                    // But the other case is portals, which need to be detached no matter how
                    // deeply they are nested. We should use a subtree flag to track whether a
                    // subtree includes a nested portal.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
        }
    }
    function commitSuspenseCallback(finishedWork) {
        // TODO: Move this to passive phase
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) // If we have pending work still, associate the original updaters with it.
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
        // Deletions effects can be scheduled on any fiber type. They need to happen
        // before the children effects hae fired.
        var deletions = parentFiber.deletions;
        if (deletions !== null) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            try {
                commitDeletionEffects(root, parentFiber, childToDelete);
            } catch (error) {
                captureCommitPhaseError(childToDelete, parentFiber, error);
            }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while(child !== null){
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
            }
        }
        setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
        // because the fiber tag is more specific. An exception is any flag related
        // to reconcilation, because those can be set on all fiber types.
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    try {
                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    } // Layout effects are destroyed during the mutation phase so that all
                    // destroy functions for all fibers are called before any create functions.
                    // This prevents sibling component effects from interfering with each other,
                    // e.g. a destroy function in one component should never override a ref set
                    // by a create function in another component during the same commit.
                    if (finishedWork.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                        } catch (error1) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error1);
                        }
                        recordLayoutEffectDuration(finishedWork);
                    } else try {
                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                }
                return;
            case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
            case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                // TODO: ContentReset gets cleared by the children during the commit
                // phase. This is a refactor hazard because it means we must read
                // flags the flags after `commitReconciliationEffects` has already run;
                // the order matters. We should refactor so that ContentReset does not
                // rely on mutating the flag during commit. Like by setting a flag
                // during the render phase instead.
                if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                        resetTextContent(instance);
                    } catch (error3) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                }
                if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                        // Commit the work prepared earlier.
                        var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                        // as the newProps. The updatePayload will contain the real change in
                        // this case.
                        var oldProps = current !== null ? current.memoizedProps : newProps;
                        var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) try {
                            commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error4) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                        }
                    }
                }
                return;
            case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldText = current !== null ? current.memoizedProps : newText;
                    try {
                        commitTextUpdate(textInstance, oldText, newText);
                    } catch (error5) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error5);
                    }
                }
                return;
            case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (current !== null) {
                        var prevRootState = current.memoizedState;
                        if (prevRootState.isDehydrated) try {
                            commitHydratedContainer(root.containerInfo);
                        } catch (error6) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                        }
                    }
                }
                return;
            case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                    var offscreenInstance = offscreenFiber.stateNode;
                    var newState = offscreenFiber.memoizedState;
                    var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    offscreenInstance.isHidden = isHidden;
                    if (isHidden) {
                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                        if (!wasHidden) // TODO: Move to passive phase
                        markCommitTimeOfFallback();
                    }
                }
                if (flags & Update) {
                    try {
                        commitSuspenseCallback(finishedWork);
                    } catch (error7) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error7);
                    }
                    attachSuspenseRetryListeners(finishedWork);
                }
                return;
            case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                    // Before committing the children, track on the stack whether this
                    // offscreen subtree was already hidden, so that we don't unmount the
                    // effects again.
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                    recursivelyTraverseMutationEffects(root, finishedWork);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                    var _offscreenInstance = finishedWork.stateNode;
                    var _newState = finishedWork.memoizedState;
                    var _isHidden = _newState !== null;
                    var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
                    // read it during an event
                    _offscreenInstance.isHidden = _isHidden;
                    if (_isHidden) {
                        if (!_wasHidden) {
                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                nextEffect = offscreenBoundary;
                                var offscreenChild = offscreenBoundary.child;
                                while(offscreenChild !== null){
                                    nextEffect = offscreenChild;
                                    disappearLayoutEffects_begin(offscreenChild);
                                    offscreenChild = offscreenChild.sibling;
                                }
                            }
                        }
                    }
                    // TODO: This needs to run whenever there's an insertion or update
                    // inside a hidden Offscreen tree.
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
            case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
            case ScopeComponent:
                return;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
        }
    }
    function commitReconciliationEffects(finishedWork) {
        // Placement effects (insertions, reorders) can be scheduled on any fiber
        // type. They needs to happen after the children effects have fired, but
        // before the effects on this fiber have fired.
        var flags = finishedWork.flags;
        if (flags & Placement) {
            try {
                commitPlacement(finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            } // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted does
            // and isMounted is deprecated anyway so we should be able to kill this.
            finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        // Suspense layout effects semantics don't change for legacy roots.
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                // Keep track of the current Offscreen stack's state.
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    // The Offscreen tree is hidden. Skip over its layout effects.
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        // This is the root of a reappearing boundary. Turn its layout effects
                        // back on.
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    } // Restore Offscreen state and resume in our-progress traversal.
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    // TODO (Offscreen) Check: flags & RefStatic
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    // Check if this is a
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        // Nested Offscreen tree is already hidden. Don't disappear
                        // its effects.
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    // Nested Offscreen tree is still hidden. Don't re-appear its effects.
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic
            if (firstChild !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                // This node may have been reused from a previous render, so we can't
                // assume its return pointer is correct.
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    // A fiber was deleted from this parent fiber, but it's still part of
                    // the previous (alternate) parent fiber's list of children. Because
                    // children are a linked list, an earlier sibling that's still alive
                    // will be connected to the deleted fiber via its `alternate`:
                    //
                    //   live fiber
                    //   --alternate--> previous live fiber
                    //   --sibling--> deleted fiber
                    //
                    // We can't disconnect `alternate` on nodes that haven't been deleted
                    // yet, but we can disconnect the `sibling` and `child` pointers.
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null);
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect; // Deletion effects fire in parent -> child order
            // TODO: Check if fiber has a PassiveStatic flag
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
            // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
            if (child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            // Recursively traverse the entire deleted tree and clean up fiber fields.
            // This is more aggressive than ideal, and the long term goal is to only
            // have to detach the deleted tree at the root.
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    } // TODO: Reuse reappearLayoutEffects traversal here?
    function invokeLayoutEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error1) {
                    captureCommitPhaseError(fiber, fiber.return, error1);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        // Legacy mode. We preserve the behavior of React 17's act. It assumes an
        // act environment whenever `jest` is defined, but you can still turn off
        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
        // to false.
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) // TODO: Include link to relevant documentation page.
        error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var RenderContext = /*                */ 2;
    var CommitContext = /*                */ 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).
    var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.
    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
    // We will log them once the tree commits.
    var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) // This is a render phase update. These are not officially supported. The
        // old behavior is to give this the same "thread" (lanes) as
        // whatever is currently rendering. So if you call `setState` on a component
        // that happens later in the same render, it will flush. Ideally, we want to
        // remove the special case and treat them as if they came from an
        // interleaved event. Regardless, this pattern is not officially supported.
        // This behavior is only a fallback. The flag only exists until we can roll
        // out the setState warning, since existing code might accidentally rely on
        // the current behavior.
        return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            } // The algorithm for assigning an update to a lane should be stable for all
            // updates at the same priority within the same event. To do this, the
            // inputs to the algorithm must be the same.
            //
            // The trick we use is to cache the first of each of these inputs within an
            // event. Then reset the cached values once we can be sure the event is
            // over. Our heuristic for that is whenever we enter a concurrent work loop.
            if (currentEventTransitionLane === NoLane) // All transitions within the same event are assigned the same lane.
            currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        } // Updates originating inside certain React methods, like flushSync, have
        // their priority set by tracking it with a context variable.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
         // This update originated outside React. Ask the host environment for an
        // appropriate priority, based on the type of event.
        //
        // The opaque type returned by the host config is internally a lane, so we can
        // use that directly.
        // TODO: Move this type conversion to the event priority module.
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
        checkForNestedUpdates();
        if (isRunningInsertionEffect) error("useInsertionEffect must not schedule updates.");
        if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) // This update was dispatched during the render phase. This is a mistake
        // if the update originates from user space (with the exception of local
        // hook updates, which are handled differently and don't reach this
        // function), but there are some internal React features that use this as
        // an implementation detail, like selective hydration.
        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                // Received an update to a tree that's in the middle of rendering. Mark
                // that there was an interleaved update work on this root. Unless the
                // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
                // phase update. In that case, we don't treat render phase updates as if
                // they were interleaved, for backwards compat reasons.
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
                // definitely won't finish. Since we have a new update, let's mark it as
                // suspended now, right before marking the incoming update. This has the
                // effect of interrupting the current render and switching to the update.
                // TODO: Make sure this doesn't override pings that happen while we've
                // already started rendering.
                markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                // Flush the synchronous work now, unless we're already working or inside
                // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                // scheduleCallbackForFiber to preserve the ability to schedule a callback
                // without immediately flushing it. We only do this for user-initiated
                // updates, to preserve historical behavior of legacy mode.
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        // This is a special fork of scheduleUpdateOnFiber that is only used to
        // schedule the initial hydration of a root that has just been created. Most
        // of the stuff in scheduleUpdateOnFiber can be skipped.
        //
        // The main reason for this separate path, though, is to distinguish the
        // initial children from subsequent updates. In fully client-rendered roots
        // (createRoot instead of hydrateRoot), all top-level renders are modeled as
        // updates, but hydration roots are special because the initial render must
        // match what was rendered on the server.
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
        // Check if this is a render phase update. Only called by class components,
        // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
        return(// decided not to enable it.
        (executionContext & RenderContext) !== NoContext);
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        } // We use the highest priority lane to represent the priority of the callback.
        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            // If we're going to re-use an existing task, it needs to exist.
            // Assume that discrete update microtasks are non-cancellable and null.
            // TODO: Temporary until we confirm this warning is not fired.
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        if (existingCallbackNode != null) // Cancel the existing callback. We'll schedule a new one below.
        cancelCallback$1(existingCallbackNode);
         // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            // Special case: Sync React callbacks are scheduled on a special
            // internal queue
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            // Flush the queue in a microtask.
            if (ReactCurrentActQueue$1.current !== null) // Inside `act`, use our internal `act` queue so that these get flushed
            // at the end of the current scope even when using the sync version
            // of `act`.
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                // In Safari, appending an iframe forces microtasks to run.
                // https://github.com/facebook/react/issues/22459
                // We don't support running callbacks in the middle of render
                // or commit so we need to check against that.
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) // Note that this would still prematurely flush the callbacks
                // if this happens outside render or commit phase (e.g. in an event).
                flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next lanes to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
         // We disable time-slicing in some cases: if the work has been CPU-bound
        // for too long ("expired" work, to prevent starvation), or we're in
        // sync-updates-by-default mode.
        // TODO: We only check `didTimeout` defensively, to account for a Scheduler
        // bug we're still investigating. Once the bug in Scheduler is fixed,
        // we can remove this, since we track expiration ourselves.
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                // If something threw an error, try rendering one more time. We'll
                // render synchronously to block concurrent data mutations, and we'll
                // includes all pending updates are included. If it still fails after
                // the second attempt, we'll give up and commit the resulting tree.
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) // The render unwound without completing the tree. This happens in special
            // cases where need to exit the current render without producing a
            // consistent tree or committing.
            //
            // This should only happen during a concurrent render, not a discrete or
            // synchronous update. We should have already checked for this when we
            // unwound the stack.
            markRootSuspended$1(root, lanes);
            else {
                // The render completed.
                // Check if this render may have yielded to a concurrent event, and if so,
                // confirm that any newly rendered stores are consistent.
                // TODO: It's possible that even a concurrent render may never have yielded
                // to the main thread, if it was fast enough, or if it expired. We could
                // skip the consistency check in that case, too.
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    // A store was mutated in an interleaved event. Render again,
                    // synchronously, to block further mutations.
                    exitStatus = renderRootSync(root, lanes); // We need to check again if something threw
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
                        // concurrent events.
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                } // We now have a consistent tree. The next step is either to commit it,
                // or, if something suspended, wait to commit it after a timeout.
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        // If an error occurred during hydration, discard server response and fall
        // back to client side render.
        // Before rendering again, save the errors from the previous attempt.
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            // The shell failed to hydrate. Set a flag to force a client rendering
            // during the next attempt. To do this, we call prepareFreshStack now
            // to create the root work-in-progress fiber. This is a bit weird in terms
            // of factoring, because it relies on renderRootSync not calling
            // prepareFreshStack again in the call below, which happens because the
            // root and lanes haven't changed.
            //
            // TODO: I think what we should do is set ForceClientRender inside
            // throwException, like we do for nested Suspense boundaries. The reason
            // it's here instead is so we can switch to the synchronous work loop, too.
            // Something to consider for a future refactor.
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            // Successfully finished rendering on retry
            // The errors from the failed first attempt have been recovered. Add
            // them to the collection of recoverable errors. We'll log them in the
            // commit phase.
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
            // from the first attempt, to preserve the causal sequence.
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            default:
                throw new Error("Unknown root exit status.");
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        // Search the rendered tree for external store reads, and check whether the
        // stores were mutated in a concurrent event. Intentionally using an iterative
        // loop instead of recursion so we can exit early.
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) // Found an inconsistent store.
                            return false;
                        } catch (error) {
                            // If `getSnapshot` throws, return `false`. This will schedule
                            // a re-render, and the error will be rethrown during render.
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow doesn't know this is unreachable, but eslint does
        // eslint-disable-next-line no-unreachable
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            // There's no remaining sync work left.
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error("Root did not complete. This is a bug in React.");
         // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
            // most batchedUpdates-like method.
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync(fn) {
        // In legacy mode, we flush pending passive effects at the beginning of the
        // next event, not at the end of the previous one.
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        // Used by the renderer to print a warning if certain APIs are called from
        // the wrong context.
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true);
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) // This is a sync render, so we should have finished the whole tree.
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
                // If we bailout on this work, we'll move them back (like above).
                // It's important to move them now in case the work spawns more work at the same priority with different updaters.
                // That way we can keep the current update and future updates separate.
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its subtree flags.
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    // We've unwound all the way to the root.
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null); // We've reached the root.
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors, transitions) {
        // TODO: This no longer makes any sense. We already wrap the mutation and
        // layout phases. Should be able to remove.
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root.callbackNode = null;
        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // If there are pending passive effects, schedule a callback to process them.
        // Do this as early as possible, so it is queued before anything else that
        // might get scheduled in the commit phase. (See #16714.)
        // TODO: Delete all other places that schedule the passive effect callback
        // They're redundant.
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                // to store it in pendingPassiveTransitions until they get processed
                // We need to pass this through as an argument to commitRoot
                // because workInProgressTransitions might have changed between
                // the previous render and commit if we throttle the commit
                // with setTimeout
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
                    // *after* passive effects fire to avoid freeing a cache pool that may
                    // be referenced by a node in the tree (HostRoot, Cache boundary etc)
                    return null;
                });
            }
        } // Check if there are any effects in the whole tree.
        // TODO: This is left over from the effect list implementation, where we had
        // to check for the existence of `firstEffect` to satisfy Flow. I think the
        // only other reason this optimization exists is because it affects profiling.
        // Reconsider whether this is necessary.
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext; // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            // opportunity to paint.
            requestPaint();
            executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            // No effects.
            root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
        } // Read this again, since an effect might have updated it
        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
        // TODO: This is part of the `componentDidCatch` implementation. Its purpose
        // is to detect whether something might have called setState inside
        // `componentDidCatch`. The mechanism is known to be flawed because `setState`
        // inside `componentDidCatch` is itself flawed — that's why we recommend
        // `getDerivedStateFromError` instead. However, it could be improved by
        // checking if remainingLanes includes Sync work, instead of whether there's
        // any work remaining at all (which would also include stuff like Suspense
        // retries or transitions). It's been like this for a while, though, so fixing
        // it probably isn't that urgent.
        if (remainingLanes === NoLanes) // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            // There were errors during this render, but recovered from them without
            // needing to surface it to the UI. We log them here.
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                    componentStack: componentStack,
                    digest: digest
                });
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        } // If the passive effects are the result of a discrete render, flush them
        // synchronously at the end of the current task so that the result is
        // immediately observable. Otherwise, we assume that they are not
        // order-dependent and do not need to be observed by external systems, so we
        // can wait until after paint.
        // TODO: We can optimize this by not scheduling the callback earlier. Since we
        // currently schedule the callback in multiple places, will wait until those
        // are consolidated.
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
         // Read this again, since a passive effect might have updated it
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
         // If layout work was scheduled, flush it now.
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
        // probably just combine the two functions. I believe they were only separate
        // in the first place because we used to wrap it with
        // `Scheduler.runWithPriority`, which accepts a function. But now we track the
        // priority within React itself, so we can mutate the variable directly.
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
         // Cache and clear the transitions flag
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
        // Figure out why and fix it. It's not causing any known issues (probably
        // because it's only used for profiling), but it's a refactor hazard.
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        if (didScheduleUpdateDuringPassiveEffects) {
            if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
            else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
            }
        } else nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(fiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
        // will fire for errors that are thrown by destroy functions inside deleted
        // trees. What it should instead do is propagate the error to the parent of
        // the deleted tree. In the meantime, do not add this warning to the
        // allowlist; this is only for our internal use.
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new lanes.
        if (retryLane === NoLane) // TODO: Assign this to `suspenseState.retryLane`? to avoid
        // unnecessary entanglement?
        retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
        // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
        // Maybe not a big deal since this is DEV only behavior.
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        // We don't need to re-check StrictEffectsMode here.
        // This function is only called if that check has already passed.
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") // Don't replay promises.
            // Don't replay errors if we are hydrating and have already suspended or handled an error
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
                originalError._suppressLogging = true;
            } // We always throw the original error in case the second render pass is not idempotent.
            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown"; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            }); // This function intentionally does not clear memoized updaters.
        // Those may still be relevant to the current commit
        // and a future one (e.g. Suspense).
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        // If we're currently inside an `act` scope, bypass Scheduler and push to
        // the `act` queue instead.
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
         // In production, always call Scheduler. This function will be stripped out.
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) // Not in an act environment. No need to warn.
            return;
        } else {
            // Legacy mode has additional cases where we suppress a warning.
            if (!isLegacyActEnvironment()) // Not in an act environment. No need to warn.
            return;
            if (executionContext !== NoContext) // Legacy mode doesn't warn if the update is batched, i.e.
            // batchedUpdates or flushSync.
            return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) // For backwards compatibility with pre-hooks code, legacy mode only
            // warns for updates that originate from a hook.
            return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
    }
    /* eslint-disable react-internal/prod-error-codes */ var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === "function") {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === "function") needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== "function") return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error("Expected to reach root first.");
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e1) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            // DEV-only fields
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress.flags = NoFlags; // The effects are no longer valid.
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        } // Reset all effects except static ones.
        // Static effects are not specific to a render.
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect flags but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.
        var current = workInProgress.alternate;
        if (current === null) {
            // Reset to createFiber's initial values.
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.
            workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === "string") fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) // Strict effects should never run on legacy roots
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_CACHE_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_TRACING_MARKER_TYPE:
            // eslint-disable-next-line no-fallthrough
            case REACT_DEBUG_TRACING_MODE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === "object" && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = "";
                if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += "\n\nCheck the render method of `" + ownerName + "`.";
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== "string") error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
            isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? "hydrate()" : "render()";
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // host config, but because they are passed in at runtime, we have to thread
    // them through the root constructor. Perhaps we should put them all into a
    // single type, like a DynamicHostConfig that is defined by the renderer.
    identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === "function") throw new Error("Unable to find node on an unmounted component.");
            else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor
        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
        // a regular update because the initial render must match was was rendered
        // on the server.
        // NOTE: This update intentionally doesn't have a payload. We're only using
        // the update to schedule work on the root fiber (and, for legacy roots, to
        // enqueue the callback if one is provided).
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update, lane);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== "function") error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        var root = enqueueUpdate(current$1, update, lane);
        if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
        }
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    // Flush the first scheduled "update".
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                flushSync(function() {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                    }
                }); // If we're still blocked after this, we need to increase
                // the priority of any promises resolving within this
                // boundary so that they next attempt also has higher pri.
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thenables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var lane = SelectiveHydrationLane;
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var lane = requestUpdateLane(fiber);
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
        });
    }
    /* global reportError */ var defaultOnRecoverableError = typeof reportError === "function" ? // emulating an uncaught JavaScript error.
    reportError : function(error) {
        // In older browsers and test environments, fallback to console.error.
        // eslint-disable-next-line react-internal/no-production-logging
        console["error"](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error("Cannot update an unmounted root.");
        if (typeof arguments[1] === "function") error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== "undefined") error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === "function") error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            else if (typeof options === "object" && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        // the hydration callbacks.
        var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    } // TODO: Remove this function which also includes comment nodes.
    // We only use it in places that are currently more relaxed.
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {
    // legacy API.
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            // First clear any existing content.
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== "function") error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) // Initial mount
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
    }
    function hydrate(element, container, callback) {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent)) throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    } // Overload the definition to the two valid signatures.
    // Warning, this opts-out of checking the function body.
    // eslint-disable-next-line no-redeclare
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{"react":"21dqq","scheduler":"juvHo"}],"juvHo":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/scheduler.development.js");

},{"./cjs/scheduler.development.js":"RqdIf"}],"RqdIf":[function(require,module,exports) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
    var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null; // IE and Node.js + jsdom
    var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.
    var frameInterval = frameYieldMs;
    var startTime = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) // The main thread has only been blocked for a really short amount of time;
        // smaller than a single frame. Don't yield yet.
        return false;
         // The main thread has been blocked for a non-negligible amount of time. We
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            // Using console['error'] to evade Babel and ESLint
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else // reset the framerate
        frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
            // has been blocked.
            startTime = currentTime;
            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
            // error can be observed.
            //
            // Intentionally not using a try-catch, since that makes some debugging
            // techniques harder. Instead, if `scheduledHostCallback` errors, then
            // `hasMoreWork` will remain true, and we'll continue the work loop.
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) // If there's more work, schedule the next message event at the end
                // of the preceding one.
                schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
         // Yielding to the browser will give it a chance to paint, so we can
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === "function") // Node.js and old IE.
    // There's a few reasons for why we prefer setImmediate.
    //
    // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
    // (Even though this is a DOM fork of the Scheduler, you could get here
    // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
    // https://github.com/facebook/react/issues/20756
    //
    // But also, it runs earlier which is the semantic we want.
    // If other browsers ever implement it, it's better to use it.
    // Although both of these would be inferior to native scheduling.
    schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== "undefined") {
        // DOM and Worker environments.
        // We prefer MessageChannel because of the 4ms setTimeout clamping.
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else // We should only fallback here in non-browser environments.
    schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();

},{}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"km3Ru":[function(require,module,exports) {
"use strict";
var Refresh = require("react-refresh/runtime");
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module1) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module1.id + " " + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module1) {
    if (isReactRefreshBoundary(module1.exports)) {
        registerExportsForReactRefresh(module1);
        if (module1.hot) {
            module1.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module1.exports;
            });
            module1.hot.accept(function(getParents) {
                var prevExports = module1.hot.data.prevExports;
                var nextExports = module1.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        hasExports = true;
        if (key === "__esModule") continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        if (key === "__esModule") continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module1) {
    var exports = module1.exports, id = module1.id;
    Refresh.register(exports, id + " %exports%");
    if (exports == null || typeof exports !== "object") // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = "__esModule" in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + " %exports% " + key);
    }
}

},{"react-refresh/runtime":"786KC"}],"7rsOJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tslib = require("tslib");
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _visData = require("vis-data");
var _visNetwork = require("vis-network");
var _defaultsDeep = require("lodash/fp/defaultsDeep");
var _defaultsDeepDefault = parcelHelpers.interopDefault(_defaultsDeep);
var _isEqual = require("lodash/isEqual");
var _isEqualDefault = parcelHelpers.interopDefault(_isEqual);
var _differenceWith = require("lodash/differenceWith");
var _differenceWithDefault = parcelHelpers.interopDefault(_differenceWith);
var _intersectionWith = require("lodash/intersectionWith");
var _intersectionWithDefault = parcelHelpers.interopDefault(_intersectionWith);
var diff = function(current, next, field) {
    if (field === void 0) field = "id";
    // consider caching this value between updates
    var nextIds = new Set(next.map(function(item) {
        return item[field];
    }));
    var removed = current.filter(function(item) {
        return !nextIds.has(item[field]);
    });
    var unchanged = (0, _intersectionWithDefault.default)(next, current, (0, _isEqualDefault.default));
    var updated = (0, _differenceWithDefault.default)((0, _intersectionWithDefault.default)(next, current, function(a, b) {
        return a[field] === b[field];
    }), unchanged, (0, _isEqualDefault.default));
    var added = (0, _differenceWithDefault.default)((0, _differenceWithDefault.default)(next, current, (0, _isEqualDefault.default)), updated, (0, _isEqualDefault.default));
    return {
        removed: removed,
        unchanged: unchanged,
        updated: updated,
        added: added
    };
};
function Graph(props) {
    var container = (0, _reactDefault.default).useRef(null);
    var nodes = (0, _react.useState)(new (0, _visData.DataSet)())[0];
    var edges = (0, _react.useState)(new (0, _visData.DataSet)())[0];
    var _a = (0, _react.useState)(undefined), netWork = _a[0], setNetWork = _a[1];
    if (container.current) {
        if (netWork) {
            // netWork.off();
            var events = props.events || {};
            for(var _i = 0, _b = Object.keys(events); _i < _b.length; _i++){
                var eventName = _b[_i];
                netWork.off(eventName);
                netWork.on(eventName, events[eventName]);
            }
        }
        var nodesChange = !(0, _isEqualDefault.default)(nodes.get(), props.graph.nodes);
        if (nodesChange) {
            var idIsEqual = function(n1, n2) {
                return n1.id === n2.id;
            };
            var nodesRemoved = (0, _differenceWithDefault.default)(nodes.get(), props.graph.nodes, idIsEqual);
            var nodesAdded = (0, _differenceWithDefault.default)(props.graph.nodes, nodes.get(), idIsEqual);
            var nodesChanged = (0, _differenceWithDefault.default)((0, _differenceWithDefault.default)(props.graph.nodes, nodes.get(), (0, _isEqualDefault.default)), nodesAdded);
            nodes.remove(nodesRemoved);
            nodes.update(nodesChanged);
            nodes.add(nodesAdded);
        }
        var edgesChange = !(0, _isEqualDefault.default)(edges.get(), props.graph.edges);
        if (edgesChange) {
            var _c = diff(edges.get(), props.graph.edges), edgesRemoved = _c.removed, edgesAdded = _c.added, edgesChanged = _c.updated;
            edges.remove(edgesRemoved);
            edges.update(edgesChanged);
            edges.add(edgesAdded);
        }
    }
    (0, _react.useEffect)(function() {
        if (container.current) {
            var defaultOptions = {
                physics: {
                    stabilization: false
                },
                autoResize: false,
                edges: {
                    smooth: false,
                    color: "#000000",
                    width: 0.5,
                    arrows: {
                        to: {
                            enabled: true,
                            scaleFactor: 0.5
                        }
                    }
                }
            };
            // merge user provied options with our default ones
            var options = (0, _defaultsDeepDefault.default)(defaultOptions, props.options);
            var netWork_1 = new (0, _visNetwork.Network)(container.current, (0, _tslib.__assign)((0, _tslib.__assign)({}, props.graph), {
                edges: edges,
                nodes: nodes
            }), options);
            setNetWork(function(_prev) {
                return netWork_1;
            });
        }
    }, [
        container.current
    ]);
    var style = (0, _tslib.__assign)({
        width: "100%",
        height: "100%"
    }, props.style);
    return (0, _reactDefault.default).createElement("div", {
        ref: container,
        style: style
    });
}
exports.default = Graph;

},{"tslib":"lRdW5","react":"21dqq","vis-data":"4GIQM","vis-network":"lohLN","lodash/fp/defaultsDeep":"eDXlY","lodash/isEqual":"9XEia","lodash/differenceWith":"nyiqW","lodash/intersectionWith":"bpcEQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4GIQM":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.4
 * @date    2022-03-15T15:23:59.245Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    e(exports);
}(this, function(t) {
    function e(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    var r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, n = {
        exports: {}
    }, i = function(t) {
        return t && t.Math == Math && t;
    }, o = i("object" == typeof globalThis && globalThis) || i("object" == typeof window && window) || i("object" == typeof self && self) || i("object" == typeof r && r) || function() {
        return this;
    }() || Function("return this")(), a = function(t) {
        try {
            return !!t();
        } catch (t1) {
            return !0;
        }
    }, u = !a(function() {
        var t = (function() {}).bind();
        return "function" != typeof t || t.hasOwnProperty("prototype");
    }), s = u, c = Function.prototype, f = c.apply, l = c.call, h = "object" == typeof Reflect && Reflect.apply || (s ? l.bind(f) : function() {
        return l.apply(f, arguments);
    }), p = u, v = Function.prototype, d = v.bind, y = v.call, g = p && d.bind(y, y), m = p ? function(t) {
        return t && g(t);
    } : function(t) {
        return t && function() {
            return y.apply(t, arguments);
        };
    }, b = function(t) {
        return "function" == typeof t;
    }, _ = {}, w = !a(function() {
        return 7 != Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), O = u, E = Function.prototype.call, T = O ? E.bind(E) : function() {
        return E.apply(E, arguments);
    }, x = {}, k = {}.propertyIsEnumerable, S = Object.getOwnPropertyDescriptor, A = S && !k.call({
        1: 2
    }, 1);
    x.f = A ? function(t) {
        var e = S(this, t);
        return !!e && e.enumerable;
    } : k;
    var j, P, I = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, D = m, L = D({}.toString), C = D("".slice), R = function(t) {
        return C(L(t), 8, -1);
    }, M = m, F = a, N = R, z = o.Object, q = M("".split), Y = F(function() {
        return !z("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" == N(t) ? q(t, "") : z(t);
    } : z, G = o.TypeError, X = function(t) {
        if (null == t) throw G("Can't call method on " + t);
        return t;
    }, U = Y, W = X, V = function(t) {
        return U(W(t));
    }, H = b, $ = function(t) {
        return "object" == typeof t ? null !== t : H(t);
    }, B = {}, J = B, K = o, Q = b, Z = function(t) {
        return Q(t) ? t : void 0;
    }, tt = function(t, e) {
        return arguments.length < 2 ? Z(J[t]) || Z(K[t]) : J[t] && J[t][e] || K[t] && K[t][e];
    }, et = m({}.isPrototypeOf), rt = tt("navigator", "userAgent") || "", nt = o, it = rt, ot = nt.process, at = nt.Deno, ut = ot && ot.versions || at && at.version, st = ut && ut.v8;
    st && (P = (j = st.split("."))[0] > 0 && j[0] < 4 ? 1 : +(j[0] + j[1])), !P && it && (!(j = it.match(/Edge\/(\d+)/)) || j[1] >= 74) && (j = it.match(/Chrome\/(\d+)/)) && (P = +j[1]);
    var ct = P, ft = ct, lt = a, ht = !!Object.getOwnPropertySymbols && !lt(function() {
        var t = Symbol();
        return !String(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && ft && ft < 41;
    }), pt = ht && !Symbol.sham && "symbol" == typeof Symbol.iterator, vt = tt, dt = b, yt = et, gt = pt, mt = o.Object, bt = gt ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = vt("Symbol");
        return dt(e) && yt(e.prototype, mt(t));
    }, _t = o.String, wt = function(t) {
        try {
            return _t(t);
        } catch (t1) {
            return "Object";
        }
    }, Ot = b, Et = wt, Tt = o.TypeError, xt = function(t) {
        if (Ot(t)) return t;
        throw Tt(Et(t) + " is not a function");
    }, kt = xt, St = function(t, e) {
        var r = t[e];
        return null == r ? void 0 : kt(r);
    }, At = T, jt = b, Pt = $, It = o.TypeError, Dt = {
        exports: {}
    }, Lt = o, Ct = Object.defineProperty, Rt = function(t, e) {
        try {
            Ct(Lt, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (r) {
            Lt[t] = e;
        }
        return e;
    }, Mt = "__core-js_shared__", Ft = o[Mt] || Rt(Mt, {}), Nt = Ft;
    (Dt.exports = function(t, e) {
        return Nt[t] || (Nt[t] = void 0 !== e ? e : {});
    })("versions", []).push({
        version: "3.21.1",
        mode: "pure",
        copyright: "\xa9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var zt = X, qt = o.Object, Yt = function(t) {
        return qt(zt(t));
    }, Gt = Yt, Xt = m({}.hasOwnProperty), Ut = Object.hasOwn || function(t, e) {
        return Xt(Gt(t), e);
    }, Wt = m, Vt = 0, Ht = Math.random(), $t = Wt(1..toString), Bt = function(t) {
        return "Symbol(" + (void 0 === t ? "" : t) + ")_" + $t(++Vt + Ht, 36);
    }, Jt = o, Kt = Dt.exports, Qt = Ut, Zt = Bt, te = ht, ee = pt, re = Kt("wks"), ne = Jt.Symbol, ie = ne && ne.for, oe = ee ? ne : ne && ne.withoutSetter || Zt, ae = function(t) {
        if (!Qt(re, t) || !te && "string" != typeof re[t]) {
            var e = "Symbol." + t;
            te && Qt(ne, t) ? re[t] = ne[t] : re[t] = ee && ie ? ie(e) : oe(e);
        }
        return re[t];
    }, ue = T, se = $, ce = bt, fe = St, le = function(t, e) {
        var r, n;
        if ("string" === e && jt(r = t.toString) && !Pt(n = At(r, t))) return n;
        if (jt(r = t.valueOf) && !Pt(n = At(r, t))) return n;
        if ("string" !== e && jt(r = t.toString) && !Pt(n = At(r, t))) return n;
        throw It("Can't convert object to primitive value");
    }, he = ae, pe = o.TypeError, ve = he("toPrimitive"), de = function(t, e) {
        if (!se(t) || ce(t)) return t;
        var r, n = fe(t, ve);
        if (n) {
            if (void 0 === e && (e = "default"), r = ue(n, t, e), !se(r) || ce(r)) return r;
            throw pe("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), le(t, e);
    }, ye = bt, ge = function(t) {
        var e = de(t, "string");
        return ye(e) ? e : e + "";
    }, me = $, be = o.document, _e = me(be) && me(be.createElement), we = function(t) {
        return _e ? be.createElement(t) : {};
    }, Oe = we, Ee = !w && !a(function() {
        return 7 != Object.defineProperty(Oe("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), Te = w, xe = T, ke = x, Se = I, Ae = V, je = ge, Pe = Ut, Ie = Ee, De = Object.getOwnPropertyDescriptor;
    _.f = Te ? De : function(t, e) {
        if (t = Ae(t), e = je(e), Ie) try {
            return De(t, e);
        } catch (t1) {}
        if (Pe(t, e)) return Se(!xe(ke.f, t, e), t[e]);
    };
    var Le = a, Ce = b, Re = /#|\.prototype\./, Me = function(t, e) {
        var r = Ne[Fe(t)];
        return r == qe || r != ze && (Ce(e) ? Le(e) : !!e);
    }, Fe = Me.normalize = function(t) {
        return String(t).replace(Re, ".").toLowerCase();
    }, Ne = Me.data = {}, ze = Me.NATIVE = "N", qe = Me.POLYFILL = "P", Ye = Me, Ge = xt, Xe = u, Ue = m(m.bind), We = function(t, e) {
        return Ge(t), void 0 === e ? t : Xe ? Ue(t, e) : function() {
            return t.apply(e, arguments);
        };
    }, Ve = {}, He = w && a(function() {
        return 42 != Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: !1
        }).prototype;
    }), $e = o, Be = $, Je = $e.String, Ke = $e.TypeError, Qe = function(t) {
        if (Be(t)) return t;
        throw Ke(Je(t) + " is not an object");
    }, Ze = w, tr = Ee, er = He, rr = Qe, nr = ge, ir = o.TypeError, or = Object.defineProperty, ar = Object.getOwnPropertyDescriptor, ur = "enumerable", sr = "configurable", cr = "writable";
    Ve.f = Ze ? er ? function(t, e, r) {
        if (rr(t), e = nr(e), rr(r), "function" == typeof t && "prototype" === e && "value" in r && cr in r && !r.writable) {
            var n = ar(t, e);
            n && n.writable && (t[e] = r.value, r = {
                configurable: sr in r ? r.configurable : n.configurable,
                enumerable: ur in r ? r.enumerable : n.enumerable,
                writable: !1
            });
        }
        return or(t, e, r);
    } : or : function(t, e, r) {
        if (rr(t), e = nr(e), rr(r), tr) try {
            return or(t, e, r);
        } catch (t1) {}
        if ("get" in r || "set" in r) throw ir("Accessors not supported");
        return "value" in r && (t[e] = r.value), t;
    };
    var fr = Ve, lr = I, hr = w ? function(t, e, r) {
        return fr.f(t, e, lr(1, r));
    } : function(t, e, r) {
        return t[e] = r, t;
    }, pr = o, vr = h, dr = m, yr = b, gr = _.f, mr = Ye, br = B, _r = We, wr = hr, Or = Ut, Er = function(t) {
        var e = function(r, n, i) {
            if (this instanceof e) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(r);
                    case 2:
                        return new t(r, n);
                }
                return new t(r, n, i);
            }
            return vr(t, this, arguments);
        };
        return e.prototype = t.prototype, e;
    }, Tr = function(t, e) {
        var r, n, i, o, a, u, s, c, f = t.target, l = t.global, h = t.stat, p = t.proto, v = l ? pr : h ? pr[f] : (pr[f] || {}).prototype, d = l ? br : br[f] || wr(br, f, {})[f], y = d.prototype;
        for(i in e)r = !mr(l ? i : f + (h ? "." : "#") + i, t.forced) && v && Or(v, i), a = d[i], r && (u = t.noTargetGet ? (c = gr(v, i)) && c.value : v[i]), o = r && u ? u : e[i], r && typeof a == typeof o || (s = t.bind && r ? _r(o, pr) : t.wrap && r ? Er(o) : p && yr(o) ? dr(o) : o, (t.sham || o && o.sham || a && a.sham) && wr(s, "sham", !0), wr(d, i, s), p && (Or(br, n = f + "Prototype") || wr(br, n, {}), wr(br[n], i, o), t.real && y && !y[i] && wr(y, i, o)));
    }, xr = Tr, kr = w, Sr = Ve.f;
    xr({
        target: "Object",
        stat: !0,
        forced: Object.defineProperty !== Sr,
        sham: !kr
    }, {
        defineProperty: Sr
    });
    var Ar = B.Object, jr = n.exports = function(t, e, r) {
        return Ar.defineProperty(t, e, r);
    };
    Ar.defineProperty.sham && (jr.sham = !0);
    var Pr = n.exports, Ir = Pr;
    function Dr(t, e) {
        for(var r = 0; r < e.length; r++){
            var n = e[r];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Ir(t, n.key, n);
        }
    }
    function Lr(t, e, r) {
        return e && Dr(t.prototype, e), r && Dr(t, r), Ir(t, "prototype", {
            writable: !1
        }), t;
    }
    function Cr(t, e, r) {
        return e in t ? Ir(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = r, t;
    }
    var Rr = m([].slice), Mr = m, Fr = xt, Nr = $, zr = Ut, qr = Rr, Yr = u, Gr = o.Function, Xr = Mr([].concat), Ur = Mr([].join), Wr = {}, Vr = function(t, e, r) {
        if (!zr(Wr, e)) {
            for(var n = [], i = 0; i < e; i++)n[i] = "a[" + i + "]";
            Wr[e] = Gr("C,a", "return new C(" + Ur(n, ",") + ")");
        }
        return Wr[e](t, r);
    }, Hr = Yr ? Gr.bind : function(t) {
        var e = Fr(this), r = e.prototype, n = qr(arguments, 1), i = function() {
            var r = Xr(n, qr(arguments));
            return this instanceof i ? Vr(e, r.length, r) : e.apply(t, r);
        };
        return Nr(r) && (i.prototype = r), i;
    }, $r = Hr;
    Tr({
        target: "Function",
        proto: !0,
        forced: Function.bind !== $r
    }, {
        bind: $r
    });
    var Br = B, Jr = function(t) {
        return Br[t + "Prototype"];
    }, Kr = Jr("Function").bind, Qr = et, Zr = Kr, tn = Function.prototype, en = function(t) {
        var e = t.bind;
        return t === tn || Qr(tn, t) && e === tn.bind ? Zr : e;
    }, rn = Math.ceil, nn = Math.floor, on = function(t) {
        var e = +t;
        return e != e || 0 === e ? 0 : (e > 0 ? nn : rn)(e);
    }, an = on, un = Math.min, sn = function(t) {
        return t > 0 ? un(an(t), 9007199254740991) : 0;
    }, cn = function(t) {
        return sn(t.length);
    }, fn = xt, ln = Yt, hn = Y, pn = cn, vn = o.TypeError, dn = function(t) {
        return function(e, r, n, i) {
            fn(r);
            var o = ln(e), a = hn(o), u = pn(o), s = t ? u - 1 : 0, c = t ? -1 : 1;
            if (n < 2) for(;;){
                if (s in a) {
                    i = a[s], s += c;
                    break;
                }
                if (s += c, t ? s < 0 : u <= s) throw vn("Reduce of empty array with no initial value");
            }
            for(; t ? s >= 0 : u > s; s += c)s in a && (i = r(i, a[s], s, o));
            return i;
        };
    }, yn = {
        left: dn(!1),
        right: dn(!0)
    }, gn = a, mn = function(t, e) {
        var r = [][t];
        return !!r && gn(function() {
            r.call(null, e || function() {
                return 1;
            }, 1);
        });
    }, bn = "process" == R(o.process), _n = yn.left, wn = ct, On = bn;
    Tr({
        target: "Array",
        proto: !0,
        forced: !mn("reduce") || !On && wn > 79 && wn < 83
    }, {
        reduce: function(t) {
            var e = arguments.length;
            return _n(this, t, e, e > 1 ? arguments[1] : void 0);
        }
    });
    var En = Jr("Array").reduce, Tn = et, xn = En, kn = Array.prototype, Sn = function(t) {
        var e = t.reduce;
        return t === kn || Tn(kn, t) && e === kn.reduce ? xn : e;
    }, An = R, jn = Array.isArray || function(t) {
        return "Array" == An(t);
    }, Pn = {};
    Pn[ae("toStringTag")] = "z";
    var In = "[object z]" === String(Pn), Dn = o, Ln = In, Cn = b, Rn = R, Mn = ae("toStringTag"), Fn = Dn.Object, Nn = "Arguments" == Rn(function() {
        return arguments;
    }()), zn = Ln ? Rn : function(t) {
        var e, r, n;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function(t, e) {
            try {
                return t[e];
            } catch (t1) {}
        }(e = Fn(t), Mn)) ? r : Nn ? Rn(e) : "Object" == (n = Rn(e)) && Cn(e.callee) ? "Arguments" : n;
    }, qn = b, Yn = Ft, Gn = m(Function.toString);
    qn(Yn.inspectSource) || (Yn.inspectSource = function(t) {
        return Gn(t);
    });
    var Xn = Yn.inspectSource, Un = m, Wn = a, Vn = b, Hn = zn, $n = Xn, Bn = function() {}, Jn = [], Kn = tt("Reflect", "construct"), Qn = /^\s*(?:class|function)\b/, Zn = Un(Qn.exec), ti = !Qn.exec(Bn), ei = function(t) {
        if (!Vn(t)) return !1;
        try {
            return Kn(Bn, Jn, t), !0;
        } catch (t1) {
            return !1;
        }
    }, ri = function(t) {
        if (!Vn(t)) return !1;
        switch(Hn(t)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return !1;
        }
        try {
            return ti || !!Zn(Qn, $n(t));
        } catch (t1) {
            return !0;
        }
    };
    ri.sham = !0;
    var ni = !Kn || Wn(function() {
        var t;
        return ei(ei.call) || !ei(Object) || !ei(function() {
            t = !0;
        }) || t;
    }) ? ri : ei, ii = o, oi = jn, ai = ni, ui = $, si = ae("species"), ci = ii.Array, fi = function(t) {
        var e;
        return oi(t) && (e = t.constructor, (ai(e) && (e === ci || oi(e.prototype)) || ui(e) && null === (e = e[si])) && (e = void 0)), void 0 === e ? ci : e;
    }, li = function(t, e) {
        return new (fi(t))(0 === e ? 0 : e);
    }, hi = We, pi = Y, vi = Yt, di = cn, yi = li, gi = m([].push), mi = function(t) {
        var e = 1 == t, r = 2 == t, n = 3 == t, i = 4 == t, o = 6 == t, a = 7 == t, u = 5 == t || o;
        return function(s, c, f, l) {
            for(var h, p, v = vi(s), d = pi(v), y = hi(c, f), g = di(d), m = 0, b = l || yi, _ = e ? b(s, g) : r || a ? b(s, 0) : void 0; g > m; m++)if ((u || m in d) && (p = y(h = d[m], m, v), t)) {
                if (e) _[m] = p;
                else if (p) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return h;
                    case 6:
                        return m;
                    case 2:
                        gi(_, h);
                }
                else switch(t){
                    case 4:
                        return !1;
                    case 7:
                        gi(_, h);
                }
            }
            return o ? -1 : n || i ? i : _;
        };
    }, bi = {
        forEach: mi(0),
        map: mi(1),
        filter: mi(2),
        some: mi(3),
        every: mi(4),
        find: mi(5),
        findIndex: mi(6),
        filterReject: mi(7)
    }, _i = a, wi = ct, Oi = ae("species"), Ei = function(t) {
        return wi >= 51 || !_i(function() {
            var e = [];
            return (e.constructor = {})[Oi] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, Ti = bi.filter;
    Tr({
        target: "Array",
        proto: !0,
        forced: !Ei("filter")
    }, {
        filter: function(t) {
            return Ti(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var xi = Jr("Array").filter, ki = et, Si = xi, Ai = Array.prototype, ji = function(t) {
        var e = t.filter;
        return t === Ai || ki(Ai, t) && e === Ai.filter ? Si : e;
    }, Pi = bi.map;
    Tr({
        target: "Array",
        proto: !0,
        forced: !Ei("map")
    }, {
        map: function(t) {
            return Pi(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Ii = Jr("Array").map, Di = et, Li = Ii, Ci = Array.prototype, Ri = function(t) {
        var e = t.map;
        return t === Ci || Di(Ci, t) && e === Ci.map ? Li : e;
    }, Mi = jn, Fi = cn, Ni = We, zi = o.TypeError, qi = function(t, e, r, n, i, o, a, u) {
        for(var s, c, f = i, l = 0, h = !!a && Ni(a, u); l < n;){
            if (l in r) {
                if (s = h ? h(r[l], l, e) : r[l], o > 0 && Mi(s)) c = Fi(s), f = qi(t, e, s, c, f, o - 1) - 1;
                else {
                    if (f >= 9007199254740991) throw zi("Exceed the acceptable array length");
                    t[f] = s;
                }
                f++;
            }
            l++;
        }
        return f;
    }, Yi = qi, Gi = xt, Xi = Yt, Ui = cn, Wi = li;
    Tr({
        target: "Array",
        proto: !0
    }, {
        flatMap: function(t) {
            var e, r = Xi(this), n = Ui(r);
            return Gi(t), (e = Wi(r, 0)).length = Yi(e, r, r, n, 0, 1, t, arguments.length > 1 ? arguments[1] : void 0), e;
        }
    });
    var Vi = Jr("Array").flatMap, Hi = et, $i = Vi, Bi = Array.prototype, Ji = function(t) {
        var e = t.flatMap;
        return t === Bi || Hi(Bi, t) && e === Bi.flatMap ? $i : e;
    };
    var Ki, Qi, Zi, to = function() {
        function t(r, n, i) {
            var o, a, u;
            e(this, t), Cr(this, "_source", void 0), Cr(this, "_transformers", void 0), Cr(this, "_target", void 0), Cr(this, "_listeners", {
                add: en(o = this._add).call(o, this),
                remove: en(a = this._remove).call(a, this),
                update: en(u = this._update).call(u, this)
            }), this._source = r, this._transformers = n, this._target = i;
        }
        return Lr(t, [
            {
                key: "all",
                value: function() {
                    return this._target.update(this._transformItems(this._source.get())), this;
                }
            },
            {
                key: "start",
                value: function() {
                    return this._source.on("add", this._listeners.add), this._source.on("remove", this._listeners.remove), this._source.on("update", this._listeners.update), this;
                }
            },
            {
                key: "stop",
                value: function() {
                    return this._source.off("add", this._listeners.add), this._source.off("remove", this._listeners.remove), this._source.off("update", this._listeners.update), this;
                }
            },
            {
                key: "_transformItems",
                value: function(t) {
                    var e;
                    return Sn(e = this._transformers).call(e, function(t, e) {
                        return e(t);
                    }, t);
                }
            },
            {
                key: "_add",
                value: function(t, e) {
                    null != e && this._target.add(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    null != e && this._target.update(this._transformItems(this._source.get(e.items)));
                }
            },
            {
                key: "_remove",
                value: function(t, e) {
                    null != e && this._target.remove(this._transformItems(e.oldData));
                }
            }
        ]), t;
    }(), eo = function() {
        function t(r) {
            e(this, t), Cr(this, "_source", void 0), Cr(this, "_transformers", []), this._source = r;
        }
        return Lr(t, [
            {
                key: "filter",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return ji(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "map",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Ri(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "flatMap",
                value: function(t) {
                    return this._transformers.push(function(e) {
                        return Ji(e).call(e, t);
                    }), this;
                }
            },
            {
                key: "to",
                value: function(t) {
                    return new to(this._source, this._transformers, t);
                }
            }
        ]), t;
    }(), ro = zn, no = o.String, io = function(t) {
        if ("Symbol" === ro(t)) throw TypeError("Cannot convert a Symbol value to a string");
        return no(t);
    }, oo = m, ao = on, uo = io, so = X, co = oo("".charAt), fo = oo("".charCodeAt), lo = oo("".slice), ho = function(t) {
        return function(e, r) {
            var n, i, o = uo(so(e)), a = ao(r), u = o.length;
            return a < 0 || a >= u ? t ? "" : void 0 : (n = fo(o, a)) < 55296 || n > 56319 || a + 1 === u || (i = fo(o, a + 1)) < 56320 || i > 57343 ? t ? co(o, a) : n : t ? lo(o, a, a + 2) : i - 56320 + (n - 55296 << 10) + 65536;
        };
    }, po = {
        codeAt: ho(!1),
        charAt: ho(!0)
    }, vo = b, yo = Xn, go = o.WeakMap, mo = vo(go) && /native code/.test(yo(go)), bo = Dt.exports, _o = Bt, wo = bo("keys"), Oo = function(t) {
        return wo[t] || (wo[t] = _o(t));
    }, Eo = {}, To = mo, xo = o, ko = m, So = $, Ao = hr, jo = Ut, Po = Ft, Io = Oo, Do = Eo, Lo = "Object already initialized", Co = xo.TypeError, Ro = xo.WeakMap;
    if (To || Po.state) {
        var Mo = Po.state || (Po.state = new Ro), Fo = ko(Mo.get), No = ko(Mo.has), zo = ko(Mo.set);
        Ki = function(t, e) {
            if (No(Mo, t)) throw new Co(Lo);
            return e.facade = t, zo(Mo, t, e), e;
        }, Qi = function(t) {
            return Fo(Mo, t) || {};
        }, Zi = function(t) {
            return No(Mo, t);
        };
    } else {
        var qo = Io("state");
        Do[qo] = !0, Ki = function(t, e) {
            if (jo(t, qo)) throw new Co(Lo);
            return e.facade = t, Ao(t, qo, e), e;
        }, Qi = function(t) {
            return jo(t, qo) ? t[qo] : {};
        }, Zi = function(t) {
            return jo(t, qo);
        };
    }
    var Yo = {
        set: Ki,
        get: Qi,
        has: Zi,
        enforce: function(t) {
            return Zi(t) ? Qi(t) : Ki(t, {});
        },
        getterFor: function(t) {
            return function(e) {
                var r;
                if (!So(e) || (r = Qi(e)).type !== t) throw Co("Incompatible receiver, " + t + " required");
                return r;
            };
        }
    }, Go = w, Xo = Ut, Uo = Function.prototype, Wo = Go && Object.getOwnPropertyDescriptor, Vo = Xo(Uo, "name"), Ho = {
        EXISTS: Vo,
        PROPER: Vo && "something" === (function() {}).name,
        CONFIGURABLE: Vo && (!Go || Go && Wo(Uo, "name").configurable)
    }, $o = {}, Bo = on, Jo = Math.max, Ko = Math.min, Qo = function(t, e) {
        var r = Bo(t);
        return r < 0 ? Jo(r + e, 0) : Ko(r, e);
    }, Zo = V, ta = Qo, ea = cn, ra = function(t) {
        return function(e, r, n) {
            var i, o = Zo(e), a = ea(o), u = ta(n, a);
            if (t && r != r) {
                for(; a > u;)if ((i = o[u++]) != i) return !0;
            } else for(; a > u; u++)if ((t || u in o) && o[u] === r) return t || u || 0;
            return !t && -1;
        };
    }, na = {
        includes: ra(!0),
        indexOf: ra(!1)
    }, ia = Ut, oa = V, aa = na.indexOf, ua = Eo, sa = m([].push), ca = function(t, e) {
        var r, n = oa(t), i = 0, o = [];
        for(r in n)!ia(ua, r) && ia(n, r) && sa(o, r);
        for(; e.length > i;)ia(n, r = e[i++]) && (~aa(o, r) || sa(o, r));
        return o;
    }, fa = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], la = ca, ha = fa, pa = Object.keys || function(t) {
        return la(t, ha);
    }, va = w, da = He, ya = Ve, ga = Qe, ma = V, ba = pa;
    $o.f = va && !da ? Object.defineProperties : function(t, e) {
        ga(t);
        for(var r, n = ma(e), i = ba(e), o = i.length, a = 0; o > a;)ya.f(t, r = i[a++], n[r]);
        return t;
    };
    var _a, wa = tt("document", "documentElement"), Oa = Qe, Ea = $o, Ta = fa, xa = Eo, ka = wa, Sa = we, Aa = Oo("IE_PROTO"), ja = function() {}, Pa = function(t) {
        return "<script>" + t + "</" + "script>";
    }, Ia = function(t) {
        t.write(Pa("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, Da = function() {
        try {
            _a = new ActiveXObject("htmlfile");
        } catch (t) {}
        var t1, e;
        Da = "undefined" != typeof document ? document.domain && _a ? Ia(_a) : ((e = Sa("iframe")).style.display = "none", ka.appendChild(e), e.src = String("javascript:"), (t1 = e.contentWindow.document).open(), t1.write(Pa("document.F=Object")), t1.close(), t1.F) : Ia(_a);
        for(var r = Ta.length; r--;)delete Da.prototype[Ta[r]];
        return Da();
    };
    xa[Aa] = !0;
    var La, Ca, Ra, Ma = Object.create || function(t, e) {
        var r;
        return null !== t ? (ja.prototype = Oa(t), r = new ja, ja.prototype = null, r[Aa] = t) : r = Da(), void 0 === e ? r : Ea.f(r, e);
    }, Fa = !a(function() {
        function t() {}
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), Na = o, za = Ut, qa = b, Ya = Yt, Ga = Fa, Xa = Oo("IE_PROTO"), Ua = Na.Object, Wa = Ua.prototype, Va = Ga ? Ua.getPrototypeOf : function(t) {
        var e = Ya(t);
        if (za(e, Xa)) return e[Xa];
        var r = e.constructor;
        return qa(r) && e instanceof r ? r.prototype : e instanceof Ua ? Wa : null;
    }, Ha = hr, $a = function(t, e, r, n) {
        n && n.enumerable ? t[e] = r : Ha(t, e, r);
    }, Ba = a, Ja = b, Ka = Ma, Qa = Va, Za = $a, tu = ae("iterator"), eu = !1;
    [].keys && ("next" in (Ra = [].keys()) ? (Ca = Qa(Qa(Ra))) !== Object.prototype && (La = Ca) : eu = !0);
    var ru = null == La || Ba(function() {
        var t = {};
        return La[tu].call(t) !== t;
    });
    Ja((La = ru ? {} : Ka(La))[tu]) || Za(La, tu, function() {
        return this;
    });
    var nu = {
        IteratorPrototype: La,
        BUGGY_SAFARI_ITERATORS: eu
    }, iu = zn, ou = In ? ({}).toString : function() {
        return "[object " + iu(this) + "]";
    }, au = In, uu = Ve.f, su = hr, cu = Ut, fu = ou, lu = ae("toStringTag"), hu = function(t, e, r, n) {
        if (t) {
            var i = r ? t : t.prototype;
            cu(i, lu) || uu(i, lu, {
                configurable: !0,
                value: e
            }), n && !au && su(i, "toString", fu);
        }
    }, pu = {}, vu = nu.IteratorPrototype, du = Ma, yu = I, gu = hu, mu = pu, bu = function() {
        return this;
    }, _u = o, wu = b, Ou = _u.String, Eu = _u.TypeError, Tu = m, xu = Qe, ku = function(t) {
        if ("object" == typeof t || wu(t)) return t;
        throw Eu("Can't set " + Ou(t) + " as a prototype");
    }, Su = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t, e = !1, r = {};
        try {
            (t = Tu(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(r, []), e = r instanceof Array;
        } catch (t1) {}
        return function(r, n) {
            return xu(r), ku(n), e ? t(r, n) : r.__proto__ = n, r;
        };
    }() : void 0), Au = Tr, ju = T, Pu = function(t, e, r, n) {
        var i = e + " Iterator";
        return t.prototype = du(vu, {
            next: yu(+!n, r)
        }), gu(t, i, !1, !0), mu[i] = bu, t;
    }, Iu = Va, Du = hu, Lu = $a, Cu = pu, Ru = Ho.PROPER, Mu = nu.BUGGY_SAFARI_ITERATORS, Fu = ae("iterator"), Nu = "keys", zu = "values", qu = "entries", Yu = function() {
        return this;
    }, Gu = function(t, e, r, n, i, o, a) {
        Pu(r, e, n);
        var u, s, c, f = function(t) {
            if (t === i && d) return d;
            if (!Mu && t in p) return p[t];
            switch(t){
                case Nu:
                case zu:
                case qu:
                    return function() {
                        return new r(this, t);
                    };
            }
            return function() {
                return new r(this);
            };
        }, l = e + " Iterator", h = !1, p = t.prototype, v = p[Fu] || p["@@iterator"] || i && p[i], d = !Mu && v || f(i), y = "Array" == e && p.entries || v;
        if (y && (u = Iu(y.call(new t))) !== Object.prototype && u.next && (Du(u, l, !0, !0), Cu[l] = Yu), Ru && i == zu && v && v.name !== zu && (h = !0, d = function() {
            return ju(v, this);
        }), i) {
            if (s = {
                values: f(zu),
                keys: o ? d : f(Nu),
                entries: f(qu)
            }, a) for(c in s)(Mu || h || !(c in p)) && Lu(p, c, s[c]);
            else Au({
                target: e,
                proto: !0,
                forced: Mu || h
            }, s);
        }
        return a && p[Fu] !== d && Lu(p, Fu, d, {
            name: i
        }), Cu[e] = d, s;
    }, Xu = po.charAt, Uu = io, Wu = Yo, Vu = Gu, Hu = "String Iterator", $u = Wu.set, Bu = Wu.getterFor(Hu);
    Vu(String, "String", function(t) {
        $u(this, {
            type: Hu,
            string: Uu(t),
            index: 0
        });
    }, function() {
        var t, e = Bu(this), r = e.string, n = e.index;
        return n >= r.length ? {
            value: void 0,
            done: !0
        } : (t = Xu(r, n), e.index += t.length, {
            value: t,
            done: !1
        });
    });
    var Ju = T, Ku = Qe, Qu = St, Zu = function(t, e, r) {
        var n, i;
        Ku(t);
        try {
            if (!(n = Qu(t, "return"))) {
                if ("throw" === e) throw r;
                return r;
            }
            n = Ju(n, t);
        } catch (t1) {
            i = !0, n = t1;
        }
        if ("throw" === e) throw r;
        if (i) throw n;
        return Ku(n), r;
    }, ts = Qe, es = Zu, rs = pu, ns = ae("iterator"), is = Array.prototype, os = function(t) {
        return void 0 !== t && (rs.Array === t || is[ns] === t);
    }, as = ge, us = Ve, ss = I, cs = function(t, e, r) {
        var n = as(e);
        n in t ? us.f(t, n, ss(0, r)) : t[n] = r;
    }, fs = zn, ls = St, hs = pu, ps = ae("iterator"), vs = function(t) {
        if (null != t) return ls(t, ps) || ls(t, "@@iterator") || hs[fs(t)];
    }, ds = T, ys = xt, gs = Qe, ms = wt, bs = vs, _s = o.TypeError, ws = function(t, e) {
        var r = arguments.length < 2 ? bs(t) : e;
        if (ys(r)) return gs(ds(r, t));
        throw _s(ms(t) + " is not iterable");
    }, Os = We, Es = T, Ts = Yt, xs = function(t, e, r, n) {
        try {
            return n ? e(ts(r)[0], r[1]) : e(r);
        } catch (e1) {
            es(t, "throw", e1);
        }
    }, ks = os, Ss = ni, As = cn, js = cs, Ps = ws, Is = vs, Ds = o.Array, Ls = ae("iterator"), Cs = !1;
    try {
        var Rs = 0, Ms = {
            next: function() {
                return {
                    done: !!Rs++
                };
            },
            return: function() {
                Cs = !0;
            }
        };
        Ms[Ls] = function() {
            return this;
        }, Array.from(Ms, function() {
            throw 2;
        });
    } catch (t1) {}
    var Fs = function(t) {
        var e = Ts(t), r = Ss(this), n = arguments.length, i = n > 1 ? arguments[1] : void 0, o = void 0 !== i;
        o && (i = Os(i, n > 2 ? arguments[2] : void 0));
        var a, u, s, c, f, l, h = Is(e), p = 0;
        if (!h || this == Ds && ks(h)) for(a = As(e), u = r ? new this(a) : Ds(a); a > p; p++)l = o ? i(e[p], p) : e[p], js(u, p, l);
        else for(f = (c = Ps(e, h)).next, u = r ? new this : []; !(s = Es(f, c)).done; p++)l = o ? xs(c, i, [
            s.value,
            p
        ], !0) : s.value, js(u, p, l);
        return u.length = p, u;
    }, Ns = function(t, e) {
        if (!e && !Cs) return !1;
        var r = !1;
        try {
            var n = {};
            n[Ls] = function() {
                return {
                    next: function() {
                        return {
                            done: r = !0
                        };
                    }
                };
            }, t(n);
        } catch (t1) {}
        return r;
    };
    Tr({
        target: "Array",
        stat: !0,
        forced: !Ns(function(t) {
            Array.from(t);
        })
    }, {
        from: Fs
    });
    var zs = B.Array.from, qs = zs, Ys = V, Gs = pu, Xs = Yo;
    Ve.f;
    var Us = Gu, Ws = "Array Iterator", Vs = Xs.set, Hs = Xs.getterFor(Ws);
    Us(Array, "Array", function(t, e) {
        Vs(this, {
            type: Ws,
            target: Ys(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = Hs(this), e = t.target, r = t.kind, n = t.index++;
        return !e || n >= e.length ? (t.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == r ? {
            value: n,
            done: !1
        } : "values" == r ? {
            value: e[n],
            done: !1
        } : {
            value: [
                n,
                e[n]
            ],
            done: !1
        };
    }, "values"), Gs.Arguments = Gs.Array;
    var $s = vs, Bs = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, Js = o, Ks = zn, Qs = hr, Zs = pu, tc = ae("toStringTag");
    for(var ec in Bs){
        var rc = Js[ec], nc = rc && rc.prototype;
        nc && Ks(nc) !== tc && Qs(nc, tc, ec), Zs[ec] = Zs.Array;
    }
    var ic = $s, oc = {}, ac = ca, uc = fa.concat("length", "prototype");
    oc.f = Object.getOwnPropertyNames || function(t) {
        return ac(t, uc);
    };
    var sc = {}, cc = Qo, fc = cn, lc = cs, hc = o.Array, pc = Math.max, vc = function(t, e, r) {
        for(var n = fc(t), i = cc(e, n), o = cc(void 0 === r ? n : r, n), a = hc(pc(o - i, 0)), u = 0; i < o; i++, u++)lc(a, u, t[i]);
        return a.length = u, a;
    }, dc = R, yc = V, gc = oc.f, mc = vc, bc = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    sc.f = function(t) {
        return bc && "Window" == dc(t) ? function(t) {
            try {
                return gc(t);
            } catch (t1) {
                return mc(bc);
            }
        }(t) : gc(yc(t));
    };
    var _c = {};
    _c.f = Object.getOwnPropertySymbols;
    var wc = {}, Oc = ae;
    wc.f = Oc;
    var Ec = B, Tc = Ut, xc = wc, kc = Ve.f, Sc = function(t) {
        var e = Ec.Symbol || (Ec.Symbol = {});
        Tc(e, t) || kc(e, t, {
            value: xc.f(t)
        });
    }, Ac = Tr, jc = o, Pc = tt, Ic = h, Dc = T, Lc = m, Cc = w, Rc = ht, Mc = a, Fc = Ut, Nc = jn, zc = b, qc = $, Yc = et, Gc = bt, Xc = Qe, Uc = Yt, Wc = V, Vc = ge, Hc = io, $c = I, Bc = Ma, Jc = pa, Kc = oc, Qc = sc, Zc = _c, tf = _, ef = Ve, rf = $o, nf = x, of = Rr, af = $a, uf = Dt.exports, sf = Eo, cf = Bt, ff = ae, lf = wc, hf = Sc, pf = hu, vf = Yo, df = bi.forEach, yf = Oo("hidden"), gf = "Symbol", mf = ff("toPrimitive"), bf = vf.set, _f = vf.getterFor(gf), wf = Object.prototype, Of = jc.Symbol, Ef = Of && Of.prototype, Tf = jc.TypeError, xf = jc.QObject, kf = Pc("JSON", "stringify"), Sf = tf.f, Af = ef.f, jf = Qc.f, Pf = nf.f, If = Lc([].push), Df = uf("symbols"), Lf = uf("op-symbols"), Cf = uf("string-to-symbol-registry"), Rf = uf("symbol-to-string-registry"), Mf = uf("wks"), Ff = !xf || !xf.prototype || !xf.prototype.findChild, Nf = Cc && Mc(function() {
        return 7 != Bc(Af({}, "a", {
            get: function() {
                return Af(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t, e, r) {
        var n = Sf(wf, e);
        n && delete wf[e], Af(t, e, r), n && t !== wf && Af(wf, e, n);
    } : Af, zf = function(t, e) {
        var r = Df[t] = Bc(Ef);
        return bf(r, {
            type: gf,
            tag: t,
            description: e
        }), Cc || (r.description = e), r;
    }, qf = function(t, e, r) {
        t === wf && qf(Lf, e, r), Xc(t);
        var n = Vc(e);
        return Xc(r), Fc(Df, n) ? (r.enumerable ? (Fc(t, yf) && t[yf][n] && (t[yf][n] = !1), r = Bc(r, {
            enumerable: $c(0, !1)
        })) : (Fc(t, yf) || Af(t, yf, $c(1, {})), t[yf][n] = !0), Nf(t, n, r)) : Af(t, n, r);
    }, Yf = function(t, e) {
        Xc(t);
        var r = Wc(e), n = Jc(r).concat(Wf(r));
        return df(n, function(e) {
            Cc && !Dc(Gf, r, e) || qf(t, e, r[e]);
        }), t;
    }, Gf = function(t) {
        var e = Vc(t), r = Dc(Pf, this, e);
        return !(this === wf && Fc(Df, e) && !Fc(Lf, e)) && (!(r || !Fc(this, e) || !Fc(Df, e) || Fc(this, yf) && this[yf][e]) || r);
    }, Xf = function(t, e) {
        var r = Wc(t), n = Vc(e);
        if (r !== wf || !Fc(Df, n) || Fc(Lf, n)) {
            var i = Sf(r, n);
            return !i || !Fc(Df, n) || Fc(r, yf) && r[yf][n] || (i.enumerable = !0), i;
        }
    }, Uf = function(t) {
        var e = jf(Wc(t)), r = [];
        return df(e, function(t) {
            Fc(Df, t) || Fc(sf, t) || If(r, t);
        }), r;
    }, Wf = function(t) {
        var e = t === wf, r = jf(e ? Lf : Wc(t)), n = [];
        return df(r, function(t) {
            !Fc(Df, t) || e && !Fc(wf, t) || If(n, Df[t]);
        }), n;
    };
    if (Rc || (Of = function() {
        if (Yc(Ef, this)) throw Tf("Symbol is not a constructor");
        var t = arguments.length && void 0 !== arguments[0] ? Hc(arguments[0]) : void 0, e = cf(t), r = function(t) {
            this === wf && Dc(r, Lf, t), Fc(this, yf) && Fc(this[yf], e) && (this[yf][e] = !1), Nf(this, e, $c(1, t));
        };
        return Cc && Ff && Nf(wf, e, {
            configurable: !0,
            set: r
        }), zf(e, t);
    }, af(Ef = Of.prototype, "toString", function() {
        return _f(this).tag;
    }), af(Of, "withoutSetter", function(t) {
        return zf(cf(t), t);
    }), nf.f = Gf, ef.f = qf, rf.f = Yf, tf.f = Xf, Kc.f = Qc.f = Uf, Zc.f = Wf, lf.f = function(t) {
        return zf(ff(t), t);
    }, Cc && Af(Ef, "description", {
        configurable: !0,
        get: function() {
            return _f(this).description;
        }
    })), Ac({
        global: !0,
        wrap: !0,
        forced: !Rc,
        sham: !Rc
    }, {
        Symbol: Of
    }), df(Jc(Mf), function(t) {
        hf(t);
    }), Ac({
        target: gf,
        stat: !0,
        forced: !Rc
    }, {
        for: function(t) {
            var e = Hc(t);
            if (Fc(Cf, e)) return Cf[e];
            var r = Of(e);
            return Cf[e] = r, Rf[r] = e, r;
        },
        keyFor: function(t) {
            if (!Gc(t)) throw Tf(t + " is not a symbol");
            if (Fc(Rf, t)) return Rf[t];
        },
        useSetter: function() {
            Ff = !0;
        },
        useSimple: function() {
            Ff = !1;
        }
    }), Ac({
        target: "Object",
        stat: !0,
        forced: !Rc,
        sham: !Cc
    }, {
        create: function(t, e) {
            return void 0 === e ? Bc(t) : Yf(Bc(t), e);
        },
        defineProperty: qf,
        defineProperties: Yf,
        getOwnPropertyDescriptor: Xf
    }), Ac({
        target: "Object",
        stat: !0,
        forced: !Rc
    }, {
        getOwnPropertyNames: Uf,
        getOwnPropertySymbols: Wf
    }), Ac({
        target: "Object",
        stat: !0,
        forced: Mc(function() {
            Zc.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            return Zc.f(Uc(t));
        }
    }), kf) {
        var Vf = !Rc || Mc(function() {
            var t = Of();
            return "[null]" != kf([
                t
            ]) || "{}" != kf({
                a: t
            }) || "{}" != kf(Object(t));
        });
        Ac({
            target: "JSON",
            stat: !0,
            forced: Vf
        }, {
            stringify: function(t, e, r) {
                var n = of(arguments), i = e;
                if ((qc(e) || void 0 !== t) && !Gc(t)) return Nc(e) || (e = function(t, e) {
                    if (zc(i) && (e = Dc(i, this, t, e)), !Gc(e)) return e;
                }), n[1] = e, Ic(kf, null, n);
            }
        });
    }
    if (!Ef[mf]) {
        var Hf = Ef.valueOf;
        af(Ef, mf, function(t) {
            return Dc(Hf, this);
        });
    }
    pf(Of, gf), sf[yf] = !0;
    var $f = B.Object.getOwnPropertySymbols, Bf = {
        exports: {}
    }, Jf = Tr, Kf = a, Qf = V, Zf = _.f, tl = w, el = Kf(function() {
        Zf(1);
    });
    Jf({
        target: "Object",
        stat: !0,
        forced: !tl || el,
        sham: !tl
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return Zf(Qf(t), e);
        }
    });
    var rl = B.Object, nl = Bf.exports = function(t, e) {
        return rl.getOwnPropertyDescriptor(t, e);
    };
    rl.getOwnPropertyDescriptor.sham && (nl.sham = !0);
    var il = Bf.exports, ol = tt, al = oc, ul = _c, sl = Qe, cl = m([].concat), fl = ol("Reflect", "ownKeys") || function(t) {
        var e = al.f(sl(t)), r = ul.f;
        return r ? cl(e, r(t)) : e;
    }, ll = fl, hl = V, pl = _, vl = cs;
    Tr({
        target: "Object",
        stat: !0,
        sham: !w
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, r, n = hl(t), i = pl.f, o = ll(n), a = {}, u = 0; o.length > u;)void 0 !== (r = i(n, e = o[u++])) && vl(a, e, r);
            return a;
        }
    });
    var dl = B.Object.getOwnPropertyDescriptors, yl = {
        exports: {}
    }, gl = Tr, ml = w, bl = $o.f;
    gl({
        target: "Object",
        stat: !0,
        forced: Object.defineProperties !== bl,
        sham: !ml
    }, {
        defineProperties: bl
    });
    var _l = B.Object, wl = yl.exports = function(t, e) {
        return _l.defineProperties(t, e);
    };
    _l.defineProperties.sham && (wl.sham = !0);
    var Ol = yl.exports, El = Pr;
    Tr({
        target: "Array",
        stat: !0
    }, {
        isArray: jn
    });
    var Tl = B.Array.isArray, xl = Tl;
    var kl = Tr, Sl = o, Al = a, jl = jn, Pl = $, Il = Yt, Dl = cn, Ll = cs, Cl = li, Rl = Ei, Ml = ct, Fl = ae("isConcatSpreadable"), Nl = 9007199254740991, zl = "Maximum allowed index exceeded", ql = Sl.TypeError, Yl = Ml >= 51 || !Al(function() {
        var t = [];
        return t[Fl] = !1, t.concat()[0] !== t;
    }), Gl = Rl("concat"), Xl = function(t) {
        if (!Pl(t)) return !1;
        var e = t[Fl];
        return void 0 !== e ? !!e : jl(t);
    };
    kl({
        target: "Array",
        proto: !0,
        forced: !Yl || !Gl
    }, {
        concat: function(t) {
            var e, r, n, i, o, a = Il(this), u = Cl(a, 0), s = 0;
            for(e = -1, n = arguments.length; e < n; e++)if (Xl(o = -1 === e ? a : arguments[e])) {
                if (s + (i = Dl(o)) > Nl) throw ql(zl);
                for(r = 0; r < i; r++, s++)r in o && Ll(u, s, o[r]);
            } else {
                if (s >= Nl) throw ql(zl);
                Ll(u, s++, o);
            }
            return u.length = s, u;
        }
    }), Sc("asyncIterator"), Sc("hasInstance"), Sc("isConcatSpreadable"), Sc("iterator"), Sc("match"), Sc("matchAll"), Sc("replace"), Sc("search"), Sc("species"), Sc("split"), Sc("toPrimitive"), Sc("toStringTag"), Sc("unscopables"), hu(o.JSON, "JSON", !0);
    var Ul = B.Symbol, Wl = Ul;
    Sc("asyncDispose"), Sc("dispose"), Sc("matcher"), Sc("metadata"), Sc("observable"), Sc("patternMatch"), Sc("replaceAll");
    var Vl = Wl;
    var Hl = Tr, $l = o, Bl = jn, Jl = ni, Kl = $, Ql = Qo, Zl = cn, th = V, eh = cs, rh = ae, nh = Rr, ih = Ei("slice"), oh = rh("species"), ah = $l.Array, uh = Math.max;
    Hl({
        target: "Array",
        proto: !0,
        forced: !ih
    }, {
        slice: function(t, e) {
            var r, n, i, o = th(this), a = Zl(o), u = Ql(t, a), s = Ql(void 0 === e ? a : e, a);
            if (Bl(o) && (r = o.constructor, (Jl(r) && (r === ah || Bl(r.prototype)) || Kl(r) && null === (r = r[oh])) && (r = void 0), r === ah || void 0 === r)) return nh(o, u, s);
            for(n = new (void 0 === r ? ah : r)(uh(s - u, 0)), i = 0; u < s; u++, i++)u in o && eh(n, i, o[u]);
            return n.length = i, n;
        }
    });
    var sh = Jr("Array").slice, ch = et, fh = sh, lh = Array.prototype, hh = function(t) {
        var e = t.slice;
        return t === lh || ch(lh, t) && e === lh.slice ? fh : e;
    }, ph = hh, vh = zs;
    function dh(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function yh(t, e) {
        var r;
        if (t) {
            if ("string" == typeof t) return dh(t, e);
            var n = ph(r = Object.prototype.toString.call(t)).call(r, 8, -1);
            return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? vh(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? dh(t, e) : void 0;
        }
    }
    function gh(t, e) {
        return function(t) {
            if (xl(t)) return t;
        }(t) || function(t, e) {
            var r = null == t ? null : void 0 !== Vl && ic(t) || t["@@iterator"];
            if (null != r) {
                var n, i, o = [], a = !0, u = !1;
                try {
                    for(r = r.call(t); !(a = (n = r.next()).done) && (o.push(n.value), !e || o.length !== e); a = !0);
                } catch (t1) {
                    u = !0, i = t1;
                } finally{
                    try {
                        a || null == r.return || r.return();
                    } finally{
                        if (u) throw i;
                    }
                }
                return o;
            }
        }(t, e) || yh(t, e) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var mh = wc.f("iterator"), bh = mh;
    function _h(t) {
        return _h = "function" == typeof Vl && "symbol" == typeof bh ? function(t) {
            return typeof t;
        } : function(t) {
            return t && "function" == typeof Vl && t.constructor === Vl && t !== Vl.prototype ? "symbol" : typeof t;
        }, _h(t);
    }
    function wh(t) {
        return function(t) {
            if (xl(t)) return dh(t);
        }(t) || function(t) {
            if (void 0 !== Vl && null != ic(t) || null != t["@@iterator"]) return vh(t);
        }(t) || yh(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var Oh = Ul, Eh = Jr("Array").concat, Th = et, xh = Eh, kh = Array.prototype, Sh = function(t) {
        var e = t.concat;
        return t === kh || Th(kh, t) && e === kh.concat ? xh : e;
    }, Ah = hh;
    Tr({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: fl
    });
    var jh = B.Reflect.ownKeys, Ph = Tl, Ih = Yt, Dh = pa;
    Tr({
        target: "Object",
        stat: !0,
        forced: a(function() {
            Dh(1);
        })
    }, {
        keys: function(t) {
            return Dh(Ih(t));
        }
    });
    var Lh = B.Object.keys, Ch = Tr, Rh = m, Mh = o.Date, Fh = Rh(Mh.prototype.getTime);
    Ch({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return Fh(new Mh);
        }
    }), B.Date.now;
    var Nh = bi.forEach, zh = mn("forEach") ? [].forEach : function(t) {
        return Nh(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    Tr({
        target: "Array",
        proto: !0,
        forced: [].forEach != zh
    }, {
        forEach: zh
    });
    var qh = Jr("Array").forEach, Yh = zn, Gh = Ut, Xh = et, Uh = qh, Wh = Array.prototype, Vh = {
        DOMTokenList: !0,
        NodeList: !0
    }, Hh = function(t) {
        var e = t.forEach;
        return t === Wh || Xh(Wh, t) && e === Wh.forEach || Gh(Vh, Yh(t)) ? Uh : e;
    }, $h = Tr, Bh = jn, Jh = m([].reverse), Kh = [
        1,
        2
    ];
    $h({
        target: "Array",
        proto: !0,
        forced: String(Kh) === String(Kh.reverse())
    }, {
        reverse: function() {
            return Bh(this) && (this.length = this.length), Jh(this);
        }
    });
    var Qh = Jr("Array").reverse, Zh = et, tp = Qh, ep = Array.prototype, rp = function(t) {
        var e = t.reverse;
        return t === ep || Zh(ep, t) && e === ep.reverse ? tp : e;
    }, np = Tr, ip = o, op = Qo, ap = on, up = cn, sp = Yt, cp = li, fp = cs, lp = Ei("splice"), hp = ip.TypeError, pp = Math.max, vp = Math.min, dp = 9007199254740991, yp = "Maximum allowed length exceeded";
    np({
        target: "Array",
        proto: !0,
        forced: !lp
    }, {
        splice: function(t, e) {
            var r, n, i, o, a, u, s = sp(this), c = up(s), f = op(t, c), l = arguments.length;
            if (0 === l ? r = n = 0 : 1 === l ? (r = 0, n = c - f) : (r = l - 2, n = vp(pp(ap(e), 0), c - f)), c + r - n > dp) throw hp(yp);
            for(i = cp(s, n), o = 0; o < n; o++)(a = f + o) in s && fp(i, o, s[a]);
            if (i.length = n, r < n) {
                for(o = f; o < c - n; o++)u = o + r, (a = o + n) in s ? s[u] = s[a] : delete s[u];
                for(o = c; o > c - n + r; o--)delete s[o - 1];
            } else if (r > n) for(o = c - n; o > f; o--)u = o + r - 1, (a = o + n - 1) in s ? s[u] = s[a] : delete s[u];
            for(o = 0; o < r; o++)s[o + f] = arguments[o + 2];
            return s.length = c - n + r, i;
        }
    });
    var gp = Jr("Array").splice, mp = et, bp = gp, _p = Array.prototype, wp = function(t) {
        var e = t.splice;
        return t === _p || mp(_p, t) && e === _p.splice ? bp : e;
    }, Op = w, Ep = m, Tp = T, xp = a, kp = pa, Sp = _c, Ap = x, jp = Yt, Pp = Y, Ip = Object.assign, Dp = Object.defineProperty, Lp = Ep([].concat), Cp = !Ip || xp(function() {
        if (Op && 1 !== Ip({
            b: 1
        }, Ip(Dp({}, "a", {
            enumerable: !0,
            get: function() {
                Dp(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t = {}, e = {}, r = Symbol(), n = "abcdefghijklmnopqrst";
        return t[r] = 7, n.split("").forEach(function(t) {
            e[t] = t;
        }), 7 != Ip({}, t)[r] || kp(Ip({}, e)).join("") != n;
    }) ? function(t, e) {
        for(var r = jp(t), n = arguments.length, i = 1, o = Sp.f, a = Ap.f; n > i;)for(var u, s = Pp(arguments[i++]), c = o ? Lp(kp(s), o(s)) : kp(s), f = c.length, l = 0; f > l;)u = c[l++], Op && !Tp(a, s, u) || (r[u] = s[u]);
        return r;
    } : Ip, Rp = Cp;
    Tr({
        target: "Object",
        stat: !0,
        forced: Object.assign !== Rp
    }, {
        assign: Rp
    });
    var Mp = B.Object.assign, Fp = na.includes;
    Tr({
        target: "Array",
        proto: !0
    }, {
        includes: function(t) {
            return Fp(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Jr("Array").includes;
    var Np = $, zp = R, qp = ae("match"), Yp = function(t) {
        var e;
        return Np(t) && (void 0 !== (e = t[qp]) ? !!e : "RegExp" == zp(t));
    }, Gp = o.TypeError, Xp = ae("match"), Up = Tr, Wp = function(t) {
        if (Yp(t)) throw Gp("The method doesn't accept regular expressions");
        return t;
    }, Vp = X, Hp = io, $p = function(t) {
        var e = /./;
        try {
            "/./"[t](e);
        } catch (r) {
            try {
                return e[Xp] = !1, "/./"[t](e);
            } catch (t1) {}
        }
        return !1;
    }, Bp = m("".indexOf);
    Up({
        target: "String",
        proto: !0,
        forced: !$p("includes")
    }, {
        includes: function(t) {
            return !!~Bp(Hp(Vp(this)), Hp(Wp(t)), arguments.length > 1 ? arguments[1] : void 0);
        }
    }), Jr("String").includes;
    var Jp = Yt, Kp = Va, Qp = Fa;
    Tr({
        target: "Object",
        stat: !0,
        forced: a(function() {
            Kp(1);
        }),
        sham: !Qp
    }, {
        getPrototypeOf: function(t) {
            return Kp(Jp(t));
        }
    });
    var Zp = B.Object.getPrototypeOf, tv = w, ev = m, rv = pa, nv = V, iv = ev(x.f), ov = ev([].push), av = function(t) {
        return function(e) {
            for(var r, n = nv(e), i = rv(n), o = i.length, a = 0, u = []; o > a;)r = i[a++], tv && !iv(n, r) || ov(u, t ? [
                r,
                n[r]
            ] : n[r]);
            return u;
        };
    }, uv = {
        entries: av(!0),
        values: av(!1)
    }.values;
    Tr({
        target: "Object",
        stat: !0
    }, {
        values: function(t) {
            return uv(t);
        }
    }), B.Object.values;
    var sv = "	\n\v\f\r \xa0              　\u2028\u2029\uFEFF", cv = X, fv = io, lv = m("".replace), hv = "[	\n\v\f\r \xa0              　\u2028\u2029\uFEFF]", pv = RegExp("^" + hv + hv + "*"), vv = RegExp(hv + hv + "*$"), dv = function(t) {
        return function(e) {
            var r = fv(cv(e));
            return 1 & t && (r = lv(r, pv, "")), 2 & t && (r = lv(r, vv, "")), r;
        };
    }, yv = {
        start: dv(1),
        end: dv(2),
        trim: dv(3)
    }, gv = o, mv = a, bv = m, _v = io, wv = yv.trim, Ov = sv, Ev = gv.parseInt, Tv = gv.Symbol, xv = Tv && Tv.iterator, kv = /^[+-]?0x/i, Sv = bv(kv.exec), Av = 8 !== Ev(Ov + "08") || 22 !== Ev(Ov + "0x16") || xv && !mv(function() {
        Ev(Object(xv));
    }) ? function(t, e) {
        var r = wv(_v(t));
        return Ev(r, e >>> 0 || (Sv(kv, r) ? 16 : 10));
    } : Ev;
    Tr({
        global: !0,
        forced: parseInt != Av
    }, {
        parseInt: Av
    });
    var jv = Tr, Pv = na.indexOf, Iv = mn, Dv = m([].indexOf), Lv = !!Dv && 1 / Dv([
        1
    ], 1, -0) < 0, Cv = Iv("indexOf");
    jv({
        target: "Array",
        proto: !0,
        forced: Lv || !Cv
    }, {
        indexOf: function(t) {
            var e = arguments.length > 1 ? arguments[1] : void 0;
            return Lv ? Dv(this, t, e) || 0 : Pv(this, t, e);
        }
    }), Jr("Array").indexOf;
    var Rv = Ho.PROPER, Mv = a, Fv = sv, Nv = yv.trim;
    Tr({
        target: "String",
        proto: !0,
        forced: function(t) {
            return Mv(function() {
                return !!Fv[t]() || "​\x85᠎" !== "​\x85᠎"[t]() || Rv && Fv[t].name !== t;
            });
        }("trim")
    }, {
        trim: function() {
            return Nv(this);
        }
    }), Jr("String").trim, Tr({
        target: "Object",
        stat: !0,
        sham: !w
    }, {
        create: Ma
    });
    var zv = B.Object, qv = function(t, e) {
        return zv.create(t, e);
    }, Yv = qv, Gv = Tr, Xv = tt, Uv = h, Wv = m, Vv = a, Hv = o.Array, $v = Xv("JSON", "stringify"), Bv = Wv(/./.exec), Jv = Wv("".charAt), Kv = Wv("".charCodeAt), Qv = Wv("".replace), Zv = Wv(1..toString), td = /[\uD800-\uDFFF]/g, ed = /^[\uD800-\uDBFF]$/, rd = /^[\uDC00-\uDFFF]$/, nd = function(t, e, r) {
        var n = Jv(r, e - 1), i = Jv(r, e + 1);
        return Bv(ed, t) && !Bv(rd, i) || Bv(rd, t) && !Bv(ed, n) ? "\\u" + Zv(Kv(t, 0), 16) : t;
    }, id = Vv(function() {
        return '"\udf06\ud834"' !== $v("\udf06\ud834") || '"\udead"' !== $v("\udead");
    });
    $v && Gv({
        target: "JSON",
        stat: !0,
        forced: id
    }, {
        stringify: function(t, e, r) {
            for(var n = 0, i = arguments.length, o = Hv(i); n < i; n++)o[n] = arguments[n];
            var a = Uv($v, null, o);
            return "string" == typeof a ? Qv(a, td, nd) : a;
        }
    });
    var od = B, ad = h;
    od.JSON || (od.JSON = {
        stringify: JSON.stringify
    });
    var ud = function(t, e, r) {
        return ad(od.JSON.stringify, null, arguments);
    }, sd = ud, cd = o.TypeError, fd = Tr, ld = o, hd = h, pd = b, vd = Rr, dd = function(t, e) {
        if (t < e) throw cd("Not enough arguments");
        return t;
    }, yd = /MSIE .\./.test(rt), gd = ld.Function, md = function(t) {
        return function(e, r) {
            var n = dd(arguments.length, 1) > 2, i = pd(e) ? e : gd(e), o = n ? vd(arguments, 2) : void 0;
            return t(n ? function() {
                hd(i, this, o);
            } : i, r);
        };
    };
    fd({
        global: !0,
        bind: !0,
        forced: yd
    }, {
        setTimeout: md(ld.setTimeout),
        setInterval: md(ld.setInterval)
    });
    var bd = B.setTimeout, _d = Yt, wd = Qo, Od = cn, Ed = function(t) {
        for(var e = _d(this), r = Od(e), n = arguments.length, i = wd(n > 1 ? arguments[1] : void 0, r), o = n > 2 ? arguments[2] : void 0, a = void 0 === o ? r : wd(o, r); a > i;)e[i++] = t;
        return e;
    };
    Tr({
        target: "Array",
        proto: !0
    }, {
        fill: Ed
    }), Jr("Array").fill;
    var Td = {
        exports: {}
    };
    !function(t) {
        function e(t) {
            if (t) return function(t) {
                for(var r in e.prototype)t[r] = e.prototype[r];
                return t;
            }(t);
        }
        t.exports = e, e.prototype.on = e.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
        }, e.prototype.once = function(t, e) {
            function r() {
                this.off(t, r), e.apply(this, arguments);
            }
            return r.fn = e, this.on(t, r), this;
        }, e.prototype.off = e.prototype.removeListener = e.prototype.removeAllListeners = e.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;
            var r, n = this._callbacks["$" + t];
            if (!n) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for(var i = 0; i < n.length; i++)if ((r = n[i]) === e || r.fn === e) {
                n.splice(i, 1);
                break;
            }
            return 0 === n.length && delete this._callbacks["$" + t], this;
        }, e.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {};
            for(var e = new Array(arguments.length - 1), r = this._callbacks["$" + t], n = 1; n < arguments.length; n++)e[n - 1] = arguments[n];
            if (r) {
                n = 0;
                for(var i = (r = r.slice(0)).length; n < i; ++n)r[n].apply(this, e);
            }
            return this;
        }, e.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
        }, e.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
        };
    }(Td);
    var xd, kd = Td.exports;
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license */ function Sd() {
        return Sd = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var r = arguments[e];
                for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);
            }
            return t;
        }, Sd.apply(this, arguments);
    }
    function Ad(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function jd(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    xd = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), r = 1; r < arguments.length; r++){
            var n = arguments[r];
            if (null != n) for(var i in n)n.hasOwnProperty(i) && (e[i] = n[i]);
        }
        return e;
    } : Object.assign;
    var Pd, Id = xd, Dd = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], Ld = "undefined" == typeof document ? {
        style: {}
    } : document.createElement("div"), Cd = Math.round, Rd = Math.abs, Md = Date.now;
    function Fd(t, e) {
        for(var r, n, i = e[0].toUpperCase() + e.slice(1), o = 0; o < Dd.length;){
            if ((n = (r = Dd[o]) ? r + i : e) in t) return n;
            o++;
        }
    }
    Pd = "undefined" == typeof window ? {} : window;
    var Nd = Fd(Ld.style, "touchAction"), zd = void 0 !== Nd;
    var qd = "compute", Yd = "auto", Gd = "manipulation", Xd = "none", Ud = "pan-x", Wd = "pan-y", Vd = function() {
        if (!zd) return !1;
        var t = {}, e = Pd.CSS && Pd.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(r) {
            return t[r] = !e || Pd.CSS.supports("touch-action", r);
        }), t;
    }(), Hd = "ontouchstart" in Pd, $d = void 0 !== Fd(Pd, "PointerEvent"), Bd = Hd && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), Jd = "touch", Kd = "mouse", Qd = 16, Zd = 24, ty = [
        "x",
        "y"
    ], ey = [
        "clientX",
        "clientY"
    ];
    function ry(t, e, r) {
        var n;
        if (t) {
            if (t.forEach) t.forEach(e, r);
            else if (void 0 !== t.length) for(n = 0; n < t.length;)e.call(r, t[n], n, t), n++;
            else for(n in t)t.hasOwnProperty(n) && e.call(r, t[n], n, t);
        }
    }
    function ny(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function iy(t, e) {
        return t.indexOf(e) > -1;
    }
    var oy = function() {
        function t(t, e) {
            this.manager = t, this.set(e);
        }
        var e = t.prototype;
        return e.set = function(t) {
            t === qd && (t = this.compute()), zd && this.manager.element.style && Vd[t] && (this.manager.element.style[Nd] = t), this.actions = t.toLowerCase().trim();
        }, e.update = function() {
            this.set(this.manager.options.touchAction);
        }, e.compute = function() {
            var t = [];
            return ry(this.manager.recognizers, function(e) {
                ny(e.options.enable, [
                    e
                ]) && (t = t.concat(e.getTouchAction()));
            }), function(t) {
                if (iy(t, Xd)) return Xd;
                var e = iy(t, Ud), r = iy(t, Wd);
                return e && r ? Xd : e || r ? e ? Ud : Wd : iy(t, Gd) ? Gd : Yd;
            }(t.join(" "));
        }, e.preventDefaults = function(t) {
            var e = t.srcEvent, r = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var n = this.actions, i = iy(n, Xd) && !Vd.none, o = iy(n, Wd) && !Vd["pan-y"], a = iy(n, Ud) && !Vd["pan-x"];
                if (i) {
                    var u = 1 === t.pointers.length, s = t.distance < 2, c = t.deltaTime < 250;
                    if (u && s && c) return;
                }
                if (!a || !o) return i || o && 6 & r || a && r & Zd ? this.preventSrc(e) : void 0;
            }
        }, e.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t;
    }();
    function ay(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function uy(t) {
        var e = t.length;
        if (1 === e) return {
            x: Cd(t[0].clientX),
            y: Cd(t[0].clientY)
        };
        for(var r = 0, n = 0, i = 0; i < e;)r += t[i].clientX, n += t[i].clientY, i++;
        return {
            x: Cd(r / e),
            y: Cd(n / e)
        };
    }
    function sy(t) {
        for(var e = [], r = 0; r < t.pointers.length;)e[r] = {
            clientX: Cd(t.pointers[r].clientX),
            clientY: Cd(t.pointers[r].clientY)
        }, r++;
        return {
            timeStamp: Md(),
            pointers: e,
            center: uy(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function cy(t, e, r) {
        r || (r = ty);
        var n = e[r[0]] - t[r[0]], i = e[r[1]] - t[r[1]];
        return Math.sqrt(n * n + i * i);
    }
    function fy(t, e, r) {
        r || (r = ty);
        var n = e[r[0]] - t[r[0]], i = e[r[1]] - t[r[1]];
        return 180 * Math.atan2(i, n) / Math.PI;
    }
    function ly(t, e) {
        return t === e ? 1 : Rd(t) >= Rd(e) ? t < 0 ? 2 : 4 : e < 0 ? 8 : Qd;
    }
    function hy(t, e, r) {
        return {
            x: e / t || 0,
            y: r / t || 0
        };
    }
    function py(t, e) {
        var r = t.session, n = e.pointers, i = n.length;
        r.firstInput || (r.firstInput = sy(e)), i > 1 && !r.firstMultiple ? r.firstMultiple = sy(e) : 1 === i && (r.firstMultiple = !1);
        var o = r.firstInput, a = r.firstMultiple, u = a ? a.center : o.center, s = e.center = uy(n);
        e.timeStamp = Md(), e.deltaTime = e.timeStamp - o.timeStamp, e.angle = fy(u, s), e.distance = cy(u, s), function(t, e) {
            var r = e.center, n = t.offsetDelta || {}, i = t.prevDelta || {}, o = t.prevInput || {};
            1 !== e.eventType && 4 !== o.eventType || (i = t.prevDelta = {
                x: o.deltaX || 0,
                y: o.deltaY || 0
            }, n = t.offsetDelta = {
                x: r.x,
                y: r.y
            }), e.deltaX = i.x + (r.x - n.x), e.deltaY = i.y + (r.y - n.y);
        }(r, e), e.offsetDirection = ly(e.deltaX, e.deltaY);
        var c, f, l = hy(e.deltaTime, e.deltaX, e.deltaY);
        e.overallVelocityX = l.x, e.overallVelocityY = l.y, e.overallVelocity = Rd(l.x) > Rd(l.y) ? l.x : l.y, e.scale = a ? (c = a.pointers, cy((f = n)[0], f[1], ey) / cy(c[0], c[1], ey)) : 1, e.rotation = a ? function(t, e) {
            return fy(e[1], e[0], ey) + fy(t[1], t[0], ey);
        }(a.pointers, n) : 0, e.maxPointers = r.prevInput ? e.pointers.length > r.prevInput.maxPointers ? e.pointers.length : r.prevInput.maxPointers : e.pointers.length, function(t, e) {
            var r, n, i, o, a = t.lastInterval || e, u = e.timeStamp - a.timeStamp;
            if (8 !== e.eventType && (u > 25 || void 0 === a.velocity)) {
                var s = e.deltaX - a.deltaX, c = e.deltaY - a.deltaY, f = hy(u, s, c);
                n = f.x, i = f.y, r = Rd(f.x) > Rd(f.y) ? f.x : f.y, o = ly(s, c), t.lastInterval = e;
            } else r = a.velocity, n = a.velocityX, i = a.velocityY, o = a.direction;
            e.velocity = r, e.velocityX = n, e.velocityY = i, e.direction = o;
        }(r, e);
        var h, p = t.element, v = e.srcEvent;
        ay(h = v.composedPath ? v.composedPath()[0] : v.path ? v.path[0] : v.target, p) && (p = h), e.target = p;
    }
    function vy(t, e, r) {
        var n = r.pointers.length, i = r.changedPointers.length, o = 1 & e && n - i == 0, a = 12 & e && n - i == 0;
        r.isFirst = !!o, r.isFinal = !!a, o && (t.session = {}), r.eventType = e, py(t, r), t.emit("hammer.input", r), t.recognize(r), t.session.prevInput = r;
    }
    function dy(t) {
        return t.trim().split(/\s+/g);
    }
    function yy(t, e, r) {
        ry(dy(e), function(e) {
            t.addEventListener(e, r, !1);
        });
    }
    function gy(t, e, r) {
        ry(dy(e), function(e) {
            t.removeEventListener(e, r, !1);
        });
    }
    function my(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var by = function() {
        function t(t, e) {
            var r = this;
            this.manager = t, this.callback = e, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                ny(t.options.enable, [
                    t
                ]) && r.handler(e);
            }, this.init();
        }
        var e = t.prototype;
        return e.handler = function() {}, e.init = function() {
            this.evEl && yy(this.element, this.evEl, this.domHandler), this.evTarget && yy(this.target, this.evTarget, this.domHandler), this.evWin && yy(my(this.element), this.evWin, this.domHandler);
        }, e.destroy = function() {
            this.evEl && gy(this.element, this.evEl, this.domHandler), this.evTarget && gy(this.target, this.evTarget, this.domHandler), this.evWin && gy(my(this.element), this.evWin, this.domHandler);
        }, t;
    }();
    function _y(t, e, r) {
        if (t.indexOf && !r) return t.indexOf(e);
        for(var n = 0; n < t.length;){
            if (r && t[n][r] == e || !r && t[n] === e) return n;
            n++;
        }
        return -1;
    }
    var wy = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Oy = {
        2: Jd,
        3: "pen",
        4: Kd,
        5: "kinect"
    }, Ey = "pointerdown", Ty = "pointermove pointerup pointercancel";
    Pd.MSPointerEvent && !Pd.PointerEvent && (Ey = "MSPointerDown", Ty = "MSPointerMove MSPointerUp MSPointerCancel");
    var xy = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evEl = Ey, n.evWin = Ty, (r = t.apply(this, arguments) || this).store = r.manager.session.pointerEvents = [], r;
        }
        return Ad(e, t), e.prototype.handler = function(t) {
            var e = this.store, r = !1, n = t.type.toLowerCase().replace("ms", ""), i = wy[n], o = Oy[t.pointerType] || t.pointerType, a = o === Jd, u = _y(e, t.pointerId, "pointerId");
            1 & i && (0 === t.button || a) ? u < 0 && (e.push(t), u = e.length - 1) : 12 & i && (r = !0), u < 0 || (e[u] = t, this.callback(this.manager, i, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: o,
                srcEvent: t
            }), r && e.splice(u, 1));
        }, e;
    }(by);
    function ky(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function Sy(t, e, r) {
        for(var n = [], i = [], o = 0; o < t.length;){
            var a = e ? t[o][e] : t[o];
            _y(i, a) < 0 && n.push(t[o]), i[o] = a, o++;
        }
        return r && (n = e ? n.sort(function(t, r) {
            return t[e] > r[e];
        }) : n.sort()), n;
    }
    var Ay = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, jy = "touchstart touchmove touchend touchcancel", Py = function(t) {
        function e() {
            var r;
            return e.prototype.evTarget = jy, (r = t.apply(this, arguments) || this).targetIds = {}, r;
        }
        return Ad(e, t), e.prototype.handler = function(t) {
            var e = Ay[t.type], r = Iy.call(this, t, e);
            r && this.callback(this.manager, e, {
                pointers: r[0],
                changedPointers: r[1],
                pointerType: Jd,
                srcEvent: t
            });
        }, e;
    }(by);
    function Iy(t, e) {
        var r, n, i = ky(t.touches), o = this.targetIds;
        if (3 & e && 1 === i.length) return o[i[0].identifier] = !0, [
            i,
            i
        ];
        var a = ky(t.changedTouches), u = [], s = this.target;
        if (n = i.filter(function(t) {
            return ay(t.target, s);
        }), 1 === e) for(r = 0; r < n.length;)o[n[r].identifier] = !0, r++;
        for(r = 0; r < a.length;)o[a[r].identifier] && u.push(a[r]), 12 & e && delete o[a[r].identifier], r++;
        return u.length ? [
            Sy(n.concat(u), "identifier", !0),
            u
        ] : void 0;
    }
    var Dy = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, Ly = "mousedown", Cy = "mousemove mouseup", Ry = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evEl = Ly, n.evWin = Cy, (r = t.apply(this, arguments) || this).pressed = !1, r;
        }
        return Ad(e, t), e.prototype.handler = function(t) {
            var e = Dy[t.type];
            1 & e && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = 4), this.pressed && (4 & e && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: Kd,
                srcEvent: t
            }));
        }, e;
    }(by);
    function My(t) {
        var e = t.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var r = {
                x: e.clientX,
                y: e.clientY
            }, n = this.lastTouches;
            this.lastTouches.push(r);
            setTimeout(function() {
                var t = n.indexOf(r);
                t > -1 && n.splice(t, 1);
            }, 2500);
        }
    }
    function Fy(t, e) {
        1 & t ? (this.primaryTouch = e.changedPointers[0].identifier, My.call(this, e)) : 12 & t && My.call(this, e);
    }
    function Ny(t) {
        for(var e = t.srcEvent.clientX, r = t.srcEvent.clientY, n = 0; n < this.lastTouches.length; n++){
            var i = this.lastTouches[n], o = Math.abs(e - i.x), a = Math.abs(r - i.y);
            if (o <= 25 && a <= 25) return !0;
        }
        return !1;
    }
    var zy = function() {
        return function(t) {
            function e(e, r) {
                var n;
                return (n = t.call(this, e, r) || this).handler = function(t, e, r) {
                    var i = r.pointerType === Jd, o = r.pointerType === Kd;
                    if (!(o && r.sourceCapabilities && r.sourceCapabilities.firesTouchEvents)) {
                        if (i) Fy.call(jd(jd(n)), e, r);
                        else if (o && Ny.call(jd(jd(n)), r)) return;
                        n.callback(t, e, r);
                    }
                }, n.touch = new Py(n.manager, n.handler), n.mouse = new Ry(n.manager, n.handler), n.primaryTouch = null, n.lastTouches = [], n;
            }
            return Ad(e, t), e.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e;
        }(by);
    }();
    function qy(t, e, r) {
        return !!Array.isArray(t) && (ry(t, r[e], r), !0);
    }
    var Yy = 32, Gy = 1;
    function Xy(t, e) {
        var r = e.manager;
        return r ? r.get(t) : t;
    }
    function Uy(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var Wy = function() {
        function t(t) {
            void 0 === t && (t = {}), this.options = Sd({
                enable: !0
            }, t), this.id = Gy++, this.manager = null, this.state = 1, this.simultaneous = {}, this.requireFail = [];
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Id(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e.recognizeWith = function(t) {
            if (qy(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = Xy(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e.dropRecognizeWith = function(t) {
            return qy(t, "dropRecognizeWith", this) || (t = Xy(t, this), delete this.simultaneous[t.id]), this;
        }, e.requireFailure = function(t) {
            if (qy(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === _y(e, t = Xy(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e.dropRequireFailure = function(t) {
            if (qy(t, "dropRequireFailure", this)) return this;
            t = Xy(t, this);
            var e = _y(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e.emit = function(t) {
            var e = this, r = this.state;
            function n(r) {
                e.manager.emit(r, t);
            }
            r < 8 && n(e.options.event + Uy(r)), n(e.options.event), t.additionalEvent && n(t.additionalEvent), r >= 8 && n(e.options.event + Uy(r));
        }, e.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = Yy;
        }, e.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e.recognize = function(t) {
            var e = Id({}, t);
            if (!ny(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = Yy);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e.process = function(t) {}, e.getTouchAction = function() {}, e.reset = function() {}, t;
    }(), Vy = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Sd({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, r.pCenter = !1, r._timer = null, r._input = null, r.count = 0, r;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Gd
            ];
        }, r.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, i = t.distance < r.threshold, o = t.deltaTime < r.time;
            if (this.reset(), 1 & t.eventType && 0 === this.count) return this.failTimeout();
            if (i && o && n) {
                if (4 !== t.eventType) return this.failTimeout();
                var a = !this.pTime || t.timeStamp - this.pTime < r.interval, u = !this.pCenter || cy(this.pCenter, t.center) < r.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, u && a ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % r.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, r.interval), 2) : 8;
            }
            return Yy;
        }, r.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = Yy;
            }, this.options.interval), Yy;
        }, r.reset = function() {
            clearTimeout(this._timer);
        }, r.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e;
    }(Wy), Hy = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sd({
                pointers: 1
            }, e)) || this;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, r.process = function(t) {
            var e = this.state, r = t.eventType, n = 6 & e, i = this.attrTest(t);
            return n && (8 & r || !i) ? 16 | e : n || i ? 4 & r ? 8 | e : 2 & e ? 4 | e : 2 : Yy;
        }, e;
    }(Wy);
    function $y(t) {
        return t === Qd ? "down" : 8 === t ? "up" : 2 === t ? "left" : 4 === t ? "right" : "";
    }
    var By = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Sd({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e)) || this).pX = null, r.pY = null, r;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return 6 & t && e.push(Wd), t & Zd && e.push(Ud), e;
        }, r.directionTest = function(t) {
            var e = this.options, r = !0, n = t.distance, i = t.direction, o = t.deltaX, a = t.deltaY;
            return i & e.direction || (6 & e.direction ? (i = 0 === o ? 1 : o < 0 ? 2 : 4, r = o !== this.pX, n = Math.abs(t.deltaX)) : (i = 0 === a ? 1 : a < 0 ? 8 : Qd, r = a !== this.pY, n = Math.abs(t.deltaY))), t.direction = i, r && n > e.threshold && i & e.direction;
        }, r.attrTest = function(t) {
            return Hy.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, r.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var r = $y(e.direction);
            r && (e.additionalEvent = this.options.event + r), t.prototype.emit.call(this, e);
        }, e;
    }(Hy), Jy = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sd({
                event: "swipe",
                threshold: 10,
                velocity: .3,
                direction: 30,
                pointers: 1
            }, e)) || this;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return By.prototype.getTouchAction.call(this);
        }, r.attrTest = function(e) {
            var r, n = this.options.direction;
            return 30 & n ? r = e.overallVelocity : 6 & n ? r = e.overallVelocityX : n & Zd && (r = e.overallVelocityY), t.prototype.attrTest.call(this, e) && n & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && Rd(r) > this.options.velocity && 4 & e.eventType;
        }, r.emit = function(t) {
            var e = $y(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e;
    }(Hy), Ky = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sd({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Xd
            ];
        }, r.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, r.emit = function(e) {
            if (1 !== e.scale) {
                var r = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + r;
            }
            t.prototype.emit.call(this, e);
        }, e;
    }(Hy), Qy = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Sd({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Xd
            ];
        }, r.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e;
    }(Hy), Zy = function(t) {
        function e(e) {
            var r;
            return void 0 === e && (e = {}), (r = t.call(this, Sd({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, r._input = null, r;
        }
        Ad(e, t);
        var r = e.prototype;
        return r.getTouchAction = function() {
            return [
                Yd
            ];
        }, r.process = function(t) {
            var e = this, r = this.options, n = t.pointers.length === r.pointers, i = t.distance < r.threshold, o = t.deltaTime > r.time;
            if (this._input = t, !i || !n || 12 & t.eventType && !o) this.reset();
            else if (1 & t.eventType) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, r.time);
            else if (4 & t.eventType) return 8;
            return Yy;
        }, r.reset = function() {
            clearTimeout(this._timer);
        }, r.emit = function(t) {
            8 === this.state && (t && 4 & t.eventType ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = Md(), this.manager.emit(this.options.event, this._input)));
        }, e;
    }(Wy), tg = {
        domEvents: !1,
        touchAction: qd,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, eg = [
        [
            Qy,
            {
                enable: !1
            }
        ],
        [
            Ky,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            Jy,
            {
                direction: 6
            }
        ],
        [
            By,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            Vy
        ],
        [
            Vy,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            Zy
        ]
    ];
    function rg(t, e) {
        var r, n = t.element;
        n.style && (ry(t.options.cssProps, function(i, o) {
            r = Fd(n.style, o), e ? (t.oldCssProps[r] = n.style[r], n.style[r] = i) : n.style[r] = t.oldCssProps[r] || "";
        }), e || (t.oldCssProps = {}));
    }
    var ng = function() {
        function t(t, e) {
            var r, n = this;
            this.options = Id({}, tg, e || {}), this.options.inputTarget = this.options.inputTarget || t, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = t, this.input = new ((r = this).options.inputClass || ($d ? xy : Bd ? Py : Hd ? zy : Ry))(r, vy), this.touchAction = new oy(this, this.options.touchAction), rg(this, !0), ry(this.options.recognizers, function(t) {
                var e = n.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Id(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var r;
                this.touchAction.preventDefaults(t);
                var n = this.recognizers, i = e.curRecognizer;
                (!i || i && 8 & i.state) && (e.curRecognizer = null, i = null);
                for(var o = 0; o < n.length;)r = n[o], 2 === e.stopped || i && r !== i && !r.canRecognizeWith(i) ? r.reset() : r.recognize(t), !i && 14 & r.state && (e.curRecognizer = r, i = r), o++;
            }
        }, e.get = function(t) {
            if (t instanceof Wy) return t;
            for(var e = this.recognizers, r = 0; r < e.length; r++)if (e[r].options.event === t) return e[r];
            return null;
        }, e.add = function(t) {
            if (qy(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e.remove = function(t) {
            if (qy(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var r = this.recognizers, n = _y(r, e);
                -1 !== n && (r.splice(n, 1), this.touchAction.update());
            }
            return this;
        }, e.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var r = this.handlers;
            return ry(dy(t), function(t) {
                r[t] = r[t] || [], r[t].push(e);
            }), this;
        }, e.off = function(t, e) {
            if (void 0 === t) return this;
            var r = this.handlers;
            return ry(dy(t), function(t) {
                e ? r[t] && r[t].splice(_y(r[t], e), 1) : delete r[t];
            }), this;
        }, e.emit = function(t, e) {
            this.options.domEvents && function(t, e) {
                var r = document.createEvent("Event");
                r.initEvent(t, !0, !0), r.gesture = e, e.target.dispatchEvent(r);
            }(t, e);
            var r = this.handlers[t] && this.handlers[t].slice();
            if (r && r.length) {
                e.type = t, e.preventDefault = function() {
                    e.srcEvent.preventDefault();
                };
                for(var n = 0; n < r.length;)r[n](e), n++;
            }
        }, e.destroy = function() {
            this.element && rg(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
        }, t;
    }(), ig = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, og = "touchstart", ag = "touchstart touchmove touchend touchcancel", ug = function(t) {
        function e() {
            var r, n = e.prototype;
            return n.evTarget = og, n.evWin = ag, (r = t.apply(this, arguments) || this).started = !1, r;
        }
        return Ad(e, t), e.prototype.handler = function(t) {
            var e = ig[t.type];
            if (1 === e && (this.started = !0), this.started) {
                var r = sg.call(this, t, e);
                12 & e && r[0].length - r[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: r[0],
                    changedPointers: r[1],
                    pointerType: Jd,
                    srcEvent: t
                });
            }
        }, e;
    }(by);
    function sg(t, e) {
        var r = ky(t.touches), n = ky(t.changedTouches);
        return 12 & e && (r = Sy(r.concat(n), "identifier", !0)), [
            r,
            n
        ];
    }
    function cg(t, e, r) {
        var n = "DEPRECATED METHOD: " + e + "\n" + r + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), r = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", i = window.console && (window.console.warn || window.console.log);
            return i && i.call(window.console, n, r), t.apply(this, arguments);
        };
    }
    var fg = cg(function(t, e, r) {
        for(var n = Object.keys(e), i = 0; i < n.length;)(!r || r && void 0 === t[n[i]]) && (t[n[i]] = e[n[i]]), i++;
        return t;
    }, "extend", "Use `assign`."), lg = cg(function(t, e) {
        return fg(t, e, !0);
    }, "merge", "Use `assign`.");
    function hg(t, e, r) {
        var n, i = e.prototype;
        (n = t.prototype = Object.create(i)).constructor = t, n._super = i, r && Id(n, r);
    }
    function pg(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var vg = function() {
        var t = function(t, e) {
            return void 0 === e && (e = {}), new ng(t, Sd({
                recognizers: eg.concat()
            }, e));
        };
        return t.VERSION = "2.0.17-rc", t.DIRECTION_ALL = 30, t.DIRECTION_DOWN = Qd, t.DIRECTION_LEFT = 2, t.DIRECTION_RIGHT = 4, t.DIRECTION_UP = 8, t.DIRECTION_HORIZONTAL = 6, t.DIRECTION_VERTICAL = Zd, t.DIRECTION_NONE = 1, t.DIRECTION_DOWN = Qd, t.INPUT_START = 1, t.INPUT_MOVE = 2, t.INPUT_END = 4, t.INPUT_CANCEL = 8, t.STATE_POSSIBLE = 1, t.STATE_BEGAN = 2, t.STATE_CHANGED = 4, t.STATE_ENDED = 8, t.STATE_RECOGNIZED = 8, t.STATE_CANCELLED = 16, t.STATE_FAILED = Yy, t.Manager = ng, t.Input = by, t.TouchAction = oy, t.TouchInput = Py, t.MouseInput = Ry, t.PointerEventInput = xy, t.TouchMouseInput = zy, t.SingleTouchInput = ug, t.Recognizer = Wy, t.AttrRecognizer = Hy, t.Tap = Vy, t.Pan = By, t.Swipe = Jy, t.Pinch = Ky, t.Rotate = Qy, t.Press = Zy, t.on = yy, t.off = gy, t.each = ry, t.merge = lg, t.extend = fg, t.bindFn = pg, t.assign = Id, t.inherit = hg, t.bindFn = pg, t.prefixed = Fd, t.toArray = ky, t.inArray = _y, t.uniqueArray = Sy, t.splitStr = dy, t.boolOrFn = ny, t.hasParent = ay, t.addEventListeners = yy, t.removeEventListeners = gy, t.defaults = Id({}, tg, {
            preset: eg
        }), t;
    }();
    function dg(t, e) {
        var r = void 0 !== Oh && ic(t) || t["@@iterator"];
        if (!r) {
            if (Ph(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return yg(t, e);
                var n = Ah(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return qs(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yg(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, i = function() {};
                return {
                    s: i,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function yg(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    var gg = Oh("DELETE");
    function mg() {
        var t = bg.apply(void 0, arguments);
        return wg(t), t;
    }
    function bg() {
        for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
        if (e.length < 2) return e[0];
        var n;
        if (e.length > 2) return bg.apply(void 0, Sh(n = [
            mg(e[0], e[1])
        ]).call(n, wh(Ah(e).call(e, 2))));
        var i, o = e[0], a = e[1], u = dg(jh(a));
        try {
            for(u.s(); !(i = u.n()).done;){
                var s = i.value;
                Object.prototype.propertyIsEnumerable.call(a, s) && (a[s] === gg ? delete o[s] : null === o[s] || null === a[s] || "object" !== _h(o[s]) || "object" !== _h(a[s]) || Ph(o[s]) || Ph(a[s]) ? o[s] = _g(a[s]) : o[s] = bg(o[s], a[s]));
            }
        } catch (t1) {
            u.e(t1);
        } finally{
            u.f();
        }
        return o;
    }
    function _g(t) {
        return Ph(t) ? Ri(t).call(t, function(t) {
            return _g(t);
        }) : "object" === _h(t) && null !== t ? bg({}, t) : t;
    }
    function wg(t) {
        for(var e = 0, r = Lh(t); e < r.length; e++){
            var n = r[e];
            t[n] === gg ? delete t[n] : "object" === _h(t[n]) && null !== t[n] && wg(t[n]);
        }
    }
    var Og = "undefined" != typeof window ? window.Hammer || vg : function() {
        return function() {
            var t = function() {};
            return {
                on: t,
                off: t,
                destroy: t,
                emit: t,
                get: function() {
                    return {
                        set: t
                    };
                }
            };
        }();
    };
    function Eg(t) {
        var e, r = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            r._dom.overlay.parentNode.removeChild(r._dom.overlay);
        });
        var n = Og(this._dom.overlay);
        n.on("tap", en(e = this._onTapOverlay).call(e, this)), this._cleanupQueue.push(function() {
            n.destroy();
        });
        var i = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        Hh(i).call(i, function(t) {
            n.on(t, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e.target, t) || r.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", r._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && r.deactivate();
        };
    }
    kd(Eg.prototype), Eg.current = null, Eg.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var r, n = dg(rp(t = wp(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(n.s(); !(r = n.n()).done;)(0, r.value)();
        } catch (t1) {
            n.e(t1);
        } finally{
            n.f();
        }
    }, Eg.prototype.activate = function() {
        Eg.current && Eg.current.deactivate(), Eg.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Eg.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Eg.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var Tg = ni, xg = wt, kg = o.TypeError, Sg = Tr, Ag = h, jg = Hr, Pg = function(t) {
        if (Tg(t)) return t;
        throw kg(xg(t) + " is not a constructor");
    }, Ig = Qe, Dg = $, Lg = Ma, Cg = a, Rg = tt("Reflect", "construct"), Mg = Object.prototype, Fg = [].push, Ng = Cg(function() {
        function t() {}
        return !(Rg(function() {}, [], t) instanceof t);
    }), zg = !Cg(function() {
        Rg(function() {});
    }), qg = Ng || zg;
    Sg({
        target: "Reflect",
        stat: !0,
        forced: qg,
        sham: qg
    }, {
        construct: function(t, e) {
            Pg(t), Ig(e);
            var r = arguments.length < 3 ? t : Pg(arguments[2]);
            if (zg && !Ng) return Rg(t, e, r);
            if (t == r) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var n = [
                    null
                ];
                return Ag(Fg, n, e), new (Ag(jg, t, n));
            }
            var i = r.prototype, o = Lg(Dg(i) ? i : Mg), a = Ag(t, o, e);
            return Dg(a) ? a : o;
        }
    });
    var Yg = B.Reflect.construct;
    function Gg(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    var Xg = qv;
    Tr({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: Su
    });
    var Ug = B.Object.setPrototypeOf;
    function Wg(t, e) {
        return Wg = Ug || function(t, e) {
            return t.__proto__ = e, t;
        }, Wg(t, e);
    }
    function Vg(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Xg(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), Ir(t, "prototype", {
            writable: !1
        }), e && Wg(t, e);
    }
    function Hg(t, e) {
        if (e && ("object" === _h(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return Gg(t);
    }
    var $g = Zp;
    function Bg(t) {
        return Bg = Ug ? $g : function(t) {
            return t.__proto__ || $g(t);
        }, Bg(t);
    }
    var Jg = {
        exports: {}
    };
    !function(t) {
        var e = function(t) {
            var e, r = Object.prototype, n = r.hasOwnProperty, i = "function" == typeof Symbol ? Symbol : {}, o = i.iterator || "@@iterator", a = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
            function s(t, e, r) {
                return Object.defineProperty(t, e, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }), t[e];
            }
            try {
                s({}, "");
            } catch (t1) {
                s = function(t, e, r) {
                    return t[e] = r;
                };
            }
            function c(t, e, r, n) {
                var i = e && e.prototype instanceof y ? e : y, o = Object.create(i.prototype), a = new A(n || []);
                return o._invoke = function(t, e, r) {
                    var n = l;
                    return function(i, o) {
                        if (n === p) throw new Error("Generator is already running");
                        if (n === v) {
                            if ("throw" === i) throw o;
                            return P();
                        }
                        for(r.method = i, r.arg = o;;){
                            var a = r.delegate;
                            if (a) {
                                var u = x(a, r);
                                if (u) {
                                    if (u === d) continue;
                                    return u;
                                }
                            }
                            if ("next" === r.method) r.sent = r._sent = r.arg;
                            else if ("throw" === r.method) {
                                if (n === l) throw n = v, r.arg;
                                r.dispatchException(r.arg);
                            } else "return" === r.method && r.abrupt("return", r.arg);
                            n = p;
                            var s = f(t, e, r);
                            if ("normal" === s.type) {
                                if (n = r.done ? v : h, s.arg === d) continue;
                                return {
                                    value: s.arg,
                                    done: r.done
                                };
                            }
                            "throw" === s.type && (n = v, r.method = "throw", r.arg = s.arg);
                        }
                    };
                }(t, r, a), o;
            }
            function f(t, e, r) {
                try {
                    return {
                        type: "normal",
                        arg: t.call(e, r)
                    };
                } catch (t1) {
                    return {
                        type: "throw",
                        arg: t1
                    };
                }
            }
            t.wrap = c;
            var l = "suspendedStart", h = "suspendedYield", p = "executing", v = "completed", d = {};
            function y() {}
            function g() {}
            function m() {}
            var b = {};
            s(b, o, function() {
                return this;
            });
            var _ = Object.getPrototypeOf, w = _ && _(_(j([])));
            w && w !== r && n.call(w, o) && (b = w);
            var O = m.prototype = y.prototype = Object.create(b);
            function E(t) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(e) {
                    s(t, e, function(t) {
                        return this._invoke(e, t);
                    });
                });
            }
            function T(t, e) {
                function r(i, o, a, u) {
                    var s = f(t[i], t, o);
                    if ("throw" !== s.type) {
                        var c = s.arg, l = c.value;
                        return l && "object" == typeof l && n.call(l, "__await") ? e.resolve(l.__await).then(function(t) {
                            r("next", t, a, u);
                        }, function(t) {
                            r("throw", t, a, u);
                        }) : e.resolve(l).then(function(t) {
                            c.value = t, a(c);
                        }, function(t) {
                            return r("throw", t, a, u);
                        });
                    }
                    u(s.arg);
                }
                var i;
                this._invoke = function(t, n) {
                    function o() {
                        return new e(function(e, i) {
                            r(t, n, e, i);
                        });
                    }
                    return i = i ? i.then(o, o) : o();
                };
            }
            function x(t, r) {
                var n = t.iterator[r.method];
                if (n === e) {
                    if (r.delegate = null, "throw" === r.method) {
                        if (t.iterator.return && (r.method = "return", r.arg = e, x(t, r), "throw" === r.method)) return d;
                        r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return d;
                }
                var i = f(n, t.iterator, r.arg);
                if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, d;
                var o = i.arg;
                return o ? o.done ? (r[t.resultName] = o.value, r.next = t.nextLoc, "return" !== r.method && (r.method = "next", r.arg = e), r.delegate = null, d) : o : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, d);
            }
            function k(t) {
                var e = {
                    tryLoc: t[0]
                };
                1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
            }
            function S(t) {
                var e = t.completion || {};
                e.type = "normal", delete e.arg, t.completion = e;
            }
            function A(t) {
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ], t.forEach(k, this), this.reset(!0);
            }
            function j(t) {
                if (t) {
                    var r = t[o];
                    if (r) return r.call(t);
                    if ("function" == typeof t.next) return t;
                    if (!isNaN(t.length)) {
                        var i = -1, a = function r() {
                            for(; ++i < t.length;)if (n.call(t, i)) return r.value = t[i], r.done = !1, r;
                            return r.value = e, r.done = !0, r;
                        };
                        return a.next = a;
                    }
                }
                return {
                    next: P
                };
            }
            function P() {
                return {
                    value: e,
                    done: !0
                };
            }
            return g.prototype = m, s(O, "constructor", m), s(m, "constructor", g), g.displayName = s(m, u, "GeneratorFunction"), t.isGeneratorFunction = function(t) {
                var e = "function" == typeof t && t.constructor;
                return !!e && (e === g || "GeneratorFunction" === (e.displayName || e.name));
            }, t.mark = function(t) {
                return Object.setPrototypeOf ? Object.setPrototypeOf(t, m) : (t.__proto__ = m, s(t, u, "GeneratorFunction")), t.prototype = Object.create(O), t;
            }, t.awrap = function(t) {
                return {
                    __await: t
                };
            }, E(T.prototype), s(T.prototype, a, function() {
                return this;
            }), t.AsyncIterator = T, t.async = function(e, r, n, i, o) {
                void 0 === o && (o = Promise);
                var a = new T(c(e, r, n, i), o);
                return t.isGeneratorFunction(r) ? a : a.next().then(function(t) {
                    return t.done ? t.value : a.next();
                });
            }, E(O), s(O, u, "Generator"), s(O, o, function() {
                return this;
            }), s(O, "toString", function() {
                return "[object Generator]";
            }), t.keys = function(t) {
                var e = [];
                for(var r in t)e.push(r);
                return e.reverse(), function r() {
                    for(; e.length;){
                        var n = e.pop();
                        if (n in t) return r.value = n, r.done = !1, r;
                    }
                    return r.done = !0, r;
                };
            }, t.values = j, A.prototype = {
                constructor: A,
                reset: function(t) {
                    if (this.prev = 0, this.next = 0, this.sent = this._sent = e, this.done = !1, this.delegate = null, this.method = "next", this.arg = e, this.tryEntries.forEach(S), !t) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = e);
                },
                stop: function() {
                    this.done = !0;
                    var t = this.tryEntries[0].completion;
                    if ("throw" === t.type) throw t.arg;
                    return this.rval;
                },
                dispatchException: function(t) {
                    if (this.done) throw t;
                    var r = this;
                    function i(n, i) {
                        return u.type = "throw", u.arg = t, r.next = n, i && (r.method = "next", r.arg = e), !!i;
                    }
                    for(var o = this.tryEntries.length - 1; o >= 0; --o){
                        var a = this.tryEntries[o], u = a.completion;
                        if ("root" === a.tryLoc) return i("end");
                        if (a.tryLoc <= this.prev) {
                            var s = n.call(a, "catchLoc"), c = n.call(a, "finallyLoc");
                            if (s && c) {
                                if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                                if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                            } else if (s) {
                                if (this.prev < a.catchLoc) return i(a.catchLoc, !0);
                            } else {
                                if (!c) throw new Error("try statement without catch or finally");
                                if (this.prev < a.finallyLoc) return i(a.finallyLoc);
                            }
                        }
                    }
                },
                abrupt: function(t, e) {
                    for(var r = this.tryEntries.length - 1; r >= 0; --r){
                        var i = this.tryEntries[r];
                        if (i.tryLoc <= this.prev && n.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                            var o = i;
                            break;
                        }
                    }
                    o && ("break" === t || "continue" === t) && o.tryLoc <= e && e <= o.finallyLoc && (o = null);
                    var a = o ? o.completion : {};
                    return a.type = t, a.arg = e, o ? (this.method = "next", this.next = o.finallyLoc, d) : this.complete(a);
                },
                complete: function(t, e) {
                    if ("throw" === t.type) throw t.arg;
                    return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), d;
                },
                finish: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), S(r), d;
                    }
                },
                catch: function(t) {
                    for(var e = this.tryEntries.length - 1; e >= 0; --e){
                        var r = this.tryEntries[e];
                        if (r.tryLoc === t) {
                            var n = r.completion;
                            if ("throw" === n.type) {
                                var i = n.arg;
                                S(r);
                            }
                            return i;
                        }
                    }
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(t, r, n) {
                    return this.delegate = {
                        iterator: j(t),
                        resultName: r,
                        nextLoc: n
                    }, "next" === this.method && (this.arg = e), d;
                }
            }, t;
        }(t.exports);
        try {
            regeneratorRuntime = e;
        } catch (t1) {
            "object" == typeof globalThis ? globalThis.regeneratorRuntime = e : Function("r", "regeneratorRuntime = r")(e);
        }
    }(Jg);
    var Kg = Jg.exports, Qg = {
        exports: {}
    }, Zg = a(function() {
        if ("function" == typeof ArrayBuffer) {
            var t = new ArrayBuffer(8);
            Object.isExtensible(t) && Object.defineProperty(t, "a", {
                value: 8
            });
        }
    }), tm = a, em = $, rm = R, nm = Zg, im = Object.isExtensible, om = tm(function() {
        im(1);
    }) || nm ? function(t) {
        return !!em(t) && (!nm || "ArrayBuffer" != rm(t)) && (!im || im(t));
    } : im, am = !a(function() {
        return Object.isExtensible(Object.preventExtensions({}));
    }), um = Tr, sm = m, cm = Eo, fm = $, lm = Ut, hm = Ve.f, pm = oc, vm = sc, dm = om, ym = am, gm = !1, mm = Bt("meta"), bm = 0, _m = function(t) {
        hm(t, mm, {
            value: {
                objectID: "O" + bm++,
                weakData: {}
            }
        });
    }, wm = Qg.exports = {
        enable: function() {
            wm.enable = function() {}, gm = !0;
            var t = pm.f, e = sm([].splice), r = {};
            r[mm] = 1, t(r).length && (pm.f = function(r) {
                for(var n = t(r), i = 0, o = n.length; i < o; i++)if (n[i] === mm) {
                    e(n, i, 1);
                    break;
                }
                return n;
            }, um({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: vm.f
            }));
        },
        fastKey: function(t, e) {
            if (!fm(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!lm(t, mm)) {
                if (!dm(t)) return "F";
                if (!e) return "E";
                _m(t);
            }
            return t[mm].objectID;
        },
        getWeakData: function(t, e) {
            if (!lm(t, mm)) {
                if (!dm(t)) return !0;
                if (!e) return !1;
                _m(t);
            }
            return t[mm].weakData;
        },
        onFreeze: function(t) {
            return ym && gm && dm(t) && !lm(t, mm) && _m(t), t;
        }
    };
    cm[mm] = !0;
    var Om = We, Em = T, Tm = Qe, xm = wt, km = os, Sm = cn, Am = et, jm = ws, Pm = vs, Im = Zu, Dm = o.TypeError, Lm = function(t, e) {
        this.stopped = t, this.result = e;
    }, Cm = Lm.prototype, Rm = function(t, e, r) {
        var n, i, o, a, u, s, c, f = r && r.that, l = !(!r || !r.AS_ENTRIES), h = !(!r || !r.IS_ITERATOR), p = !(!r || !r.INTERRUPTED), v = Om(e, f), d = function(t) {
            return n && Im(n, "normal", t), new Lm(!0, t);
        }, y = function(t) {
            return l ? (Tm(t), p ? v(t[0], t[1], d) : v(t[0], t[1])) : p ? v(t, d) : v(t);
        };
        if (h) n = t;
        else {
            if (!(i = Pm(t))) throw Dm(xm(t) + " is not iterable");
            if (km(i)) {
                for(o = 0, a = Sm(t); a > o; o++)if ((u = y(t[o])) && Am(Cm, u)) return u;
                return new Lm(!1);
            }
            n = jm(t, i);
        }
        for(s = n.next; !(c = Em(s, n)).done;){
            try {
                u = y(c.value);
            } catch (t1) {
                Im(n, "throw", t1);
            }
            if ("object" == typeof u && u && Am(Cm, u)) return u;
        }
        return new Lm(!1);
    }, Mm = et, Fm = o.TypeError, Nm = function(t, e) {
        if (Mm(e, t)) return t;
        throw Fm("Incorrect invocation");
    }, zm = Tr, qm = o, Ym = Qg.exports, Gm = a, Xm = hr, Um = Rm, Wm = Nm, Vm = b, Hm = $, $m = hu, Bm = Ve.f, Jm = bi.forEach, Km = w, Qm = Yo.set, Zm = Yo.getterFor, tb = function(t, e, r) {
        var n, i = -1 !== t.indexOf("Map"), o = -1 !== t.indexOf("Weak"), a = i ? "set" : "add", u = qm[t], s = u && u.prototype, c = {};
        if (Km && Vm(u) && (o || s.forEach && !Gm(function() {
            (new u).entries().next();
        }))) {
            var f = (n = e(function(e, r) {
                Qm(Wm(e, f), {
                    type: t,
                    collection: new u
                }), null != r && Um(r, e[a], {
                    that: e,
                    AS_ENTRIES: i
                });
            })).prototype, l = Zm(t);
            Jm([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" == t || "set" == t;
                !(t in s) || o && "clear" == t || Xm(f, t, function(r, n) {
                    var i = l(this).collection;
                    if (!e && o && !Hm(r)) return "get" == t && void 0;
                    var a = i[t](0 === r ? 0 : r, n);
                    return e ? this : a;
                });
            }), o || Bm(f, "size", {
                configurable: !0,
                get: function() {
                    return l(this).collection.size;
                }
            });
        } else n = r.getConstructor(e, t, i, a), Ym.enable();
        return $m(n, t, !1, !0), c[t] = n, zm({
            global: !0,
            forced: !0
        }, c), o || r.setStrong(n, t, i), n;
    }, eb = $a, rb = tt, nb = Ve, ib = w, ob = ae("species"), ab = Ve.f, ub = Ma, sb = function(t, e, r) {
        for(var n in e)r && r.unsafe && t[n] ? t[n] = e[n] : eb(t, n, e[n], r);
        return t;
    }, cb = We, fb = Nm, lb = Rm, hb = Gu, pb = function(t) {
        var e = rb(t), r = nb.f;
        ib && e && !e[ob] && r(e, ob, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, vb = w, db = Qg.exports.fastKey, yb = Yo.set, gb = Yo.getterFor, mb = {
        getConstructor: function(t, e, r, n) {
            var i = t(function(t, i) {
                fb(t, o), yb(t, {
                    type: e,
                    index: ub(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), vb || (t.size = 0), null != i && lb(i, t[n], {
                    that: t,
                    AS_ENTRIES: r
                });
            }), o = i.prototype, a = gb(e), u = function(t, e, r) {
                var n, i, o = a(t), u = s(t, e);
                return u ? u.value = r : (o.last = u = {
                    index: i = db(e, !0),
                    key: e,
                    value: r,
                    previous: n = o.last,
                    next: void 0,
                    removed: !1
                }, o.first || (o.first = u), n && (n.next = u), vb ? o.size++ : t.size++, "F" !== i && (o.index[i] = u)), t;
            }, s = function(t, e) {
                var r, n = a(t), i = db(e);
                if ("F" !== i) return n.index[i];
                for(r = n.first; r; r = r.next)if (r.key == e) return r;
            };
            return sb(o, {
                clear: function() {
                    for(var t = a(this), e = t.index, r = t.first; r;)r.removed = !0, r.previous && (r.previous = r.previous.next = void 0), delete e[r.index], r = r.next;
                    t.first = t.last = void 0, vb ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, r = a(e), n = s(e, t);
                    if (n) {
                        var i = n.next, o = n.previous;
                        delete r.index[n.index], n.removed = !0, o && (o.next = i), i && (i.previous = o), r.first == n && (r.first = i), r.last == n && (r.last = o), vb ? r.size-- : e.size--;
                    }
                    return !!n;
                },
                forEach: function(t) {
                    for(var e, r = a(this), n = cb(t, arguments.length > 1 ? arguments[1] : void 0); e = e ? e.next : r.first;)for(n(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!s(this, t);
                }
            }), sb(o, r ? {
                get: function(t) {
                    var e = s(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return u(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return u(this, t = 0 === t ? 0 : t, t);
                }
            }), vb && ab(o, "size", {
                get: function() {
                    return a(this).size;
                }
            }), i;
        },
        setStrong: function(t, e, r) {
            var n = e + " Iterator", i = gb(e), o = gb(n);
            hb(t, e, function(t, e) {
                yb(this, {
                    type: n,
                    target: t,
                    state: i(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = o(this), e = t.kind, r = t.last; r && r.removed;)r = r.previous;
                return t.target && (t.last = r = r ? r.next : t.state.first) ? "keys" == e ? {
                    value: r.key,
                    done: !1
                } : "values" == e ? {
                    value: r.value,
                    done: !1
                } : {
                    value: [
                        r.key,
                        r.value
                    ],
                    done: !1
                } : (t.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, r ? "entries" : "values", !r, !0), pb(e);
        }
    };
    tb("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, mb);
    var bb = B.Map, _b = bi.some;
    Tr({
        target: "Array",
        proto: !0,
        forced: !mn("some")
    }, {
        some: function(t) {
            return _b(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var wb = Jr("Array").some, Ob = et, Eb = wb, Tb = Array.prototype, xb = function(t) {
        var e = t.some;
        return t === Tb || Ob(Tb, t) && e === Tb.some ? Eb : e;
    }, kb = Jr("Array").keys, Sb = zn, Ab = Ut, jb = et, Pb = kb, Ib = Array.prototype, Db = {
        DOMTokenList: !0,
        NodeList: !0
    }, Lb = function(t) {
        var e = t.keys;
        return t === Ib || jb(Ib, t) && e === Ib.keys || Ab(Db, Sb(t)) ? Pb : e;
    }, Cb = vc, Rb = Math.floor, Mb = function(t, e) {
        var r = t.length, n = Rb(r / 2);
        return r < 8 ? Fb(t, e) : Nb(t, Mb(Cb(t, 0, n), e), Mb(Cb(t, n), e), e);
    }, Fb = function(t, e) {
        for(var r, n, i = t.length, o = 1; o < i;){
            for(n = o, r = t[o]; n && e(t[n - 1], r) > 0;)t[n] = t[--n];
            n !== o++ && (t[n] = r);
        }
        return t;
    }, Nb = function(t, e, r, n) {
        for(var i = e.length, o = r.length, a = 0, u = 0; a < i || u < o;)t[a + u] = a < i && u < o ? n(e[a], r[u]) <= 0 ? e[a++] : r[u++] : a < i ? e[a++] : r[u++];
        return t;
    }, zb = Mb, qb = rt.match(/firefox\/(\d+)/i), Yb = !!qb && +qb[1], Gb = /MSIE|Trident/.test(rt), Xb = rt.match(/AppleWebKit\/(\d+)\./), Ub = !!Xb && +Xb[1], Wb = Tr, Vb = m, Hb = xt, $b = Yt, Bb = cn, Jb = io, Kb = a, Qb = zb, Zb = mn, t_ = Yb, e_ = Gb, r_ = ct, n_ = Ub, i_ = [], o_ = Vb(i_.sort), a_ = Vb(i_.push), u_ = Kb(function() {
        i_.sort(void 0);
    }), s_ = Kb(function() {
        i_.sort(null);
    }), c_ = Zb("sort"), f_ = !Kb(function() {
        if (r_) return r_ < 70;
        if (!(t_ && t_ > 3)) {
            if (e_) return !0;
            if (n_) return n_ < 603;
            var t, e, r, n, i = "";
            for(t = 65; t < 76; t++){
                switch(e = String.fromCharCode(t), t){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        r = 3;
                        break;
                    case 68:
                    case 71:
                        r = 4;
                        break;
                    default:
                        r = 2;
                }
                for(n = 0; n < 47; n++)i_.push({
                    k: e + n,
                    v: r
                });
            }
            for(i_.sort(function(t, e) {
                return e.v - t.v;
            }), n = 0; n < i_.length; n++)e = i_[n].k.charAt(0), i.charAt(i.length - 1) !== e && (i += e);
            return "DGBEFHACIJK" !== i;
        }
    });
    Wb({
        target: "Array",
        proto: !0,
        forced: u_ || !s_ || !c_ || !f_
    }, {
        sort: function(t) {
            void 0 !== t && Hb(t);
            var e = $b(this);
            if (f_) return void 0 === t ? o_(e) : o_(e, t);
            var r, n, i = [], o = Bb(e);
            for(n = 0; n < o; n++)n in e && a_(i, e[n]);
            for(Qb(i, function(t) {
                return function(e, r) {
                    return void 0 === r ? -1 : void 0 === e ? 1 : void 0 !== t ? +t(e, r) || 0 : Jb(e) > Jb(r) ? 1 : -1;
                };
            }(t)), r = i.length, n = 0; n < r;)e[n] = i[n++];
            for(; n < o;)delete e[n++];
            return e;
        }
    });
    var l_, h_ = Jr("Array").sort, p_ = et, v_ = h_, d_ = Array.prototype, y_ = function(t) {
        var e = t.sort;
        return t === d_ || p_(d_, t) && e === d_.sort ? v_ : e;
    }, g_ = Jr("Array").values, m_ = zn, b_ = Ut, __ = et, w_ = g_, O_ = Array.prototype, E_ = {
        DOMTokenList: !0,
        NodeList: !0
    }, T_ = function(t) {
        var e = t.values;
        return t === O_ || __(O_, t) && e === O_.values || b_(E_, m_(t)) ? w_ : e;
    }, x_ = mh, k_ = Jr("Array").entries, S_ = zn, A_ = Ut, j_ = et, P_ = k_, I_ = Array.prototype, D_ = {
        DOMTokenList: !0,
        NodeList: !0
    }, L_ = function(t) {
        var e = t.entries;
        return t === I_ || j_(I_, t) && e === I_.entries || A_(D_, S_(t)) ? P_ : e;
    }, C_ = new Uint8Array(16);
    function R_() {
        if (!l_ && !(l_ = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return l_(C_);
    }
    var M_ = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function F_(t) {
        return "string" == typeof t && M_.test(t);
    }
    for(var N_ = [], z_ = 0; z_ < 256; ++z_)N_.push((z_ + 256).toString(16).substr(1));
    function q_(t, e, r) {
        var n = (t = t || {}).random || (t.rng || R_)();
        if (n[6] = 15 & n[6] | 64, n[8] = 63 & n[8] | 128, e) {
            r = r || 0;
            for(var i = 0; i < 16; ++i)e[r + i] = n[i];
            return e;
        }
        return function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r = (N_[t[e + 0]] + N_[t[e + 1]] + N_[t[e + 2]] + N_[t[e + 3]] + "-" + N_[t[e + 4]] + N_[t[e + 5]] + "-" + N_[t[e + 6]] + N_[t[e + 7]] + "-" + N_[t[e + 8]] + N_[t[e + 9]] + "-" + N_[t[e + 10]] + N_[t[e + 11]] + N_[t[e + 12]] + N_[t[e + 13]] + N_[t[e + 14]] + N_[t[e + 15]]).toLowerCase();
            if (!F_(r)) throw TypeError("Stringified UUID is invalid");
            return r;
        }(n);
    }
    function Y_(t) {
        return "string" == typeof t || "number" == typeof t;
    }
    var G_ = function() {
        function t(r) {
            e(this, t), Cr(this, "delay", void 0), Cr(this, "max", void 0), Cr(this, "_queue", []), Cr(this, "_timeout", null), Cr(this, "_extended", null), this.delay = null, this.max = 1 / 0, this.setOptions(r);
        }
        return Lr(t, [
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.delay && (this.delay = t.delay), t && void 0 !== t.max && (this.max = t.max), this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: function() {
                    if (this.flush(), this._extended) {
                        for(var t = this._extended.object, e = this._extended.methods, r = 0; r < e.length; r++){
                            var n = e[r];
                            n.original ? t[n.name] = n.original : delete t[n.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function(t, e) {
                    var r = this, n = t[e];
                    if (!n) throw new Error("Method " + e + " undefined");
                    t[e] = function() {
                        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                        r.queue({
                            args: e,
                            fn: n,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function(t) {
                    "function" == typeof t ? this._queue.push({
                        fn: t
                    }) : this._queue.push(t), this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function() {
                    var t = this;
                    this._queue.length > this.max && this.flush(), null != this._timeout && (clearTimeout(this._timeout), this._timeout = null), this.queue.length > 0 && "number" == typeof this.delay && (this._timeout = bd(function() {
                        t.flush();
                    }, this.delay));
                }
            },
            {
                key: "flush",
                value: function() {
                    var t, e;
                    Hh(t = wp(e = this._queue).call(e, 0)).call(t, function(t) {
                        t.fn.apply(t.context || t.fn, t.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function(e, r) {
                    var n = new t(r);
                    if (void 0 !== e.flush) throw new Error("Target object already has a property flush");
                    e.flush = function() {
                        n.flush();
                    };
                    var i = [
                        {
                            name: "flush",
                            original: void 0
                        }
                    ];
                    if (r && r.replace) for(var o = 0; o < r.replace.length; o++){
                        var a = r.replace[o];
                        i.push({
                            name: a,
                            original: e[a]
                        }), n.replace(e, a);
                    }
                    return n._extended = {
                        object: e,
                        methods: i
                    }, n;
                }
            }
        ]), t;
    }(), X_ = function() {
        function t() {
            e(this, t), Cr(this, "_subscribers", {
                "*": [],
                add: [],
                remove: [],
                update: []
            }), Cr(this, "subscribe", t.prototype.on), Cr(this, "unsubscribe", t.prototype.off);
        }
        return Lr(t, [
            {
                key: "_trigger",
                value: function(t, e, r) {
                    var n, i;
                    if ("*" === t) throw new Error("Cannot trigger event *");
                    Hh(n = Sh(i = []).call(i, wh(this._subscribers[t]), wh(this._subscribers["*"]))).call(n, function(n) {
                        n(t, e, null != r ? r : null);
                    });
                }
            },
            {
                key: "on",
                value: function(t, e) {
                    "function" == typeof e && this._subscribers[t].push(e);
                }
            },
            {
                key: "off",
                value: function(t, e) {
                    var r;
                    this._subscribers[t] = ji(r = this._subscribers[t]).call(r, function(t) {
                        return t !== e;
                    });
                }
            }
        ]), t;
    }();
    tb("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, mb);
    var U_, W_ = B.Set, V_ = ws;
    function H_(t, e) {
        var r = void 0 !== Oh && ic(t) || t["@@iterator"];
        if (!r) {
            if (Ph(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return $_(t, e);
                var n = Ah(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return qs(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $_(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, i = function() {};
                return {
                    s: i,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function $_(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    U_ = x_;
    var B_ = function() {
        function t(r) {
            e(this, t), Cr(this, "_pairs", void 0), this._pairs = r;
        }
        return Lr(t, [
            {
                key: U_,
                value: Kg.mark(function t() {
                    var e, r, n, i, o;
                    return Kg.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = H_(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = gh(r.value, 2), i = n[0], o = n[1], t.next = 7, [
                                    i,
                                    o
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: Kg.mark(function t() {
                    var e, r, n, i, o;
                    return Kg.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = H_(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = gh(r.value, 2), i = n[0], o = n[1], t.next = 7, [
                                    i,
                                    o
                                ];
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: Kg.mark(function t() {
                    var e, r, n, i;
                    return Kg.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = H_(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = gh(r.value, 1), i = n[0], t.next = 7, i;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: Kg.mark(function t() {
                    var e, r, n, i;
                    return Kg.wrap(function(t) {
                        for(;;)switch(t.prev = t.next){
                            case 0:
                                e = H_(this._pairs), t.prev = 1, e.s();
                            case 3:
                                if ((r = e.n()).done) {
                                    t.next = 9;
                                    break;
                                }
                                return n = gh(r.value, 2), i = n[1], t.next = 7, i;
                            case 7:
                                t.next = 3;
                                break;
                            case 9:
                                t.next = 14;
                                break;
                            case 11:
                                t.prev = 11, t.t0 = t.catch(1), e.e(t.t0);
                            case 14:
                                return t.prev = 14, e.f(), t.finish(14);
                            case 17:
                            case "end":
                                return t.stop();
                        }
                    }, t, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function() {
                    var t;
                    return Ri(t = wh(this._pairs)).call(t, function(t) {
                        return t[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function() {
                    var t;
                    return Ri(t = wh(this._pairs)).call(t, function(t) {
                        return t[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function() {
                    return wh(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function() {
                    var t, e = Yv(null), r = H_(this._pairs);
                    try {
                        for(r.s(); !(t = r.n()).done;){
                            var n = gh(t.value, 2), i = n[0], o = n[1];
                            e[i] = o;
                        }
                    } catch (t1) {
                        r.e(t1);
                    } finally{
                        r.f();
                    }
                    return e;
                }
            },
            {
                key: "toMap",
                value: function() {
                    return new bb(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function() {
                    return new W_(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function() {
                    return new W_(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function() {
                    return new t(wh(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    var e, r = new W_, n = H_(this._pairs);
                    try {
                        for(n.s(); !(e = n.n()).done;){
                            var i = gh(e.value, 2), o = i[0], a = i[1];
                            r.add(t(a, o));
                        }
                    } catch (t1) {
                        n.e(t1);
                    } finally{
                        n.f();
                    }
                    return r;
                }
            },
            {
                key: "filter",
                value: function(e) {
                    var r = this._pairs;
                    return new t(Cr({}, x_, Kg.mark(function t() {
                        var n, i, o, a, u;
                        return Kg.wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    n = H_(r), t.prev = 1, n.s();
                                case 3:
                                    if ((i = n.n()).done) {
                                        t.next = 10;
                                        break;
                                    }
                                    if (o = gh(i.value, 2), a = o[0], u = o[1], !e(u, a)) {
                                        t.next = 8;
                                        break;
                                    }
                                    return t.next = 8, [
                                        a,
                                        u
                                    ];
                                case 8:
                                    t.next = 3;
                                    break;
                                case 10:
                                    t.next = 15;
                                    break;
                                case 12:
                                    t.prev = 12, t.t0 = t.catch(1), n.e(t.t0);
                                case 15:
                                    return t.prev = 15, n.f(), t.finish(15);
                                case 18:
                                case "end":
                                    return t.stop();
                            }
                        }, t, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function(t) {
                    var e, r = H_(this._pairs);
                    try {
                        for(r.s(); !(e = r.n()).done;){
                            var n = gh(e.value, 2), i = n[0];
                            t(n[1], i);
                        }
                    } catch (t1) {
                        r.e(t1);
                    } finally{
                        r.f();
                    }
                }
            },
            {
                key: "map",
                value: function(e) {
                    var r = this._pairs;
                    return new t(Cr({}, x_, Kg.mark(function t() {
                        var n, i, o, a, u;
                        return Kg.wrap(function(t) {
                            for(;;)switch(t.prev = t.next){
                                case 0:
                                    n = H_(r), t.prev = 1, n.s();
                                case 3:
                                    if ((i = n.n()).done) {
                                        t.next = 9;
                                        break;
                                    }
                                    return o = gh(i.value, 2), a = o[0], u = o[1], t.next = 7, [
                                        a,
                                        e(u, a)
                                    ];
                                case 7:
                                    t.next = 3;
                                    break;
                                case 9:
                                    t.next = 14;
                                    break;
                                case 11:
                                    t.prev = 11, t.t0 = t.catch(1), n.e(t.t0);
                                case 14:
                                    return t.prev = 14, n.f(), t.finish(14);
                                case 17:
                                case "end":
                                    return t.stop();
                            }
                        }, t, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e = V_(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], i = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var o = gh(r.value, 2), a = o[0], u = o[1], s = t(u, a);
                        s > i && (i = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e = V_(this._pairs), r = e.next();
                    if (r.done) return null;
                    for(var n = r.value[1], i = t(r.value[1], r.value[0]); !(r = e.next()).done;){
                        var o = gh(r.value, 2), a = o[0], u = o[1], s = t(u, a);
                        s < i && (i = s, n = u);
                    }
                    return n;
                }
            },
            {
                key: "reduce",
                value: function(t, e) {
                    var r, n = H_(this._pairs);
                    try {
                        for(n.s(); !(r = n.n()).done;){
                            var i = gh(r.value, 2), o = i[0];
                            e = t(e, i[1], o);
                        }
                    } catch (t1) {
                        n.e(t1);
                    } finally{
                        n.f();
                    }
                    return e;
                }
            },
            {
                key: "sort",
                value: function(e) {
                    var r = this;
                    return new t(Cr({}, x_, function() {
                        var t;
                        return V_(y_(t = wh(r._pairs)).call(t, function(t, r) {
                            var n = gh(t, 2), i = n[0], o = n[1], a = gh(r, 2), u = a[0], s = a[1];
                            return e(o, s, i, u);
                        }));
                    }));
                }
            }
        ]), t;
    }();
    function J_(t, e) {
        var r = Lh(t);
        if ($f) {
            var n = $f(t);
            e && (n = ji(n).call(n, function(e) {
                return il(t, e).enumerable;
            })), r.push.apply(r, n);
        }
        return r;
    }
    function K_(t) {
        for(var e = 1; e < arguments.length; e++){
            var r, n, i = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Hh(r = J_(Object(i), !0)).call(r, function(e) {
                Cr(t, e, i[e]);
            }) : dl ? Ol(t, dl(i)) : Hh(n = J_(Object(i))).call(n, function(e) {
                El(t, e, il(i, e));
            });
        }
        return t;
    }
    function Q_(t, e) {
        var r = void 0 !== Oh && ic(t) || t["@@iterator"];
        if (!r) {
            if (Ph(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return Z_(t, e);
                var n = Ah(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return qs(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Z_(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, i = function() {};
                return {
                    s: i,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function Z_(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function tw(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !Yg) return !1;
            if (Yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(Yg(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = Bg(t);
            if (e) {
                var i = Bg(this).constructor;
                r = Yg(n, arguments, i);
            } else r = n.apply(this, arguments);
            return Hg(this, r);
        };
    }
    var ew = function(t) {
        Vg(n, t);
        var r = tw(n);
        function n(t, i) {
            var o;
            return e(this, n), Cr(Gg(o = r.call(this)), "flush", void 0), Cr(Gg(o), "length", void 0), Cr(Gg(o), "_options", void 0), Cr(Gg(o), "_data", void 0), Cr(Gg(o), "_idProp", void 0), Cr(Gg(o), "_queue", null), t && !Ph(t) && (i = t, t = []), o._options = i || {}, o._data = new bb, o.length = 0, o._idProp = o._options.fieldId || "id", t && t.length && o.add(t), o.setOptions(i), o;
        }
        return Lr(n, [
            {
                key: "idProp",
                get: function() {
                    return this._idProp;
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    t && void 0 !== t.queue && (!1 === t.queue ? this._queue && (this._queue.destroy(), this._queue = null) : (this._queue || (this._queue = G_.extend(this, {
                        replace: [
                            "add",
                            "update",
                            "remove"
                        ]
                    })), t.queue && "object" === _h(t.queue) && this._queue.setOptions(t.queue)));
                }
            },
            {
                key: "add",
                value: function(t, e) {
                    var r, n = this, i = [];
                    if (Ph(t)) {
                        var o = Ri(t).call(t, function(t) {
                            return t[n._idProp];
                        });
                        if (xb(o).call(o, function(t) {
                            return n._data.has(t);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var a = 0, u = t.length; a < u; a++)r = this._addItem(t[a]), i.push(r);
                    } else {
                        if (!t || "object" !== _h(t)) throw new Error("Unknown dataType");
                        r = this._addItem(t), i.push(r);
                    }
                    return i.length && this._trigger("add", {
                        items: i
                    }, e), i;
                }
            },
            {
                key: "update",
                value: function(t, e) {
                    var r = this, n = [], i = [], o = [], a = [], u = this._idProp, s = function(t) {
                        var e = t[u];
                        if (null != e && r._data.has(e)) {
                            var s = t, c = Mp({}, r._data.get(e)), f = r._updateItem(s);
                            i.push(f), a.push(s), o.push(c);
                        } else {
                            var l = r._addItem(t);
                            n.push(l);
                        }
                    };
                    if (Ph(t)) for(var c = 0, f = t.length; c < f; c++)t[c] && "object" === _h(t[c]) ? s(t[c]) : console.warn("Ignoring input item, which is not an object at index " + c);
                    else {
                        if (!t || "object" !== _h(t)) throw new Error("Unknown dataType");
                        s(t);
                    }
                    if (n.length && this._trigger("add", {
                        items: n
                    }, e), i.length) {
                        var l = {
                            items: i,
                            oldData: o,
                            data: a
                        };
                        this._trigger("update", l, e);
                    }
                    return Sh(n).call(n, i);
                }
            },
            {
                key: "updateOnly",
                value: function(t, e) {
                    var r, n = this;
                    Ph(t) || (t = [
                        t
                    ]);
                    var i = Ri(r = Ri(t).call(t, function(t) {
                        var e = n._data.get(t[n._idProp]);
                        if (null == e) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: e,
                            update: t
                        };
                    })).call(r, function(t) {
                        var e = t.oldData, r = t.update, i = e[n._idProp], o = function(t) {
                            for(var e, r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++)n[i - 1] = arguments[i];
                            return mg.apply(void 0, Sh(e = [
                                {},
                                t
                            ]).call(e, n));
                        }(e, r);
                        return n._data.set(i, o), {
                            id: i,
                            oldData: e,
                            updatedData: o
                        };
                    });
                    if (i.length) {
                        var o = {
                            items: Ri(i).call(i, function(t) {
                                return t.id;
                            }),
                            oldData: Ri(i).call(i, function(t) {
                                return t.oldData;
                            }),
                            data: Ri(i).call(i, function(t) {
                                return t.updatedData;
                            })
                        };
                        return this._trigger("update", o, e), o.items;
                    }
                    return [];
                }
            },
            {
                key: "get",
                value: function(t, e) {
                    var r = void 0, n = void 0, i = void 0;
                    Y_(t) ? (r = t, i = e) : Ph(t) ? (n = t, i = e) : i = t;
                    var o, a = i && "Object" === i.returnType ? "Object" : "Array", u = i && ji(i), s = [], c = void 0, f = void 0, l = void 0;
                    if (null != r) (c = this._data.get(r)) && u && !u(c) && (c = void 0);
                    else if (null != n) for(var h = 0, p = n.length; h < p; h++)null == (c = this._data.get(n[h])) || u && !u(c) || s.push(c);
                    else for(var v, d = 0, y = (f = wh(Lb(v = this._data).call(v))).length; d < y; d++)l = f[d], null == (c = this._data.get(l)) || u && !u(c) || s.push(c);
                    if (i && i.order && null == r && this._sort(s, i.order), i && i.fields) {
                        var g = i.fields;
                        if (null != r && null != c) c = this._filterFields(c, g);
                        else for(var m = 0, b = s.length; m < b; m++)s[m] = this._filterFields(s[m], g);
                    }
                    if ("Object" == a) {
                        for(var _ = {}, w = 0, O = s.length; w < O; w++){
                            var E = s[w];
                            _[E[this._idProp]] = E;
                        }
                        return _;
                    }
                    return null != r ? null !== (o = c) && void 0 !== o ? o : null : s;
                }
            },
            {
                key: "getIds",
                value: function(t) {
                    var e = this._data, r = t && ji(t), n = t && t.order, i = wh(Lb(e).call(e)), o = [];
                    if (r) {
                        if (n) {
                            for(var a = [], u = 0, s = i.length; u < s; u++){
                                var c = i[u], f = this._data.get(c);
                                null != f && r(f) && a.push(f);
                            }
                            this._sort(a, n);
                            for(var l = 0, h = a.length; l < h; l++)o.push(a[l][this._idProp]);
                        } else for(var p = 0, v = i.length; p < v; p++){
                            var d = i[p], y = this._data.get(d);
                            null != y && r(y) && o.push(y[this._idProp]);
                        }
                    } else if (n) {
                        for(var g = [], m = 0, b = i.length; m < b; m++){
                            var _ = i[m];
                            g.push(e.get(_));
                        }
                        this._sort(g, n);
                        for(var w = 0, O = g.length; w < O; w++)o.push(g[w][this._idProp]);
                    } else for(var E = 0, T = i.length; E < T; E++){
                        var x = i[E], k = e.get(x);
                        null != k && o.push(k[this._idProp]);
                    }
                    return o;
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function(t, e) {
                    var r = e && ji(e), n = this._data, i = wh(Lb(n).call(n));
                    if (e && e.order) for(var o = this.get(e), a = 0, u = o.length; a < u; a++){
                        var s = o[a];
                        t(s, s[this._idProp]);
                    }
                    else for(var c = 0, f = i.length; c < f; c++){
                        var l = i[c], h = this._data.get(l);
                        null == h || r && !r(h) || t(h, l);
                    }
                }
            },
            {
                key: "map",
                value: function(t, e) {
                    for(var r = e && ji(e), n = [], i = this._data, o = wh(Lb(i).call(i)), a = 0, u = o.length; a < u; a++){
                        var s = o[a], c = this._data.get(s);
                        null == c || r && !r(c) || n.push(t(c, s));
                    }
                    return e && e.order && this._sort(n, e.order), n;
                }
            },
            {
                key: "_filterFields",
                value: function(t, e) {
                    var r;
                    return t ? Sn(r = Ph(e) ? e : Lh(e)).call(r, function(e, r) {
                        return e[r] = t[r], e;
                    }, {}) : t;
                }
            },
            {
                key: "_sort",
                value: function(t, e) {
                    if ("string" == typeof e) {
                        var r = e;
                        y_(t).call(t, function(t, e) {
                            var n = t[r], i = e[r];
                            return n > i ? 1 : n < i ? -1 : 0;
                        });
                    } else {
                        if ("function" != typeof e) throw new TypeError("Order must be a function or a string");
                        y_(t).call(t, e);
                    }
                }
            },
            {
                key: "remove",
                value: function(t, e) {
                    for(var r = [], n = [], i = Ph(t) ? t : [
                        t
                    ], o = 0, a = i.length; o < a; o++){
                        var u = this._remove(i[o]);
                        if (u) {
                            var s = u[this._idProp];
                            null != s && (r.push(s), n.push(u));
                        }
                    }
                    return r.length && this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, e), r;
                }
            },
            {
                key: "_remove",
                value: function(t) {
                    var e;
                    if (Y_(t) ? e = t : t && "object" === _h(t) && (e = t[this._idProp]), null != e && this._data.has(e)) {
                        var r = this._data.get(e) || null;
                        return this._data.delete(e), --this.length, r;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function(t) {
                    for(var e, r = wh(Lb(e = this._data).call(e)), n = [], i = 0, o = r.length; i < o; i++)n.push(this._data.get(r[i]));
                    return this._data.clear(), this.length = 0, this._trigger("remove", {
                        items: r,
                        oldData: n
                    }, t), r;
                }
            },
            {
                key: "max",
                value: function(t) {
                    var e, r, n = null, i = null, o = Q_(T_(e = this._data).call(e));
                    try {
                        for(o.s(); !(r = o.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == i || u > i) && (n = a, i = u);
                        }
                    } catch (t1) {
                        o.e(t1);
                    } finally{
                        o.f();
                    }
                    return n || null;
                }
            },
            {
                key: "min",
                value: function(t) {
                    var e, r, n = null, i = null, o = Q_(T_(e = this._data).call(e));
                    try {
                        for(o.s(); !(r = o.n()).done;){
                            var a = r.value, u = a[t];
                            "number" == typeof u && (null == i || u < i) && (n = a, i = u);
                        }
                    } catch (t1) {
                        o.e(t1);
                    } finally{
                        o.f();
                    }
                    return n || null;
                }
            },
            {
                key: "distinct",
                value: function(t) {
                    for(var e = this._data, r = wh(Lb(e).call(e)), n = [], i = 0, o = 0, a = r.length; o < a; o++){
                        for(var u = r[o], s = e.get(u)[t], c = !1, f = 0; f < i; f++)if (n[f] == s) {
                            c = !0;
                            break;
                        }
                        c || void 0 === s || (n[i] = s, i++);
                    }
                    return n;
                }
            },
            {
                key: "_addItem",
                value: function(t) {
                    var e = function(t, e) {
                        return null == t[e] && (t[e] = q_()), t;
                    }(t, this._idProp), r = e[this._idProp];
                    if (this._data.has(r)) throw new Error("Cannot add item: item with id " + r + " already exists");
                    return this._data.set(r, e), ++this.length, r;
                }
            },
            {
                key: "_updateItem",
                value: function(t) {
                    var e = t[this._idProp];
                    if (null == e) throw new Error("Cannot update item: item has no id (item: " + sd(t) + ")");
                    var r = this._data.get(e);
                    if (!r) throw new Error("Cannot update item: no item with id " + e + " found");
                    return this._data.set(e, K_(K_({}, r), t)), e;
                }
            },
            {
                key: "stream",
                value: function(t) {
                    if (t) {
                        var e = this._data;
                        return new B_(Cr({}, x_, Kg.mark(function r() {
                            var n, i, o, a;
                            return Kg.wrap(function(r) {
                                for(;;)switch(r.prev = r.next){
                                    case 0:
                                        n = Q_(t), r.prev = 1, n.s();
                                    case 3:
                                        if ((i = n.n()).done) {
                                            r.next = 11;
                                            break;
                                        }
                                        if (o = i.value, null == (a = e.get(o))) {
                                            r.next = 9;
                                            break;
                                        }
                                        return r.next = 9, [
                                            o,
                                            a
                                        ];
                                    case 9:
                                        r.next = 3;
                                        break;
                                    case 11:
                                        r.next = 16;
                                        break;
                                    case 13:
                                        r.prev = 13, r.t0 = r.catch(1), n.e(r.t0);
                                    case 16:
                                        return r.prev = 16, n.f(), r.finish(16);
                                    case 19:
                                    case "end":
                                        return r.stop();
                                }
                            }, r, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    }
                    var r;
                    return new B_(Cr({}, x_, en(r = L_(this._data)).call(r, this._data)));
                }
            }
        ]), n;
    }(X_);
    function rw(t, e) {
        var r = void 0 !== Oh && ic(t) || t["@@iterator"];
        if (!r) {
            if (Ph(t) || (r = function(t, e) {
                var r;
                if (!t) return;
                if ("string" == typeof t) return nw(t, e);
                var n = Ah(r = Object.prototype.toString.call(t)).call(r, 8, -1);
                "Object" === n && t.constructor && (n = t.constructor.name);
                if ("Map" === n || "Set" === n) return qs(t);
                if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return nw(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                r && (t = r);
                var n = 0, i = function() {};
                return {
                    s: i,
                    n: function() {
                        return n >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[n++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: i
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var o, a = !0, u = !1;
        return {
            s: function() {
                r = r.call(t);
            },
            n: function() {
                var t = r.next();
                return a = t.done, t;
            },
            e: function(t) {
                u = !0, o = t;
            },
            f: function() {
                try {
                    a || null == r.return || r.return();
                } finally{
                    if (u) throw o;
                }
            }
        };
    }
    function nw(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var r = 0, n = new Array(e); r < e; r++)n[r] = t[r];
        return n;
    }
    function iw(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !Yg) return !1;
            if (Yg.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(Yg(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var r, n = Bg(t);
            if (e) {
                var i = Bg(this).constructor;
                r = Yg(n, arguments, i);
            } else r = n.apply(this, arguments);
            return Hg(this, r);
        };
    }
    var ow = function(t) {
        Vg(n, t);
        var r = iw(n);
        function n(t, i) {
            var o, a;
            return e(this, n), Cr(Gg(a = r.call(this)), "length", 0), Cr(Gg(a), "_listener", void 0), Cr(Gg(a), "_data", void 0), Cr(Gg(a), "_ids", new W_), Cr(Gg(a), "_options", void 0), a._options = i || {}, a._listener = en(o = a._onEvent).call(o, Gg(a)), a.setData(t), a;
        }
        return Lr(n, [
            {
                key: "idProp",
                get: function() {
                    return this.getDataSet().idProp;
                }
            },
            {
                key: "setData",
                value: function(t) {
                    if (this._data) {
                        this._data.off && this._data.off("*", this._listener);
                        var e = this._data.getIds({
                            filter: ji(this._options)
                        }), r = this._data.get(e);
                        this._ids.clear(), this.length = 0, this._trigger("remove", {
                            items: e,
                            oldData: r
                        });
                    }
                    if (null != t) {
                        this._data = t;
                        for(var n = this._data.getIds({
                            filter: ji(this._options)
                        }), i = 0, o = n.length; i < o; i++){
                            var a = n[i];
                            this._ids.add(a);
                        }
                        this.length = n.length, this._trigger("add", {
                            items: n
                        });
                    } else this._data = new ew;
                    this._data.on && this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function() {
                    for(var t = this._data.getIds({
                        filter: ji(this._options)
                    }), e = wh(this._ids), r = {}, n = [], i = [], o = [], a = 0, u = t.length; a < u; a++){
                        var s = t[a];
                        r[s] = !0, this._ids.has(s) || (n.push(s), this._ids.add(s));
                    }
                    for(var c = 0, f = e.length; c < f; c++){
                        var l = e[c], h = this._data.get(l);
                        null == h ? console.error("If you see this, report it please.") : r[l] || (i.push(l), o.push(h), this._ids.delete(l));
                    }
                    this.length += n.length - i.length, n.length && this._trigger("add", {
                        items: n
                    }), i.length && this._trigger("remove", {
                        items: i,
                        oldData: o
                    });
                }
            },
            {
                key: "get",
                value: function(t, e) {
                    if (null == this._data) return null;
                    var r, n = null;
                    Y_(t) || Ph(t) ? (n = t, r = e) : r = t;
                    var i = Mp({}, this._options, r), o = ji(this._options), a = r && ji(r);
                    return o && a && (i.filter = function(t) {
                        return o(t) && a(t);
                    }), null == n ? this._data.get(i) : this._data.get(n, i);
                }
            },
            {
                key: "getIds",
                value: function(t) {
                    if (this._data.length) {
                        var e, r = ji(this._options), n = null != t ? ji(t) : null;
                        return e = n ? r ? function(t) {
                            return r(t) && n(t);
                        } : n : r, this._data.getIds({
                            filter: e,
                            order: t && t.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "forEach",
                value: function(t, e) {
                    if (this._data) {
                        var r, n, i = ji(this._options), o = e && ji(e);
                        n = o ? i ? function(t) {
                            return i(t) && o(t);
                        } : o : i, Hh(r = this._data).call(r, t, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function(t, e) {
                    if (this._data) {
                        var r, n, i = ji(this._options), o = e && ji(e);
                        return n = o ? i ? function(t) {
                            return i(t) && o(t);
                        } : o : i, Ri(r = this._data).call(r, t, {
                            filter: n,
                            order: e && e.order
                        });
                    }
                    return [];
                }
            },
            {
                key: "getDataSet",
                value: function() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function(t) {
                    var e;
                    return this._data.stream(t || Cr({}, x_, en(e = Lb(this._ids)).call(e, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function() {
                    var t;
                    null !== (t = this._data) && void 0 !== t && t.off && this._data.off("*", this._listener);
                    var e, r = "This data view has already been disposed of.", i = {
                        get: function() {
                            throw new Error(r);
                        },
                        set: function() {
                            throw new Error(r);
                        },
                        configurable: !1
                    }, o = rw(jh(n.prototype));
                    try {
                        for(o.s(); !(e = o.n()).done;){
                            var a = e.value;
                            El(this, a, i);
                        }
                    } catch (t1) {
                        o.e(t1);
                    } finally{
                        o.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function(t, e, r) {
                    if (e && e.items && this._data) {
                        var n = e.items, i = [], o = [], a = [], u = [], s = [], c = [];
                        switch(t){
                            case "add":
                                for(var f = 0, l = n.length; f < l; f++){
                                    var h = n[f];
                                    this.get(h) && (this._ids.add(h), i.push(h));
                                }
                                break;
                            case "update":
                                for(var p = 0, v = n.length; p < v; p++){
                                    var d = n[p];
                                    this.get(d) ? this._ids.has(d) ? (o.push(d), s.push(e.data[p]), u.push(e.oldData[p])) : (this._ids.add(d), i.push(d)) : this._ids.has(d) && (this._ids.delete(d), a.push(d), c.push(e.oldData[p]));
                                }
                                break;
                            case "remove":
                                for(var y = 0, g = n.length; y < g; y++){
                                    var m = n[y];
                                    this._ids.has(m) && (this._ids.delete(m), a.push(m), c.push(e.oldData[y]));
                                }
                        }
                        this.length += i.length - a.length, i.length && this._trigger("add", {
                            items: i
                        }, r), o.length && this._trigger("update", {
                            items: o,
                            oldData: u,
                            data: s
                        }, r), a.length && this._trigger("remove", {
                            items: a,
                            oldData: c
                        }, r);
                    }
                }
            }
        ]), n;
    }(X_);
    function aw(t, e) {
        return "object" === _h(e) && null !== e && t === e.idProp && "function" == typeof e.add && "function" == typeof e.clear && "function" == typeof e.distinct && "function" == typeof Hh(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof Ri(e) && "function" == typeof e.max && "function" == typeof e.min && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.remove && "function" == typeof e.setOptions && "function" == typeof e.stream && "function" == typeof e.update && "function" == typeof e.updateOnly;
    }
    t.DELETE = gg, t.DataSet = ew, t.DataStream = B_, t.DataView = ow, t.Queue = G_, t.createNewDataPipeFrom = function(t) {
        return new eo(t);
    }, t.isDataSetLike = aw, t.isDataViewLike = function(t, e) {
        return "object" === _h(e) && null !== e && t === e.idProp && "function" == typeof Hh(e) && "function" == typeof e.get && "function" == typeof e.getDataSet && "function" == typeof e.getIds && "number" == typeof e.length && "function" == typeof Ri(e) && "function" == typeof e.off && "function" == typeof e.on && "function" == typeof e.stream && aw(t, e.getDataSet());
    }, Object.defineProperty(t, "__esModule", {
        value: !0
    });
});

},{}],"lohLN":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-network
 * https://visjs.github.io/vis-network/
 *
 * A dynamic, browser-based visualization library.
 *
 * @version 9.1.2
 * @date    2022-03-28T20:13:51.046Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ !function(t, e) {
    e(exports, require("vis-data/peer/umd/vis-data.js"));
}(this, function(t, e) {
    var i = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}, o = function(t) {
        return t && t.Math == Math && t;
    }, n = o("object" == typeof globalThis && globalThis) || o("object" == typeof window && window) || o("object" == typeof self && self) || o("object" == typeof i && i) || function() {
        return this;
    }() || Function("return this")(), r = function(t) {
        try {
            return !!t();
        } catch (t1) {
            return !0;
        }
    }, s = !r(function() {
        var t = (function() {}).bind();
        return "function" != typeof t || t.hasOwnProperty("prototype");
    }), a = s, h = Function.prototype, d = h.apply, l = h.call, c = "object" == typeof Reflect && Reflect.apply || (a ? l.bind(d) : function() {
        return l.apply(d, arguments);
    }), u = s, f = Function.prototype, p = f.bind, v = f.call, g = u && p.bind(v, v), y = u ? function(t) {
        return t && g(t);
    } : function(t) {
        return t && function() {
            return v.apply(t, arguments);
        };
    }, m = function(t) {
        return "function" == typeof t;
    }, b = {}, w = !r(function() {
        return 7 != Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1];
    }), k = s, _ = Function.prototype.call, x = k ? _.bind(_) : function() {
        return _.apply(_, arguments);
    }, E = {}, O = {}.propertyIsEnumerable, C = Object.getOwnPropertyDescriptor, S = C && !O.call({
        1: 2
    }, 1);
    E.f = S ? function(t) {
        var e = C(this, t);
        return !!e && e.enumerable;
    } : O;
    var T, M, P = function(t, e) {
        return {
            enumerable: !(1 & t),
            configurable: !(2 & t),
            writable: !(4 & t),
            value: e
        };
    }, D = y, B = D({}.toString), I = D("".slice), z = function(t) {
        return I(B(t), 8, -1);
    }, F = y, N = r, A = z, R = n.Object, j = F("".split), L = N(function() {
        return !R("z").propertyIsEnumerable(0);
    }) ? function(t) {
        return "String" == A(t) ? j(t, "") : R(t);
    } : R, H = n.TypeError, W = function(t) {
        if (null == t) throw H("Can't call method on " + t);
        return t;
    }, V = L, q = W, U = function(t) {
        return V(q(t));
    }, Y = m, X = function(t) {
        return "object" == typeof t ? null !== t : Y(t);
    }, G = {}, K = G, $ = n, Z = m, Q = function(t) {
        return Z(t) ? t : void 0;
    }, J = function(t, e) {
        return arguments.length < 2 ? Q(K[t]) || Q($[t]) : K[t] && K[t][e] || $[t] && $[t][e];
    }, tt = y({}.isPrototypeOf), et = J("navigator", "userAgent") || "", it = n, ot = et, nt = it.process, rt = it.Deno, st = nt && nt.versions || rt && rt.version, at = st && st.v8;
    at && (M = (T = at.split("."))[0] > 0 && T[0] < 4 ? 1 : +(T[0] + T[1])), !M && ot && (!(T = ot.match(/Edge\/(\d+)/)) || T[1] >= 74) && (T = ot.match(/Chrome\/(\d+)/)) && (M = +T[1]);
    var ht = M, dt = ht, lt = r, ct = !!Object.getOwnPropertySymbols && !lt(function() {
        var t = Symbol();
        return !String(t) || !(Object(t) instanceof Symbol) || !Symbol.sham && dt && dt < 41;
    }), ut = ct && !Symbol.sham && "symbol" == typeof Symbol.iterator, ft = J, pt = m, vt = tt, gt = ut, yt = n.Object, mt = gt ? function(t) {
        return "symbol" == typeof t;
    } : function(t) {
        var e = ft("Symbol");
        return pt(e) && vt(e.prototype, yt(t));
    }, bt = n.String, wt = function(t) {
        try {
            return bt(t);
        } catch (t1) {
            return "Object";
        }
    }, kt = m, _t = wt, xt = n.TypeError, Et = function(t) {
        if (kt(t)) return t;
        throw xt(_t(t) + " is not a function");
    }, Ot = Et, Ct = function(t, e) {
        var i = t[e];
        return null == i ? void 0 : Ot(i);
    }, St = x, Tt = m, Mt = X, Pt = n.TypeError, Dt = {
        exports: {}
    }, Bt = n, It = Object.defineProperty, zt = function(t, e) {
        try {
            It(Bt, t, {
                value: e,
                configurable: !0,
                writable: !0
            });
        } catch (i) {
            Bt[t] = e;
        }
        return e;
    }, Ft = "__core-js_shared__", Nt = n[Ft] || zt(Ft, {}), At = Nt;
    (Dt.exports = function(t, e) {
        return At[t] || (At[t] = void 0 !== e ? e : {});
    })("versions", []).push({
        version: "3.21.1",
        mode: "pure",
        copyright: "\xa9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var Rt = W, jt = n.Object, Lt = function(t) {
        return jt(Rt(t));
    }, Ht = Lt, Wt = y({}.hasOwnProperty), Vt = Object.hasOwn || function(t, e) {
        return Wt(Ht(t), e);
    }, qt = y, Ut = 0, Yt = Math.random(), Xt = qt(1..toString), Gt = function(t) {
        return "Symbol(" + (void 0 === t ? "" : t) + ")_" + Xt(++Ut + Yt, 36);
    }, Kt = n, $t = Dt.exports, Zt = Vt, Qt = Gt, Jt = ct, te = ut, ee = $t("wks"), ie = Kt.Symbol, oe = ie && ie.for, ne = te ? ie : ie && ie.withoutSetter || Qt, re = function(t) {
        if (!Zt(ee, t) || !Jt && "string" != typeof ee[t]) {
            var e = "Symbol." + t;
            Jt && Zt(ie, t) ? ee[t] = ie[t] : ee[t] = te && oe ? oe(e) : ne(e);
        }
        return ee[t];
    }, se = x, ae = X, he = mt, de = Ct, le = function(t, e) {
        var i, o;
        if ("string" === e && Tt(i = t.toString) && !Mt(o = St(i, t))) return o;
        if (Tt(i = t.valueOf) && !Mt(o = St(i, t))) return o;
        if ("string" !== e && Tt(i = t.toString) && !Mt(o = St(i, t))) return o;
        throw Pt("Can't convert object to primitive value");
    }, ce = re, ue = n.TypeError, fe = ce("toPrimitive"), pe = function(t, e) {
        if (!ae(t) || he(t)) return t;
        var i, o = de(t, fe);
        if (o) {
            if (void 0 === e && (e = "default"), i = se(o, t, e), !ae(i) || he(i)) return i;
            throw ue("Can't convert object to primitive value");
        }
        return void 0 === e && (e = "number"), le(t, e);
    }, ve = mt, ge = function(t) {
        var e = pe(t, "string");
        return ve(e) ? e : e + "";
    }, ye = X, me = n.document, be = ye(me) && ye(me.createElement), we = function(t) {
        return be ? me.createElement(t) : {};
    }, ke = we, _e = !w && !r(function() {
        return 7 != Object.defineProperty(ke("div"), "a", {
            get: function() {
                return 7;
            }
        }).a;
    }), xe = w, Ee = x, Oe = E, Ce = P, Se = U, Te = ge, Me = Vt, Pe = _e, De = Object.getOwnPropertyDescriptor;
    b.f = xe ? De : function(t, e) {
        if (t = Se(t), e = Te(e), Pe) try {
            return De(t, e);
        } catch (t1) {}
        if (Me(t, e)) return Ce(!Ee(Oe.f, t, e), t[e]);
    };
    var Be = r, Ie = m, ze = /#|\.prototype\./, Fe = function(t, e) {
        var i = Ae[Ne(t)];
        return i == je || i != Re && (Ie(e) ? Be(e) : !!e);
    }, Ne = Fe.normalize = function(t) {
        return String(t).replace(ze, ".").toLowerCase();
    }, Ae = Fe.data = {}, Re = Fe.NATIVE = "N", je = Fe.POLYFILL = "P", Le = Fe, He = Et, We = s, Ve = y(y.bind), qe = function(t, e) {
        return He(t), void 0 === e ? t : We ? Ve(t, e) : function() {
            return t.apply(e, arguments);
        };
    }, Ue = {}, Ye = w && r(function() {
        return 42 != Object.defineProperty(function() {}, "prototype", {
            value: 42,
            writable: !1
        }).prototype;
    }), Xe = n, Ge = X, Ke = Xe.String, $e = Xe.TypeError, Ze = function(t) {
        if (Ge(t)) return t;
        throw $e(Ke(t) + " is not an object");
    }, Qe = w, Je = _e, ti = Ye, ei = Ze, ii = ge, oi = n.TypeError, ni = Object.defineProperty, ri = Object.getOwnPropertyDescriptor, si = "enumerable", ai = "configurable", hi = "writable";
    Ue.f = Qe ? ti ? function(t, e, i) {
        if (ei(t), e = ii(e), ei(i), "function" == typeof t && "prototype" === e && "value" in i && hi in i && !i.writable) {
            var o = ri(t, e);
            o && o.writable && (t[e] = i.value, i = {
                configurable: ai in i ? i.configurable : o.configurable,
                enumerable: si in i ? i.enumerable : o.enumerable,
                writable: !1
            });
        }
        return ni(t, e, i);
    } : ni : function(t, e, i) {
        if (ei(t), e = ii(e), ei(i), Je) try {
            return ni(t, e, i);
        } catch (t1) {}
        if ("get" in i || "set" in i) throw oi("Accessors not supported");
        return "value" in i && (t[e] = i.value), t;
    };
    var di = Ue, li = P, ci = w ? function(t, e, i) {
        return di.f(t, e, li(1, i));
    } : function(t, e, i) {
        return t[e] = i, t;
    }, ui = n, fi = c, pi = y, vi = m, gi = b.f, yi = Le, mi = G, bi = qe, wi = ci, ki = Vt, _i = function(t) {
        var e = function(i, o, n) {
            if (this instanceof e) {
                switch(arguments.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(i);
                    case 2:
                        return new t(i, o);
                }
                return new t(i, o, n);
            }
            return fi(t, this, arguments);
        };
        return e.prototype = t.prototype, e;
    }, xi = function(t, e) {
        var i, o, n, r, s, a, h, d, l = t.target, c = t.global, u = t.stat, f = t.proto, p = c ? ui : u ? ui[l] : (ui[l] || {}).prototype, v = c ? mi : mi[l] || wi(mi, l, {})[l], g = v.prototype;
        for(n in e)i = !yi(c ? n : l + (u ? "." : "#") + n, t.forced) && p && ki(p, n), s = v[n], i && (a = t.noTargetGet ? (d = gi(p, n)) && d.value : p[n]), r = i && a ? a : e[n], i && typeof s == typeof r || (h = t.bind && i ? bi(r, ui) : t.wrap && i ? _i(r) : f && vi(r) ? pi(r) : r, (t.sham || r && r.sham || s && s.sham) && wi(h, "sham", !0), wi(v, n, h), f && (ki(mi, o = l + "Prototype") || wi(mi, o, {}), wi(mi[o], n, r), t.real && g && !g[n] && wi(g, n, r)));
    }, Ei = Math.ceil, Oi = Math.floor, Ci = function(t) {
        var e = +t;
        return e != e || 0 === e ? 0 : (e > 0 ? Oi : Ei)(e);
    }, Si = Ci, Ti = Math.max, Mi = Math.min, Pi = function(t, e) {
        var i = Si(t);
        return i < 0 ? Ti(i + e, 0) : Mi(i, e);
    }, Di = Ci, Bi = Math.min, Ii = function(t) {
        return t > 0 ? Bi(Di(t), 9007199254740991) : 0;
    }, zi = function(t) {
        return Ii(t.length);
    }, Fi = U, Ni = Pi, Ai = zi, Ri = function(t) {
        return function(e, i, o) {
            var n, r = Fi(e), s = Ai(r), a = Ni(o, s);
            if (t && i != i) {
                for(; s > a;)if ((n = r[a++]) != n) return !0;
            } else for(; s > a; a++)if ((t || a in r) && r[a] === i) return t || a || 0;
            return !t && -1;
        };
    }, ji = {
        includes: Ri(!0),
        indexOf: Ri(!1)
    }, Li = {}, Hi = Vt, Wi = U, Vi = ji.indexOf, qi = Li, Ui = y([].push), Yi = function(t, e) {
        var i, o = Wi(t), n = 0, r = [];
        for(i in o)!Hi(qi, i) && Hi(o, i) && Ui(r, i);
        for(; e.length > n;)Hi(o, i = e[n++]) && (~Vi(r, i) || Ui(r, i));
        return r;
    }, Xi = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ], Gi = Yi, Ki = Xi, $i = Object.keys || function(t) {
        return Gi(t, Ki);
    }, Zi = {};
    Zi.f = Object.getOwnPropertySymbols;
    var Qi = w, Ji = y, to = x, eo = r, io = $i, oo = Zi, no = E, ro = Lt, so = L, ao = Object.assign, ho = Object.defineProperty, lo = Ji([].concat), co = !ao || eo(function() {
        if (Qi && 1 !== ao({
            b: 1
        }, ao(ho({}, "a", {
            enumerable: !0,
            get: function() {
                ho(this, "b", {
                    value: 3,
                    enumerable: !1
                });
            }
        }), {
            b: 2
        })).b) return !0;
        var t = {}, e = {}, i = Symbol(), o = "abcdefghijklmnopqrst";
        return t[i] = 7, o.split("").forEach(function(t) {
            e[t] = t;
        }), 7 != ao({}, t)[i] || io(ao({}, e)).join("") != o;
    }) ? function(t, e) {
        for(var i = ro(t), o = arguments.length, n = 1, r = oo.f, s = no.f; o > n;)for(var a, h = so(arguments[n++]), d = r ? lo(io(h), r(h)) : io(h), l = d.length, c = 0; l > c;)a = d[c++], Qi && !to(s, h, a) || (i[a] = h[a]);
        return i;
    } : ao, uo = co;
    xi({
        target: "Object",
        stat: !0,
        forced: Object.assign !== uo
    }, {
        assign: uo
    });
    var fo = G.Object.assign, po = y([].slice), vo = y, go = Et, yo = X, mo = Vt, bo = po, wo = s, ko = n.Function, _o = vo([].concat), xo = vo([].join), Eo = {}, Oo = function(t, e, i) {
        if (!mo(Eo, e)) {
            for(var o = [], n = 0; n < e; n++)o[n] = "a[" + n + "]";
            Eo[e] = ko("C,a", "return new C(" + xo(o, ",") + ")");
        }
        return Eo[e](t, i);
    }, Co = wo ? ko.bind : function(t) {
        var e = go(this), i = e.prototype, o = bo(arguments, 1), n = function() {
            var i = _o(o, bo(arguments));
            return this instanceof n ? Oo(e, i.length, i) : e.apply(t, i);
        };
        return yo(i) && (n.prototype = i), n;
    }, So = Co;
    xi({
        target: "Function",
        proto: !0,
        forced: Function.bind !== So
    }, {
        bind: So
    });
    var To = G, Mo = function(t) {
        return To[t + "Prototype"];
    }, Po = Mo("Function").bind, Do = tt, Bo = Po, Io = Function.prototype, zo = function(t) {
        var e = t.bind;
        return t === Io || Do(Io, t) && e === Io.bind ? Bo : e;
    }, Fo = zo;
    function No(t, e, i, o) {
        t.beginPath(), t.arc(e, i, o, 0, 2 * Math.PI, !1), t.closePath();
    }
    function Ao(t, e, i, o, n, r) {
        var s = Math.PI / 180;
        o - 2 * r < 0 && (r = o / 2), n - 2 * r < 0 && (r = n / 2), t.beginPath(), t.moveTo(e + r, i), t.lineTo(e + o - r, i), t.arc(e + o - r, i + r, r, 270 * s, 360 * s, !1), t.lineTo(e + o, i + n - r), t.arc(e + o - r, i + n - r, r, 0, 90 * s, !1), t.lineTo(e + r, i + n), t.arc(e + r, i + n - r, r, 90 * s, 180 * s, !1), t.lineTo(e, i + r), t.arc(e + r, i + r, r, 180 * s, 270 * s, !1), t.closePath();
    }
    function Ro(t, e, i, o, n) {
        var r = .5522848, s = o / 2 * r, a = n / 2 * r, h = e + o, d = i + n, l = e + o / 2, c = i + n / 2;
        t.beginPath(), t.moveTo(e, c), t.bezierCurveTo(e, c - a, l - s, i, l, i), t.bezierCurveTo(l + s, i, h, c - a, h, c), t.bezierCurveTo(h, c + a, l + s, d, l, d), t.bezierCurveTo(l - s, d, e, c + a, e, c), t.closePath();
    }
    function jo(t, e, i, o, n) {
        var r = n * (1 / 3), s = .5522848, a = o / 2 * s, h = r / 2 * s, d = e + o, l = i + r, c = e + o / 2, u = i + r / 2, f = i + (n - r / 2), p = i + n;
        t.beginPath(), t.moveTo(d, u), t.bezierCurveTo(d, u + h, c + a, l, c, l), t.bezierCurveTo(c - a, l, e, u + h, e, u), t.bezierCurveTo(e, u - h, c - a, i, c, i), t.bezierCurveTo(c + a, i, d, u - h, d, u), t.lineTo(d, f), t.bezierCurveTo(d, f + h, c + a, p, c, p), t.bezierCurveTo(c - a, p, e, f + h, e, f), t.lineTo(e, u);
    }
    function Lo(t, e, i, o, n, r) {
        t.beginPath(), t.moveTo(e, i);
        for(var s = r.length, a = o - e, h = n - i, d = h / a, l = Math.sqrt(a * a + h * h), c = 0, u = !0, f = 0, p = +r[0]; l >= .1;)(p = +r[(c++) % s]) > l && (p = l), f = Math.sqrt(p * p / (1 + d * d)), e += f = a < 0 ? -f : f, i += d * f, !0 === u ? t.lineTo(e, i) : t.moveTo(e, i), l -= p, u = !u;
    }
    var Ho = {
        circle: No,
        dashedLine: Lo,
        database: jo,
        diamond: function(t, e, i, o) {
            t.beginPath(), t.lineTo(e, i + o), t.lineTo(e + o, i), t.lineTo(e, i - o), t.lineTo(e - o, i), t.closePath();
        },
        ellipse: Ro,
        ellipse_vis: Ro,
        hexagon: function(t, e, i, o) {
            t.beginPath();
            var n = 2 * Math.PI / 6;
            t.moveTo(e + o, i);
            for(var r = 1; r < 6; r++)t.lineTo(e + o * Math.cos(n * r), i + o * Math.sin(n * r));
            t.closePath();
        },
        roundRect: Ao,
        square: function(t, e, i, o) {
            t.beginPath(), t.rect(e - o, i - o, 2 * o, 2 * o), t.closePath();
        },
        star: function(t, e, i, o) {
            t.beginPath(), i += .1 * (o *= .82);
            for(var n = 0; n < 10; n++){
                var r = n % 2 == 0 ? 1.3 * o : .5 * o;
                t.lineTo(e + r * Math.sin(2 * n * Math.PI / 10), i - r * Math.cos(2 * n * Math.PI / 10));
            }
            t.closePath();
        },
        triangle: function(t, e, i, o) {
            t.beginPath(), i += .275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i - (a - s)), t.lineTo(e + r, i + s), t.lineTo(e - r, i + s), t.lineTo(e, i - (a - s)), t.closePath();
        },
        triangleDown: function(t, e, i, o) {
            t.beginPath(), i -= .275 * (o *= 1.15);
            var n = 2 * o, r = n / 2, s = Math.sqrt(3) / 6 * n, a = Math.sqrt(n * n - r * r);
            t.moveTo(e, i + (a - s)), t.lineTo(e + r, i - s), t.lineTo(e - r, i - s), t.lineTo(e, i + (a - s)), t.closePath();
        }
    };
    var Wo = {
        exports: {}
    };
    !function(t) {
        function e(t) {
            if (t) return function(t) {
                for(var i in e.prototype)t[i] = e.prototype[i];
                return t;
            }(t);
        }
        t.exports = e, e.prototype.on = e.prototype.addEventListener = function(t, e) {
            return this._callbacks = this._callbacks || {}, (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e), this;
        }, e.prototype.once = function(t, e) {
            function i() {
                this.off(t, i), e.apply(this, arguments);
            }
            return i.fn = e, this.on(t, i), this;
        }, e.prototype.off = e.prototype.removeListener = e.prototype.removeAllListeners = e.prototype.removeEventListener = function(t, e) {
            if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;
            var i, o = this._callbacks["$" + t];
            if (!o) return this;
            if (1 == arguments.length) return delete this._callbacks["$" + t], this;
            for(var n = 0; n < o.length; n++)if ((i = o[n]) === e || i.fn === e) {
                o.splice(n, 1);
                break;
            }
            return 0 === o.length && delete this._callbacks["$" + t], this;
        }, e.prototype.emit = function(t) {
            this._callbacks = this._callbacks || {};
            for(var e = new Array(arguments.length - 1), i = this._callbacks["$" + t], o = 1; o < arguments.length; o++)e[o - 1] = arguments[o];
            if (i) {
                o = 0;
                for(var n = (i = i.slice(0)).length; o < n; ++o)i[o].apply(this, e);
            }
            return this;
        }, e.prototype.listeners = function(t) {
            return this._callbacks = this._callbacks || {}, this._callbacks["$" + t] || [];
        }, e.prototype.hasListeners = function(t) {
            return !!this.listeners(t).length;
        };
    }(Wo);
    var Vo = Wo.exports, qo = {};
    qo[re("toStringTag")] = "z";
    var Uo = "[object z]" === String(qo), Yo = n, Xo = Uo, Go = m, Ko = z, $o = re("toStringTag"), Zo = Yo.Object, Qo = "Arguments" == Ko(function() {
        return arguments;
    }()), Jo = Xo ? Ko : function(t) {
        var e, i, o;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (i = function(t, e) {
            try {
                return t[e];
            } catch (t1) {}
        }(e = Zo(t), $o)) ? i : Qo ? Ko(e) : "Object" == (o = Ko(e)) && Go(e.callee) ? "Arguments" : o;
    }, tn = Jo, en = n.String, on = function(t) {
        if ("Symbol" === tn(t)) throw TypeError("Cannot convert a Symbol value to a string");
        return en(t);
    }, nn = y, rn = Ci, sn = on, an = W, hn = nn("".charAt), dn = nn("".charCodeAt), ln = nn("".slice), cn = function(t) {
        return function(e, i) {
            var o, n, r = sn(an(e)), s = rn(i), a = r.length;
            return s < 0 || s >= a ? t ? "" : void 0 : (o = dn(r, s)) < 55296 || o > 56319 || s + 1 === a || (n = dn(r, s + 1)) < 56320 || n > 57343 ? t ? hn(r, s) : o : t ? ln(r, s, s + 2) : n - 56320 + (o - 55296 << 10) + 65536;
        };
    }, un = {
        codeAt: cn(!1),
        charAt: cn(!0)
    }, fn = m, pn = Nt, vn = y(Function.toString);
    fn(pn.inspectSource) || (pn.inspectSource = function(t) {
        return vn(t);
    });
    var gn, yn, mn, bn = pn.inspectSource, wn = m, kn = bn, _n = n.WeakMap, xn = wn(_n) && /native code/.test(kn(_n)), En = Dt.exports, On = Gt, Cn = En("keys"), Sn = function(t) {
        return Cn[t] || (Cn[t] = On(t));
    }, Tn = xn, Mn = n, Pn = y, Dn = X, Bn = ci, In = Vt, zn = Nt, Fn = Sn, Nn = Li, An = "Object already initialized", Rn = Mn.TypeError, jn = Mn.WeakMap;
    if (Tn || zn.state) {
        var Ln = zn.state || (zn.state = new jn), Hn = Pn(Ln.get), Wn = Pn(Ln.has), Vn = Pn(Ln.set);
        gn = function(t, e) {
            if (Wn(Ln, t)) throw new Rn(An);
            return e.facade = t, Vn(Ln, t, e), e;
        }, yn = function(t) {
            return Hn(Ln, t) || {};
        }, mn = function(t) {
            return Wn(Ln, t);
        };
    } else {
        var qn = Fn("state");
        Nn[qn] = !0, gn = function(t, e) {
            if (In(t, qn)) throw new Rn(An);
            return e.facade = t, Bn(t, qn, e), e;
        }, yn = function(t) {
            return In(t, qn) ? t[qn] : {};
        }, mn = function(t) {
            return In(t, qn);
        };
    }
    var Un = {
        set: gn,
        get: yn,
        has: mn,
        enforce: function(t) {
            return mn(t) ? yn(t) : gn(t, {});
        },
        getterFor: function(t) {
            return function(e) {
                var i;
                if (!Dn(e) || (i = yn(e)).type !== t) throw Rn("Incompatible receiver, " + t + " required");
                return i;
            };
        }
    }, Yn = w, Xn = Vt, Gn = Function.prototype, Kn = Yn && Object.getOwnPropertyDescriptor, $n = Xn(Gn, "name"), Zn = {
        EXISTS: $n,
        PROPER: $n && "something" === (function() {}).name,
        CONFIGURABLE: $n && (!Yn || Yn && Kn(Gn, "name").configurable)
    }, Qn = {}, Jn = w, tr = Ye, er = Ue, ir = Ze, or = U, nr = $i;
    Qn.f = Jn && !tr ? Object.defineProperties : function(t, e) {
        ir(t);
        for(var i, o = or(e), n = nr(e), r = n.length, s = 0; r > s;)er.f(t, i = n[s++], o[i]);
        return t;
    };
    var rr, sr = J("document", "documentElement"), ar = Ze, hr = Qn, dr = Xi, lr = Li, cr = sr, ur = we, fr = Sn("IE_PROTO"), pr = function() {}, vr = function(t) {
        return "<script>" + t + "</" + "script>";
    }, gr = function(t) {
        t.write(vr("")), t.close();
        var e = t.parentWindow.Object;
        return t = null, e;
    }, yr = function() {
        try {
            rr = new ActiveXObject("htmlfile");
        } catch (t) {}
        var t1, e;
        yr = "undefined" != typeof document ? document.domain && rr ? gr(rr) : ((e = ur("iframe")).style.display = "none", cr.appendChild(e), e.src = String("javascript:"), (t1 = e.contentWindow.document).open(), t1.write(vr("document.F=Object")), t1.close(), t1.F) : gr(rr);
        for(var i = dr.length; i--;)delete yr.prototype[dr[i]];
        return yr();
    };
    lr[fr] = !0;
    var mr, br, wr, kr = Object.create || function(t, e) {
        var i;
        return null !== t ? (pr.prototype = ar(t), i = new pr, pr.prototype = null, i[fr] = t) : i = yr(), void 0 === e ? i : hr.f(i, e);
    }, _r = !r(function() {
        function t() {}
        return t.prototype.constructor = null, Object.getPrototypeOf(new t) !== t.prototype;
    }), xr = n, Er = Vt, Or = m, Cr = Lt, Sr = _r, Tr = Sn("IE_PROTO"), Mr = xr.Object, Pr = Mr.prototype, Dr = Sr ? Mr.getPrototypeOf : function(t) {
        var e = Cr(t);
        if (Er(e, Tr)) return e[Tr];
        var i = e.constructor;
        return Or(i) && e instanceof i ? i.prototype : e instanceof Mr ? Pr : null;
    }, Br = ci, Ir = function(t, e, i, o) {
        o && o.enumerable ? t[e] = i : Br(t, e, i);
    }, zr = r, Fr = m, Nr = kr, Ar = Dr, Rr = Ir, jr = re("iterator"), Lr = !1;
    [].keys && ("next" in (wr = [].keys()) ? (br = Ar(Ar(wr))) !== Object.prototype && (mr = br) : Lr = !0);
    var Hr = null == mr || zr(function() {
        var t = {};
        return mr[jr].call(t) !== t;
    });
    Fr((mr = Hr ? {} : Nr(mr))[jr]) || Rr(mr, jr, function() {
        return this;
    });
    var Wr = {
        IteratorPrototype: mr,
        BUGGY_SAFARI_ITERATORS: Lr
    }, Vr = Jo, qr = Uo ? ({}).toString : function() {
        return "[object " + Vr(this) + "]";
    }, Ur = Uo, Yr = Ue.f, Xr = ci, Gr = Vt, Kr = qr, $r = re("toStringTag"), Zr = function(t, e, i, o) {
        if (t) {
            var n = i ? t : t.prototype;
            Gr(n, $r) || Yr(n, $r, {
                configurable: !0,
                value: e
            }), o && !Ur && Xr(n, "toString", Kr);
        }
    }, Qr = {}, Jr = Wr.IteratorPrototype, ts = kr, es = P, is = Zr, os = Qr, ns = function() {
        return this;
    }, rs = n, ss = m, as = rs.String, hs = rs.TypeError, ds = y, ls = Ze, cs = function(t) {
        if ("object" == typeof t || ss(t)) return t;
        throw hs("Can't set " + as(t) + " as a prototype");
    }, us = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var t, e = !1, i = {};
        try {
            (t = ds(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(i, []), e = i instanceof Array;
        } catch (t1) {}
        return function(i, o) {
            return ls(i), cs(o), e ? t(i, o) : i.__proto__ = o, i;
        };
    }() : void 0), fs = xi, ps = x, vs = function(t, e, i, o) {
        var n = e + " Iterator";
        return t.prototype = ts(Jr, {
            next: es(+!o, i)
        }), is(t, n, !1, !0), os[n] = ns, t;
    }, gs = Dr, ys = Zr, ms = Ir, bs = Qr, ws = Zn.PROPER, ks = Wr.BUGGY_SAFARI_ITERATORS, _s = re("iterator"), xs = "keys", Es = "values", Os = "entries", Cs = function() {
        return this;
    }, Ss = function(t, e, i, o, n, r, s) {
        vs(i, e, o);
        var a, h, d, l = function(t) {
            if (t === n && v) return v;
            if (!ks && t in f) return f[t];
            switch(t){
                case xs:
                case Es:
                case Os:
                    return function() {
                        return new i(this, t);
                    };
            }
            return function() {
                return new i(this);
            };
        }, c = e + " Iterator", u = !1, f = t.prototype, p = f[_s] || f["@@iterator"] || n && f[n], v = !ks && p || l(n), g = "Array" == e && f.entries || p;
        if (g && (a = gs(g.call(new t))) !== Object.prototype && a.next && (ys(a, c, !0, !0), bs[c] = Cs), ws && n == Es && p && p.name !== Es && (u = !0, v = function() {
            return ps(p, this);
        }), n) {
            if (h = {
                values: l(Es),
                keys: r ? v : l(xs),
                entries: l(Os)
            }, s) for(d in h)(ks || u || !(d in f)) && ms(f, d, h[d]);
            else fs({
                target: e,
                proto: !0,
                forced: ks || u
            }, h);
        }
        return s && f[_s] !== v && ms(f, _s, v, {
            name: n
        }), bs[e] = v, h;
    }, Ts = un.charAt, Ms = on, Ps = Un, Ds = Ss, Bs = "String Iterator", Is = Ps.set, zs = Ps.getterFor(Bs);
    Ds(String, "String", function(t) {
        Is(this, {
            type: Bs,
            string: Ms(t),
            index: 0
        });
    }, function() {
        var t, e = zs(this), i = e.string, o = e.index;
        return o >= i.length ? {
            value: void 0,
            done: !0
        } : (t = Ts(i, o), e.index += t.length, {
            value: t,
            done: !1
        });
    });
    var Fs = x, Ns = Ze, As = Ct, Rs = function(t, e, i) {
        var o, n;
        Ns(t);
        try {
            if (!(o = As(t, "return"))) {
                if ("throw" === e) throw i;
                return i;
            }
            o = Fs(o, t);
        } catch (t1) {
            n = !0, o = t1;
        }
        if ("throw" === e) throw i;
        if (n) throw o;
        return Ns(o), i;
    }, js = Ze, Ls = Rs, Hs = Qr, Ws = re("iterator"), Vs = Array.prototype, qs = function(t) {
        return void 0 !== t && (Hs.Array === t || Vs[Ws] === t);
    }, Us = y, Ys = r, Xs = m, Gs = Jo, Ks = bn, $s = function() {}, Zs = [], Qs = J("Reflect", "construct"), Js = /^\s*(?:class|function)\b/, ta = Us(Js.exec), ea = !Js.exec($s), ia = function(t) {
        if (!Xs(t)) return !1;
        try {
            return Qs($s, Zs, t), !0;
        } catch (t1) {
            return !1;
        }
    }, oa = function(t) {
        if (!Xs(t)) return !1;
        switch(Gs(t)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return !1;
        }
        try {
            return ea || !!ta(Js, Ks(t));
        } catch (t1) {
            return !0;
        }
    };
    oa.sham = !0;
    var na = !Qs || Ys(function() {
        var t;
        return ia(ia.call) || !ia(Object) || !ia(function() {
            t = !0;
        }) || t;
    }) ? oa : ia, ra = ge, sa = Ue, aa = P, ha = function(t, e, i) {
        var o = ra(e);
        o in t ? sa.f(t, o, aa(0, i)) : t[o] = i;
    }, da = Jo, la = Ct, ca = Qr, ua = re("iterator"), fa = function(t) {
        if (null != t) return la(t, ua) || la(t, "@@iterator") || ca[da(t)];
    }, pa = x, va = Et, ga = Ze, ya = wt, ma = fa, ba = n.TypeError, wa = function(t, e) {
        var i = arguments.length < 2 ? ma(t) : e;
        if (va(i)) return ga(pa(i, t));
        throw ba(ya(t) + " is not iterable");
    }, ka = qe, _a = x, xa = Lt, Ea = function(t, e, i, o) {
        try {
            return o ? e(js(i)[0], i[1]) : e(i);
        } catch (e1) {
            Ls(t, "throw", e1);
        }
    }, Oa = qs, Ca = na, Sa = zi, Ta = ha, Ma = wa, Pa = fa, Da = n.Array, Ba = re("iterator"), Ia = !1;
    try {
        var za = 0, Fa = {
            next: function() {
                return {
                    done: !!za++
                };
            },
            return: function() {
                Ia = !0;
            }
        };
        Fa[Ba] = function() {
            return this;
        }, Array.from(Fa, function() {
            throw 2;
        });
    } catch (t1) {}
    var Na = function(t) {
        var e = xa(t), i = Ca(this), o = arguments.length, n = o > 1 ? arguments[1] : void 0, r = void 0 !== n;
        r && (n = ka(n, o > 2 ? arguments[2] : void 0));
        var s, a, h, d, l, c, u = Pa(e), f = 0;
        if (!u || this == Da && Oa(u)) for(s = Sa(e), a = i ? new this(s) : Da(s); s > f; f++)c = r ? n(e[f], f) : e[f], Ta(a, f, c);
        else for(l = (d = Ma(e, u)).next, a = i ? new this : []; !(h = _a(l, d)).done; f++)c = r ? Ea(d, n, [
            h.value,
            f
        ], !0) : h.value, Ta(a, f, c);
        return a.length = f, a;
    }, Aa = function(t, e) {
        if (!e && !Ia) return !1;
        var i = !1;
        try {
            var o = {};
            o[Ba] = function() {
                return {
                    next: function() {
                        return {
                            done: i = !0
                        };
                    }
                };
            }, t(o);
        } catch (t1) {}
        return i;
    };
    xi({
        target: "Array",
        stat: !0,
        forced: !Aa(function(t) {
            Array.from(t);
        })
    }, {
        from: Na
    });
    var Ra = G.Array.from, ja = Ra, La = U, Ha = Qr, Wa = Un;
    Ue.f;
    var Va = Ss, qa = "Array Iterator", Ua = Wa.set, Ya = Wa.getterFor(qa);
    Va(Array, "Array", function(t, e) {
        Ua(this, {
            type: qa,
            target: La(t),
            index: 0,
            kind: e
        });
    }, function() {
        var t = Ya(this), e = t.target, i = t.kind, o = t.index++;
        return !e || o >= e.length ? (t.target = void 0, {
            value: void 0,
            done: !0
        }) : "keys" == i ? {
            value: o,
            done: !1
        } : "values" == i ? {
            value: e[o],
            done: !1
        } : {
            value: [
                o,
                e[o]
            ],
            done: !1
        };
    }, "values"), Ha.Arguments = Ha.Array;
    var Xa = fa, Ga = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    }, Ka = n, $a = Jo, Za = ci, Qa = Qr, Ja = re("toStringTag");
    for(var th in Ga){
        var eh = Ka[th], ih = eh && eh.prototype;
        ih && $a(ih) !== Ja && Za(ih, Ja, th), Qa[th] = Qa.Array;
    }
    var oh = Xa, nh = z, rh = Array.isArray || function(t) {
        return "Array" == nh(t);
    }, sh = {}, ah = Yi, hh = Xi.concat("length", "prototype");
    sh.f = Object.getOwnPropertyNames || function(t) {
        return ah(t, hh);
    };
    var dh = {}, lh = Pi, ch = zi, uh = ha, fh = n.Array, ph = Math.max, vh = function(t, e, i) {
        for(var o = ch(t), n = lh(e, o), r = lh(void 0 === i ? o : i, o), s = fh(ph(r - n, 0)), a = 0; n < r; n++, a++)uh(s, a, t[n]);
        return s.length = a, s;
    }, gh = z, yh = U, mh = sh.f, bh = vh, wh = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    dh.f = function(t) {
        return wh && "Window" == gh(t) ? function(t) {
            try {
                return mh(t);
            } catch (t1) {
                return bh(wh);
            }
        }(t) : mh(yh(t));
    };
    var kh = {}, _h = re;
    kh.f = _h;
    var xh = G, Eh = Vt, Oh = kh, Ch = Ue.f, Sh = function(t) {
        var e = xh.Symbol || (xh.Symbol = {});
        Eh(e, t) || Ch(e, t, {
            value: Oh.f(t)
        });
    }, Th = n, Mh = rh, Ph = na, Dh = X, Bh = re("species"), Ih = Th.Array, zh = function(t) {
        var e;
        return Mh(t) && (e = t.constructor, (Ph(e) && (e === Ih || Mh(e.prototype)) || Dh(e) && null === (e = e[Bh])) && (e = void 0)), void 0 === e ? Ih : e;
    }, Fh = function(t, e) {
        return new (zh(t))(0 === e ? 0 : e);
    }, Nh = qe, Ah = L, Rh = Lt, jh = zi, Lh = Fh, Hh = y([].push), Wh = function(t) {
        var e = 1 == t, i = 2 == t, o = 3 == t, n = 4 == t, r = 6 == t, s = 7 == t, a = 5 == t || r;
        return function(h, d, l, c) {
            for(var u, f, p = Rh(h), v = Ah(p), g = Nh(d, l), y = jh(v), m = 0, b = c || Lh, w = e ? b(h, y) : i || s ? b(h, 0) : void 0; y > m; m++)if ((a || m in v) && (f = g(u = v[m], m, p), t)) {
                if (e) w[m] = f;
                else if (f) switch(t){
                    case 3:
                        return !0;
                    case 5:
                        return u;
                    case 6:
                        return m;
                    case 2:
                        Hh(w, u);
                }
                else switch(t){
                    case 4:
                        return !1;
                    case 7:
                        Hh(w, u);
                }
            }
            return r ? -1 : o || n ? n : w;
        };
    }, Vh = {
        forEach: Wh(0),
        map: Wh(1),
        filter: Wh(2),
        some: Wh(3),
        every: Wh(4),
        find: Wh(5),
        findIndex: Wh(6),
        filterReject: Wh(7)
    }, qh = xi, Uh = n, Yh = J, Xh = c, Gh = x, Kh = y, $h = w, Zh = ct, Qh = r, Jh = Vt, td = rh, ed = m, id = X, od = tt, nd = mt, rd = Ze, sd = Lt, ad = U, hd = ge, dd = on, ld = P, cd = kr, ud = $i, fd = sh, pd = dh, vd = Zi, gd = b, yd = Ue, md = Qn, bd = E, wd = po, kd = Ir, _d = Dt.exports, xd = Li, Ed = Gt, Od = re, Cd = kh, Sd = Sh, Td = Zr, Md = Un, Pd = Vh.forEach, Dd = Sn("hidden"), Bd = "Symbol", Id = Od("toPrimitive"), zd = Md.set, Fd = Md.getterFor(Bd), Nd = Object.prototype, Ad = Uh.Symbol, Rd = Ad && Ad.prototype, jd = Uh.TypeError, Ld = Uh.QObject, Hd = Yh("JSON", "stringify"), Wd = gd.f, Vd = yd.f, qd = pd.f, Ud = bd.f, Yd = Kh([].push), Xd = _d("symbols"), Gd = _d("op-symbols"), Kd = _d("string-to-symbol-registry"), $d = _d("symbol-to-string-registry"), Zd = _d("wks"), Qd = !Ld || !Ld.prototype || !Ld.prototype.findChild, Jd = $h && Qh(function() {
        return 7 != cd(Vd({}, "a", {
            get: function() {
                return Vd(this, "a", {
                    value: 7
                }).a;
            }
        })).a;
    }) ? function(t, e, i) {
        var o = Wd(Nd, e);
        o && delete Nd[e], Vd(t, e, i), o && t !== Nd && Vd(Nd, e, o);
    } : Vd, tl = function(t, e) {
        var i = Xd[t] = cd(Rd);
        return zd(i, {
            type: Bd,
            tag: t,
            description: e
        }), $h || (i.description = e), i;
    }, el = function(t, e, i) {
        t === Nd && el(Gd, e, i), rd(t);
        var o = hd(e);
        return rd(i), Jh(Xd, o) ? (i.enumerable ? (Jh(t, Dd) && t[Dd][o] && (t[Dd][o] = !1), i = cd(i, {
            enumerable: ld(0, !1)
        })) : (Jh(t, Dd) || Vd(t, Dd, ld(1, {})), t[Dd][o] = !0), Jd(t, o, i)) : Vd(t, o, i);
    }, il = function(t, e) {
        rd(t);
        var i = ad(e), o = ud(i).concat(sl(i));
        return Pd(o, function(e) {
            $h && !Gh(ol, i, e) || el(t, e, i[e]);
        }), t;
    }, ol = function(t) {
        var e = hd(t), i = Gh(Ud, this, e);
        return !(this === Nd && Jh(Xd, e) && !Jh(Gd, e)) && (!(i || !Jh(this, e) || !Jh(Xd, e) || Jh(this, Dd) && this[Dd][e]) || i);
    }, nl = function(t, e) {
        var i = ad(t), o = hd(e);
        if (i !== Nd || !Jh(Xd, o) || Jh(Gd, o)) {
            var n = Wd(i, o);
            return !n || !Jh(Xd, o) || Jh(i, Dd) && i[Dd][o] || (n.enumerable = !0), n;
        }
    }, rl = function(t) {
        var e = qd(ad(t)), i = [];
        return Pd(e, function(t) {
            Jh(Xd, t) || Jh(xd, t) || Yd(i, t);
        }), i;
    }, sl = function(t) {
        var e = t === Nd, i = qd(e ? Gd : ad(t)), o = [];
        return Pd(i, function(t) {
            !Jh(Xd, t) || e && !Jh(Nd, t) || Yd(o, Xd[t]);
        }), o;
    };
    if (Zh || (Ad = function() {
        if (od(Rd, this)) throw jd("Symbol is not a constructor");
        var t = arguments.length && void 0 !== arguments[0] ? dd(arguments[0]) : void 0, e = Ed(t), i = function(t) {
            this === Nd && Gh(i, Gd, t), Jh(this, Dd) && Jh(this[Dd], e) && (this[Dd][e] = !1), Jd(this, e, ld(1, t));
        };
        return $h && Qd && Jd(Nd, e, {
            configurable: !0,
            set: i
        }), tl(e, t);
    }, kd(Rd = Ad.prototype, "toString", function() {
        return Fd(this).tag;
    }), kd(Ad, "withoutSetter", function(t) {
        return tl(Ed(t), t);
    }), bd.f = ol, yd.f = el, md.f = il, gd.f = nl, fd.f = pd.f = rl, vd.f = sl, Cd.f = function(t) {
        return tl(Od(t), t);
    }, $h && Vd(Rd, "description", {
        configurable: !0,
        get: function() {
            return Fd(this).description;
        }
    })), qh({
        global: !0,
        wrap: !0,
        forced: !Zh,
        sham: !Zh
    }, {
        Symbol: Ad
    }), Pd(ud(Zd), function(t) {
        Sd(t);
    }), qh({
        target: Bd,
        stat: !0,
        forced: !Zh
    }, {
        for: function(t) {
            var e = dd(t);
            if (Jh(Kd, e)) return Kd[e];
            var i = Ad(e);
            return Kd[e] = i, $d[i] = e, i;
        },
        keyFor: function(t) {
            if (!nd(t)) throw jd(t + " is not a symbol");
            if (Jh($d, t)) return $d[t];
        },
        useSetter: function() {
            Qd = !0;
        },
        useSimple: function() {
            Qd = !1;
        }
    }), qh({
        target: "Object",
        stat: !0,
        forced: !Zh,
        sham: !$h
    }, {
        create: function(t, e) {
            return void 0 === e ? cd(t) : il(cd(t), e);
        },
        defineProperty: el,
        defineProperties: il,
        getOwnPropertyDescriptor: nl
    }), qh({
        target: "Object",
        stat: !0,
        forced: !Zh
    }, {
        getOwnPropertyNames: rl,
        getOwnPropertySymbols: sl
    }), qh({
        target: "Object",
        stat: !0,
        forced: Qh(function() {
            vd.f(1);
        })
    }, {
        getOwnPropertySymbols: function(t) {
            return vd.f(sd(t));
        }
    }), Hd) {
        var al = !Zh || Qh(function() {
            var t = Ad();
            return "[null]" != Hd([
                t
            ]) || "{}" != Hd({
                a: t
            }) || "{}" != Hd(Object(t));
        });
        qh({
            target: "JSON",
            stat: !0,
            forced: al
        }, {
            stringify: function(t, e, i) {
                var o = wd(arguments), n = e;
                if ((id(e) || void 0 !== t) && !nd(t)) return td(e) || (e = function(t, e) {
                    if (ed(n) && (e = Gh(n, this, t, e)), !nd(e)) return e;
                }), o[1] = e, Xh(Hd, null, o);
            }
        });
    }
    if (!Rd[Id]) {
        var hl = Rd.valueOf;
        kd(Rd, Id, function(t) {
            return Gh(hl, this);
        });
    }
    Td(Ad, Bd), xd[Dd] = !0;
    var dl = G.Object.getOwnPropertySymbols, ll = {
        exports: {}
    }, cl = xi, ul = r, fl = U, pl = b.f, vl = w, gl = ul(function() {
        pl(1);
    });
    cl({
        target: "Object",
        stat: !0,
        forced: !vl || gl,
        sham: !vl
    }, {
        getOwnPropertyDescriptor: function(t, e) {
            return pl(fl(t), e);
        }
    });
    var yl = G.Object, ml = ll.exports = function(t, e) {
        return yl.getOwnPropertyDescriptor(t, e);
    };
    yl.getOwnPropertyDescriptor.sham && (ml.sham = !0);
    var bl = ll.exports, wl = bl, kl = J, _l = sh, xl = Zi, El = Ze, Ol = y([].concat), Cl = kl("Reflect", "ownKeys") || function(t) {
        var e = _l.f(El(t)), i = xl.f;
        return i ? Ol(e, i(t)) : e;
    }, Sl = Cl, Tl = U, Ml = b, Pl = ha;
    xi({
        target: "Object",
        stat: !0,
        sham: !w
    }, {
        getOwnPropertyDescriptors: function(t) {
            for(var e, i, o = Tl(t), n = Ml.f, r = Sl(o), s = {}, a = 0; r.length > a;)void 0 !== (i = n(o, e = r[a++])) && Pl(s, e, i);
            return s;
        }
    });
    var Dl = G.Object.getOwnPropertyDescriptors, Bl = {
        exports: {}
    }, Il = xi, zl = w, Fl = Qn.f;
    Il({
        target: "Object",
        stat: !0,
        forced: Object.defineProperties !== Fl,
        sham: !zl
    }, {
        defineProperties: Fl
    });
    var Nl = G.Object, Al = Bl.exports = function(t, e) {
        return Nl.defineProperties(t, e);
    };
    Nl.defineProperties.sham && (Al.sham = !0);
    var Rl = Bl.exports, jl = {
        exports: {}
    }, Ll = xi, Hl = w, Wl = Ue.f;
    Ll({
        target: "Object",
        stat: !0,
        forced: Object.defineProperty !== Wl,
        sham: !Hl
    }, {
        defineProperty: Wl
    });
    var Vl = G.Object, ql = jl.exports = function(t, e, i) {
        return Vl.defineProperty(t, e, i);
    };
    Vl.defineProperty.sham && (ql.sham = !0);
    var Ul = jl.exports, Yl = Ul;
    function Xl(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    var Gl = Ul;
    function Kl(t, e) {
        for(var i = 0; i < e.length; i++){
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Gl(t, o.key, o);
        }
    }
    function $l(t, e, i) {
        return e && Kl(t.prototype, e), i && Kl(t, i), Gl(t, "prototype", {
            writable: !1
        }), t;
    }
    function Zl(t, e, i) {
        return e in t ? Gl(t, e, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = i, t;
    }
    xi({
        target: "Array",
        stat: !0
    }, {
        isArray: rh
    });
    var Ql = G.Array.isArray, Jl = Ql;
    var tc = r, ec = ht, ic = re("species"), oc = function(t) {
        return ec >= 51 || !tc(function() {
            var e = [];
            return (e.constructor = {})[ic] = function() {
                return {
                    foo: 1
                };
            }, 1 !== e[t](Boolean).foo;
        });
    }, nc = xi, rc = n, sc = r, ac = rh, hc = X, dc = Lt, lc = zi, cc = ha, uc = Fh, fc = oc, pc = ht, vc = re("isConcatSpreadable"), gc = 9007199254740991, yc = "Maximum allowed index exceeded", mc = rc.TypeError, bc = pc >= 51 || !sc(function() {
        var t = [];
        return t[vc] = !1, t.concat()[0] !== t;
    }), wc = fc("concat"), kc = function(t) {
        if (!hc(t)) return !1;
        var e = t[vc];
        return void 0 !== e ? !!e : ac(t);
    };
    nc({
        target: "Array",
        proto: !0,
        forced: !bc || !wc
    }, {
        concat: function(t) {
            var e, i, o, n, r, s = dc(this), a = uc(s, 0), h = 0;
            for(e = -1, o = arguments.length; e < o; e++)if (kc(r = -1 === e ? s : arguments[e])) {
                if (h + (n = lc(r)) > gc) throw mc(yc);
                for(i = 0; i < n; i++, h++)i in r && cc(a, h, r[i]);
            } else {
                if (h >= gc) throw mc(yc);
                cc(a, h++, r);
            }
            return a.length = h, a;
        }
    }), Sh("asyncIterator"), Sh("hasInstance"), Sh("isConcatSpreadable"), Sh("iterator"), Sh("match"), Sh("matchAll"), Sh("replace"), Sh("search"), Sh("species"), Sh("split"), Sh("toPrimitive"), Sh("toStringTag"), Sh("unscopables"), Zr(n.JSON, "JSON", !0);
    var _c = G.Symbol, xc = _c;
    Sh("asyncDispose"), Sh("dispose"), Sh("matcher"), Sh("metadata"), Sh("observable"), Sh("patternMatch"), Sh("replaceAll");
    var Ec = xc;
    var Oc = xi, Cc = n, Sc = rh, Tc = na, Mc = X, Pc = Pi, Dc = zi, Bc = U, Ic = ha, zc = re, Fc = po, Nc = oc("slice"), Ac = zc("species"), Rc = Cc.Array, jc = Math.max;
    Oc({
        target: "Array",
        proto: !0,
        forced: !Nc
    }, {
        slice: function(t, e) {
            var i, o, n, r = Bc(this), s = Dc(r), a = Pc(t, s), h = Pc(void 0 === e ? s : e, s);
            if (Sc(r) && (i = r.constructor, (Tc(i) && (i === Rc || Sc(i.prototype)) || Mc(i) && null === (i = i[Ac])) && (i = void 0), i === Rc || void 0 === i)) return Fc(r, a, h);
            for(o = new (void 0 === i ? Rc : i)(jc(h - a, 0)), n = 0; a < h; a++, n++)a in r && Ic(o, n, r[a]);
            return o.length = n, o;
        }
    });
    var Lc = Mo("Array").slice, Hc = tt, Wc = Lc, Vc = Array.prototype, qc = function(t) {
        var e = t.slice;
        return t === Vc || Hc(Vc, t) && e === Vc.slice ? Wc : e;
    }, Uc = qc, Yc = Uc, Xc = Ra;
    function Gc(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function Kc(t, e) {
        var i;
        if (t) {
            if ("string" == typeof t) return Gc(t, e);
            var o = Yc(i = Object.prototype.toString.call(t)).call(i, 8, -1);
            return "Object" === o && t.constructor && (o = t.constructor.name), "Map" === o || "Set" === o ? Xc(t) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? Gc(t, e) : void 0;
        }
    }
    function $c(t, e) {
        return function(t) {
            if (Jl(t)) return t;
        }(t) || function(t, e) {
            var i = null == t ? null : void 0 !== Ec && oh(t) || t["@@iterator"];
            if (null != i) {
                var o, n, r = [], s = !0, a = !1;
                try {
                    for(i = i.call(t); !(s = (o = i.next()).done) && (r.push(o.value), !e || r.length !== e); s = !0);
                } catch (t1) {
                    a = !0, n = t1;
                } finally{
                    try {
                        s || null == i.return || i.return();
                    } finally{
                        if (a) throw n;
                    }
                }
                return r;
            }
        }(t, e) || Kc(t, e) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var Zc = kh.f("iterator");
    function Qc(t) {
        return Qc = "function" == typeof Ec && "symbol" == typeof Zc ? function(t) {
            return typeof t;
        } : function(t) {
            return t && "function" == typeof Ec && t.constructor === Ec && t !== Ec.prototype ? "symbol" : typeof t;
        }, Qc(t);
    }
    function Jc(t) {
        return function(t) {
            if (Jl(t)) return Gc(t);
        }(t) || function(t) {
            if (void 0 !== Ec && null != oh(t) || null != t["@@iterator"]) return Xc(t);
        }(t) || Kc(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
    }
    var tu = _c, eu = Mo("Array").concat, iu = tt, ou = eu, nu = Array.prototype, ru = function(t) {
        var e = t.concat;
        return t === nu || iu(nu, t) && e === nu.concat ? ou : e;
    }, su = ru, au = Uc;
    xi({
        target: "Reflect",
        stat: !0
    }, {
        ownKeys: Cl
    }), G.Reflect.ownKeys;
    var hu = Ql, du = Vh.map;
    xi({
        target: "Array",
        proto: !0,
        forced: !oc("map")
    }, {
        map: function(t) {
            return du(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var lu = Mo("Array").map, cu = tt, uu = lu, fu = Array.prototype, pu = function(t) {
        var e = t.map;
        return t === fu || cu(fu, t) && e === fu.map ? uu : e;
    }, vu = pu, gu = Lt, yu = $i;
    xi({
        target: "Object",
        stat: !0,
        forced: r(function() {
            yu(1);
        })
    }, {
        keys: function(t) {
            return yu(gu(t));
        }
    });
    var mu = G.Object.keys, bu = xi, wu = y, ku = n.Date, _u = wu(ku.prototype.getTime);
    bu({
        target: "Date",
        stat: !0
    }, {
        now: function() {
            return _u(new ku);
        }
    });
    var xu = G.Date.now, Eu = r, Ou = function(t, e) {
        var i = [][t];
        return !!i && Eu(function() {
            i.call(null, e || function() {
                return 1;
            }, 1);
        });
    }, Cu = Vh.forEach, Su = Ou("forEach") ? [].forEach : function(t) {
        return Cu(this, t, arguments.length > 1 ? arguments[1] : void 0);
    };
    xi({
        target: "Array",
        proto: !0,
        forced: [].forEach != Su
    }, {
        forEach: Su
    });
    var Tu = Mo("Array").forEach, Mu = Jo, Pu = Vt, Du = tt, Bu = Tu, Iu = Array.prototype, zu = {
        DOMTokenList: !0,
        NodeList: !0
    }, Fu = function(t) {
        var e = t.forEach;
        return t === Iu || Du(Iu, t) && e === Iu.forEach || Pu(zu, Mu(t)) ? Bu : e;
    }, Nu = xi, Au = rh, Ru = y([].reverse), ju = [
        1,
        2
    ];
    Nu({
        target: "Array",
        proto: !0,
        forced: String(ju) === String(ju.reverse())
    }, {
        reverse: function() {
            return Au(this) && (this.length = this.length), Ru(this);
        }
    });
    var Lu = Mo("Array").reverse, Hu = tt, Wu = Lu, Vu = Array.prototype, qu = function(t) {
        var e = t.reverse;
        return t === Vu || Hu(Vu, t) && e === Vu.reverse ? Wu : e;
    }, Uu = qu, Yu = xi, Xu = n, Gu = Pi, Ku = Ci, $u = zi, Zu = Lt, Qu = Fh, Ju = ha, tf = oc("splice"), ef = Xu.TypeError, of = Math.max, nf = Math.min, rf = 9007199254740991, sf = "Maximum allowed length exceeded";
    Yu({
        target: "Array",
        proto: !0,
        forced: !tf
    }, {
        splice: function(t, e) {
            var i, o, n, r, s, a, h = Zu(this), d = $u(h), l = Gu(t, d), c = arguments.length;
            if (0 === c ? i = o = 0 : 1 === c ? (i = 0, o = d - l) : (i = c - 2, o = nf(of(Ku(e), 0), d - l)), d + i - o > rf) throw ef(sf);
            for(n = Qu(h, o), r = 0; r < o; r++)(s = l + r) in h && Ju(n, r, h[s]);
            if (n.length = o, i < o) {
                for(r = l; r < d - o; r++)a = r + i, (s = r + o) in h ? h[a] = h[s] : delete h[a];
                for(r = d; r > d - o + i; r--)delete h[r - 1];
            } else if (i > o) for(r = d - o; r > l; r--)a = r + i - 1, (s = r + o - 1) in h ? h[a] = h[s] : delete h[a];
            for(r = 0; r < i; r++)h[r + l] = arguments[r + 2];
            return h.length = d - o + i, n;
        }
    });
    var af = Mo("Array").splice, hf = tt, df = af, lf = Array.prototype, cf = function(t) {
        var e = t.splice;
        return t === lf || hf(lf, t) && e === lf.splice ? df : e;
    }, uf = cf, ff = ji.includes;
    xi({
        target: "Array",
        proto: !0
    }, {
        includes: function(t) {
            return ff(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var pf = Mo("Array").includes, vf = X, gf = z, yf = re("match"), mf = function(t) {
        var e;
        return vf(t) && (void 0 !== (e = t[yf]) ? !!e : "RegExp" == gf(t));
    }, bf = n.TypeError, wf = re("match"), kf = xi, _f = function(t) {
        if (mf(t)) throw bf("The method doesn't accept regular expressions");
        return t;
    }, xf = W, Ef = on, Of = function(t) {
        var e = /./;
        try {
            "/./"[t](e);
        } catch (i) {
            try {
                return e[wf] = !1, "/./"[t](e);
            } catch (t1) {}
        }
        return !1;
    }, Cf = y("".indexOf);
    kf({
        target: "String",
        proto: !0,
        forced: !Of("includes")
    }, {
        includes: function(t) {
            return !!~Cf(Ef(xf(this)), Ef(_f(t)), arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Sf = Mo("String").includes, Tf = tt, Mf = pf, Pf = Sf, Df = Array.prototype, Bf = String.prototype, If = function(t) {
        var e = t.includes;
        return t === Df || Tf(Df, t) && e === Df.includes ? Mf : "string" == typeof t || t === Bf || Tf(Bf, t) && e === Bf.includes ? Pf : e;
    }, zf = If, Ff = Lt, Nf = Dr, Af = _r;
    xi({
        target: "Object",
        stat: !0,
        forced: r(function() {
            Nf(1);
        }),
        sham: !Af
    }, {
        getPrototypeOf: function(t) {
            return Nf(Ff(t));
        }
    });
    var Rf = G.Object.getPrototypeOf, jf = Rf, Lf = Vh.filter;
    xi({
        target: "Array",
        proto: !0,
        forced: !oc("filter")
    }, {
        filter: function(t) {
            return Lf(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Hf = Mo("Array").filter, Wf = tt, Vf = Hf, qf = Array.prototype, Uf = function(t) {
        var e = t.filter;
        return t === qf || Wf(qf, t) && e === qf.filter ? Vf : e;
    }, Yf = Uf, Xf = w, Gf = y, Kf = $i, $f = U, Zf = Gf(E.f), Qf = Gf([].push), Jf = function(t) {
        return function(e) {
            for(var i, o = $f(e), n = Kf(o), r = n.length, s = 0, a = []; r > s;)i = n[s++], Xf && !Zf(o, i) || Qf(a, t ? [
                i,
                o[i]
            ] : o[i]);
            return a;
        };
    }, tp = {
        entries: Jf(!0),
        values: Jf(!1)
    }.values;
    xi({
        target: "Object",
        stat: !0
    }, {
        values: function(t) {
            return tp(t);
        }
    }), G.Object.values;
    var ep = "	\n\v\f\r \xa0              　\u2028\u2029\uFEFF", ip = W, op = on, np = y("".replace), rp = "[	\n\v\f\r \xa0              　\u2028\u2029\uFEFF]", sp = RegExp("^" + rp + rp + "*"), ap = RegExp(rp + rp + "*$"), hp = function(t) {
        return function(e) {
            var i = op(ip(e));
            return 1 & t && (i = np(i, sp, "")), 2 & t && (i = np(i, ap, "")), i;
        };
    }, dp = {
        start: hp(1),
        end: hp(2),
        trim: hp(3)
    }, lp = n, cp = r, up = y, fp = on, pp = dp.trim, vp = ep, gp = lp.parseInt, yp = lp.Symbol, mp = yp && yp.iterator, bp = /^[+-]?0x/i, wp = up(bp.exec), kp = 8 !== gp(vp + "08") || 22 !== gp(vp + "0x16") || mp && !cp(function() {
        gp(Object(mp));
    }) ? function(t, e) {
        var i = pp(fp(t));
        return gp(i, e >>> 0 || (wp(bp, i) ? 16 : 10));
    } : gp;
    xi({
        global: !0,
        forced: parseInt != kp
    }, {
        parseInt: kp
    });
    var _p = G.parseInt, xp = xi, Ep = ji.indexOf, Op = Ou, Cp = y([].indexOf), Sp = !!Cp && 1 / Cp([
        1
    ], 1, -0) < 0, Tp = Op("indexOf");
    xp({
        target: "Array",
        proto: !0,
        forced: Sp || !Tp
    }, {
        indexOf: function(t) {
            var e = arguments.length > 1 ? arguments[1] : void 0;
            return Sp ? Cp(this, t, e) || 0 : Ep(this, t, e);
        }
    });
    var Mp = Mo("Array").indexOf, Pp = tt, Dp = Mp, Bp = Array.prototype, Ip = function(t) {
        var e = t.indexOf;
        return t === Bp || Pp(Bp, t) && e === Bp.indexOf ? Dp : e;
    }, zp = Ip, Fp = Zn.PROPER, Np = r, Ap = ep, Rp = dp.trim;
    xi({
        target: "String",
        proto: !0,
        forced: function(t) {
            return Np(function() {
                return !!Ap[t]() || "​\x85᠎" !== "​\x85᠎"[t]() || Fp && Ap[t].name !== t;
            });
        }("trim")
    }, {
        trim: function() {
            return Rp(this);
        }
    }), Mo("String").trim, xi({
        target: "Object",
        stat: !0,
        sham: !w
    }, {
        create: kr
    });
    var jp = G.Object, Lp = function(t, e) {
        return jp.create(t, e);
    }, Hp = Lp, Wp = xi, Vp = J, qp = c, Up = y, Yp = r, Xp = n.Array, Gp = Vp("JSON", "stringify"), Kp = Up(/./.exec), $p = Up("".charAt), Zp = Up("".charCodeAt), Qp = Up("".replace), Jp = Up(1..toString), tv = /[\uD800-\uDFFF]/g, ev = /^[\uD800-\uDBFF]$/, iv = /^[\uDC00-\uDFFF]$/, ov = function(t, e, i) {
        var o = $p(i, e - 1), n = $p(i, e + 1);
        return Kp(ev, t) && !Kp(iv, n) || Kp(iv, t) && !Kp(ev, o) ? "\\u" + Jp(Zp(t, 0), 16) : t;
    }, nv = Yp(function() {
        return '"\udf06\ud834"' !== Gp("\udf06\ud834") || '"\udead"' !== Gp("\udead");
    });
    Gp && Wp({
        target: "JSON",
        stat: !0,
        forced: nv
    }, {
        stringify: function(t, e, i) {
            for(var o = 0, n = arguments.length, r = Xp(n); o < n; o++)r[o] = arguments[o];
            var s = qp(Gp, null, r);
            return "string" == typeof s ? Qp(s, tv, ov) : s;
        }
    });
    var rv = G, sv = c;
    rv.JSON || (rv.JSON = {
        stringify: JSON.stringify
    });
    var av = function(t, e, i) {
        return sv(rv.JSON.stringify, null, arguments);
    }, hv = av, dv = n.TypeError, lv = xi, cv = n, uv = c, fv = m, pv = po, vv = function(t, e) {
        if (t < e) throw dv("Not enough arguments");
        return t;
    }, gv = /MSIE .\./.test(et), yv = cv.Function, mv = function(t) {
        return function(e, i) {
            var o = vv(arguments.length, 1) > 2, n = fv(e) ? e : yv(e), r = o ? pv(arguments, 2) : void 0;
            return t(o ? function() {
                uv(n, this, r);
            } : n, i);
        };
    };
    lv({
        global: !0,
        bind: !0,
        forced: gv
    }, {
        setTimeout: mv(cv.setTimeout),
        setInterval: mv(cv.setInterval)
    });
    var bv = G.setTimeout, wv = Lt, kv = Pi, _v = zi, xv = function(t) {
        for(var e = wv(this), i = _v(e), o = arguments.length, n = kv(o > 1 ? arguments[1] : void 0, i), r = o > 2 ? arguments[2] : void 0, s = void 0 === r ? i : kv(r, i); s > n;)e[n++] = t;
        return e;
    };
    xi({
        target: "Array",
        proto: !0
    }, {
        fill: xv
    });
    var Ev, Ov = Mo("Array").fill, Cv = tt, Sv = Ov, Tv = Array.prototype, Mv = function(t) {
        var e = t.fill;
        return t === Tv || Cv(Tv, t) && e === Tv.fill ? Sv : e;
    }, Pv = Mv;
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
	 * http://naver.github.io/egjs
	 *
	 * Forked By Naver egjs
	 * Copyright (c) hammerjs
	 * Licensed under the MIT license */ function Dv() {
        return Dv = Object.assign || function(t) {
            for(var e = 1; e < arguments.length; e++){
                var i = arguments[e];
                for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && (t[o] = i[o]);
            }
            return t;
        }, Dv.apply(this, arguments);
    }
    function Bv(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    function Iv(t) {
        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t;
    }
    Ev = "function" != typeof Object.assign ? function(t) {
        if (null == t) throw new TypeError("Cannot convert undefined or null to object");
        for(var e = Object(t), i = 1; i < arguments.length; i++){
            var o = arguments[i];
            if (null != o) for(var n in o)o.hasOwnProperty(n) && (e[n] = o[n]);
        }
        return e;
    } : Object.assign;
    var zv, Fv = Ev, Nv = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ], Av = "undefined" == typeof document ? {
        style: {}
    } : document.createElement("div"), Rv = Math.round, jv = Math.abs, Lv = Date.now;
    function Hv(t, e) {
        for(var i, o, n = e[0].toUpperCase() + e.slice(1), r = 0; r < Nv.length;){
            if ((o = (i = Nv[r]) ? i + n : e) in t) return o;
            r++;
        }
    }
    zv = "undefined" == typeof window ? {} : window;
    var Wv = Hv(Av.style, "touchAction"), Vv = void 0 !== Wv;
    var qv = "compute", Uv = "auto", Yv = "manipulation", Xv = "none", Gv = "pan-x", Kv = "pan-y", $v = function() {
        if (!Vv) return !1;
        var t = {}, e = zv.CSS && zv.CSS.supports;
        return [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(i) {
            return t[i] = !e || zv.CSS.supports("touch-action", i);
        }), t;
    }(), Zv = "ontouchstart" in zv, Qv = void 0 !== Hv(zv, "PointerEvent"), Jv = Zv && /mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent), tg = "touch", eg = "mouse", ig = 16, og = 24, ng = [
        "x",
        "y"
    ], rg = [
        "clientX",
        "clientY"
    ];
    function sg(t, e, i) {
        var o;
        if (t) {
            if (t.forEach) t.forEach(e, i);
            else if (void 0 !== t.length) for(o = 0; o < t.length;)e.call(i, t[o], o, t), o++;
            else for(o in t)t.hasOwnProperty(o) && e.call(i, t[o], o, t);
        }
    }
    function ag(t, e) {
        return "function" == typeof t ? t.apply(e && e[0] || void 0, e) : t;
    }
    function hg(t, e) {
        return t.indexOf(e) > -1;
    }
    var dg = function() {
        function t(t, e) {
            this.manager = t, this.set(e);
        }
        var e = t.prototype;
        return e.set = function(t) {
            t === qv && (t = this.compute()), Vv && this.manager.element.style && $v[t] && (this.manager.element.style[Wv] = t), this.actions = t.toLowerCase().trim();
        }, e.update = function() {
            this.set(this.manager.options.touchAction);
        }, e.compute = function() {
            var t = [];
            return sg(this.manager.recognizers, function(e) {
                ag(e.options.enable, [
                    e
                ]) && (t = t.concat(e.getTouchAction()));
            }), function(t) {
                if (hg(t, Xv)) return Xv;
                var e = hg(t, Gv), i = hg(t, Kv);
                return e && i ? Xv : e || i ? e ? Gv : Kv : hg(t, Yv) ? Yv : Uv;
            }(t.join(" "));
        }, e.preventDefaults = function(t) {
            var e = t.srcEvent, i = t.offsetDirection;
            if (this.manager.session.prevented) e.preventDefault();
            else {
                var o = this.actions, n = hg(o, Xv) && !$v.none, r = hg(o, Kv) && !$v["pan-y"], s = hg(o, Gv) && !$v["pan-x"];
                if (n) {
                    var a = 1 === t.pointers.length, h = t.distance < 2, d = t.deltaTime < 250;
                    if (a && h && d) return;
                }
                if (!s || !r) return n || r && 6 & i || s && i & og ? this.preventSrc(e) : void 0;
            }
        }, e.preventSrc = function(t) {
            this.manager.session.prevented = !0, t.preventDefault();
        }, t;
    }();
    function lg(t, e) {
        for(; t;){
            if (t === e) return !0;
            t = t.parentNode;
        }
        return !1;
    }
    function cg(t) {
        var e = t.length;
        if (1 === e) return {
            x: Rv(t[0].clientX),
            y: Rv(t[0].clientY)
        };
        for(var i = 0, o = 0, n = 0; n < e;)i += t[n].clientX, o += t[n].clientY, n++;
        return {
            x: Rv(i / e),
            y: Rv(o / e)
        };
    }
    function ug(t) {
        for(var e = [], i = 0; i < t.pointers.length;)e[i] = {
            clientX: Rv(t.pointers[i].clientX),
            clientY: Rv(t.pointers[i].clientY)
        }, i++;
        return {
            timeStamp: Lv(),
            pointers: e,
            center: cg(e),
            deltaX: t.deltaX,
            deltaY: t.deltaY
        };
    }
    function fg(t, e, i) {
        i || (i = ng);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return Math.sqrt(o * o + n * n);
    }
    function pg(t, e, i) {
        i || (i = ng);
        var o = e[i[0]] - t[i[0]], n = e[i[1]] - t[i[1]];
        return 180 * Math.atan2(n, o) / Math.PI;
    }
    function vg(t, e) {
        return t === e ? 1 : jv(t) >= jv(e) ? t < 0 ? 2 : 4 : e < 0 ? 8 : ig;
    }
    function gg(t, e, i) {
        return {
            x: e / t || 0,
            y: i / t || 0
        };
    }
    function yg(t, e) {
        var i = t.session, o = e.pointers, n = o.length;
        i.firstInput || (i.firstInput = ug(e)), n > 1 && !i.firstMultiple ? i.firstMultiple = ug(e) : 1 === n && (i.firstMultiple = !1);
        var r = i.firstInput, s = i.firstMultiple, a = s ? s.center : r.center, h = e.center = cg(o);
        e.timeStamp = Lv(), e.deltaTime = e.timeStamp - r.timeStamp, e.angle = pg(a, h), e.distance = fg(a, h), function(t, e) {
            var i = e.center, o = t.offsetDelta || {}, n = t.prevDelta || {}, r = t.prevInput || {};
            1 !== e.eventType && 4 !== r.eventType || (n = t.prevDelta = {
                x: r.deltaX || 0,
                y: r.deltaY || 0
            }, o = t.offsetDelta = {
                x: i.x,
                y: i.y
            }), e.deltaX = n.x + (i.x - o.x), e.deltaY = n.y + (i.y - o.y);
        }(i, e), e.offsetDirection = vg(e.deltaX, e.deltaY);
        var d, l, c = gg(e.deltaTime, e.deltaX, e.deltaY);
        e.overallVelocityX = c.x, e.overallVelocityY = c.y, e.overallVelocity = jv(c.x) > jv(c.y) ? c.x : c.y, e.scale = s ? (d = s.pointers, fg((l = o)[0], l[1], rg) / fg(d[0], d[1], rg)) : 1, e.rotation = s ? function(t, e) {
            return pg(e[1], e[0], rg) + pg(t[1], t[0], rg);
        }(s.pointers, o) : 0, e.maxPointers = i.prevInput ? e.pointers.length > i.prevInput.maxPointers ? e.pointers.length : i.prevInput.maxPointers : e.pointers.length, function(t, e) {
            var i, o, n, r, s = t.lastInterval || e, a = e.timeStamp - s.timeStamp;
            if (8 !== e.eventType && (a > 25 || void 0 === s.velocity)) {
                var h = e.deltaX - s.deltaX, d = e.deltaY - s.deltaY, l = gg(a, h, d);
                o = l.x, n = l.y, i = jv(l.x) > jv(l.y) ? l.x : l.y, r = vg(h, d), t.lastInterval = e;
            } else i = s.velocity, o = s.velocityX, n = s.velocityY, r = s.direction;
            e.velocity = i, e.velocityX = o, e.velocityY = n, e.direction = r;
        }(i, e);
        var u, f = t.element, p = e.srcEvent;
        lg(u = p.composedPath ? p.composedPath()[0] : p.path ? p.path[0] : p.target, f) && (f = u), e.target = f;
    }
    function mg(t, e, i) {
        var o = i.pointers.length, n = i.changedPointers.length, r = 1 & e && o - n == 0, s = 12 & e && o - n == 0;
        i.isFirst = !!r, i.isFinal = !!s, r && (t.session = {}), i.eventType = e, yg(t, i), t.emit("hammer.input", i), t.recognize(i), t.session.prevInput = i;
    }
    function bg(t) {
        return t.trim().split(/\s+/g);
    }
    function wg(t, e, i) {
        sg(bg(e), function(e) {
            t.addEventListener(e, i, !1);
        });
    }
    function kg(t, e, i) {
        sg(bg(e), function(e) {
            t.removeEventListener(e, i, !1);
        });
    }
    function _g(t) {
        var e = t.ownerDocument || t;
        return e.defaultView || e.parentWindow || window;
    }
    var xg = function() {
        function t(t, e) {
            var i = this;
            this.manager = t, this.callback = e, this.element = t.element, this.target = t.options.inputTarget, this.domHandler = function(e) {
                ag(t.options.enable, [
                    t
                ]) && i.handler(e);
            }, this.init();
        }
        var e = t.prototype;
        return e.handler = function() {}, e.init = function() {
            this.evEl && wg(this.element, this.evEl, this.domHandler), this.evTarget && wg(this.target, this.evTarget, this.domHandler), this.evWin && wg(_g(this.element), this.evWin, this.domHandler);
        }, e.destroy = function() {
            this.evEl && kg(this.element, this.evEl, this.domHandler), this.evTarget && kg(this.target, this.evTarget, this.domHandler), this.evWin && kg(_g(this.element), this.evWin, this.domHandler);
        }, t;
    }();
    function Eg(t, e, i) {
        if (t.indexOf && !i) return t.indexOf(e);
        for(var o = 0; o < t.length;){
            if (i && t[o][i] == e || !i && t[o] === e) return o;
            o++;
        }
        return -1;
    }
    var Og = {
        pointerdown: 1,
        pointermove: 2,
        pointerup: 4,
        pointercancel: 8,
        pointerout: 8
    }, Cg = {
        2: tg,
        3: "pen",
        4: eg,
        5: "kinect"
    }, Sg = "pointerdown", Tg = "pointermove pointerup pointercancel";
    zv.MSPointerEvent && !zv.PointerEvent && (Sg = "MSPointerDown", Tg = "MSPointerMove MSPointerUp MSPointerCancel");
    var Mg = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evEl = Sg, o.evWin = Tg, (i = t.apply(this, arguments) || this).store = i.manager.session.pointerEvents = [], i;
        }
        return Bv(e, t), e.prototype.handler = function(t) {
            var e = this.store, i = !1, o = t.type.toLowerCase().replace("ms", ""), n = Og[o], r = Cg[t.pointerType] || t.pointerType, s = r === tg, a = Eg(e, t.pointerId, "pointerId");
            1 & n && (0 === t.button || s) ? a < 0 && (e.push(t), a = e.length - 1) : 12 & n && (i = !0), a < 0 || (e[a] = t, this.callback(this.manager, n, {
                pointers: e,
                changedPointers: [
                    t
                ],
                pointerType: r,
                srcEvent: t
            }), i && e.splice(a, 1));
        }, e;
    }(xg);
    function Pg(t) {
        return Array.prototype.slice.call(t, 0);
    }
    function Dg(t, e, i) {
        for(var o = [], n = [], r = 0; r < t.length;){
            var s = e ? t[r][e] : t[r];
            Eg(n, s) < 0 && o.push(t[r]), n[r] = s, r++;
        }
        return i && (o = e ? o.sort(function(t, i) {
            return t[e] > i[e];
        }) : o.sort()), o;
    }
    var Bg = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, Ig = "touchstart touchmove touchend touchcancel", zg = function(t) {
        function e() {
            var i;
            return e.prototype.evTarget = Ig, (i = t.apply(this, arguments) || this).targetIds = {}, i;
        }
        return Bv(e, t), e.prototype.handler = function(t) {
            var e = Bg[t.type], i = Fg.call(this, t, e);
            i && this.callback(this.manager, e, {
                pointers: i[0],
                changedPointers: i[1],
                pointerType: tg,
                srcEvent: t
            });
        }, e;
    }(xg);
    function Fg(t, e) {
        var i, o, n = Pg(t.touches), r = this.targetIds;
        if (3 & e && 1 === n.length) return r[n[0].identifier] = !0, [
            n,
            n
        ];
        var s = Pg(t.changedTouches), a = [], h = this.target;
        if (o = n.filter(function(t) {
            return lg(t.target, h);
        }), 1 === e) for(i = 0; i < o.length;)r[o[i].identifier] = !0, i++;
        for(i = 0; i < s.length;)r[s[i].identifier] && a.push(s[i]), 12 & e && delete r[s[i].identifier], i++;
        return a.length ? [
            Dg(o.concat(a), "identifier", !0),
            a
        ] : void 0;
    }
    var Ng = {
        mousedown: 1,
        mousemove: 2,
        mouseup: 4
    }, Ag = "mousedown", Rg = "mousemove mouseup", jg = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evEl = Ag, o.evWin = Rg, (i = t.apply(this, arguments) || this).pressed = !1, i;
        }
        return Bv(e, t), e.prototype.handler = function(t) {
            var e = Ng[t.type];
            1 & e && 0 === t.button && (this.pressed = !0), 2 & e && 1 !== t.which && (e = 4), this.pressed && (4 & e && (this.pressed = !1), this.callback(this.manager, e, {
                pointers: [
                    t
                ],
                changedPointers: [
                    t
                ],
                pointerType: eg,
                srcEvent: t
            }));
        }, e;
    }(xg);
    function Lg(t) {
        var e = t.changedPointers[0];
        if (e.identifier === this.primaryTouch) {
            var i = {
                x: e.clientX,
                y: e.clientY
            }, o = this.lastTouches;
            this.lastTouches.push(i);
            setTimeout(function() {
                var t = o.indexOf(i);
                t > -1 && o.splice(t, 1);
            }, 2500);
        }
    }
    function Hg(t, e) {
        1 & t ? (this.primaryTouch = e.changedPointers[0].identifier, Lg.call(this, e)) : 12 & t && Lg.call(this, e);
    }
    function Wg(t) {
        for(var e = t.srcEvent.clientX, i = t.srcEvent.clientY, o = 0; o < this.lastTouches.length; o++){
            var n = this.lastTouches[o], r = Math.abs(e - n.x), s = Math.abs(i - n.y);
            if (r <= 25 && s <= 25) return !0;
        }
        return !1;
    }
    var Vg = function() {
        return function(t) {
            function e(e, i) {
                var o;
                return (o = t.call(this, e, i) || this).handler = function(t, e, i) {
                    var n = i.pointerType === tg, r = i.pointerType === eg;
                    if (!(r && i.sourceCapabilities && i.sourceCapabilities.firesTouchEvents)) {
                        if (n) Hg.call(Iv(Iv(o)), e, i);
                        else if (r && Wg.call(Iv(Iv(o)), i)) return;
                        o.callback(t, e, i);
                    }
                }, o.touch = new zg(o.manager, o.handler), o.mouse = new jg(o.manager, o.handler), o.primaryTouch = null, o.lastTouches = [], o;
            }
            return Bv(e, t), e.prototype.destroy = function() {
                this.touch.destroy(), this.mouse.destroy();
            }, e;
        }(xg);
    }();
    function qg(t, e, i) {
        return !!Array.isArray(t) && (sg(t, i[e], i), !0);
    }
    var Ug = 32, Yg = 1;
    function Xg(t, e) {
        var i = e.manager;
        return i ? i.get(t) : t;
    }
    function Gg(t) {
        return 16 & t ? "cancel" : 8 & t ? "end" : 4 & t ? "move" : 2 & t ? "start" : "";
    }
    var Kg = function() {
        function t(t) {
            void 0 === t && (t = {}), this.options = Dv({
                enable: !0
            }, t), this.id = Yg++, this.manager = null, this.state = 1, this.simultaneous = {}, this.requireFail = [];
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Fv(this.options, t), this.manager && this.manager.touchAction.update(), this;
        }, e.recognizeWith = function(t) {
            if (qg(t, "recognizeWith", this)) return this;
            var e = this.simultaneous;
            return e[(t = Xg(t, this)).id] || (e[t.id] = t, t.recognizeWith(this)), this;
        }, e.dropRecognizeWith = function(t) {
            return qg(t, "dropRecognizeWith", this) || (t = Xg(t, this), delete this.simultaneous[t.id]), this;
        }, e.requireFailure = function(t) {
            if (qg(t, "requireFailure", this)) return this;
            var e = this.requireFail;
            return -1 === Eg(e, t = Xg(t, this)) && (e.push(t), t.requireFailure(this)), this;
        }, e.dropRequireFailure = function(t) {
            if (qg(t, "dropRequireFailure", this)) return this;
            t = Xg(t, this);
            var e = Eg(this.requireFail, t);
            return e > -1 && this.requireFail.splice(e, 1), this;
        }, e.hasRequireFailures = function() {
            return this.requireFail.length > 0;
        }, e.canRecognizeWith = function(t) {
            return !!this.simultaneous[t.id];
        }, e.emit = function(t) {
            var e = this, i = this.state;
            function o(i) {
                e.manager.emit(i, t);
            }
            i < 8 && o(e.options.event + Gg(i)), o(e.options.event), t.additionalEvent && o(t.additionalEvent), i >= 8 && o(e.options.event + Gg(i));
        }, e.tryEmit = function(t) {
            if (this.canEmit()) return this.emit(t);
            this.state = Ug;
        }, e.canEmit = function() {
            for(var t = 0; t < this.requireFail.length;){
                if (!(33 & this.requireFail[t].state)) return !1;
                t++;
            }
            return !0;
        }, e.recognize = function(t) {
            var e = Fv({}, t);
            if (!ag(this.options.enable, [
                this,
                e
            ])) return this.reset(), void (this.state = Ug);
            56 & this.state && (this.state = 1), this.state = this.process(e), 30 & this.state && this.tryEmit(e);
        }, e.process = function(t) {}, e.getTouchAction = function() {}, e.reset = function() {}, t;
    }(), $g = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Dv({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                time: 250,
                threshold: 9,
                posThreshold: 10
            }, e)) || this).pTime = !1, i.pCenter = !1, i._timer = null, i._input = null, i.count = 0, i;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Yv
            ];
        }, i.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime < i.time;
            if (this.reset(), 1 & t.eventType && 0 === this.count) return this.failTimeout();
            if (n && r && o) {
                if (4 !== t.eventType) return this.failTimeout();
                var s = !this.pTime || t.timeStamp - this.pTime < i.interval, a = !this.pCenter || fg(this.pCenter, t.center) < i.posThreshold;
                if (this.pTime = t.timeStamp, this.pCenter = t.center, a && s ? this.count += 1 : this.count = 1, this._input = t, 0 === this.count % i.taps) return this.hasRequireFailures() ? (this._timer = setTimeout(function() {
                    e.state = 8, e.tryEmit();
                }, i.interval), 2) : 8;
            }
            return Ug;
        }, i.failTimeout = function() {
            var t = this;
            return this._timer = setTimeout(function() {
                t.state = Ug;
            }, this.options.interval), Ug;
        }, i.reset = function() {
            clearTimeout(this._timer);
        }, i.emit = function() {
            8 === this.state && (this._input.tapCount = this.count, this.manager.emit(this.options.event, this._input));
        }, e;
    }(Kg), Zg = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Dv({
                pointers: 1
            }, e)) || this;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.attrTest = function(t) {
            var e = this.options.pointers;
            return 0 === e || t.pointers.length === e;
        }, i.process = function(t) {
            var e = this.state, i = t.eventType, o = 6 & e, n = this.attrTest(t);
            return o && (8 & i || !n) ? 16 | e : o || n ? 4 & i ? 8 | e : 2 & e ? 4 | e : 2 : Ug;
        }, e;
    }(Kg);
    function Qg(t) {
        return t === ig ? "down" : 8 === t ? "up" : 2 === t ? "left" : 4 === t ? "right" : "";
    }
    var Jg = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Dv({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: 30
            }, e)) || this).pX = null, i.pY = null, i;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            var t = this.options.direction, e = [];
            return 6 & t && e.push(Kv), t & og && e.push(Gv), e;
        }, i.directionTest = function(t) {
            var e = this.options, i = !0, o = t.distance, n = t.direction, r = t.deltaX, s = t.deltaY;
            return n & e.direction || (6 & e.direction ? (n = 0 === r ? 1 : r < 0 ? 2 : 4, i = r !== this.pX, o = Math.abs(t.deltaX)) : (n = 0 === s ? 1 : s < 0 ? 8 : ig, i = s !== this.pY, o = Math.abs(t.deltaY))), t.direction = n, i && o > e.threshold && n & e.direction;
        }, i.attrTest = function(t) {
            return Zg.prototype.attrTest.call(this, t) && (2 & this.state || !(2 & this.state) && this.directionTest(t));
        }, i.emit = function(e) {
            this.pX = e.deltaX, this.pY = e.deltaY;
            var i = Qg(e.direction);
            i && (e.additionalEvent = this.options.event + i), t.prototype.emit.call(this, e);
        }, e;
    }(Zg), ty = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Dv({
                event: "swipe",
                threshold: 10,
                velocity: .3,
                direction: 30,
                pointers: 1
            }, e)) || this;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return Jg.prototype.getTouchAction.call(this);
        }, i.attrTest = function(e) {
            var i, o = this.options.direction;
            return 30 & o ? i = e.overallVelocity : 6 & o ? i = e.overallVelocityX : o & og && (i = e.overallVelocityY), t.prototype.attrTest.call(this, e) && o & e.offsetDirection && e.distance > this.options.threshold && e.maxPointers === this.options.pointers && jv(i) > this.options.velocity && 4 & e.eventType;
        }, i.emit = function(t) {
            var e = Qg(t.offsetDirection);
            e && this.manager.emit(this.options.event + e, t), this.manager.emit(this.options.event, t);
        }, e;
    }(Zg), ey = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Dv({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Xv
            ];
        }, i.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.scale - 1) > this.options.threshold || 2 & this.state);
        }, i.emit = function(e) {
            if (1 !== e.scale) {
                var i = e.scale < 1 ? "in" : "out";
                e.additionalEvent = this.options.event + i;
            }
            t.prototype.emit.call(this, e);
        }, e;
    }(Zg), iy = function(t) {
        function e(e) {
            return void 0 === e && (e = {}), t.call(this, Dv({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, e)) || this;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Xv
            ];
        }, i.attrTest = function(e) {
            return t.prototype.attrTest.call(this, e) && (Math.abs(e.rotation) > this.options.threshold || 2 & this.state);
        }, e;
    }(Zg), oy = function(t) {
        function e(e) {
            var i;
            return void 0 === e && (e = {}), (i = t.call(this, Dv({
                event: "press",
                pointers: 1,
                time: 251,
                threshold: 9
            }, e)) || this)._timer = null, i._input = null, i;
        }
        Bv(e, t);
        var i = e.prototype;
        return i.getTouchAction = function() {
            return [
                Uv
            ];
        }, i.process = function(t) {
            var e = this, i = this.options, o = t.pointers.length === i.pointers, n = t.distance < i.threshold, r = t.deltaTime > i.time;
            if (this._input = t, !n || !o || 12 & t.eventType && !r) this.reset();
            else if (1 & t.eventType) this.reset(), this._timer = setTimeout(function() {
                e.state = 8, e.tryEmit();
            }, i.time);
            else if (4 & t.eventType) return 8;
            return Ug;
        }, i.reset = function() {
            clearTimeout(this._timer);
        }, i.emit = function(t) {
            8 === this.state && (t && 4 & t.eventType ? this.manager.emit(this.options.event + "up", t) : (this._input.timeStamp = Lv(), this.manager.emit(this.options.event, this._input)));
        }, e;
    }(Kg), ny = {
        domEvents: !1,
        touchAction: qv,
        enable: !0,
        inputTarget: null,
        inputClass: null,
        cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
        }
    }, ry = [
        [
            iy,
            {
                enable: !1
            }
        ],
        [
            ey,
            {
                enable: !1
            },
            [
                "rotate"
            ]
        ],
        [
            ty,
            {
                direction: 6
            }
        ],
        [
            Jg,
            {
                direction: 6
            },
            [
                "swipe"
            ]
        ],
        [
            $g
        ],
        [
            $g,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            oy
        ]
    ];
    function sy(t, e) {
        var i, o = t.element;
        o.style && (sg(t.options.cssProps, function(n, r) {
            i = Hv(o.style, r), e ? (t.oldCssProps[i] = o.style[i], o.style[i] = n) : o.style[i] = t.oldCssProps[i] || "";
        }), e || (t.oldCssProps = {}));
    }
    var ay = function() {
        function t(t, e) {
            var i, o = this;
            this.options = Fv({}, ny, e || {}), this.options.inputTarget = this.options.inputTarget || t, this.handlers = {}, this.session = {}, this.recognizers = [], this.oldCssProps = {}, this.element = t, this.input = new ((i = this).options.inputClass || (Qv ? Mg : Jv ? zg : Zv ? Vg : jg))(i, mg), this.touchAction = new dg(this, this.options.touchAction), sy(this, !0), sg(this.options.recognizers, function(t) {
                var e = o.add(new t[0](t[1]));
                t[2] && e.recognizeWith(t[2]), t[3] && e.requireFailure(t[3]);
            }, this);
        }
        var e = t.prototype;
        return e.set = function(t) {
            return Fv(this.options, t), t.touchAction && this.touchAction.update(), t.inputTarget && (this.input.destroy(), this.input.target = t.inputTarget, this.input.init()), this;
        }, e.stop = function(t) {
            this.session.stopped = t ? 2 : 1;
        }, e.recognize = function(t) {
            var e = this.session;
            if (!e.stopped) {
                var i;
                this.touchAction.preventDefaults(t);
                var o = this.recognizers, n = e.curRecognizer;
                (!n || n && 8 & n.state) && (e.curRecognizer = null, n = null);
                for(var r = 0; r < o.length;)i = o[r], 2 === e.stopped || n && i !== n && !i.canRecognizeWith(n) ? i.reset() : i.recognize(t), !n && 14 & i.state && (e.curRecognizer = i, n = i), r++;
            }
        }, e.get = function(t) {
            if (t instanceof Kg) return t;
            for(var e = this.recognizers, i = 0; i < e.length; i++)if (e[i].options.event === t) return e[i];
            return null;
        }, e.add = function(t) {
            if (qg(t, "add", this)) return this;
            var e = this.get(t.options.event);
            return e && this.remove(e), this.recognizers.push(t), t.manager = this, this.touchAction.update(), t;
        }, e.remove = function(t) {
            if (qg(t, "remove", this)) return this;
            var e = this.get(t);
            if (t) {
                var i = this.recognizers, o = Eg(i, e);
                -1 !== o && (i.splice(o, 1), this.touchAction.update());
            }
            return this;
        }, e.on = function(t, e) {
            if (void 0 === t || void 0 === e) return this;
            var i = this.handlers;
            return sg(bg(t), function(t) {
                i[t] = i[t] || [], i[t].push(e);
            }), this;
        }, e.off = function(t, e) {
            if (void 0 === t) return this;
            var i = this.handlers;
            return sg(bg(t), function(t) {
                e ? i[t] && i[t].splice(Eg(i[t], e), 1) : delete i[t];
            }), this;
        }, e.emit = function(t, e) {
            this.options.domEvents && function(t, e) {
                var i = document.createEvent("Event");
                i.initEvent(t, !0, !0), i.gesture = e, e.target.dispatchEvent(i);
            }(t, e);
            var i = this.handlers[t] && this.handlers[t].slice();
            if (i && i.length) {
                e.type = t, e.preventDefault = function() {
                    e.srcEvent.preventDefault();
                };
                for(var o = 0; o < i.length;)i[o](e), o++;
            }
        }, e.destroy = function() {
            this.element && sy(this, !1), this.handlers = {}, this.session = {}, this.input.destroy(), this.element = null;
        }, t;
    }(), hy = {
        touchstart: 1,
        touchmove: 2,
        touchend: 4,
        touchcancel: 8
    }, dy = "touchstart", ly = "touchstart touchmove touchend touchcancel", cy = function(t) {
        function e() {
            var i, o = e.prototype;
            return o.evTarget = dy, o.evWin = ly, (i = t.apply(this, arguments) || this).started = !1, i;
        }
        return Bv(e, t), e.prototype.handler = function(t) {
            var e = hy[t.type];
            if (1 === e && (this.started = !0), this.started) {
                var i = uy.call(this, t, e);
                12 & e && i[0].length - i[1].length == 0 && (this.started = !1), this.callback(this.manager, e, {
                    pointers: i[0],
                    changedPointers: i[1],
                    pointerType: tg,
                    srcEvent: t
                });
            }
        }, e;
    }(xg);
    function uy(t, e) {
        var i = Pg(t.touches), o = Pg(t.changedTouches);
        return 12 & e && (i = Dg(i.concat(o), "identifier", !0)), [
            i,
            o
        ];
    }
    function fy(t, e, i) {
        var o = "DEPRECATED METHOD: " + e + "\n" + i + " AT \n";
        return function() {
            var e = new Error("get-stack-trace"), i = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace", n = window.console && (window.console.warn || window.console.log);
            return n && n.call(window.console, o, i), t.apply(this, arguments);
        };
    }
    var py = fy(function(t, e, i) {
        for(var o = Object.keys(e), n = 0; n < o.length;)(!i || i && void 0 === t[o[n]]) && (t[o[n]] = e[o[n]]), n++;
        return t;
    }, "extend", "Use `assign`."), vy = fy(function(t, e) {
        return py(t, e, !0);
    }, "merge", "Use `assign`.");
    function gy(t, e, i) {
        var o, n = e.prototype;
        (o = t.prototype = Object.create(n)).constructor = t, o._super = n, i && Fv(o, i);
    }
    function yy(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }
    var my = function() {
        var t = function(t, e) {
            return void 0 === e && (e = {}), new ay(t, Dv({
                recognizers: ry.concat()
            }, e));
        };
        return t.VERSION = "2.0.17-rc", t.DIRECTION_ALL = 30, t.DIRECTION_DOWN = ig, t.DIRECTION_LEFT = 2, t.DIRECTION_RIGHT = 4, t.DIRECTION_UP = 8, t.DIRECTION_HORIZONTAL = 6, t.DIRECTION_VERTICAL = og, t.DIRECTION_NONE = 1, t.DIRECTION_DOWN = ig, t.INPUT_START = 1, t.INPUT_MOVE = 2, t.INPUT_END = 4, t.INPUT_CANCEL = 8, t.STATE_POSSIBLE = 1, t.STATE_BEGAN = 2, t.STATE_CHANGED = 4, t.STATE_ENDED = 8, t.STATE_RECOGNIZED = 8, t.STATE_CANCELLED = 16, t.STATE_FAILED = Ug, t.Manager = ay, t.Input = xg, t.TouchAction = dg, t.TouchInput = zg, t.MouseInput = jg, t.PointerEventInput = Mg, t.TouchMouseInput = Vg, t.SingleTouchInput = cy, t.Recognizer = Kg, t.AttrRecognizer = Zg, t.Tap = $g, t.Pan = Jg, t.Swipe = ty, t.Pinch = ey, t.Rotate = iy, t.Press = oy, t.on = wg, t.off = kg, t.each = sg, t.merge = vy, t.extend = py, t.bindFn = yy, t.assign = Fv, t.inherit = gy, t.bindFn = yy, t.prefixed = Hv, t.toArray = Pg, t.inArray = Eg, t.uniqueArray = Dg, t.splitStr = bg, t.boolOrFn = ag, t.hasParent = lg, t.addEventListeners = wg, t.removeEventListeners = kg, t.defaults = Fv({}, ny, {
            preset: ry
        }), t;
    }(), by = my;
    function wy(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return ky(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return ky(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function ky(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function _y() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        return xy(e.length ? e : [
            xu()
        ]);
    }
    function xy(t) {
        var e = function() {
            for(var t = Ey(), e = t(" "), i = t(" "), o = t(" "), n = 0; n < arguments.length; n++)(e -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (e += 1), (i -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (i += 1), (o -= t(n < 0 || arguments.length <= n ? void 0 : arguments[n])) < 0 && (o += 1);
            return [
                e,
                i,
                o
            ];
        }(t), i = $c(e, 3), o = i[0], n = i[1], r = i[2], s = 1, a = function() {
            var t = 2091639 * o + 2.3283064365386963e-10 * s;
            return o = n, n = r, r = t - (s = 0 | t);
        };
        return a.uint32 = function() {
            return 4294967296 * a();
        }, a.fract53 = function() {
            return a() + 11102230246251565e-32 * (2097152 * a() | 0);
        }, a.algorithm = "Alea", a.seed = t, a.version = "0.9", a;
    }
    function Ey() {
        var t = 4022871197;
        return function(e) {
            for(var i = e.toString(), o = 0; o < i.length; o++){
                var n = .02519603282416938 * (t += i.charCodeAt(o));
                n -= t = n >>> 0, t = (n *= t) >>> 0, t += 4294967296 * (n -= t);
            }
            return 2.3283064365386963e-10 * (t >>> 0);
        };
    }
    tu("DELETE");
    var Oy = "undefined" != typeof window ? window.Hammer || by : function() {
        return function() {
            var t = function() {};
            return {
                on: t,
                off: t,
                destroy: t,
                emit: t,
                get: function() {
                    return {
                        set: t
                    };
                }
            };
        }();
    };
    function Cy(t) {
        var e, i = this;
        this._cleanupQueue = [], this.active = !1, this._dom = {
            container: t,
            overlay: document.createElement("div")
        }, this._dom.overlay.classList.add("vis-overlay"), this._dom.container.appendChild(this._dom.overlay), this._cleanupQueue.push(function() {
            i._dom.overlay.parentNode.removeChild(i._dom.overlay);
        });
        var o = Oy(this._dom.overlay);
        o.on("tap", Fo(e = this._onTapOverlay).call(e, this)), this._cleanupQueue.push(function() {
            o.destroy();
        });
        var n = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        Fu(n).call(n, function(t) {
            o.on(t, function(t) {
                t.srcEvent.stopPropagation();
            });
        }), document && document.body && (this._onClick = function(e) {
            (function(t, e) {
                for(; t;){
                    if (t === e) return !0;
                    t = t.parentNode;
                }
                return !1;
            })(e.target, t) || i.deactivate();
        }, document.body.addEventListener("click", this._onClick), this._cleanupQueue.push(function() {
            document.body.removeEventListener("click", i._onClick);
        })), this._escListener = function(t) {
            ("key" in t ? "Escape" === t.key : 27 === t.keyCode) && i.deactivate();
        };
    }
    Vo(Cy.prototype), Cy.current = null, Cy.prototype.destroy = function() {
        var t, e;
        this.deactivate();
        var i, o = wy(Uu(t = uf(e = this._cleanupQueue).call(e, 0)).call(t));
        try {
            for(o.s(); !(i = o.n()).done;)(0, i.value)();
        } catch (t1) {
            o.e(t1);
        } finally{
            o.f();
        }
    }, Cy.prototype.activate = function() {
        Cy.current && Cy.current.deactivate(), Cy.current = this, this.active = !0, this._dom.overlay.style.display = "none", this._dom.container.classList.add("vis-active"), this.emit("change"), this.emit("activate"), document.body.addEventListener("keydown", this._escListener);
    }, Cy.prototype.deactivate = function() {
        this.active = !1, this._dom.overlay.style.display = "block", this._dom.container.classList.remove("vis-active"), document.body.removeEventListener("keydown", this._escListener), this.emit("change"), this.emit("deactivate");
    }, Cy.prototype._onTapOverlay = function(t) {
        this.activate(), t.srcEvent.stopPropagation();
    };
    var Sy = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, Ty = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, My = /^rgb\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *\)$/i, Py = /^rgba\( *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *(1?\d{1,2}|2[0-4]\d|25[0-5]) *, *([01]|0?\.\d+) *\)$/i;
    function Dy(t) {
        if (t) for(; !0 === t.hasChildNodes();){
            var e = t.firstChild;
            e && (Dy(e), t.removeChild(e));
        }
    }
    function By(t) {
        return t instanceof String || "string" == typeof t;
    }
    function Iy(t) {
        return "object" === Qc(t) && null !== t;
    }
    function zy(t, e, i, o) {
        var n = !1;
        !0 === o && (n = null === e[i] && void 0 !== t[i]), n ? delete t[i] : t[i] = e[i];
    }
    function Fy(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        for(var o in t)if (void 0 !== e[o]) {
            if (null === e[o] || "object" !== Qc(e[o])) zy(t, e, o, i);
            else {
                var n = t[o], r = e[o];
                Iy(n) && Iy(r) && Fy(n, r, i);
            }
        }
    }
    function Ny(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (hu(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n = 0; n < t.length; n++){
            var r = t[n];
            if (Object.prototype.hasOwnProperty.call(i, r)) {
                if (i[r] && i[r].constructor === Object) void 0 === e[r] && (e[r] = {}), e[r].constructor === Object ? Ry(e[r], i[r], !1, o) : zy(e, i, r, o);
                else {
                    if (hu(i[r])) throw new TypeError("Arrays are not supported by deepExtend");
                    zy(e, i, r, o);
                }
            }
        }
        return e;
    }
    function Ay(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        if (hu(i)) throw new TypeError("Arrays are not supported by deepExtend");
        for(var n in i)if (Object.prototype.hasOwnProperty.call(i, n) && !zf(t).call(t, n)) {
            if (i[n] && i[n].constructor === Object) void 0 === e[n] && (e[n] = {}), e[n].constructor === Object ? Ry(e[n], i[n]) : zy(e, i, n, o);
            else if (hu(i[n])) {
                e[n] = [];
                for(var r = 0; r < i[n].length; r++)e[n].push(i[n][r]);
            } else zy(e, i, n, o);
        }
        return e;
    }
    function Ry(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        for(var n in e)if (Object.prototype.hasOwnProperty.call(e, n) || !0 === i) {
            if ("object" === Qc(e[n]) && null !== e[n] && jf(e[n]) === Object.prototype) void 0 === t[n] ? t[n] = Ry({}, e[n], i) : "object" === Qc(t[n]) && null !== t[n] && jf(t[n]) === Object.prototype ? Ry(t[n], e[n], i) : zy(t, e, n, o);
            else if (hu(e[n])) {
                var r;
                t[n] = au(r = e[n]).call(r);
            } else zy(t, e, n, o);
        }
        return t;
    }
    function jy(t, e) {
        var i;
        return su(i = []).call(i, Jc(t), [
            e
        ]);
    }
    function Ly(t) {
        return au(t).call(t);
    }
    function Hy(t) {
        return t.getBoundingClientRect().top;
    }
    function Wy(t, e) {
        if (hu(t)) for(var i = t.length, o = 0; o < i; o++)e(t[o], o, t);
        else for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && e(t[n], n, t);
    }
    function Vy(t) {
        var e;
        switch(t.length){
            case 3:
            case 4:
                return (e = Ty.exec(t)) ? {
                    r: _p(e[1] + e[1], 16),
                    g: _p(e[2] + e[2], 16),
                    b: _p(e[3] + e[3], 16)
                } : null;
            case 6:
            case 7:
                return (e = Sy.exec(t)) ? {
                    r: _p(e[1], 16),
                    g: _p(e[2], 16),
                    b: _p(e[3], 16)
                } : null;
            default:
                return null;
        }
    }
    function qy(t, e) {
        if (zf(t).call(t, "rgba")) return t;
        if (zf(t).call(t, "rgb")) {
            var i = t.substr(zp(t).call(t, "(") + 1).replace(")", "").split(",");
            return "rgba(" + i[0] + "," + i[1] + "," + i[2] + "," + e + ")";
        }
        var o = Vy(t);
        return null == o ? t : "rgba(" + o.r + "," + o.g + "," + o.b + "," + e + ")";
    }
    function Uy(t, e, i) {
        var o;
        return "#" + au(o = (16777216 + (t << 16) + (e << 8) + i).toString(16)).call(o, 1);
    }
    function Yy(t, e) {
        if (By(t)) {
            var i = t;
            if (Zy(i)) {
                var o, n = vu(o = i.substr(4).substr(0, i.length - 5).split(",")).call(o, function(t) {
                    return _p(t);
                });
                i = Uy(n[0], n[1], n[2]);
            }
            if (!0 === $y(i)) {
                var r = function(t) {
                    var e = Vy(t);
                    if (!e) throw new TypeError("'".concat(t, "' is not a valid color."));
                    return Xy(e.r, e.g, e.b);
                }(i), s = {
                    h: r.h,
                    s: .8 * r.s,
                    v: Math.min(1, 1.02 * r.v)
                }, a = {
                    h: r.h,
                    s: Math.min(1, 1.25 * r.s),
                    v: .8 * r.v
                }, h = Ky(a.h, a.s, a.v), d = Ky(s.h, s.s, s.v);
                return {
                    background: i,
                    border: h,
                    highlight: {
                        background: d,
                        border: h
                    },
                    hover: {
                        background: d,
                        border: h
                    }
                };
            }
            return {
                background: i,
                border: i,
                highlight: {
                    background: i,
                    border: i
                },
                hover: {
                    background: i,
                    border: i
                }
            };
        }
        return e ? {
            background: t.background || e.background,
            border: t.border || e.border,
            highlight: By(t.highlight) ? {
                border: t.highlight,
                background: t.highlight
            } : {
                background: t.highlight && t.highlight.background || e.highlight.background,
                border: t.highlight && t.highlight.border || e.highlight.border
            },
            hover: By(t.hover) ? {
                border: t.hover,
                background: t.hover
            } : {
                border: t.hover && t.hover.border || e.hover.border,
                background: t.hover && t.hover.background || e.hover.background
            }
        } : {
            background: t.background || void 0,
            border: t.border || void 0,
            highlight: By(t.highlight) ? {
                border: t.highlight,
                background: t.highlight
            } : {
                background: t.highlight && t.highlight.background || void 0,
                border: t.highlight && t.highlight.border || void 0
            },
            hover: By(t.hover) ? {
                border: t.hover,
                background: t.hover
            } : {
                border: t.hover && t.hover.border || void 0,
                background: t.hover && t.hover.background || void 0
            }
        };
    }
    function Xy(t, e, i) {
        t /= 255, e /= 255, i /= 255;
        var o = Math.min(t, Math.min(e, i)), n = Math.max(t, Math.max(e, i));
        return o === n ? {
            h: 0,
            s: 0,
            v: o
        } : {
            h: 60 * ((t === o ? 3 : i === o ? 1 : 5) - (t === o ? e - i : i === o ? t - e : i - t) / (n - o)) / 360,
            s: (n - o) / n,
            v: n
        };
    }
    function Gy(t, e, i) {
        var o, n, r, s = Math.floor(6 * t), a = 6 * t - s, h = i * (1 - e), d = i * (1 - a * e), l = i * (1 - (1 - a) * e);
        switch(s % 6){
            case 0:
                o = i, n = l, r = h;
                break;
            case 1:
                o = d, n = i, r = h;
                break;
            case 2:
                o = h, n = i, r = l;
                break;
            case 3:
                o = h, n = d, r = i;
                break;
            case 4:
                o = l, n = h, r = i;
                break;
            case 5:
                o = i, n = h, r = d;
        }
        return {
            r: Math.floor(255 * o),
            g: Math.floor(255 * n),
            b: Math.floor(255 * r)
        };
    }
    function Ky(t, e, i) {
        var o = Gy(t, e, i);
        return Uy(o.r, o.g, o.b);
    }
    function $y(t) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);
    }
    function Zy(t) {
        return My.test(t);
    }
    function Qy(t) {
        return Py.test(t);
    }
    function Jy(t) {
        if (null === t || "object" !== Qc(t)) return null;
        if (t instanceof Element) return t;
        var e = Hp(t);
        for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && "object" == Qc(t[i]) && (e[i] = Jy(t[i]));
        return e;
    }
    function tm(t, e, i) {
        var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, n = function(t) {
            return null != t;
        }, r = function(t) {
            return null !== t && "object" === Qc(t);
        }, s = function(t) {
            for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
            return !0;
        };
        if (!r(t)) throw new Error("Parameter mergeTarget must be an object");
        if (!r(e)) throw new Error("Parameter options must be an object");
        if (!n(i)) throw new Error("Parameter option must have a value");
        if (!r(o)) throw new Error("Parameter globalOptions must be an object");
        var a = function(t, e, i) {
            r(t[i]) || (t[i] = {});
            var o = e[i], n = t[i];
            for(var s in o)Object.prototype.hasOwnProperty.call(o, s) && (n[s] = o[s]);
        }, h = e[i], d = r(o) && !s(o), l = d ? o[i] : void 0, c = l ? l.enabled : void 0;
        if (void 0 !== h) {
            if ("boolean" == typeof h) return r(t[i]) || (t[i] = {}), void (t[i].enabled = h);
            if (null === h && !r(t[i])) {
                if (!n(l)) return;
                t[i] = Hp(l);
            }
            if (r(h)) {
                var u = !0;
                void 0 !== h.enabled ? u = h.enabled : void 0 !== c && (u = l.enabled), a(t, e, i), t[i].enabled = u;
            }
        }
    }
    var em = {
        linear: function(t) {
            return t;
        },
        easeInQuad: function(t) {
            return t * t;
        },
        easeOutQuad: function(t) {
            return t * (2 - t);
        },
        easeInOutQuad: function(t) {
            return t < .5 ? 2 * t * t : (4 - 2 * t) * t - 1;
        },
        easeInCubic: function(t) {
            return t * t * t;
        },
        easeOutCubic: function(t) {
            return --t * t * t + 1;
        },
        easeInOutCubic: function(t) {
            return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
        },
        easeInQuart: function(t) {
            return t * t * t * t;
        },
        easeOutQuart: function(t) {
            return 1 - --t * t * t * t;
        },
        easeInOutQuart: function(t) {
            return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
        },
        easeInQuint: function(t) {
            return t * t * t * t * t;
        },
        easeOutQuint: function(t) {
            return 1 + --t * t * t * t * t;
        },
        easeInOutQuint: function(t) {
            return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
        }
    };
    function im(t, e) {
        var i;
        hu(e) || (e = [
            e
        ]);
        var o, n = wy(t);
        try {
            for(n.s(); !(o = n.n()).done;){
                var r = o.value;
                if (r) {
                    i = r[e[0]];
                    for(var s = 1; s < e.length; s++)i && (i = i[e[s]]);
                    if (void 0 !== i) break;
                }
            }
        } catch (t1) {
            n.e(t1);
        } finally{
            n.f();
        }
        return i;
    }
    var om = {
        black: "#000000",
        navy: "#000080",
        darkblue: "#00008B",
        mediumblue: "#0000CD",
        blue: "#0000FF",
        darkgreen: "#006400",
        green: "#008000",
        teal: "#008080",
        darkcyan: "#008B8B",
        deepskyblue: "#00BFFF",
        darkturquoise: "#00CED1",
        mediumspringgreen: "#00FA9A",
        lime: "#00FF00",
        springgreen: "#00FF7F",
        aqua: "#00FFFF",
        cyan: "#00FFFF",
        midnightblue: "#191970",
        dodgerblue: "#1E90FF",
        lightseagreen: "#20B2AA",
        forestgreen: "#228B22",
        seagreen: "#2E8B57",
        darkslategray: "#2F4F4F",
        limegreen: "#32CD32",
        mediumseagreen: "#3CB371",
        turquoise: "#40E0D0",
        royalblue: "#4169E1",
        steelblue: "#4682B4",
        darkslateblue: "#483D8B",
        mediumturquoise: "#48D1CC",
        indigo: "#4B0082",
        darkolivegreen: "#556B2F",
        cadetblue: "#5F9EA0",
        cornflowerblue: "#6495ED",
        mediumaquamarine: "#66CDAA",
        dimgray: "#696969",
        slateblue: "#6A5ACD",
        olivedrab: "#6B8E23",
        slategray: "#708090",
        lightslategray: "#778899",
        mediumslateblue: "#7B68EE",
        lawngreen: "#7CFC00",
        chartreuse: "#7FFF00",
        aquamarine: "#7FFFD4",
        maroon: "#800000",
        purple: "#800080",
        olive: "#808000",
        gray: "#808080",
        skyblue: "#87CEEB",
        lightskyblue: "#87CEFA",
        blueviolet: "#8A2BE2",
        darkred: "#8B0000",
        darkmagenta: "#8B008B",
        saddlebrown: "#8B4513",
        darkseagreen: "#8FBC8F",
        lightgreen: "#90EE90",
        mediumpurple: "#9370D8",
        darkviolet: "#9400D3",
        palegreen: "#98FB98",
        darkorchid: "#9932CC",
        yellowgreen: "#9ACD32",
        sienna: "#A0522D",
        brown: "#A52A2A",
        darkgray: "#A9A9A9",
        lightblue: "#ADD8E6",
        greenyellow: "#ADFF2F",
        paleturquoise: "#AFEEEE",
        lightsteelblue: "#B0C4DE",
        powderblue: "#B0E0E6",
        firebrick: "#B22222",
        darkgoldenrod: "#B8860B",
        mediumorchid: "#BA55D3",
        rosybrown: "#BC8F8F",
        darkkhaki: "#BDB76B",
        silver: "#C0C0C0",
        mediumvioletred: "#C71585",
        indianred: "#CD5C5C",
        peru: "#CD853F",
        chocolate: "#D2691E",
        tan: "#D2B48C",
        lightgrey: "#D3D3D3",
        palevioletred: "#D87093",
        thistle: "#D8BFD8",
        orchid: "#DA70D6",
        goldenrod: "#DAA520",
        crimson: "#DC143C",
        gainsboro: "#DCDCDC",
        plum: "#DDA0DD",
        burlywood: "#DEB887",
        lightcyan: "#E0FFFF",
        lavender: "#E6E6FA",
        darksalmon: "#E9967A",
        violet: "#EE82EE",
        palegoldenrod: "#EEE8AA",
        lightcoral: "#F08080",
        khaki: "#F0E68C",
        aliceblue: "#F0F8FF",
        honeydew: "#F0FFF0",
        azure: "#F0FFFF",
        sandybrown: "#F4A460",
        wheat: "#F5DEB3",
        beige: "#F5F5DC",
        whitesmoke: "#F5F5F5",
        mintcream: "#F5FFFA",
        ghostwhite: "#F8F8FF",
        salmon: "#FA8072",
        antiquewhite: "#FAEBD7",
        linen: "#FAF0E6",
        lightgoldenrodyellow: "#FAFAD2",
        oldlace: "#FDF5E6",
        red: "#FF0000",
        fuchsia: "#FF00FF",
        magenta: "#FF00FF",
        deeppink: "#FF1493",
        orangered: "#FF4500",
        tomato: "#FF6347",
        hotpink: "#FF69B4",
        coral: "#FF7F50",
        darkorange: "#FF8C00",
        lightsalmon: "#FFA07A",
        orange: "#FFA500",
        lightpink: "#FFB6C1",
        pink: "#FFC0CB",
        gold: "#FFD700",
        peachpuff: "#FFDAB9",
        navajowhite: "#FFDEAD",
        moccasin: "#FFE4B5",
        bisque: "#FFE4C4",
        mistyrose: "#FFE4E1",
        blanchedalmond: "#FFEBCD",
        papayawhip: "#FFEFD5",
        lavenderblush: "#FFF0F5",
        seashell: "#FFF5EE",
        cornsilk: "#FFF8DC",
        lemonchiffon: "#FFFACD",
        floralwhite: "#FFFAF0",
        snow: "#FFFAFA",
        yellow: "#FFFF00",
        lightyellow: "#FFFFE0",
        ivory: "#FFFFF0",
        white: "#FFFFFF"
    }, nm = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
            Xl(this, t), this.pixelRatio = e, this.generated = !1, this.centerCoordinates = {
                x: 144.5,
                y: 144.5
            }, this.r = 289 * .49, this.color = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.hueCircle = void 0, this.initialColor = {
                r: 255,
                g: 255,
                b: 255,
                a: 1
            }, this.previousColor = void 0, this.applied = !1, this.updateCallback = function() {}, this.closeCallback = function() {}, this._create();
        }
        return $l(t, [
            {
                key: "insertTo",
                value: function(t) {
                    void 0 !== this.hammer && (this.hammer.destroy(), this.hammer = void 0), this.container = t, this.container.appendChild(this.frame), this._bindHammer(), this._setSize();
                }
            },
            {
                key: "setUpdateCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker update callback is not a function.");
                    this.updateCallback = t;
                }
            },
            {
                key: "setCloseCallback",
                value: function(t) {
                    if ("function" != typeof t) throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
                    this.closeCallback = t;
                }
            },
            {
                key: "_isColorString",
                value: function(t) {
                    if ("string" == typeof t) return om[t];
                }
            },
            {
                key: "setColor",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if ("none" !== t) {
                        var i, o = this._isColorString(t);
                        if (void 0 !== o && (t = o), !0 === By(t)) {
                            if (!0 === Zy(t)) {
                                var n = t.substr(4).substr(0, t.length - 5).split(",");
                                i = {
                                    r: n[0],
                                    g: n[1],
                                    b: n[2],
                                    a: 1
                                };
                            } else if (!0 === Qy(t)) {
                                var r = t.substr(5).substr(0, t.length - 6).split(",");
                                i = {
                                    r: r[0],
                                    g: r[1],
                                    b: r[2],
                                    a: r[3]
                                };
                            } else if (!0 === $y(t)) {
                                var s = Vy(t);
                                i = {
                                    r: s.r,
                                    g: s.g,
                                    b: s.b,
                                    a: 1
                                };
                            }
                        } else if (t instanceof Object && void 0 !== t.r && void 0 !== t.g && void 0 !== t.b) {
                            var a = void 0 !== t.a ? t.a : "1.0";
                            i = {
                                r: t.r,
                                g: t.g,
                                b: t.b,
                                a: a
                            };
                        }
                        if (void 0 === i) throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + hv(t));
                        this._setColor(i, e);
                    }
                }
            },
            {
                key: "show",
                value: function() {
                    void 0 !== this.closeCallback && (this.closeCallback(), this.closeCallback = void 0), this.applied = !1, this.frame.style.display = "block", this._generateHueCircle();
                }
            },
            {
                key: "_hide",
                value: function() {
                    var t = this, e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    !0 === e && (this.previousColor = fo({}, this.color)), !0 === this.applied && this.updateCallback(this.initialColor), this.frame.style.display = "none", bv(function() {
                        void 0 !== t.closeCallback && (t.closeCallback(), t.closeCallback = void 0);
                    }, 0);
                }
            },
            {
                key: "_save",
                value: function() {
                    this.updateCallback(this.color), this.applied = !1, this._hide();
                }
            },
            {
                key: "_apply",
                value: function() {
                    this.applied = !0, this.updateCallback(this.color), this._updatePicker(this.color);
                }
            },
            {
                key: "_loadLast",
                value: function() {
                    void 0 !== this.previousColor ? this.setColor(this.previousColor, !1) : alert("There is no last color to load...");
                }
            },
            {
                key: "_setColor",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    !0 === e && (this.initialColor = fo({}, t)), this.color = t;
                    var i = Xy(t.r, t.g, t.b), o = 2 * Math.PI, n = this.r * i.s, r = this.centerCoordinates.x + n * Math.sin(o * i.h), s = this.centerCoordinates.y + n * Math.cos(o * i.h);
                    this.colorPickerSelector.style.left = r - .5 * this.colorPickerSelector.clientWidth + "px", this.colorPickerSelector.style.top = s - .5 * this.colorPickerSelector.clientHeight + "px", this._updatePicker(t);
                }
            },
            {
                key: "_setOpacity",
                value: function(t) {
                    this.color.a = t / 100, this._updatePicker(this.color);
                }
            },
            {
                key: "_setBrightness",
                value: function(t) {
                    var e = Xy(this.color.r, this.color.g, this.color.b);
                    e.v = t / 100;
                    var i = Gy(e.h, e.s, e.v);
                    i.a = this.color.a, this.color = i, this._updatePicker();
                }
            },
            {
                key: "_updatePicker",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.color, e = Xy(t.r, t.g, t.b), i = this.colorPickerCanvas.getContext("2d");
                    void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (i.webkitBackingStorePixelRatio || i.mozBackingStorePixelRatio || i.msBackingStorePixelRatio || i.oBackingStorePixelRatio || i.backingStorePixelRatio || 1)), i.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    var o = this.colorPickerCanvas.clientWidth, n = this.colorPickerCanvas.clientHeight;
                    i.clearRect(0, 0, o, n), i.putImageData(this.hueCircle, 0, 0), i.fillStyle = "rgba(0,0,0," + (1 - e.v) + ")", i.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), Pv(i).call(i), this.brightnessRange.value = 100 * e.v, this.opacityRange.value = 100 * t.a, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            },
            {
                key: "_setSize",
                value: function() {
                    this.colorPickerCanvas.style.width = "100%", this.colorPickerCanvas.style.height = "100%", this.colorPickerCanvas.width = 289 * this.pixelRatio, this.colorPickerCanvas.height = 289 * this.pixelRatio;
                }
            },
            {
                key: "_create",
                value: function() {
                    var t, e, i, o;
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-color-picker", this.colorPickerDiv = document.createElement("div"), this.colorPickerSelector = document.createElement("div"), this.colorPickerSelector.className = "vis-selector", this.colorPickerDiv.appendChild(this.colorPickerSelector), this.colorPickerCanvas = document.createElement("canvas"), this.colorPickerDiv.appendChild(this.colorPickerCanvas), this.colorPickerCanvas.getContext) {
                        var n = this.colorPickerCanvas.getContext("2d");
                        this.pixelRatio = (window.devicePixelRatio || 1) / (n.webkitBackingStorePixelRatio || n.mozBackingStorePixelRatio || n.msBackingStorePixelRatio || n.oBackingStorePixelRatio || n.backingStorePixelRatio || 1), this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                    } else {
                        var r = document.createElement("DIV");
                        r.style.color = "red", r.style.fontWeight = "bold", r.style.padding = "10px", r.innerText = "Error: your browser does not support HTML canvas", this.colorPickerCanvas.appendChild(r);
                    }
                    this.colorPickerDiv.className = "vis-color", this.opacityDiv = document.createElement("div"), this.opacityDiv.className = "vis-opacity", this.brightnessDiv = document.createElement("div"), this.brightnessDiv.className = "vis-brightness", this.arrowDiv = document.createElement("div"), this.arrowDiv.className = "vis-arrow", this.opacityRange = document.createElement("input");
                    try {
                        this.opacityRange.type = "range", this.opacityRange.min = "0", this.opacityRange.max = "100";
                    } catch (t1) {}
                    this.opacityRange.value = "100", this.opacityRange.className = "vis-range", this.brightnessRange = document.createElement("input");
                    try {
                        this.brightnessRange.type = "range", this.brightnessRange.min = "0", this.brightnessRange.max = "100";
                    } catch (t2) {}
                    this.brightnessRange.value = "100", this.brightnessRange.className = "vis-range", this.opacityDiv.appendChild(this.opacityRange), this.brightnessDiv.appendChild(this.brightnessRange);
                    var s = this;
                    this.opacityRange.onchange = function() {
                        s._setOpacity(this.value);
                    }, this.opacityRange.oninput = function() {
                        s._setOpacity(this.value);
                    }, this.brightnessRange.onchange = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessRange.oninput = function() {
                        s._setBrightness(this.value);
                    }, this.brightnessLabel = document.createElement("div"), this.brightnessLabel.className = "vis-label vis-brightness", this.brightnessLabel.innerText = "brightness:", this.opacityLabel = document.createElement("div"), this.opacityLabel.className = "vis-label vis-opacity", this.opacityLabel.innerText = "opacity:", this.newColorDiv = document.createElement("div"), this.newColorDiv.className = "vis-new-color", this.newColorDiv.innerText = "new", this.initialColorDiv = document.createElement("div"), this.initialColorDiv.className = "vis-initial-color", this.initialColorDiv.innerText = "initial", this.cancelButton = document.createElement("div"), this.cancelButton.className = "vis-button vis-cancel", this.cancelButton.innerText = "cancel", this.cancelButton.onclick = Fo(t = this._hide).call(t, this, !1), this.applyButton = document.createElement("div"), this.applyButton.className = "vis-button vis-apply", this.applyButton.innerText = "apply", this.applyButton.onclick = Fo(e = this._apply).call(e, this), this.saveButton = document.createElement("div"), this.saveButton.className = "vis-button vis-save", this.saveButton.innerText = "save", this.saveButton.onclick = Fo(i = this._save).call(i, this), this.loadButton = document.createElement("div"), this.loadButton.className = "vis-button vis-load", this.loadButton.innerText = "load last", this.loadButton.onclick = Fo(o = this._loadLast).call(o, this), this.frame.appendChild(this.colorPickerDiv), this.frame.appendChild(this.arrowDiv), this.frame.appendChild(this.brightnessLabel), this.frame.appendChild(this.brightnessDiv), this.frame.appendChild(this.opacityLabel), this.frame.appendChild(this.opacityDiv), this.frame.appendChild(this.newColorDiv), this.frame.appendChild(this.initialColorDiv), this.frame.appendChild(this.cancelButton), this.frame.appendChild(this.applyButton), this.frame.appendChild(this.saveButton), this.frame.appendChild(this.loadButton);
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    this.drag = {}, this.pinch = {}, this.hammer = new Oy(this.colorPickerCanvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.on("hammer.input", function(e) {
                        e.isFirst && t._moveSelector(e);
                    }), this.hammer.on("tap", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panstart", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panmove", function(e) {
                        t._moveSelector(e);
                    }), this.hammer.on("panend", function(e) {
                        t._moveSelector(e);
                    });
                }
            },
            {
                key: "_generateHueCircle",
                value: function() {
                    if (!1 === this.generated) {
                        var t = this.colorPickerCanvas.getContext("2d");
                        void 0 === this.pixelRation && (this.pixelRatio = (window.devicePixelRatio || 1) / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1)), t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                        var e, i, o, n, r = this.colorPickerCanvas.clientWidth, s = this.colorPickerCanvas.clientHeight;
                        t.clearRect(0, 0, r, s), this.centerCoordinates = {
                            x: .5 * r,
                            y: .5 * s
                        }, this.r = .49 * r;
                        var a, h = 2 * Math.PI / 360, d = 1 / this.r;
                        for(o = 0; o < 360; o++)for(n = 0; n < this.r; n++)e = this.centerCoordinates.x + n * Math.sin(h * o), i = this.centerCoordinates.y + n * Math.cos(h * o), a = Gy(.002777777777777778 * o, n * d, 1), t.fillStyle = "rgb(" + a.r + "," + a.g + "," + a.b + ")", t.fillRect(e - .5, i - .5, 2, 2);
                        t.strokeStyle = "rgba(0,0,0,1)", t.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r), t.stroke(), this.hueCircle = t.getImageData(0, 0, r, s);
                    }
                    this.generated = !0;
                }
            },
            {
                key: "_moveSelector",
                value: function(t) {
                    var e = this.colorPickerDiv.getBoundingClientRect(), i = t.center.x - e.left, o = t.center.y - e.top, n = .5 * this.colorPickerDiv.clientHeight, r = .5 * this.colorPickerDiv.clientWidth, s = i - r, a = o - n, h = Math.atan2(s, a), d = .98 * Math.min(Math.sqrt(s * s + a * a), r), l = Math.cos(h) * d + n, c = Math.sin(h) * d + r;
                    this.colorPickerSelector.style.top = l - .5 * this.colorPickerSelector.clientHeight + "px", this.colorPickerSelector.style.left = c - .5 * this.colorPickerSelector.clientWidth + "px";
                    var u = h / (2 * Math.PI);
                    u = u < 0 ? u + 1 : u;
                    var f = d / this.r, p = Xy(this.color.r, this.color.g, this.color.b);
                    p.h = u, p.s = f;
                    var v = Gy(p.h, p.s, p.v);
                    v.a = this.color.a, this.color = v, this.initialColorDiv.style.backgroundColor = "rgba(" + this.initialColor.r + "," + this.initialColor.g + "," + this.initialColor.b + "," + this.initialColor.a + ")", this.newColorDiv.style.backgroundColor = "rgba(" + this.color.r + "," + this.color.g + "," + this.color.b + "," + this.color.a + ")";
                }
            }
        ]), t;
    }();
    function rm() {
        for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
        if (e.length < 1) throw new TypeError("Invalid arguments.");
        if (1 === e.length) return document.createTextNode(e[0]);
        var o = document.createElement(e[0]);
        return o.appendChild(rm.apply(void 0, Jc(au(e).call(e, 1)))), o;
    }
    var sm, am = function() {
        function t(e, i, o) {
            var n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1, r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : function() {
                return !1;
            };
            Xl(this, t), this.parent = e, this.changedOptions = [], this.container = i, this.allowCreation = !1, this.hideOption = r, this.options = {}, this.initialized = !1, this.popupCounter = 0, this.defaultOptions = {
                enabled: !1,
                filter: !0,
                container: void 0,
                showButton: !0
            }, fo(this.options, this.defaultOptions), this.configureOptions = o, this.moduleOptions = {}, this.domElements = [], this.popupDiv = {}, this.popupLimit = 5, this.popupHistory = {}, this.colorPicker = new nm(n), this.wrapper = void 0;
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        this.popupHistory = {}, this._removePopup();
                        var e = !0;
                        if ("string" == typeof t) this.options.filter = t;
                        else if (hu(t)) this.options.filter = t.join();
                        else if ("object" === Qc(t)) {
                            if (null == t) throw new TypeError("options cannot be null");
                            void 0 !== t.container && (this.options.container = t.container), void 0 !== Yf(t) && (this.options.filter = Yf(t)), void 0 !== t.showButton && (this.options.showButton = t.showButton), void 0 !== t.enabled && (e = t.enabled);
                        } else "boolean" == typeof t ? (this.options.filter = !0, e = t) : "function" == typeof t && (this.options.filter = t, e = !0);
                        !1 === Yf(this.options) && (e = !1), this.options.enabled = e;
                    }
                    this._clean();
                }
            },
            {
                key: "setModuleOptions",
                value: function(t) {
                    this.moduleOptions = t, !0 === this.options.enabled && (this._clean(), void 0 !== this.options.container && (this.container = this.options.container), this._create());
                }
            },
            {
                key: "_create",
                value: function() {
                    this._clean(), this.changedOptions = [];
                    var t = Yf(this.options), e = 0, i = !1;
                    for(var o in this.configureOptions)Object.prototype.hasOwnProperty.call(this.configureOptions, o) && (this.allowCreation = !1, i = !1, "function" == typeof t ? i = (i = t(o, [])) || this._handleObject(this.configureOptions[o], [
                        o
                    ], !0) : !0 !== t && -1 === zp(t).call(t, o) || (i = !0), !1 !== i && (this.allowCreation = !0, e > 0 && this._makeItem([]), this._makeHeader(o), this._handleObject(this.configureOptions[o], [
                        o
                    ])), e++);
                    this._makeButton(), this._push();
                }
            },
            {
                key: "_push",
                value: function() {
                    this.wrapper = document.createElement("div"), this.wrapper.className = "vis-configuration-wrapper", this.container.appendChild(this.wrapper);
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.appendChild(this.domElements[t]);
                    this._showPopupIfNeeded();
                }
            },
            {
                key: "_clean",
                value: function() {
                    for(var t = 0; t < this.domElements.length; t++)this.wrapper.removeChild(this.domElements[t]);
                    void 0 !== this.wrapper && (this.container.removeChild(this.wrapper), this.wrapper = void 0), this.domElements = [], this._removePopup();
                }
            },
            {
                key: "_getValue",
                value: function(t) {
                    for(var e = this.moduleOptions, i = 0; i < t.length; i++){
                        if (void 0 === e[t[i]]) {
                            e = void 0;
                            break;
                        }
                        e = e[t[i]];
                    }
                    return e;
                }
            },
            {
                key: "_makeItem",
                value: function(t) {
                    if (!0 === this.allowCreation) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-item vis-config-s" + t.length;
                        for(var i = arguments.length, o = new Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++)o[n - 1] = arguments[n];
                        return Fu(o).call(o, function(t) {
                            e.appendChild(t);
                        }), this.domElements.push(e), this.domElements.length;
                    }
                    return 0;
                }
            },
            {
                key: "_makeHeader",
                value: function(t) {
                    var e = document.createElement("div");
                    e.className = "vis-configuration vis-config-header", e.innerText = t, this._makeItem([], e);
                }
            },
            {
                key: "_makeLabel",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = document.createElement("div");
                    if (o.className = "vis-configuration vis-config-label vis-config-s" + e.length, !0 === i) {
                        for(; o.firstChild;)o.removeChild(o.firstChild);
                        o.appendChild(rm("i", "b", t));
                    } else o.innerText = t + ":";
                    return o;
                }
            },
            {
                key: "_makeDropdown",
                value: function(t, e, i) {
                    var o = document.createElement("select");
                    o.className = "vis-configuration vis-config-select";
                    var n = 0;
                    void 0 !== e && -1 !== zp(t).call(t, e) && (n = zp(t).call(t, e));
                    for(var r = 0; r < t.length; r++){
                        var s = document.createElement("option");
                        s.value = t[r], r === n && (s.selected = "selected"), s.innerText = t[r], o.appendChild(s);
                    }
                    var a = this;
                    o.onchange = function() {
                        a._update(this.value, i);
                    };
                    var h = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, h, o);
                }
            },
            {
                key: "_makeRange",
                value: function(t, e, i) {
                    var o = t[0], n = t[1], r = t[2], s = t[3], a = document.createElement("input");
                    a.className = "vis-configuration vis-config-range";
                    try {
                        a.type = "range", a.min = n, a.max = r;
                    } catch (t1) {}
                    a.step = s;
                    var h = "", d = 0;
                    if (void 0 !== e) {
                        var l = 1.2;
                        e < 0 && e * l < n ? (a.min = Math.ceil(e * l), d = a.min, h = "range increased") : e / l < n && (a.min = Math.ceil(e / l), d = a.min, h = "range increased"), e * l > r && 1 !== r && (a.max = Math.ceil(e * l), d = a.max, h = "range increased"), a.value = e;
                    } else a.value = o;
                    var c = document.createElement("input");
                    c.className = "vis-configuration vis-config-rangeinput", c.value = a.value;
                    var u = this;
                    a.onchange = function() {
                        c.value = this.value, u._update(Number(this.value), i);
                    }, a.oninput = function() {
                        c.value = this.value;
                    };
                    var f = this._makeLabel(i[i.length - 1], i), p = this._makeItem(i, f, a, c);
                    "" !== h && this.popupHistory[p] !== d && (this.popupHistory[p] = d, this._setupPopup(h, p));
                }
            },
            {
                key: "_makeButton",
                value: function() {
                    var t = this;
                    if (!0 === this.options.showButton) {
                        var e = document.createElement("div");
                        e.className = "vis-configuration vis-config-button", e.innerText = "generate options", e.onclick = function() {
                            t._printOptions();
                        }, e.onmouseover = function() {
                            e.className = "vis-configuration vis-config-button hover";
                        }, e.onmouseout = function() {
                            e.className = "vis-configuration vis-config-button";
                        }, this.optionsContainer = document.createElement("div"), this.optionsContainer.className = "vis-configuration vis-config-option-container", this.domElements.push(this.optionsContainer), this.domElements.push(e);
                    }
                }
            },
            {
                key: "_setupPopup",
                value: function(t, e) {
                    var i = this;
                    if (!0 === this.initialized && !0 === this.allowCreation && this.popupCounter < this.popupLimit) {
                        var o = document.createElement("div");
                        o.id = "vis-configuration-popup", o.className = "vis-configuration-popup", o.innerText = t, o.onclick = function() {
                            i._removePopup();
                        }, this.popupCounter += 1, this.popupDiv = {
                            html: o,
                            index: e
                        };
                    }
                }
            },
            {
                key: "_removePopup",
                value: function() {
                    void 0 !== this.popupDiv.html && (this.popupDiv.html.parentNode.removeChild(this.popupDiv.html), clearTimeout(this.popupDiv.hideTimeout), clearTimeout(this.popupDiv.deleteTimeout), this.popupDiv = {});
                }
            },
            {
                key: "_showPopupIfNeeded",
                value: function() {
                    var t = this;
                    if (void 0 !== this.popupDiv.html) {
                        var e = this.domElements[this.popupDiv.index].getBoundingClientRect();
                        this.popupDiv.html.style.left = e.left + "px", this.popupDiv.html.style.top = e.top - 30 + "px", document.body.appendChild(this.popupDiv.html), this.popupDiv.hideTimeout = bv(function() {
                            t.popupDiv.html.style.opacity = 0;
                        }, 1500), this.popupDiv.deleteTimeout = bv(function() {
                            t._removePopup();
                        }, 1800);
                    }
                }
            },
            {
                key: "_makeCheckbox",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "checkbox", o.className = "vis-configuration vis-config-checkbox", o.checked = t, void 0 !== e && (o.checked = e, e !== t && ("object" === Qc(t) ? e !== t.enabled && this.changedOptions.push({
                        path: i,
                        value: e
                    }) : this.changedOptions.push({
                        path: i,
                        value: e
                    })));
                    var n = this;
                    o.onchange = function() {
                        n._update(this.checked, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeTextInput",
                value: function(t, e, i) {
                    var o = document.createElement("input");
                    o.type = "text", o.className = "vis-configuration vis-config-text", o.value = e, e !== t && this.changedOptions.push({
                        path: i,
                        value: e
                    });
                    var n = this;
                    o.onchange = function() {
                        n._update(this.value, i);
                    };
                    var r = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, r, o);
                }
            },
            {
                key: "_makeColorField",
                value: function(t, e, i) {
                    var o = this, n = t[1], r = document.createElement("div");
                    "none" !== (e = void 0 === e ? n : e) ? (r.className = "vis-configuration vis-config-colorBlock", r.style.backgroundColor = e) : r.className = "vis-configuration vis-config-colorBlock none", e = void 0 === e ? n : e, r.onclick = function() {
                        o._showColorPicker(e, r, i);
                    };
                    var s = this._makeLabel(i[i.length - 1], i);
                    this._makeItem(i, s, r);
                }
            },
            {
                key: "_showColorPicker",
                value: function(t, e, i) {
                    var o = this;
                    e.onclick = function() {}, this.colorPicker.insertTo(e), this.colorPicker.show(), this.colorPicker.setColor(t), this.colorPicker.setUpdateCallback(function(t) {
                        var n = "rgba(" + t.r + "," + t.g + "," + t.b + "," + t.a + ")";
                        e.style.backgroundColor = n, o._update(n, i);
                    }), this.colorPicker.setCloseCallback(function() {
                        e.onclick = function() {
                            o._showColorPicker(t, e, i);
                        };
                    });
                }
            },
            {
                key: "_handleObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = !1, n = Yf(this.options), r = !1;
                    for(var s in t)if (Object.prototype.hasOwnProperty.call(t, s)) {
                        o = !0;
                        var a = t[s], h = jy(e, s);
                        if ("function" == typeof n && !1 === (o = n(s, e)) && !hu(a) && "string" != typeof a && "boolean" != typeof a && a instanceof Object && (this.allowCreation = !1, o = this._handleObject(a, h, !0), this.allowCreation = !1 === i), !1 !== o) {
                            r = !0;
                            var d = this._getValue(h);
                            if (hu(a)) this._handleArray(a, d, h);
                            else if ("string" == typeof a) this._makeTextInput(a, d, h);
                            else if ("boolean" == typeof a) this._makeCheckbox(a, d, h);
                            else if (a instanceof Object) {
                                if (!this.hideOption(e, s, this.moduleOptions)) {
                                    if (void 0 !== a.enabled) {
                                        var l = jy(h, "enabled"), c = this._getValue(l);
                                        if (!0 === c) {
                                            var u = this._makeLabel(s, h, !0);
                                            this._makeItem(h, u), r = this._handleObject(a, h) || r;
                                        } else this._makeCheckbox(a, c, h);
                                    } else {
                                        var f = this._makeLabel(s, h, !0);
                                        this._makeItem(h, f), r = this._handleObject(a, h) || r;
                                    }
                                }
                            } else console.error("dont know how to handle", a, s, h);
                        }
                    }
                    return r;
                }
            },
            {
                key: "_handleArray",
                value: function(t, e, i) {
                    "string" == typeof t[0] && "color" === t[0] ? (this._makeColorField(t, e, i), t[1] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "string" == typeof t[0] ? (this._makeDropdown(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: e
                    })) : "number" == typeof t[0] && (this._makeRange(t, e, i), t[0] !== e && this.changedOptions.push({
                        path: i,
                        value: Number(e)
                    }));
                }
            },
            {
                key: "_update",
                value: function(t, e) {
                    var i = this._constructOptions(t, e);
                    this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit && this.parent.body.emitter.emit("configChange", i), this.initialized = !0, this.parent.setOptions(i);
                }
            },
            {
                key: "_constructOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o = i;
                    t = "false" !== (t = "true" === t || t) && t;
                    for(var n = 0; n < e.length; n++)"global" !== e[n] && (void 0 === o[e[n]] && (o[e[n]] = {}), n !== e.length - 1 ? o = o[e[n]] : o[e[n]] = t);
                    return i;
                }
            },
            {
                key: "_printOptions",
                value: function() {
                    for(var t = this.getOptions(); this.optionsContainer.firstChild;)this.optionsContainer.removeChild(this.optionsContainer.firstChild);
                    this.optionsContainer.appendChild(rm("pre", "const options = " + hv(t, null, 2)));
                }
            },
            {
                key: "getOptions",
                value: function() {
                    for(var t = {}, e = 0; e < this.changedOptions.length; e++)this._constructOptions(this.changedOptions[e].value, this.changedOptions[e].path, t);
                    return t;
                }
            }
        ]), t;
    }(), hm = function() {
        function t(e, i) {
            Xl(this, t), this.container = e, this.overflowMethod = i || "cap", this.x = 0, this.y = 0, this.padding = 5, this.hidden = !1, this.frame = document.createElement("div"), this.frame.className = "vis-tooltip", this.container.appendChild(this.frame);
        }
        return $l(t, [
            {
                key: "setPosition",
                value: function(t, e) {
                    this.x = _p(t), this.y = _p(e);
                }
            },
            {
                key: "setText",
                value: function(t) {
                    if (t instanceof Element) {
                        for(; this.frame.firstChild;)this.frame.removeChild(this.frame.firstChild);
                        this.frame.appendChild(t);
                    } else this.frame.innerText = t;
                }
            },
            {
                key: "show",
                value: function(t) {
                    if (void 0 === t && (t = !0), !0 === t) {
                        var e = this.frame.clientHeight, i = this.frame.clientWidth, o = this.frame.parentNode.clientHeight, n = this.frame.parentNode.clientWidth, r = 0, s = 0;
                        if ("flip" == this.overflowMethod) {
                            var a = !1, h = !0;
                            this.y - e < this.padding && (h = !1), this.x + i > n - this.padding && (a = !0), r = a ? this.x - i : this.x, s = h ? this.y - e : this.y;
                        } else (s = this.y - e) + e + this.padding > o && (s = o - e - this.padding), s < this.padding && (s = this.padding), (r = this.x) + i + this.padding > n && (r = n - i - this.padding), r < this.padding && (r = this.padding);
                        this.frame.style.left = r + "px", this.frame.style.top = s + "px", this.frame.style.visibility = "visible", this.hidden = !1;
                    } else this.hide();
                }
            },
            {
                key: "hide",
                value: function() {
                    this.hidden = !0, this.frame.style.left = "0", this.frame.style.top = "0", this.frame.style.visibility = "hidden";
                }
            },
            {
                key: "destroy",
                value: function() {
                    this.frame.parentNode.removeChild(this.frame);
                }
            }
        ]), t;
    }(), dm = !1, lm = "background: #FFeeee; color: #dd0000", cm = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "validate",
                value: function(e, i, o) {
                    dm = !1, sm = i;
                    var n = i;
                    return void 0 !== o && (n = i[o]), t.parse(e, n, []), dm;
                }
            },
            {
                key: "parse",
                value: function(e, i, o) {
                    for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && t.check(n, e, i, o);
                }
            },
            {
                key: "check",
                value: function(e, i, o, n) {
                    if (void 0 !== o[e] || void 0 !== o.__any__) {
                        var r = e, s = !0;
                        void 0 === o[e] && void 0 !== o.__any__ && (r = "__any__", s = "object" === t.getType(i[e]));
                        var a = o[r];
                        s && void 0 !== a.__type__ && (a = a.__type__), t.checkFields(e, i, o, r, a, n);
                    } else t.getSuggestion(e, o, n);
                }
            },
            {
                key: "checkFields",
                value: function(e, i, o, n, r, s) {
                    var a = function(i) {
                        console.error("%c" + i + t.printLocation(s, e), lm);
                    }, h = t.getType(i[e]), d = r[h];
                    void 0 !== d ? "array" === t.getType(d) && -1 === zp(d).call(d, i[e]) ? (a('Invalid option detected in "' + e + '". Allowed values are:' + t.print(d) + ' not "' + i[e] + '". '), dm = !0) : "object" === h && "__any__" !== n && (s = jy(s, e), t.parse(i[e], o[n], s)) : void 0 === r.any && (a('Invalid type received for "' + e + '". Expected: ' + t.print(mu(r)) + ". Received [" + h + '] "' + i[e] + '"'), dm = !0);
                }
            },
            {
                key: "getType",
                value: function(t) {
                    var e = Qc(t);
                    return "object" === e ? null === t ? "null" : t instanceof Boolean ? "boolean" : t instanceof Number ? "number" : t instanceof String ? "string" : hu(t) ? "array" : t instanceof Date ? "date" : void 0 !== t.nodeType ? "dom" : !0 === t._isAMomentObject ? "moment" : "object" : "number" === e ? "number" : "boolean" === e ? "boolean" : "string" === e ? "string" : void 0 === e ? "undefined" : e;
                }
            },
            {
                key: "getSuggestion",
                value: function(e, i, o) {
                    var n, r = t.findInOptions(e, i, o, !1), s = t.findInOptions(e, sm, [], !0);
                    n = void 0 !== r.indexMatch ? " in " + t.printLocation(r.path, e, "") + 'Perhaps it was incomplete? Did you mean: "' + r.indexMatch + '"?\n\n' : s.distance <= 4 && r.distance > s.distance ? " in " + t.printLocation(r.path, e, "") + "Perhaps it was misplaced? Matching option found at: " + t.printLocation(s.path, s.closestMatch, "") : r.distance <= 8 ? '. Did you mean "' + r.closestMatch + '"?' + t.printLocation(r.path, e) : ". Did you mean one of these: " + t.print(mu(i)) + t.printLocation(o, e), console.error('%cUnknown option detected: "' + e + '"' + n, lm), dm = !0;
                }
            },
            {
                key: "findInOptions",
                value: function(e, i, o) {
                    var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r = 1e9, s = "", a = [], h = e.toLowerCase(), d = void 0;
                    for(var l in i){
                        var c = void 0;
                        if (void 0 !== i[l].__type__ && !0 === n) {
                            var u = t.findInOptions(e, i[l], jy(o, l));
                            r > u.distance && (s = u.closestMatch, a = u.path, r = u.distance, d = u.indexMatch);
                        } else {
                            var f;
                            -1 !== zp(f = l.toLowerCase()).call(f, h) && (d = l), r > (c = t.levenshteinDistance(e, l)) && (s = l, a = Ly(o), r = c);
                        }
                    }
                    return {
                        closestMatch: s,
                        path: a,
                        distance: r,
                        indexMatch: d
                    };
                }
            },
            {
                key: "printLocation",
                value: function(t, e) {
                    for(var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Problem value found at: \n", o = "\n\n" + i + "options = {\n", n = 0; n < t.length; n++){
                        for(var r = 0; r < n + 1; r++)o += "  ";
                        o += t[n] + ": {\n";
                    }
                    for(var s = 0; s < t.length + 1; s++)o += "  ";
                    o += e + "\n";
                    for(var a = 0; a < t.length + 1; a++){
                        for(var h = 0; h < t.length - a; h++)o += "  ";
                        o += "}\n";
                    }
                    return o + "\n\n";
                }
            },
            {
                key: "print",
                value: function(t) {
                    return hv(t).replace(/(")|(\[)|(\])|(,"__type__")/g, "").replace(/(,)/g, ", ");
                }
            },
            {
                key: "levenshteinDistance",
                value: function(t, e) {
                    if (0 === t.length) return e.length;
                    if (0 === e.length) return t.length;
                    var i, o, n = [];
                    for(i = 0; i <= e.length; i++)n[i] = [
                        i
                    ];
                    for(o = 0; o <= t.length; o++)n[0][o] = o;
                    for(i = 1; i <= e.length; i++)for(o = 1; o <= t.length; o++)e.charAt(i - 1) == t.charAt(o - 1) ? n[i][o] = n[i - 1][o - 1] : n[i][o] = Math.min(n[i - 1][o - 1] + 1, Math.min(n[i][o - 1] + 1, n[i - 1][o] + 1));
                    return n[e.length][t.length];
                }
            }
        ]), t;
    }(), um = Cy, fm = am, pm = Oy, vm = hm, gm = lm, ym = cm;
    function mm(t) {
        return Cm = t, function() {
            var t = {};
            Sm = 0, Tm = Cm.charAt(0), jm(), "strict" === Mm && (t.strict = !0, jm());
            "graph" !== Mm && "digraph" !== Mm || (t.type = Mm, jm());
            Pm === xm && (t.id = Mm, jm());
            if ("{" != Mm) throw Um("Angle bracket { expected");
            if (jm(), Lm(t), "}" != Mm) throw Um("Angle bracket } expected");
            if (jm(), "" !== Mm) throw Um("End of file expected");
            return jm(), delete t.node, delete t.edge, delete t.graph, t;
        }();
    }
    var bm = {
        fontsize: "font.size",
        fontcolor: "font.color",
        labelfontcolor: "font.color",
        fontname: "font.face",
        color: [
            "color.border",
            "color.background"
        ],
        fillcolor: "color.background",
        tooltip: "title",
        labeltooltip: "title"
    }, wm = Hp(bm);
    wm.color = "color.color", wm.style = "dashes";
    var km = 0, _m = 1, xm = 2, Em = 3, Om = {
        "{": !0,
        "}": !0,
        "[": !0,
        "]": !0,
        ";": !0,
        "=": !0,
        ",": !0,
        "->": !0,
        "--": !0
    }, Cm = "", Sm = 0, Tm = "", Mm = "", Pm = km;
    function Dm() {
        Sm++, Tm = Cm.charAt(Sm);
    }
    function Bm() {
        return Cm.charAt(Sm + 1);
    }
    function Im(t) {
        var e = t.charCodeAt(0);
        return e < 47 ? 35 === e || 46 === e : e < 59 ? e > 47 : e < 91 ? e > 64 : e < 96 ? 95 === e : e < 123 && e > 96;
    }
    function zm(t, e) {
        if (t || (t = {}), e) for(var i in e)e.hasOwnProperty(i) && (t[i] = e[i]);
        return t;
    }
    function Fm(t, e, i) {
        for(var o = e.split("."), n = t; o.length;){
            var r = o.shift();
            o.length ? (n[r] || (n[r] = {}), n = n[r]) : n[r] = i;
        }
    }
    function Nm(t, e) {
        for(var i, o, n = null, r = [
            t
        ], s = t; s.parent;)r.push(s.parent), s = s.parent;
        if (s.nodes) {
            for(i = 0, o = s.nodes.length; i < o; i++)if (e.id === s.nodes[i].id) {
                n = s.nodes[i];
                break;
            }
        }
        for(n || (n = {
            id: e.id
        }, t.node && (n.attr = zm(n.attr, t.node))), i = r.length - 1; i >= 0; i--){
            var a, h = r[i];
            h.nodes || (h.nodes = []), -1 === zp(a = h.nodes).call(a, n) && h.nodes.push(n);
        }
        e.attr && (n.attr = zm(n.attr, e.attr));
    }
    function Am(t, e) {
        if (t.edges || (t.edges = []), t.edges.push(e), t.edge) {
            var i = zm({}, t.edge);
            e.attr = zm(i, e.attr);
        }
    }
    function Rm(t, e, i, o, n) {
        var r = {
            from: e,
            to: i,
            type: o
        };
        return t.edge && (r.attr = zm({}, t.edge)), r.attr = zm(r.attr || {}, n), null != n && n.hasOwnProperty("arrows") && null != n.arrows && (r.arrows = {
            to: {
                enabled: !0,
                type: n.arrows.type
            }
        }, n.arrows = null), r;
    }
    function jm() {
        for(Pm = km, Mm = ""; " " === Tm || "	" === Tm || "\n" === Tm || "\r" === Tm;)Dm();
        do {
            var t = !1;
            if ("#" === Tm) {
                for(var e = Sm - 1; " " === Cm.charAt(e) || "	" === Cm.charAt(e);)e--;
                if ("\n" === Cm.charAt(e) || "" === Cm.charAt(e)) {
                    for(; "" != Tm && "\n" != Tm;)Dm();
                    t = !0;
                }
            }
            if ("/" === Tm && "/" === Bm()) {
                for(; "" != Tm && "\n" != Tm;)Dm();
                t = !0;
            }
            if ("/" === Tm && "*" === Bm()) {
                for(; "" != Tm;){
                    if ("*" === Tm && "/" === Bm()) {
                        Dm(), Dm();
                        break;
                    }
                    Dm();
                }
                t = !0;
            }
            for(; " " === Tm || "	" === Tm || "\n" === Tm || "\r" === Tm;)Dm();
        }while (t);
        if ("" !== Tm) {
            var i = Tm + Bm();
            if (Om[i]) return Pm = _m, Mm = i, Dm(), void Dm();
            if (Om[Tm]) return Pm = _m, Mm = Tm, void Dm();
            if (Im(Tm) || "-" === Tm) {
                for(Mm += Tm, Dm(); Im(Tm);)Mm += Tm, Dm();
                return "false" === Mm ? Mm = !1 : "true" === Mm ? Mm = !0 : isNaN(Number(Mm)) || (Mm = Number(Mm)), void (Pm = xm);
            }
            if ('"' === Tm) {
                for(Dm(); "" != Tm && ('"' != Tm || '"' === Tm && '"' === Bm());)'"' === Tm ? (Mm += Tm, Dm()) : "\\" === Tm && "n" === Bm() ? (Mm += "\n", Dm()) : Mm += Tm, Dm();
                if ('"' != Tm) throw Um('End of string " expected');
                return Dm(), void (Pm = xm);
            }
            for(Pm = Em; "" != Tm;)Mm += Tm, Dm();
            throw new SyntaxError('Syntax error in part "' + Ym(Mm, 30) + '"');
        }
        Pm = _m;
    }
    function Lm(t) {
        for(; "" !== Mm && "}" != Mm;)Hm(t), ";" === Mm && jm();
    }
    function Hm(t) {
        var e = Wm(t);
        if (e) Vm(t, e);
        else {
            var i = function(t) {
                if ("node" === Mm) return jm(), t.node = qm(), "node";
                if ("edge" === Mm) return jm(), t.edge = qm(), "edge";
                if ("graph" === Mm) return jm(), t.graph = qm(), "graph";
                return null;
            }(t);
            if (!i) {
                if (Pm != xm) throw Um("Identifier expected");
                var o = Mm;
                if (jm(), "=" === Mm) {
                    if (jm(), Pm != xm) throw Um("Identifier expected");
                    t[o] = Mm, jm();
                } else !function(t, e) {
                    var i = {
                        id: e
                    }, o = qm();
                    o && (i.attr = o);
                    Nm(t, i), Vm(t, e);
                }(t, o);
            }
        }
    }
    function Wm(t) {
        var e = null;
        if ("subgraph" === Mm && ((e = {}).type = "subgraph", jm(), Pm === xm && (e.id = Mm, jm())), "{" === Mm) {
            if (jm(), e || (e = {}), e.parent = t, e.node = t.node, e.edge = t.edge, e.graph = t.graph, Lm(e), "}" != Mm) throw Um("Angle bracket } expected");
            jm(), delete e.node, delete e.edge, delete e.graph, delete e.parent, t.subgraphs || (t.subgraphs = []), t.subgraphs.push(e);
        }
        return e;
    }
    function Vm(t, e) {
        for(; "->" === Mm || "--" === Mm;){
            var i, o = Mm;
            jm();
            var n = Wm(t);
            if (n) i = n;
            else {
                if (Pm != xm) throw Um("Identifier or subgraph expected");
                Nm(t, {
                    id: i = Mm
                }), jm();
            }
            Am(t, Rm(t, e, i, o, qm())), e = i;
        }
    }
    function qm() {
        for(var t, e, i = null, o = {
            dashed: !0,
            solid: !1,
            dotted: [
                1,
                5
            ]
        }, n = {
            dot: "circle",
            box: "box",
            crow: "crow",
            curve: "curve",
            icurve: "inv_curve",
            normal: "triangle",
            inv: "inv_triangle",
            diamond: "diamond",
            tee: "bar",
            vee: "vee"
        }, r = new Array, s = new Array; "[" === Mm;){
            for(jm(), i = {}; "" !== Mm && "]" != Mm;){
                if (Pm != xm) throw Um("Attribute name expected");
                var a = Mm;
                if (jm(), "=" != Mm) throw Um("Equal sign = expected");
                if (jm(), Pm != xm) throw Um("Attribute value expected");
                var h = Mm;
                "style" === a && (h = o[h]), "arrowhead" === a && (a = "arrows", h = {
                    to: {
                        enabled: !0,
                        type: n[h]
                    }
                }), "arrowtail" === a && (a = "arrows", h = {
                    from: {
                        enabled: !0,
                        type: n[h]
                    }
                }), r.push({
                    attr: i,
                    name: a,
                    value: h
                }), s.push(a), jm(), "," == Mm && jm();
            }
            if ("]" != Mm) throw Um("Bracket ] expected");
            jm();
        }
        if (zf(s).call(s, "dir")) {
            var d = {
                arrows: {}
            };
            for(t = 0; t < r.length; t++)if ("arrows" === r[t].name) {
                if (null != r[t].value.to) d.arrows.to = t;
                else {
                    if (null == r[t].value.from) throw Um("Invalid value of arrows");
                    d.arrows.from = t;
                }
            } else "dir" === r[t].name && (d.dir = t);
            var l, c, u = r[d.dir].value;
            if (!zf(s).call(s, "arrows")) {
                if ("both" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1, r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else if ("forward" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        to: {
                            enabled: !0
                        }
                    }
                }), d.arrows.to = r.length - 1;
                else if ("back" === u) r.push({
                    attr: r[d.dir].attr,
                    name: "arrows",
                    value: {
                        from: {
                            enabled: !0
                        }
                    }
                }), d.arrows.from = r.length - 1;
                else {
                    if ("none" !== u) throw Um('Invalid dir type "' + u + '"');
                    r.push({
                        attr: r[d.dir].attr,
                        name: "arrows",
                        value: ""
                    }), d.arrows.to = r.length - 1;
                }
            }
            if ("both" === u) d.arrows.to && d.arrows.from ? (c = r[d.arrows.to].value.to.type, l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }, uf(r).call(r, d.arrows.from, 1)) : d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "arrow", r[d.arrows.to] = {
                attr: r[d.arrows.to].attr,
                name: r[d.arrows.to].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "arrow", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            });
            else if ("back" === u) d.arrows.to && d.arrows.from ? (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.to ? (c = "", l = "arrow", d.arrows.from = d.arrows.to, r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }) : d.arrows.from && (c = "", l = r[d.arrows.from].value.from.type, r[d.arrows.to] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    to: {
                        enabled: !0,
                        type: c
                    },
                    from: {
                        enabled: !0,
                        type: l
                    }
                }
            }), r[d.arrows.from] = {
                attr: r[d.arrows.from].attr,
                name: r[d.arrows.from].name,
                value: {
                    from: {
                        enabled: !0,
                        type: r[d.arrows.from].value.from.type
                    }
                }
            };
            else if ("none" === u) {
                var f;
                r[f = d.arrows.to ? d.arrows.to : d.arrows.from] = {
                    attr: r[f].attr,
                    name: r[f].name,
                    value: ""
                };
            } else {
                if ("forward" !== u) throw Um('Invalid dir type "' + u + '"');
                d.arrows.to && d.arrows.from || d.arrows.to ? (c = r[d.arrows.to].value.to.type, l = "", r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }) : d.arrows.from && (c = "arrow", l = "", d.arrows.to = d.arrows.from, r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: c
                        },
                        from: {
                            enabled: !0,
                            type: l
                        }
                    }
                }), r[d.arrows.to] = {
                    attr: r[d.arrows.to].attr,
                    name: r[d.arrows.to].name,
                    value: {
                        to: {
                            enabled: !0,
                            type: r[d.arrows.to].value.to.type
                        }
                    }
                };
            }
            uf(r).call(r, d.dir, 1);
        }
        if (zf(s).call(s, "penwidth")) {
            var p = [];
            for(e = r.length, t = 0; t < e; t++)"width" !== r[t].name && ("penwidth" === r[t].name && (r[t].name = "width"), p.push(r[t]));
            r = p;
        }
        for(e = r.length, t = 0; t < e; t++)Fm(r[t].attr, r[t].name, r[t].value);
        return i;
    }
    function Um(t) {
        return new SyntaxError(t + ', got "' + Ym(Mm, 30) + '" (char ' + Sm + ")");
    }
    function Ym(t, e) {
        return t.length <= e ? t : t.substr(0, 27) + "...";
    }
    function Xm(t, e, i) {
        for(var o = e.split("."), n = o.pop(), r = t, s = 0; s < o.length; s++){
            var a = o[s];
            a in r || (r[a] = {}), r = r[a];
        }
        return r[n] = i, t;
    }
    function Gm(t, e) {
        var i = {};
        for(var o in t)if (t.hasOwnProperty(o)) {
            var n = e[o];
            hu(n) ? Fu(n).call(n, function(e) {
                Xm(i, e, t[o]);
            }) : Xm(i, "string" == typeof n ? n : o, t[o]);
        }
        return i;
    }
    function Km(t) {
        var e, i = mm(t), o = {
            nodes: [],
            edges: [],
            options: {}
        };
        i.nodes && Fu(e = i.nodes).call(e, function(t) {
            var e = {
                id: t.id,
                label: String(t.label || t.id)
            };
            zm(e, Gm(t.attr, bm)), e.image && (e.shape = "image"), o.nodes.push(e);
        });
        if (i.edges) {
            var n, r = function(t) {
                var e = {
                    from: t.from,
                    to: t.to
                };
                return zm(e, Gm(t.attr, wm)), null == e.arrows && "->" === t.type && (e.arrows = "to"), e;
            };
            Fu(n = i.edges).call(n, function(t) {
                var e, i, n, s, a, h, d;
                (e = t.from instanceof Object ? t.from.nodes : {
                    id: t.from
                }, i = t.to instanceof Object ? t.to.nodes : {
                    id: t.to
                }, t.from instanceof Object && t.from.edges) && Fu(n = t.from.edges).call(n, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
                (a = i, h = function(e, i) {
                    var n = Rm(o, e.id, i.id, t.type, t.attr), s = r(n);
                    o.edges.push(s);
                }, hu(s = e) ? Fu(s).call(s, function(t) {
                    hu(a) ? Fu(a).call(a, function(e) {
                        h(t, e);
                    }) : h(t, a);
                }) : hu(a) ? Fu(a).call(a, function(t) {
                    h(s, t);
                }) : h(s, a), t.to instanceof Object && t.to.edges) && Fu(d = t.to.edges).call(d, function(t) {
                    var e = r(t);
                    o.edges.push(e);
                });
            });
        }
        return i.attr && (o.options = i.attr), o;
    }
    var $m = Object.freeze({
        __proto__: null,
        parseDOT: mm,
        DOTToGraph: Km
    });
    function Zm(t, e) {
        var i, o = {
            edges: {
                inheritColor: !1
            },
            nodes: {
                fixed: !1,
                parseColor: !1
            }
        };
        null != e && (null != e.fixed && (o.nodes.fixed = e.fixed), null != e.parseColor && (o.nodes.parseColor = e.parseColor), null != e.inheritColor && (o.edges.inheritColor = e.inheritColor));
        var n = t.edges, r = vu(n).call(n, function(t) {
            var e = {
                from: t.source,
                id: t.id,
                to: t.target
            };
            return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), "Directed" === t.type && (e.arrows = "to"), t.color && !1 === o.edges.inheritColor && (e.color = t.color), e;
        });
        return {
            nodes: vu(i = t.nodes).call(i, function(t) {
                var e = {
                    id: t.id,
                    fixed: o.nodes.fixed && null != t.x && null != t.y
                };
                return null != t.attributes && (e.attributes = t.attributes), null != t.label && (e.label = t.label), null != t.size && (e.size = t.size), null != t.attributes && null != t.attributes.title && (e.title = t.attributes.title), null != t.title && (e.title = t.title), null != t.x && (e.x = t.x), null != t.y && (e.y = t.y), null != t.color && (!0 === o.nodes.parseColor ? e.color = t.color : e.color = {
                    background: t.color,
                    border: t.color,
                    highlight: {
                        background: t.color,
                        border: t.color
                    },
                    hover: {
                        background: t.color,
                        border: t.color
                    }
                }), e;
            }),
            edges: r
        };
    }
    var Qm = Object.freeze({
        __proto__: null,
        parseGephi: Zm
    }), Jm = Object.freeze({
        __proto__: null,
        en: {
            addDescription: "Click in an empty space to place a new node.",
            addEdge: "Add Edge",
            addNode: "Add Node",
            back: "Back",
            close: "Close",
            createEdgeError: "Cannot link edges to a cluster.",
            del: "Delete selected",
            deleteClusterError: "Clusters cannot be deleted.",
            edgeDescription: "Click on a node and drag the edge to another node to connect them.",
            edit: "Edit",
            editClusterError: "Clusters cannot be edited.",
            editEdge: "Edit Edge",
            editEdgeDescription: "Click on the control points and drag them to a node to connect to it.",
            editNode: "Edit Node"
        },
        de: {
            addDescription: "Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.",
            addEdge: "Kante hinzuf\xfcgen",
            addNode: "Knoten hinzuf\xfcgen",
            back: "Zur\xfcck",
            close: "Schlie\xdfen",
            createEdgeError: "Es ist nicht m\xf6glich, Kanten mit Clustern zu verbinden.",
            del: "L\xf6sche Auswahl",
            deleteClusterError: "Cluster k\xf6nnen nicht gel\xf6scht werden.",
            edgeDescription: "Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.",
            edit: "Editieren",
            editClusterError: "Cluster k\xf6nnen nicht editiert werden.",
            editEdge: "Kante editieren",
            editEdgeDescription: "Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.",
            editNode: "Knoten editieren"
        },
        es: {
            addDescription: "Haga clic en un lugar vac\xedo para colocar un nuevo nodo.",
            addEdge: "A\xf1adir arista",
            addNode: "A\xf1adir nodo",
            back: "Atr\xe1s",
            close: "Cerrar",
            createEdgeError: "No se puede conectar una arista a un grupo.",
            del: "Eliminar selecci\xf3n",
            deleteClusterError: "No es posible eliminar grupos.",
            edgeDescription: "Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.",
            edit: "Editar",
            editClusterError: "No es posible editar grupos.",
            editEdge: "Editar arista",
            editEdgeDescription: "Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.",
            editNode: "Editar nodo"
        },
        it: {
            addDescription: "Clicca per aggiungere un nuovo nodo",
            addEdge: "Aggiungi un vertice",
            addNode: "Aggiungi un nodo",
            back: "Indietro",
            close: "Chiudere",
            createEdgeError: "Non si possono collegare vertici ad un cluster",
            del: "Cancella la selezione",
            deleteClusterError: "I cluster non possono essere cancellati",
            edgeDescription: "Clicca su un nodo e trascinalo ad un altro nodo per connetterli.",
            edit: "Modifica",
            editClusterError: "I clusters non possono essere modificati.",
            editEdge: "Modifica il vertice",
            editEdgeDescription: "Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.",
            editNode: "Modifica il nodo"
        },
        nl: {
            addDescription: "Klik op een leeg gebied om een nieuwe node te maken.",
            addEdge: "Link toevoegen",
            addNode: "Node toevoegen",
            back: "Terug",
            close: "Sluiten",
            createEdgeError: "Kan geen link maken naar een cluster.",
            del: "Selectie verwijderen",
            deleteClusterError: "Clusters kunnen niet worden verwijderd.",
            edgeDescription: "Klik op een node en sleep de link naar een andere node om ze te verbinden.",
            edit: "Wijzigen",
            editClusterError: "Clusters kunnen niet worden aangepast.",
            editEdge: "Link wijzigen",
            editEdgeDescription: "Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.",
            editNode: "Node wijzigen"
        },
        pt: {
            addDescription: "Clique em um espa\xe7o em branco para adicionar um novo n\xf3",
            addEdge: "Adicionar aresta",
            addNode: "Adicionar n\xf3",
            back: "Voltar",
            close: "Fechar",
            createEdgeError: "N\xe3o foi poss\xedvel linkar arestas a um cluster.",
            del: "Remover selecionado",
            deleteClusterError: "Clusters n\xe3o puderam ser removidos.",
            edgeDescription: "Clique em um n\xf3 e arraste a aresta at\xe9 outro n\xf3 para conect\xe1-los",
            edit: "Editar",
            editClusterError: "Clusters n\xe3o puderam ser editados.",
            editEdge: "Editar aresta",
            editEdgeDescription: "Clique nos pontos de controle e os arraste para um n\xf3 para conect\xe1-los",
            editNode: "Editar n\xf3"
        },
        ru: {
            addDescription: "Кликните в свободное место, чтобы добавить новый узел.",
            addEdge: "Добавить ребро",
            addNode: "Добавить узел",
            back: "Назад",
            close: "Закрывать",
            createEdgeError: "Невозможно соединить ребра в кластер.",
            del: "Удалить выбранное",
            deleteClusterError: "Кластеры не могут быть удалены",
            edgeDescription: "Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.",
            edit: "Редактировать",
            editClusterError: "Кластеры недоступны для редактирования.",
            editEdge: "Редактировать ребро",
            editEdgeDescription: "Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.",
            editNode: "Редактировать узел"
        },
        cn: {
            addDescription: "单击空白处放置新节点。",
            addEdge: "添加连接线",
            addNode: "添加节点",
            back: "返回",
            close: "關閉",
            createEdgeError: "无法将连接线连接到群集。",
            del: "删除选定",
            deleteClusterError: "无法删除群集。",
            edgeDescription: "单击某个节点并将该连接线拖动到另一个节点以连接它们。",
            edit: "编辑",
            editClusterError: "无法编辑群集。",
            editEdge: "编辑连接线",
            editEdgeDescription: "单击控制节点并将它们拖到节点上连接。",
            editNode: "编辑节点"
        },
        uk: {
            addDescription: "Kлікніть на вільне місце, щоб додати новий вузол.",
            addEdge: "Додати край",
            addNode: "Додати вузол",
            back: "Назад",
            close: "Закрити",
            createEdgeError: "Не можливо об'єднати краї в групу.",
            del: "Видалити обране",
            deleteClusterError: "Групи не можуть бути видалені.",
            edgeDescription: "Клікніть на вузол і перетягніть край до іншого вузла, щоб їх з'єднати.",
            edit: "Редагувати",
            editClusterError: "Групи недоступні для редагування.",
            editEdge: "Редагувати край",
            editEdgeDescription: "Клікніть на контрольні точки і перетягніть їх у вузол, щоб підключитися до нього.",
            editNode: "Редагувати вузол"
        },
        fr: {
            addDescription: "Cliquez dans un endroit vide pour placer un nœud.",
            addEdge: "Ajouter un lien",
            addNode: "Ajouter un nœud",
            back: "Retour",
            close: "Fermer",
            createEdgeError: "Impossible de cr\xe9er un lien vers un cluster.",
            del: "Effacer la s\xe9lection",
            deleteClusterError: "Les clusters ne peuvent pas \xeatre effac\xe9s.",
            edgeDescription: "Cliquez sur un nœud et glissez le lien vers un autre nœud pour les connecter.",
            edit: "\xc9diter",
            editClusterError: "Les clusters ne peuvent pas \xeatre \xe9dit\xe9s.",
            editEdge: "\xc9diter le lien",
            editEdgeDescription: "Cliquez sur les points de contr\xf4le et glissez-les pour connecter un nœud.",
            editNode: "\xc9diter le nœud"
        },
        cs: {
            addDescription: "Kluknut\xedm do pr\xe1zdn\xe9ho prostoru můžete přidat nov\xfd vrchol.",
            addEdge: "Přidat hranu",
            addNode: "Přidat vrchol",
            back: "Zpět",
            close: "Zavř\xedt",
            createEdgeError: "Nelze připojit hranu ke shluku.",
            del: "Smazat v\xfdběr",
            deleteClusterError: "Nelze mazat shluky.",
            edgeDescription: "Přetažen\xedm z jednoho vrcholu do druh\xe9ho můžete spojit tyto vrcholy novou hranou.",
            edit: "Upravit",
            editClusterError: "Nelze upravovat shluky.",
            editEdge: "Upravit hranu",
            editEdgeDescription: "Přetažen\xedm kontroln\xedho vrcholu hrany ji můžete připojit k jin\xe9mu vrcholu.",
            editNode: "Upravit vrchol"
        }
    });
    var tb = function() {
        function t() {
            Xl(this, t), this.NUM_ITERATIONS = 4, this.image = new Image, this.canvas = document.createElement("canvas");
        }
        return $l(t, [
            {
                key: "init",
                value: function() {
                    if (!this.initialized()) {
                        this.src = this.image.src;
                        var t = this.image.width, e = this.image.height;
                        this.width = t, this.height = e;
                        var i = Math.floor(e / 2), o = Math.floor(e / 4), n = Math.floor(e / 8), r = Math.floor(e / 16), s = Math.floor(t / 2), a = Math.floor(t / 4), h = Math.floor(t / 8), d = Math.floor(t / 16);
                        this.canvas.width = 3 * a, this.canvas.height = i, this.coordinates = [
                            [
                                0,
                                0,
                                s,
                                i
                            ],
                            [
                                s,
                                0,
                                a,
                                o
                            ],
                            [
                                s,
                                o,
                                h,
                                n
                            ],
                            [
                                5 * h,
                                o,
                                d,
                                r
                            ]
                        ], this._fillMipMap();
                    }
                }
            },
            {
                key: "initialized",
                value: function() {
                    return void 0 !== this.coordinates;
                }
            },
            {
                key: "_fillMipMap",
                value: function() {
                    var t = this.canvas.getContext("2d"), e = this.coordinates[0];
                    t.drawImage(this.image, e[0], e[1], e[2], e[3]);
                    for(var i = 1; i < this.NUM_ITERATIONS; i++){
                        var o = this.coordinates[i - 1], n = this.coordinates[i];
                        t.drawImage(this.canvas, o[0], o[1], o[2], o[3], n[0], n[1], n[2], n[3]);
                    }
                }
            },
            {
                key: "drawImageAtPosition",
                value: function(t, e, i, o, n, r) {
                    if (this.initialized()) {
                        if (e > 2) {
                            e *= .5;
                            for(var s = 0; e > 2 && s < this.NUM_ITERATIONS;)e *= .5, s += 1;
                            s >= this.NUM_ITERATIONS && (s = this.NUM_ITERATIONS - 1);
                            var a = this.coordinates[s];
                            t.drawImage(this.canvas, a[0], a[1], a[2], a[3], i, o, n, r);
                        } else t.drawImage(this.image, i, o, n, r);
                    }
                }
            }
        ]), t;
    }(), eb = function() {
        function t(e) {
            Xl(this, t), this.images = {}, this.imageBroken = {}, this.callback = e;
        }
        return $l(t, [
            {
                key: "_tryloadBrokenUrl",
                value: function(t, e, i) {
                    void 0 !== t && void 0 !== i && (void 0 !== e ? (i.image.onerror = function() {
                        console.error("Could not load brokenImage:", e);
                    }, i.image.src = e) : console.warn("No broken url image defined"));
                }
            },
            {
                key: "_redrawWithImage",
                value: function(t) {
                    this.callback && this.callback(t);
                }
            },
            {
                key: "load",
                value: function(t, e) {
                    var i = this, o = this.images[t];
                    if (o) return o;
                    var n = new tb;
                    return this.images[t] = n, n.image.onload = function() {
                        i._fixImageCoordinates(n.image), n.init(), i._redrawWithImage(n);
                    }, n.image.onerror = function() {
                        console.error("Could not load image:", t), i._tryloadBrokenUrl(t, e, n);
                    }, n.image.src = t, n;
                }
            },
            {
                key: "_fixImageCoordinates",
                value: function(t) {
                    0 === t.width && (document.body.appendChild(t), t.width = t.offsetWidth, t.height = t.offsetHeight, document.body.removeChild(t));
                }
            }
        ]), t;
    }(), ib = {
        exports: {}
    }, ob = r(function() {
        if ("function" == typeof ArrayBuffer) {
            var t = new ArrayBuffer(8);
            Object.isExtensible(t) && Object.defineProperty(t, "a", {
                value: 8
            });
        }
    }), nb = r, rb = X, sb = z, ab = ob, hb = Object.isExtensible, db = nb(function() {
        hb(1);
    }) || ab ? function(t) {
        return !!rb(t) && (!ab || "ArrayBuffer" != sb(t)) && (!hb || hb(t));
    } : hb, lb = !r(function() {
        return Object.isExtensible(Object.preventExtensions({}));
    }), cb = xi, ub = y, fb = Li, pb = X, vb = Vt, gb = Ue.f, yb = sh, mb = dh, bb = db, wb = lb, kb = !1, _b = Gt("meta"), xb = 0, Eb = function(t) {
        gb(t, _b, {
            value: {
                objectID: "O" + xb++,
                weakData: {}
            }
        });
    }, Ob = ib.exports = {
        enable: function() {
            Ob.enable = function() {}, kb = !0;
            var t = yb.f, e = ub([].splice), i = {};
            i[_b] = 1, t(i).length && (yb.f = function(i) {
                for(var o = t(i), n = 0, r = o.length; n < r; n++)if (o[n] === _b) {
                    e(o, n, 1);
                    break;
                }
                return o;
            }, cb({
                target: "Object",
                stat: !0,
                forced: !0
            }, {
                getOwnPropertyNames: mb.f
            }));
        },
        fastKey: function(t, e) {
            if (!pb(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!vb(t, _b)) {
                if (!bb(t)) return "F";
                if (!e) return "E";
                Eb(t);
            }
            return t[_b].objectID;
        },
        getWeakData: function(t, e) {
            if (!vb(t, _b)) {
                if (!bb(t)) return !0;
                if (!e) return !1;
                Eb(t);
            }
            return t[_b].weakData;
        },
        onFreeze: function(t) {
            return wb && kb && bb(t) && !vb(t, _b) && Eb(t), t;
        }
    };
    fb[_b] = !0;
    var Cb = qe, Sb = x, Tb = Ze, Mb = wt, Pb = qs, Db = zi, Bb = tt, Ib = wa, zb = fa, Fb = Rs, Nb = n.TypeError, Ab = function(t, e) {
        this.stopped = t, this.result = e;
    }, Rb = Ab.prototype, jb = function(t, e, i) {
        var o, n, r, s, a, h, d, l = i && i.that, c = !(!i || !i.AS_ENTRIES), u = !(!i || !i.IS_ITERATOR), f = !(!i || !i.INTERRUPTED), p = Cb(e, l), v = function(t) {
            return o && Fb(o, "normal", t), new Ab(!0, t);
        }, g = function(t) {
            return c ? (Tb(t), f ? p(t[0], t[1], v) : p(t[0], t[1])) : f ? p(t, v) : p(t);
        };
        if (u) o = t;
        else {
            if (!(n = zb(t))) throw Nb(Mb(t) + " is not iterable");
            if (Pb(n)) {
                for(r = 0, s = Db(t); s > r; r++)if ((a = g(t[r])) && Bb(Rb, a)) return a;
                return new Ab(!1);
            }
            o = Ib(t, n);
        }
        for(h = o.next; !(d = Sb(h, o)).done;){
            try {
                a = g(d.value);
            } catch (t1) {
                Fb(o, "throw", t1);
            }
            if ("object" == typeof a && a && Bb(Rb, a)) return a;
        }
        return new Ab(!1);
    }, Lb = tt, Hb = n.TypeError, Wb = function(t, e) {
        if (Lb(e, t)) return t;
        throw Hb("Incorrect invocation");
    }, Vb = xi, qb = n, Ub = ib.exports, Yb = r, Xb = ci, Gb = jb, Kb = Wb, $b = m, Zb = X, Qb = Zr, Jb = Ue.f, tw = Vh.forEach, ew = w, iw = Un.set, ow = Un.getterFor, nw = function(t, e, i) {
        var o, n = -1 !== t.indexOf("Map"), r = -1 !== t.indexOf("Weak"), s = n ? "set" : "add", a = qb[t], h = a && a.prototype, d = {};
        if (ew && $b(a) && (r || h.forEach && !Yb(function() {
            (new a).entries().next();
        }))) {
            var l = (o = e(function(e, i) {
                iw(Kb(e, l), {
                    type: t,
                    collection: new a
                }), null != i && Gb(i, e[s], {
                    that: e,
                    AS_ENTRIES: n
                });
            })).prototype, c = ow(t);
            tw([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(t) {
                var e = "add" == t || "set" == t;
                !(t in h) || r && "clear" == t || Xb(l, t, function(i, o) {
                    var n = c(this).collection;
                    if (!e && r && !Zb(i)) return "get" == t && void 0;
                    var s = n[t](0 === i ? 0 : i, o);
                    return e ? this : s;
                });
            }), r || Jb(l, "size", {
                configurable: !0,
                get: function() {
                    return c(this).collection.size;
                }
            });
        } else o = i.getConstructor(e, t, n, s), Ub.enable();
        return Qb(o, t, !1, !0), d[t] = o, Vb({
            global: !0,
            forced: !0
        }, d), r || i.setStrong(o, t, n), o;
    }, rw = Ir, sw = function(t, e, i) {
        for(var o in e)i && i.unsafe && t[o] ? t[o] = e[o] : rw(t, o, e[o], i);
        return t;
    }, aw = J, hw = Ue, dw = w, lw = re("species"), cw = Ue.f, uw = kr, fw = sw, pw = qe, vw = Wb, gw = jb, yw = Ss, mw = function(t) {
        var e = aw(t), i = hw.f;
        dw && e && !e[lw] && i(e, lw, {
            configurable: !0,
            get: function() {
                return this;
            }
        });
    }, bw = w, ww = ib.exports.fastKey, kw = Un.set, _w = Un.getterFor, xw = {
        getConstructor: function(t, e, i, o) {
            var n = t(function(t, n) {
                vw(t, r), kw(t, {
                    type: e,
                    index: uw(null),
                    first: void 0,
                    last: void 0,
                    size: 0
                }), bw || (t.size = 0), null != n && gw(n, t[o], {
                    that: t,
                    AS_ENTRIES: i
                });
            }), r = n.prototype, s = _w(e), a = function(t, e, i) {
                var o, n, r = s(t), a = h(t, e);
                return a ? a.value = i : (r.last = a = {
                    index: n = ww(e, !0),
                    key: e,
                    value: i,
                    previous: o = r.last,
                    next: void 0,
                    removed: !1
                }, r.first || (r.first = a), o && (o.next = a), bw ? r.size++ : t.size++, "F" !== n && (r.index[n] = a)), t;
            }, h = function(t, e) {
                var i, o = s(t), n = ww(e);
                if ("F" !== n) return o.index[n];
                for(i = o.first; i; i = i.next)if (i.key == e) return i;
            };
            return fw(r, {
                clear: function() {
                    for(var t = s(this), e = t.index, i = t.first; i;)i.removed = !0, i.previous && (i.previous = i.previous.next = void 0), delete e[i.index], i = i.next;
                    t.first = t.last = void 0, bw ? t.size = 0 : this.size = 0;
                },
                delete: function(t) {
                    var e = this, i = s(e), o = h(e, t);
                    if (o) {
                        var n = o.next, r = o.previous;
                        delete i.index[o.index], o.removed = !0, r && (r.next = n), n && (n.previous = r), i.first == o && (i.first = n), i.last == o && (i.last = r), bw ? i.size-- : e.size--;
                    }
                    return !!o;
                },
                forEach: function(t) {
                    for(var e, i = s(this), o = pw(t, arguments.length > 1 ? arguments[1] : void 0); e = e ? e.next : i.first;)for(o(e.value, e.key, this); e && e.removed;)e = e.previous;
                },
                has: function(t) {
                    return !!h(this, t);
                }
            }), fw(r, i ? {
                get: function(t) {
                    var e = h(this, t);
                    return e && e.value;
                },
                set: function(t, e) {
                    return a(this, 0 === t ? 0 : t, e);
                }
            } : {
                add: function(t) {
                    return a(this, t = 0 === t ? 0 : t, t);
                }
            }), bw && cw(r, "size", {
                get: function() {
                    return s(this).size;
                }
            }), n;
        },
        setStrong: function(t, e, i) {
            var o = e + " Iterator", n = _w(e), r = _w(o);
            yw(t, e, function(t, e) {
                kw(this, {
                    type: o,
                    target: t,
                    state: n(t),
                    kind: e,
                    last: void 0
                });
            }, function() {
                for(var t = r(this), e = t.kind, i = t.last; i && i.removed;)i = i.previous;
                return t.target && (t.last = i = i ? i.next : t.state.first) ? "keys" == e ? {
                    value: i.key,
                    done: !1
                } : "values" == e ? {
                    value: i.value,
                    done: !1
                } : {
                    value: [
                        i.key,
                        i.value
                    ],
                    done: !1
                } : (t.target = void 0, {
                    value: void 0,
                    done: !0
                });
            }, i ? "entries" : "values", !i, !0), mw(e);
        }
    };
    nw("Map", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, xw);
    var Ew = G.Map, Ow = function() {
        function t() {
            Xl(this, t), this.clear(), this._defaultIndex = 0, this._groupIndex = 0, this._defaultGroups = [
                {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                {
                    border: "#FFA500",
                    background: "#FFFF00",
                    highlight: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    },
                    hover: {
                        border: "#FFA500",
                        background: "#FFFFA3"
                    }
                },
                {
                    border: "#FA0A10",
                    background: "#FB7E81",
                    highlight: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    },
                    hover: {
                        border: "#FA0A10",
                        background: "#FFAFB1"
                    }
                },
                {
                    border: "#41A906",
                    background: "#7BE141",
                    highlight: {
                        border: "#41A906",
                        background: "#A1EC76"
                    },
                    hover: {
                        border: "#41A906",
                        background: "#A1EC76"
                    }
                },
                {
                    border: "#E129F0",
                    background: "#EB7DF4",
                    highlight: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    },
                    hover: {
                        border: "#E129F0",
                        background: "#F0B3F5"
                    }
                },
                {
                    border: "#7C29F0",
                    background: "#AD85E4",
                    highlight: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    },
                    hover: {
                        border: "#7C29F0",
                        background: "#D3BDF0"
                    }
                },
                {
                    border: "#C37F00",
                    background: "#FFA807",
                    highlight: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    },
                    hover: {
                        border: "#C37F00",
                        background: "#FFCA66"
                    }
                },
                {
                    border: "#4220FB",
                    background: "#6E6EFD",
                    highlight: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    },
                    hover: {
                        border: "#4220FB",
                        background: "#9B9BFD"
                    }
                },
                {
                    border: "#FD5A77",
                    background: "#FFC0CB",
                    highlight: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    },
                    hover: {
                        border: "#FD5A77",
                        background: "#FFD1D9"
                    }
                },
                {
                    border: "#4AD63A",
                    background: "#C2FABC",
                    highlight: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    },
                    hover: {
                        border: "#4AD63A",
                        background: "#E6FFE3"
                    }
                },
                {
                    border: "#990000",
                    background: "#EE0000",
                    highlight: {
                        border: "#BB0000",
                        background: "#FF3333"
                    },
                    hover: {
                        border: "#BB0000",
                        background: "#FF3333"
                    }
                },
                {
                    border: "#FF6000",
                    background: "#FF6000",
                    highlight: {
                        border: "#FF6000",
                        background: "#FF6000"
                    },
                    hover: {
                        border: "#FF6000",
                        background: "#FF6000"
                    }
                },
                {
                    border: "#97C2FC",
                    background: "#2B7CE9",
                    highlight: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    },
                    hover: {
                        border: "#D2E5FF",
                        background: "#2B7CE9"
                    }
                },
                {
                    border: "#399605",
                    background: "#255C03",
                    highlight: {
                        border: "#399605",
                        background: "#255C03"
                    },
                    hover: {
                        border: "#399605",
                        background: "#255C03"
                    }
                },
                {
                    border: "#B70054",
                    background: "#FF007E",
                    highlight: {
                        border: "#B70054",
                        background: "#FF007E"
                    },
                    hover: {
                        border: "#B70054",
                        background: "#FF007E"
                    }
                },
                {
                    border: "#AD85E4",
                    background: "#7C29F0",
                    highlight: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    },
                    hover: {
                        border: "#D3BDF0",
                        background: "#7C29F0"
                    }
                },
                {
                    border: "#4557FA",
                    background: "#000EA1",
                    highlight: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    },
                    hover: {
                        border: "#6E6EFD",
                        background: "#000EA1"
                    }
                },
                {
                    border: "#FFC0CB",
                    background: "#FD5A77",
                    highlight: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    },
                    hover: {
                        border: "#FFD1D9",
                        background: "#FD5A77"
                    }
                },
                {
                    border: "#C2FABC",
                    background: "#74D66A",
                    highlight: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    },
                    hover: {
                        border: "#E6FFE3",
                        background: "#74D66A"
                    }
                },
                {
                    border: "#EE0000",
                    background: "#990000",
                    highlight: {
                        border: "#FF3333",
                        background: "#BB0000"
                    },
                    hover: {
                        border: "#FF3333",
                        background: "#BB0000"
                    }
                }
            ], this.options = {}, this.defaultOptions = {
                useDefaultGroups: !0
            }, fo(this.options, this.defaultOptions);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    var e = [
                        "useDefaultGroups"
                    ];
                    if (void 0 !== t) {
                        for(var i in t)if (Object.prototype.hasOwnProperty.call(t, i) && -1 === zp(e).call(e, i)) {
                            var o = t[i];
                            this.add(i, o);
                        }
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    this._groups = new Ew, this._groupNames = [];
                }
            },
            {
                key: "get",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._groups.get(t);
                    if (void 0 === i && e) {
                        if (!1 === this.options.useDefaultGroups && this._groupNames.length > 0) {
                            var o = this._groupIndex % this._groupNames.length;
                            ++this._groupIndex, (i = {}).color = this._groups.get(this._groupNames[o]), this._groups.set(t, i);
                        } else {
                            var n = this._defaultIndex % this._defaultGroups.length;
                            this._defaultIndex++, (i = {}).color = this._defaultGroups[n], this._groups.set(t, i);
                        }
                    }
                    return i;
                }
            },
            {
                key: "add",
                value: function(t, e) {
                    return this._groups.has(t) || this._groupNames.push(t), this._groups.set(t, e), e;
                }
            }
        ]), t;
    }();
    xi({
        target: "Number",
        stat: !0
    }, {
        isNaN: function(t) {
            return t != t;
        }
    });
    var Cw = G.Number.isNaN, Sw = n.isFinite, Tw = Number.isFinite || function(t) {
        return "number" == typeof t && Sw(t);
    };
    xi({
        target: "Number",
        stat: !0
    }, {
        isFinite: Tw
    });
    var Mw = G.Number.isFinite, Pw = Vh.some;
    xi({
        target: "Array",
        proto: !0,
        forced: !Ou("some")
    }, {
        some: function(t) {
            return Pw(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var Dw = Mo("Array").some, Bw = tt, Iw = Dw, zw = Array.prototype, Fw = function(t) {
        var e = t.some;
        return t === zw || Bw(zw, t) && e === zw.some ? Iw : e;
    }, Nw = Fw, Aw = n, Rw = r, jw = on, Lw = dp.trim, Hw = y("".charAt), Ww = Aw.parseFloat, Vw = Aw.Symbol, qw = Vw && Vw.iterator, Uw = 1 / Ww("	\n\v\f\r \xa0              　\u2028\u2029\uFEFF-0") != -1 / 0 || qw && !Rw(function() {
        Ww(Object(qw));
    }) ? function(t) {
        var e = Lw(jw(t)), i = Ww(e);
        return 0 === i && "-" == Hw(e, 0) ? -0 : i;
    } : Ww;
    xi({
        global: !0,
        forced: parseFloat != Uw
    }, {
        parseFloat: Uw
    });
    var Yw = G.parseFloat, Xw = xi, Gw = r, Kw = dh.f;
    Xw({
        target: "Object",
        stat: !0,
        forced: Gw(function() {
            return !Object.getOwnPropertyNames(1);
        })
    }, {
        getOwnPropertyNames: Kw
    });
    var $w = G.Object, Zw = function(t) {
        return $w.getOwnPropertyNames(t);
    }, Qw = Zw;
    function Jw(t, e) {
        var i = [
            "node",
            "edge",
            "label"
        ], o = !0, n = im(e, "chosen");
        if ("boolean" == typeof n) o = n;
        else if ("object" === Qc(n)) {
            if (-1 === zp(i).call(i, t)) throw new Error("choosify: subOption '" + t + "' should be one of '" + i.join("', '") + "'");
            var r = im(e, [
                "chosen",
                t
            ]);
            "boolean" != typeof r && "function" != typeof r || (o = r);
        }
        return o;
    }
    function tk(t, e, i) {
        if (t.width <= 0 || t.height <= 0) return !1;
        if (void 0 !== i) {
            var o = {
                x: e.x - i.x,
                y: e.y - i.y
            };
            if (0 !== i.angle) {
                var n = -i.angle;
                e = {
                    x: Math.cos(n) * o.x - Math.sin(n) * o.y,
                    y: Math.sin(n) * o.x + Math.cos(n) * o.y
                };
            } else e = o;
        }
        var r = t.x + t.width, s = t.y + t.width;
        return t.left < e.x && r > e.x && t.top < e.y && s > e.y;
    }
    function ek(t) {
        return "string" == typeof t && "" !== t;
    }
    function ik(t, e, i, o) {
        var n = o.x, r = o.y;
        if ("function" == typeof o.distanceToBorder) {
            var s = o.distanceToBorder(t, e), a = Math.sin(e) * s, h = Math.cos(e) * s;
            h === s ? (n += s, r = o.y) : a === s ? (n = o.x, r -= s) : (n += h, r -= a);
        } else o.shape.width > o.shape.height ? (n = o.x + .5 * o.shape.width, r = o.y - i) : (n = o.x + i, r = o.y - .5 * o.shape.height);
        return {
            x: n,
            y: r
        };
    }
    var ok = Mo("Array").values, nk = Jo, rk = Vt, sk = tt, ak = ok, hk = Array.prototype, dk = {
        DOMTokenList: !0,
        NodeList: !0
    }, lk = function(t) {
        var e = t.values;
        return t === hk || sk(hk, t) && e === hk.values || rk(dk, nk(t)) ? ak : e;
    }, ck = function() {
        function t(e) {
            Xl(this, t), this.measureText = e, this.current = 0, this.width = 0, this.height = 0, this.lines = [];
        }
        return $l(t, [
            {
                key: "_add",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "normal";
                    void 0 === this.lines[t] && (this.lines[t] = {
                        width: 0,
                        height: 0,
                        blocks: []
                    });
                    var o = e;
                    void 0 !== e && "" !== e || (o = " ");
                    var n = this.measureText(o, i), r = fo({}, lk(n));
                    r.text = e, r.width = n.width, r.mod = i, void 0 !== e && "" !== e || (r.width = 0), this.lines[t].blocks.push(r), this.lines[t].width += r.width;
                }
            },
            {
                key: "curWidth",
                value: function() {
                    var t = this.lines[this.current];
                    return void 0 === t ? 0 : t.width;
                }
            },
            {
                key: "append",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e);
                }
            },
            {
                key: "newLine",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal";
                    this._add(this.current, t, e), this.current++;
                }
            },
            {
                key: "determineLineHeights",
                value: function() {
                    for(var t = 0; t < this.lines.length; t++){
                        var e = this.lines[t], i = 0;
                        if (void 0 !== e.blocks) for(var o = 0; o < e.blocks.length; o++){
                            var n = e.blocks[o];
                            i < n.height && (i = n.height);
                        }
                        e.height = i;
                    }
                }
            },
            {
                key: "determineLabelSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0; i < this.lines.length; i++){
                        var o = this.lines[i];
                        o.width > t && (t = o.width), e += o.height;
                    }
                    this.width = t, this.height = e;
                }
            },
            {
                key: "removeEmptyBlocks",
                value: function() {
                    for(var t = [], e = 0; e < this.lines.length; e++){
                        var i = this.lines[e];
                        if (0 !== i.blocks.length && (e !== this.lines.length - 1 || 0 !== i.width)) {
                            var o = {};
                            fo(o, i), o.blocks = [];
                            for(var n = void 0, r = [], s = 0; s < i.blocks.length; s++){
                                var a = i.blocks[s];
                                0 !== a.width ? r.push(a) : void 0 === n && (n = a);
                            }
                            0 === r.length && void 0 !== n && r.push(n), o.blocks = r, t.push(o);
                        }
                    }
                    return t;
                }
            },
            {
                key: "finalize",
                value: function() {
                    this.determineLineHeights(), this.determineLabelSize();
                    var t = this.removeEmptyBlocks();
                    return {
                        width: this.width,
                        height: this.height,
                        lines: t
                    };
                }
            }
        ]), t;
    }(), uk = {
        "<b>": /<b>/,
        "<i>": /<i>/,
        "<code>": /<code>/,
        "</b>": /<\/b>/,
        "</i>": /<\/i>/,
        "</code>": /<\/code>/,
        "*": /\*/,
        _: /_/,
        "`": /`/,
        afterBold: /[^*]/,
        afterItal: /[^_]/,
        afterMono: /[^`]/
    }, fk = function() {
        function t(e) {
            Xl(this, t), this.text = e, this.bold = !1, this.ital = !1, this.mono = !1, this.spacing = !1, this.position = 0, this.buffer = "", this.modStack = [], this.blocks = [];
        }
        return $l(t, [
            {
                key: "mod",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : this.modStack[0];
                }
            },
            {
                key: "modName",
                value: function() {
                    return 0 === this.modStack.length ? "normal" : "mono" === this.modStack[0] ? "mono" : this.bold && this.ital ? "boldital" : this.bold ? "bold" : this.ital ? "ital" : void 0;
                }
            },
            {
                key: "emitBlock",
                value: function() {
                    this.spacing && (this.add(" "), this.spacing = !1), this.buffer.length > 0 && (this.blocks.push({
                        text: this.buffer,
                        mod: this.modName()
                    }), this.buffer = "");
                }
            },
            {
                key: "add",
                value: function(t) {
                    " " === t && (this.spacing = !0), this.spacing && (this.buffer += " ", this.spacing = !1), " " != t && (this.buffer += t);
                }
            },
            {
                key: "parseWS",
                value: function(t) {
                    return !!/[ \t]/.test(t) && (this.mono ? this.add(t) : this.spacing = !0, !0);
                }
            },
            {
                key: "setTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !0, this.modStack.unshift(t);
                }
            },
            {
                key: "unsetTag",
                value: function(t) {
                    this.emitBlock(), this[t] = !1, this.modStack.shift();
                }
            },
            {
                key: "parseStartTag",
                value: function(t, e) {
                    return !(this.mono || this[t] || !this.match(e)) && (this.setTag(t), !0);
                }
            },
            {
                key: "match",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.prepareRegExp(t), o = $c(i, 2), n = o[0], r = o[1], s = n.test(this.text.substr(this.position, r));
                    return s && e && (this.position += r - 1), s;
                }
            },
            {
                key: "parseEndTag",
                value: function(t, e, i) {
                    var o = this.mod() === t;
                    return !(!(o = "mono" === t ? o && this.mono : o && !this.mono) || !this.match(e)) && (void 0 !== i ? (this.position === this.text.length - 1 || this.match(i, !1)) && this.unsetTag(t) : this.unsetTag(t), !0);
                }
            },
            {
                key: "replace",
                value: function(t, e) {
                    return !!this.match(t) && (this.add(e), this.position += length - 1, !0);
                }
            },
            {
                key: "prepareRegExp",
                value: function(t) {
                    var e, i;
                    if (t instanceof RegExp) i = t, e = 1;
                    else {
                        var o = uk[t];
                        i = void 0 !== o ? o : new RegExp(t), e = t.length;
                    }
                    return [
                        i,
                        e
                    ];
                }
            }
        ]), t;
    }(), pk = function() {
        function t(e, i, o, n) {
            var r = this;
            Xl(this, t), this.ctx = e, this.parent = i, this.selected = o, this.hover = n;
            this.lines = new ck(function(t, i) {
                if (void 0 === t) return 0;
                var s = r.parent.getFormattingValues(e, o, n, i), a = 0;
                "" !== t && (a = r.ctx.measureText(t).width);
                return {
                    width: a,
                    values: s
                };
            });
        }
        return $l(t, [
            {
                key: "process",
                value: function(t) {
                    if (!ek(t)) return this.lines.finalize();
                    var e = this.parent.fontOptions;
                    t = (t = t.replace(/\r\n/g, "\n")).replace(/\r/g, "\n");
                    var i = String(t).split("\n"), o = i.length;
                    if (e.multi) for(var n = 0; n < o; n++){
                        var r = this.splitBlocks(i[n], e.multi);
                        if (void 0 !== r) {
                            if (0 !== r.length) {
                                if (e.maxWdt > 0) for(var s = 0; s < r.length; s++){
                                    var a = r[s].mod, h = r[s].text;
                                    this.splitStringIntoLines(h, a, !0);
                                }
                                else for(var d = 0; d < r.length; d++){
                                    var l = r[d].mod, c = r[d].text;
                                    this.lines.append(c, l);
                                }
                                this.lines.newLine();
                            } else this.lines.newLine("");
                        }
                    }
                    else if (e.maxWdt > 0) for(var u = 0; u < o; u++)this.splitStringIntoLines(i[u]);
                    else for(var f = 0; f < o; f++)this.lines.newLine(i[f]);
                    return this.lines.finalize();
                }
            },
            {
                key: "decodeMarkupSystem",
                value: function(t) {
                    var e = "none";
                    return "markdown" === t || "md" === t ? e = "markdown" : !0 !== t && "html" !== t || (e = "html"), e;
                }
            },
            {
                key: "splitHtmlBlocks",
                value: function(t) {
                    for(var e = new fk(t), i = function(t) {
                        return !!/&/.test(t) && (e.replace(e.text, "&lt;", "<") || e.replace(e.text, "&amp;", "&") || e.add("&"), !0);
                    }; e.position < e.text.length;){
                        var o = e.text.charAt(e.position);
                        e.parseWS(o) || /</.test(o) && (e.parseStartTag("bold", "<b>") || e.parseStartTag("ital", "<i>") || e.parseStartTag("mono", "<code>") || e.parseEndTag("bold", "</b>") || e.parseEndTag("ital", "</i>") || e.parseEndTag("mono", "</code>")) || i(o) || e.add(o), e.position++;
                    }
                    return e.emitBlock(), e.blocks;
                }
            },
            {
                key: "splitMarkdownBlocks",
                value: function(t) {
                    for(var e = this, i = new fk(t), o = !0, n = function(t) {
                        return !!/\\/.test(t) && (i.position < e.text.length + 1 && (i.position++, t = e.text.charAt(i.position), / \t/.test(t) ? i.spacing = !0 : (i.add(t), o = !1)), !0);
                    }; i.position < i.text.length;){
                        var r = i.text.charAt(i.position);
                        i.parseWS(r) || n(r) || (o || i.spacing) && (i.parseStartTag("bold", "*") || i.parseStartTag("ital", "_") || i.parseStartTag("mono", "`")) || i.parseEndTag("bold", "*", "afterBold") || i.parseEndTag("ital", "_", "afterItal") || i.parseEndTag("mono", "`", "afterMono") || (i.add(r), o = !1), i.position++;
                    }
                    return i.emitBlock(), i.blocks;
                }
            },
            {
                key: "splitBlocks",
                value: function(t, e) {
                    var i = this.decodeMarkupSystem(e);
                    return "none" === i ? [
                        {
                            text: t,
                            mod: "normal"
                        }
                    ] : "markdown" === i ? this.splitMarkdownBlocks(t) : "html" === i ? this.splitHtmlBlocks(t) : void 0;
                }
            },
            {
                key: "overMaxWidth",
                value: function(t) {
                    var e = this.ctx.measureText(t).width;
                    return this.lines.curWidth() + e > this.parent.fontOptions.maxWdt;
                }
            },
            {
                key: "getLongestFit",
                value: function(t) {
                    for(var e = "", i = 0; i < t.length;){
                        var o = e + ("" === e ? "" : " ") + t[i];
                        if (this.overMaxWidth(o)) break;
                        e = o, i++;
                    }
                    return i;
                }
            },
            {
                key: "getLongestFitWord",
                value: function(t) {
                    for(var e = 0; e < t.length && !this.overMaxWidth(au(t).call(t, 0, e));)e++;
                    return e;
                }
            },
            {
                key: "splitStringIntoLines",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal", i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    this.parent.getFormattingValues(this.ctx, this.selected, this.hover, e);
                    for(var o = (t = (t = t.replace(/^( +)/g, "$1\r")).replace(/([^\r][^ ]*)( +)/g, "$1\r$2\r")).split("\r"); o.length > 0;){
                        var n = this.getLongestFit(o);
                        if (0 === n) {
                            var r = o[0], s = this.getLongestFitWord(r);
                            this.lines.newLine(au(r).call(r, 0, s), e), o[0] = au(r).call(r, s);
                        } else {
                            var a = n;
                            " " === o[n - 1] ? n-- : " " === o[a] && a++;
                            var h = au(o).call(o, 0, n).join("");
                            n == o.length && i ? this.lines.append(h, e) : this.lines.newLine(h, e), o = au(o).call(o, a);
                        }
                    }
                }
            }
        ]), t;
    }(), vk = [
        "bold",
        "ital",
        "boldital",
        "mono"
    ], gk = function() {
        function t(e, i) {
            var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            Xl(this, t), this.body = e, this.pointToSelf = !1, this.baseSize = void 0, this.fontOptions = {}, this.setOptions(i), this.size = {
                top: 0,
                left: 0,
                width: 0,
                height: 0,
                yLine: 0
            }, this.isEdgeLabel = o;
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (this.elementOptions = t, this.initFontOptions(t.font), ek(t.label) ? this.labelDirty = !0 : t.label = void 0, void 0 !== t.font && null !== t.font) {
                        if ("string" == typeof t.font) this.baseSize = this.fontOptions.size;
                        else if ("object" === Qc(t.font)) {
                            var e = t.font.size;
                            void 0 !== e && (this.baseSize = e);
                        }
                    }
                }
            },
            {
                key: "initFontOptions",
                value: function(e) {
                    var i = this;
                    Wy(vk, function(t) {
                        i.fontOptions[t] = {};
                    }), t.parseFontString(this.fontOptions, e) ? this.fontOptions.vadjust = 0 : Wy(e, function(t, e) {
                        null != t && "object" !== Qc(t) && (i.fontOptions[e] = t);
                    });
                }
            },
            {
                key: "constrain",
                value: function(t) {
                    var e = {
                        constrainWidth: !1,
                        maxWdt: -1,
                        minWdt: -1,
                        constrainHeight: !1,
                        minHgt: -1,
                        valign: "middle"
                    }, i = im(t, "widthConstraint");
                    if ("number" == typeof i) e.maxWdt = Number(i), e.minWdt = Number(i);
                    else if ("object" === Qc(i)) {
                        var o = im(t, [
                            "widthConstraint",
                            "maximum"
                        ]);
                        "number" == typeof o && (e.maxWdt = Number(o));
                        var n = im(t, [
                            "widthConstraint",
                            "minimum"
                        ]);
                        "number" == typeof n && (e.minWdt = Number(n));
                    }
                    var r = im(t, "heightConstraint");
                    if ("number" == typeof r) e.minHgt = Number(r);
                    else if ("object" === Qc(r)) {
                        var s = im(t, [
                            "heightConstraint",
                            "minimum"
                        ]);
                        "number" == typeof s && (e.minHgt = Number(s));
                        var a = im(t, [
                            "heightConstraint",
                            "valign"
                        ]);
                        "string" == typeof a && ("top" !== a && "bottom" !== a || (e.valign = a));
                    }
                    return e;
                }
            },
            {
                key: "update",
                value: function(t, e) {
                    this.setOptions(t, !0), this.propagateFonts(e), Ry(this.fontOptions, this.constrain(e)), this.fontOptions.chooser = Jw("label", e);
                }
            },
            {
                key: "adjustSizes",
                value: function(t) {
                    var e = t ? t.right + t.left : 0;
                    this.fontOptions.constrainWidth && (this.fontOptions.maxWdt -= e, this.fontOptions.minWdt -= e);
                    var i = t ? t.top + t.bottom : 0;
                    this.fontOptions.constrainHeight && (this.fontOptions.minHgt -= i);
                }
            },
            {
                key: "addFontOptionsToPile",
                value: function(t, e) {
                    for(var i = 0; i < e.length; ++i)this.addFontToPile(t, e[i]);
                }
            },
            {
                key: "addFontToPile",
                value: function(t, e) {
                    if (void 0 !== e && void 0 !== e.font && null !== e.font) {
                        var i = e.font;
                        t.push(i);
                    }
                }
            },
            {
                key: "getBasicOptions",
                value: function(e) {
                    for(var i = {}, o = 0; o < e.length; ++o){
                        var n = e[o], r = {};
                        t.parseFontString(r, n) && (n = r), Wy(n, function(t, e) {
                            void 0 !== t && (Object.prototype.hasOwnProperty.call(i, e) || (-1 !== zp(vk).call(vk, e) ? i[e] = {} : i[e] = t));
                        });
                    }
                    return i;
                }
            },
            {
                key: "getFontOption",
                value: function(e, i, o) {
                    for(var n, r = 0; r < e.length; ++r){
                        var s = e[r];
                        if (Object.prototype.hasOwnProperty.call(s, i)) {
                            if (null == (n = s[i])) continue;
                            var a = {};
                            if (t.parseFontString(a, n) && (n = a), Object.prototype.hasOwnProperty.call(n, o)) return n[o];
                        }
                    }
                    if (Object.prototype.hasOwnProperty.call(this.fontOptions, o)) return this.fontOptions[o];
                    throw new Error("Did not find value for multi-font for property: '" + o + "'");
                }
            },
            {
                key: "getFontOptions",
                value: function(t, e) {
                    for(var i = {}, o = [
                        "color",
                        "size",
                        "face",
                        "mod",
                        "vadjust"
                    ], n = 0; n < o.length; ++n){
                        var r = o[n];
                        i[r] = this.getFontOption(t, e, r);
                    }
                    return i;
                }
            },
            {
                key: "propagateFonts",
                value: function(t) {
                    var e = this, i = [];
                    this.addFontOptionsToPile(i, t), this.fontOptions = this.getBasicOptions(i);
                    for(var o = function(t) {
                        var o = vk[t], n = e.fontOptions[o];
                        Wy(e.getFontOptions(i, o), function(t, e) {
                            n[e] = t;
                        }), n.size = Number(n.size), n.vadjust = Number(n.vadjust);
                    }, n = 0; n < vk.length; ++n)o(n);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n) {
                    var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    if (void 0 !== this.elementOptions.label) {
                        var s = this.fontOptions.size * this.body.view.scale;
                        this.elementOptions.label && s < this.elementOptions.scaling.label.drawThreshold - 1 || (s >= this.elementOptions.scaling.label.maxVisible && (s = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale), this.calculateLabelSize(t, o, n, e, i, r), this._drawBackground(t), this._drawText(t, e, this.size.yLine, r, s));
                    }
                }
            },
            {
                key: "_drawBackground",
                value: function(t) {
                    if (void 0 !== this.fontOptions.background && "none" !== this.fontOptions.background) {
                        t.fillStyle = this.fontOptions.background;
                        var e = this.getSize();
                        t.fillRect(e.left, e.top, e.width, e.height);
                    }
                }
            },
            {
                key: "_drawText",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "middle", n = arguments.length > 4 ? arguments[4] : void 0, r = this._setAlignment(t, e, i, o), s = $c(r, 2);
                    e = s[0], i = s[1], t.textAlign = "left", e -= this.size.width / 2, this.fontOptions.valign && this.size.height > this.size.labelHeight && ("top" === this.fontOptions.valign && (i -= (this.size.height - this.size.labelHeight) / 2), "bottom" === this.fontOptions.valign && (i += (this.size.height - this.size.labelHeight) / 2));
                    for(var a = 0; a < this.lineCount; a++){
                        var h = this.lines[a];
                        if (h && h.blocks) {
                            var d = 0;
                            this.isEdgeLabel || "center" === this.fontOptions.align ? d += (this.size.width - h.width) / 2 : "right" === this.fontOptions.align && (d += this.size.width - h.width);
                            for(var l = 0; l < h.blocks.length; l++){
                                var c = h.blocks[l];
                                t.font = c.font;
                                var u = this._getColor(c.color, n, c.strokeColor), f = $c(u, 2), p = f[0], v = f[1];
                                c.strokeWidth > 0 && (t.lineWidth = c.strokeWidth, t.strokeStyle = v, t.lineJoin = "round"), t.fillStyle = p, c.strokeWidth > 0 && t.strokeText(c.text, e + d, i + c.vadjust), t.fillText(c.text, e + d, i + c.vadjust), d += c.width;
                            }
                            i += h.height;
                        }
                    }
                }
            },
            {
                key: "_setAlignment",
                value: function(t, e, i, o) {
                    if (this.isEdgeLabel && "horizontal" !== this.fontOptions.align && !1 === this.pointToSelf) {
                        e = 0, i = 0;
                        "top" === this.fontOptions.align ? (t.textBaseline = "alphabetic", i -= 4) : "bottom" === this.fontOptions.align ? (t.textBaseline = "hanging", i += 4) : t.textBaseline = "middle";
                    } else t.textBaseline = o;
                    return [
                        e,
                        i
                    ];
                }
            },
            {
                key: "_getColor",
                value: function(t, e, i) {
                    var o = t || "#000000", n = i || "#ffffff";
                    if (e <= this.elementOptions.scaling.label.drawThreshold) {
                        var r = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - e)));
                        o = qy(o, r), n = qy(n, r);
                    }
                    return [
                        o,
                        n
                    ];
                }
            },
            {
                key: "getTextSize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    return this._processLabel(t, e, i), {
                        width: this.size.width,
                        height: this.size.height,
                        lineCount: this.lineCount
                    };
                }
            },
            {
                key: "getSize",
                value: function() {
                    var t = this.size.left, e = this.size.top - 1;
                    if (this.isEdgeLabel) {
                        var i = .5 * -this.size.width;
                        switch(this.fontOptions.align){
                            case "middle":
                                t = i, e = .5 * -this.size.height;
                                break;
                            case "top":
                                t = i, e = -(this.size.height + 2);
                                break;
                            case "bottom":
                                t = i, e = 2;
                        }
                    }
                    return {
                        left: t,
                        top: e,
                        width: this.size.width,
                        height: this.size.height
                    };
                }
            },
            {
                key: "calculateLabelSize",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "middle";
                    this._processLabel(t, e, i), this.size.left = o - .5 * this.size.width, this.size.top = n - .5 * this.size.height, this.size.yLine = n + .5 * (1 - this.lineCount) * this.fontOptions.size, "hanging" === r && (this.size.top += .5 * this.fontOptions.size, this.size.top += 4, this.size.yLine += 4);
                }
            },
            {
                key: "getFormattingValues",
                value: function(t, e, i, o) {
                    var n = function(t, e, i) {
                        return "normal" === e ? "mod" === i ? "" : t[i] : void 0 !== t[e][i] ? t[e][i] : t[i];
                    }, r = {
                        color: n(this.fontOptions, o, "color"),
                        size: n(this.fontOptions, o, "size"),
                        face: n(this.fontOptions, o, "face"),
                        mod: n(this.fontOptions, o, "mod"),
                        vadjust: n(this.fontOptions, o, "vadjust"),
                        strokeWidth: this.fontOptions.strokeWidth,
                        strokeColor: this.fontOptions.strokeColor
                    };
                    (e || i) && ("normal" === o && !0 === this.fontOptions.chooser && this.elementOptions.labelHighlightBold ? r.mod = "bold" : "function" == typeof this.fontOptions.chooser && this.fontOptions.chooser(r, this.elementOptions.id, e, i));
                    var s = "";
                    return void 0 !== r.mod && "" !== r.mod && (s += r.mod + " "), s += r.size + "px " + r.face, t.font = s.replace(/"/g, ""), r.font = t.font, r.height = r.size, r;
                }
            },
            {
                key: "differentState",
                value: function(t, e) {
                    return t !== this.selectedState || e !== this.hoverState;
                }
            },
            {
                key: "_processLabelText",
                value: function(t, e, i, o) {
                    return new pk(t, this, e, i).process(o);
                }
            },
            {
                key: "_processLabel",
                value: function(t, e, i) {
                    if (!1 !== this.labelDirty || this.differentState(e, i)) {
                        var o = this._processLabelText(t, e, i, this.elementOptions.label);
                        this.fontOptions.minWdt > 0 && o.width < this.fontOptions.minWdt && (o.width = this.fontOptions.minWdt), this.size.labelHeight = o.height, this.fontOptions.minHgt > 0 && o.height < this.fontOptions.minHgt && (o.height = this.fontOptions.minHgt), this.lines = o.lines, this.lineCount = o.lines.length, this.size.width = o.width, this.size.height = o.height, this.selectedState = e, this.hoverState = i, this.labelDirty = !1;
                    }
                }
            },
            {
                key: "visible",
                value: function() {
                    return 0 !== this.size.width && 0 !== this.size.height && void 0 !== this.elementOptions.label && !(this.fontOptions.size * this.body.view.scale < this.elementOptions.scaling.label.drawThreshold - 1);
                }
            }
        ], [
            {
                key: "parseFontString",
                value: function(t, e) {
                    if (!e || "string" != typeof e) return !1;
                    var i = e.split(" ");
                    return t.size = +i[0].replace("px", ""), t.face = i[1], t.color = i[2], !0;
                }
            }
        ]), t;
    }(), yk = na, mk = wt, bk = n.TypeError, wk = xi, kk = c, _k = Co, xk = function(t) {
        if (yk(t)) return t;
        throw bk(mk(t) + " is not a constructor");
    }, Ek = Ze, Ok = X, Ck = kr, Sk = r, Tk = J("Reflect", "construct"), Mk = Object.prototype, Pk = [].push, Dk = Sk(function() {
        function t() {}
        return !(Tk(function() {}, [], t) instanceof t);
    }), Bk = !Sk(function() {
        Tk(function() {});
    }), Ik = Dk || Bk;
    wk({
        target: "Reflect",
        stat: !0,
        forced: Ik,
        sham: Ik
    }, {
        construct: function(t, e) {
            xk(t), Ek(e);
            var i = arguments.length < 3 ? t : xk(arguments[2]);
            if (Bk && !Dk) return Tk(t, e, i);
            if (t == i) {
                switch(e.length){
                    case 0:
                        return new t;
                    case 1:
                        return new t(e[0]);
                    case 2:
                        return new t(e[0], e[1]);
                    case 3:
                        return new t(e[0], e[1], e[2]);
                    case 4:
                        return new t(e[0], e[1], e[2], e[3]);
                }
                var o = [
                    null
                ];
                return kk(Pk, o, e), new (kk(_k, t, o));
            }
            var n = i.prototype, r = Ck(Ok(n) ? n : Mk), s = kk(t, r, e);
            return Ok(s) ? s : r;
        }
    });
    var zk = G.Reflect.construct, Fk = Lp;
    xi({
        target: "Object",
        stat: !0
    }, {
        setPrototypeOf: us
    });
    var Nk = G.Object.setPrototypeOf;
    function Ak(t, e) {
        return Ak = Nk || function(t, e) {
            return t.__proto__ = e, t;
        }, Ak(t, e);
    }
    function Rk(t, e) {
        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
        t.prototype = Fk(e && e.prototype, {
            constructor: {
                value: t,
                writable: !0,
                configurable: !0
            }
        }), Gl(t, "prototype", {
            writable: !1
        }), e && Ak(t, e);
    }
    function jk(t, e) {
        if (e && ("object" === Qc(e) || "function" == typeof e)) return e;
        if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
        return function(t) {
            if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t;
        }(t);
    }
    var Lk = Rf;
    function Hk(t) {
        return Hk = Nk ? Lk : function(t) {
            return t.__proto__ || Lk(t);
        }, Hk(t);
    }
    var Wk = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = i, this.labelModule = o, this.setOptions(e), this.top = void 0, this.left = void 0, this.height = void 0, this.width = void 0, this.radius = void 0, this.margin = void 0, this.refreshNeeded = !0, this.boundingBox = {
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            };
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "_setMargins",
                value: function(t) {
                    this.margin = {}, this.options.margin && ("object" == Qc(this.options.margin) ? (this.margin.top = this.options.margin.top, this.margin.right = this.options.margin.right, this.margin.bottom = this.options.margin.bottom, this.margin.left = this.options.margin.left) : (this.margin.top = this.options.margin, this.margin.right = this.options.margin, this.margin.bottom = this.options.margin, this.margin.left = this.options.margin)), t.adjustSizes(this.margin);
                }
            },
            {
                key: "_distanceToBorder",
                value: function(t, e) {
                    var i = this.options.borderWidth;
                    return t && this.resize(t), Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "enableBorderDashes",
                value: function(t, e) {
                    if (!1 !== e.borderDashes) {
                        if (void 0 !== t.setLineDash) {
                            var i = e.borderDashes;
                            !0 === i && (i = [
                                5,
                                15
                            ]), t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1;
                    }
                }
            },
            {
                key: "disableBorderDashes",
                value: function(t, e) {
                    !1 !== e.borderDashes && (void 0 !== t.setLineDash ? t.setLineDash([
                        0
                    ]) : (console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used."), this.options.shapeProperties.borderDashes = !1, e.borderDashes = !1));
                }
            },
            {
                key: "needsRefresh",
                value: function(t, e) {
                    return !0 === this.refreshNeeded ? (this.refreshNeeded = !1, !0) : void 0 === this.width || this.labelModule.differentState(t, e);
                }
            },
            {
                key: "initContextForDraw",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.lineWidth = Math.min(this.width, i), t.strokeStyle = e.borderColor, t.fillStyle = e.color;
                }
            },
            {
                key: "performStroke",
                value: function(t, e) {
                    var i = e.borderWidth / this.body.view.scale;
                    t.save(), i > 0 && (this.enableBorderDashes(t, e), t.stroke(), this.disableBorderDashes(t, e)), t.restore();
                }
            },
            {
                key: "performFill",
                value: function(t, e) {
                    t.save(), t.fillStyle = e.color, this.enableShadow(t, e), Pv(t).call(t), this.disableShadow(t, e), t.restore(), this.performStroke(t, e);
                }
            },
            {
                key: "_addBoundingBoxMargin",
                value: function(t) {
                    this.boundingBox.left -= t, this.boundingBox.top -= t, this.boundingBox.bottom += t, this.boundingBox.right += t;
                }
            },
            {
                key: "_updateBoundingBox",
                value: function(t, e, i, o, n) {
                    void 0 !== i && this.resize(i, o, n), this.left = t - this.width / 2, this.top = e - this.height / 2, this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width;
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                }
            },
            {
                key: "getDimensionsFromLabel",
                value: function(t, e, i) {
                    this.textSize = this.labelModule.getTextSize(t, e, i);
                    var o = this.textSize.width, n = this.textSize.height;
                    return 0 === o && (o = 14, n = 14), {
                        width: o,
                        height: n
                    };
                }
            }
        ]), t;
    }();
    function Vk(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var qk = function(t) {
        Rk(i, t);
        var e = Vk(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.width = o.width + this.margin.right + this.margin.left, this.height = o.height + this.margin.top + this.margin.bottom, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), Ao(t, this.left, this.top, this.width, this.height, r.borderRadius), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e, i, o, n) {
                    this._updateBoundingBox(t, e, i, o, n);
                    var r = this.options.shapeProperties.borderRadius;
                    this._addBoundingBoxMargin(r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = this.options.borderWidth;
                    return Math.min(Math.abs(this.width / 2 / Math.cos(e)), Math.abs(this.height / 2 / Math.sin(e))) + i;
                }
            }
        ]), i;
    }(Wk);
    function Uk(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Yk = function(t) {
        Rk(i, t);
        var e = Uk(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n)).labelOffset = 0, r.selected = !1, r;
        }
        return $l(i, [
            {
                key: "setOptions",
                value: function(t, e, i) {
                    this.options = t, void 0 === e && void 0 === i || this.setImages(e, i);
                }
            },
            {
                key: "setImages",
                value: function(t, e) {
                    e && this.selected ? (this.imageObj = e, this.imageObjAlt = t) : (this.imageObj = t, this.imageObjAlt = e);
                }
            },
            {
                key: "switchImages",
                value: function(t) {
                    var e = t && !this.selected || !t && this.selected;
                    if (this.selected = t, void 0 !== this.imageObjAlt && e) {
                        var i = this.imageObj;
                        this.imageObj = this.imageObjAlt, this.imageObjAlt = i;
                    }
                }
            },
            {
                key: "_getImagePadding",
                value: function() {
                    var t = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    };
                    if (this.options.imagePadding) {
                        var e = this.options.imagePadding;
                        "object" == Qc(e) ? (t.top = e.top, t.right = e.right, t.bottom = e.bottom, t.left = e.left) : (t.top = e, t.right = e, t.bottom = e, t.left = e);
                    }
                    return t;
                }
            },
            {
                key: "_resizeImage",
                value: function() {
                    var t, e;
                    if (!1 === this.options.shapeProperties.useImageSize) {
                        var i = 1, o = 1;
                        this.imageObj.width && this.imageObj.height && (this.imageObj.width > this.imageObj.height ? i = this.imageObj.width / this.imageObj.height : o = this.imageObj.height / this.imageObj.width), t = 2 * this.options.size * i, e = 2 * this.options.size * o;
                    } else {
                        var n = this._getImagePadding();
                        t = this.imageObj.width + n.left + n.right, e = this.imageObj.height + n.top + n.bottom;
                    }
                    this.width = t, this.height = e, this.radius = .5 * this.width;
                }
            },
            {
                key: "_drawRawCircle",
                value: function(t, e, i, o) {
                    this.initContextForDraw(t, o), No(t, e, i, o.size), this.performFill(t, o);
                }
            },
            {
                key: "_drawImageAtPosition",
                value: function(t, e) {
                    if (0 != this.imageObj.width) {
                        t.globalAlpha = void 0 !== e.opacity ? e.opacity : 1, this.enableShadow(t, e);
                        var i = 1;
                        !0 === this.options.shapeProperties.interpolation && (i = this.imageObj.width / this.width / this.body.view.scale);
                        var o = this._getImagePadding(), n = this.left + o.left, r = this.top + o.top, s = this.width - o.left - o.right, a = this.height - o.top - o.bottom;
                        this.imageObj.drawImageAtPosition(t, i, n, r, s, a), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "_drawImageLabel",
                value: function(t, e, i, o, n) {
                    var r = 0;
                    if (void 0 !== this.height) {
                        r = .5 * this.height;
                        var s = this.labelModule.getTextSize(t, o, n);
                        s.lineCount >= 1 && (r += s.height / 2);
                    }
                    var a = i + r;
                    this.options.label && (this.labelOffset = r), this.labelModule.draw(t, e, a, o, n, "hanging");
                }
            }
        ]), i;
    }(Wk);
    function Xk(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Gk = function(t) {
        Rk(i, t);
        var e = Xk(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i), n = Math.max(o.width + this.margin.right + this.margin.left, o.height + this.margin.top + this.margin.bottom);
                        this.options.size = n / 2, this.width = n, this.height = n, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this._drawRawCircle(t, e, i, r), this.updateBoundingBox(e, i), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, i, o, n);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), .5 * this.width;
                }
            }
        ]), i;
    }(Yk);
    function Kk(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var $k = function(t) {
        Rk(i, t);
        var e = Kk(i);
        function i(t, o, n, r, s) {
            var a;
            return Xl(this, i), (a = e.call(this, t, o, n)).setImages(r, s), a;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;
                    if (o) {
                        var n = 2 * this.options.size;
                        return this.width = n, this.height = n, void (this.radius = .5 * this.width);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.switchImages(o), this.resize();
                    var s = e, a = i;
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), this._drawRawCircle(t, s, a, r), t.save(), t.clip(), this._drawImageAtPosition(t, r), t.restore(), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i);
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.boundingBox.top = e, this.boundingBox.left = t, this.boundingBox.right = t + 2 * this.options.size, this.boundingBox.bottom = e + 2 * this.options.size) : (this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size), this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), .5 * this.width;
                }
            }
        ]), i;
    }(Yk);
    function Zk(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Qk = function(t) {
        Rk(i, t);
        var e = Zk(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                        size: this.options.size
                    };
                    if (this.needsRefresh(e, i)) {
                        var n, r;
                        this.labelModule.getTextSize(t, e, i);
                        var s = 2 * o.size;
                        this.width = null !== (n = this.customSizeWidth) && void 0 !== n ? n : s, this.height = null !== (r = this.customSizeHeight) && void 0 !== r ? r : s, this.radius = .5 * this.width;
                    }
                }
            },
            {
                key: "_drawShape",
                value: function(t, e, i, o, n, r, s, a) {
                    var h, d = this;
                    return this.resize(t, r, s, a), this.left = o - this.width / 2, this.top = n - this.height / 2, this.initContextForDraw(t, a), (h = e, Object.prototype.hasOwnProperty.call(Ho, h) ? Ho[h] : function(t) {
                        for(var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), o = 1; o < e; o++)i[o - 1] = arguments[o];
                        CanvasRenderingContext2D.prototype[h].call(t, i);
                    })(t, o, n, a.size), this.performFill(t, a), void 0 !== this.options.icon && void 0 !== this.options.icon.code && (t.font = (r ? "bold " : "") + this.height / 2 + "px " + (this.options.icon.face || "FontAwesome"), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", t.fillText(this.options.icon.code, o, n)), {
                        drawExternalLabel: function() {
                            if (void 0 !== d.options.label) {
                                d.labelModule.calculateLabelSize(t, r, s, o, n, "hanging");
                                var e = n + .5 * d.height + .5 * d.labelModule.size.height;
                                d.labelModule.draw(t, o, e, r, s, "hanging");
                            }
                            d.updateBoundingBox(o, n);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.boundingBox.top = e - this.options.size, this.boundingBox.left = t - this.options.size, this.boundingBox.right = t + this.options.size, this.boundingBox.bottom = e + this.options.size, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height));
                }
            }
        ]), i;
    }(Wk);
    function Jk(t, e) {
        var i = mu(t);
        if (dl) {
            var o = dl(t);
            e && (o = Yf(o).call(o, function(e) {
                return wl(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function t_(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Fu(i = Jk(Object(n), !0)).call(i, function(e) {
                Zl(t, e, n[e]);
            }) : Dl ? Rl(t, Dl(n)) : Fu(o = Jk(Object(n))).call(o, function(e) {
                Yl(t, e, wl(n, e));
            });
        }
        return t;
    }
    function e_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var i_ = function(t) {
        Rk(i, t);
        var e = e_(i);
        function i(t, o, n, r) {
            var s;
            return Xl(this, i), (s = e.call(this, t, o, n, r)).ctxRenderer = r, s;
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n, r), this.left = e - this.width / 2, this.top = i - this.height / 2, t.save();
                    var s = this.ctxRenderer({
                        ctx: t,
                        id: this.options.id,
                        x: e,
                        y: i,
                        state: {
                            selected: o,
                            hover: n
                        },
                        style: t_({}, r),
                        label: this.options.label
                    });
                    if (null != s.drawNode && s.drawNode(), t.restore(), s.drawExternalLabel) {
                        var a = s.drawExternalLabel;
                        s.drawExternalLabel = function() {
                            t.save(), a(), t.restore();
                        };
                    }
                    return s.nodeDimensions && (this.customSizeWidth = s.nodeDimensions.width, this.customSizeHeight = s.nodeDimensions.height), s;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function o_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var n_ = function(t) {
        Rk(i, t);
        var e = o_(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i).width + this.margin.right + this.margin.left;
                        this.width = o, this.height = o, this.radius = this.width / 2;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.initContextForDraw(t, r), jo(t, e - this.width / 2, i - this.height / 2, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Wk);
    function r_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var s_ = function(t) {
        Rk(i, t);
        var e = r_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "diamond", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function a_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var h_ = function(t) {
        Rk(i, t);
        var e = a_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "circle", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t) {
                    return t && this.resize(t), this.options.size;
                }
            }
        ]), i;
    }(Qk);
    function d_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var l_ = function(t) {
        Rk(i, t);
        var e = d_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover;
                    if (this.needsRefresh(e, i)) {
                        var o = this.getDimensionsFromLabel(t, e, i);
                        this.height = 2 * o.height, this.width = o.width + o.height, this.radius = .5 * this.width;
                    }
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - .5 * this.width, this.top = i - .5 * this.height, this.initContextForDraw(t, r), Ro(t, this.left, this.top, this.width, this.height), this.performFill(t, r), this.updateBoundingBox(e, i, t, o, n), this.labelModule.draw(t, e, i, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    t && this.resize(t);
                    var i = .5 * this.width, o = .5 * this.height, n = Math.sin(e) * i, r = Math.cos(e) * o;
                    return i * o / Math.sqrt(n * n + r * r);
                }
            }
        ]), i;
    }(Wk);
    function c_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var u_ = function(t) {
        Rk(i, t);
        var e = c_(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.iconSize = {
                        width: Number(this.options.icon.size),
                        height: Number(this.options.icon.size)
                    }, this.width = this.iconSize.width + this.margin.right + this.margin.left, this.height = this.iconSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    var s = this;
                    return this.resize(t, o, n), this.options.icon.size = this.options.icon.size || 50, this.left = e - this.width / 2, this.top = i - this.height / 2, this._icon(t, e, i, o, n, r), {
                        drawExternalLabel: function() {
                            if (void 0 !== s.options.label) s.labelModule.draw(t, s.left + s.iconSize.width / 2 + s.margin.left, i + s.height / 2 + 5, o);
                            s.updateBoundingBox(e, i);
                        }
                    };
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    if (this.boundingBox.top = e - .5 * this.options.icon.size, this.boundingBox.left = t - .5 * this.options.icon.size, this.boundingBox.right = t + .5 * this.options.icon.size, this.boundingBox.bottom = e + .5 * this.options.icon.size, void 0 !== this.options.label && this.labelModule.size.width > 0) this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + 5);
                }
            },
            {
                key: "_icon",
                value: function(t, e, i, o, n, r) {
                    var s = Number(this.options.icon.size);
                    void 0 !== this.options.icon.code ? (t.font = [
                        null != this.options.icon.weight ? this.options.icon.weight : o ? "bold" : "",
                        (null != this.options.icon.weight && o ? 5 : 0) + s + "px",
                        this.options.icon.face
                    ].join(" "), t.fillStyle = this.options.icon.color || "black", t.textAlign = "center", t.textBaseline = "middle", this.enableShadow(t, r), t.fillText(this.options.icon.code, e, i), this.disableShadow(t, r)) : console.error("When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.");
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Wk);
    function f_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var p_ = function(t) {
        Rk(i, t);
        var e = f_(i);
        function i(t, o, n, r, s) {
            var a;
            return Xl(this, i), (a = e.call(this, t, o, n)).setImages(r, s), a;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.selected, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.hover, o = void 0 === this.imageObj.src || void 0 === this.imageObj.width || void 0 === this.imageObj.height;
                    if (o) {
                        var n = 2 * this.options.size;
                        return this.width = n, void (this.height = n);
                    }
                    this.needsRefresh(e, i) && this._resizeImage();
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    t.save(), this.switchImages(o), this.resize();
                    var s = e, a = i;
                    if ("top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = e, this.top = i, s += this.width / 2, a += this.height / 2) : (this.left = e - this.width / 2, this.top = i - this.height / 2), !0 === this.options.shapeProperties.useBorderWithImage) {
                        var h = this.options.borderWidth, d = this.options.borderWidthSelected || 2 * this.options.borderWidth, l = (o ? d : h) / this.body.view.scale;
                        t.lineWidth = Math.min(this.width, l), t.beginPath();
                        var c = o ? this.options.color.highlight.border : n ? this.options.color.hover.border : this.options.color.border, u = o ? this.options.color.highlight.background : n ? this.options.color.hover.background : this.options.color.background;
                        void 0 !== r.opacity && (c = qy(c, r.opacity), u = qy(u, r.opacity)), t.strokeStyle = c, t.fillStyle = u, t.rect(this.left - .5 * t.lineWidth, this.top - .5 * t.lineWidth, this.width + t.lineWidth, this.height + t.lineWidth), Pv(t).call(t), this.performStroke(t, r), t.closePath();
                    }
                    this._drawImageAtPosition(t, r), this._drawImageLabel(t, s, a, o, n), this.updateBoundingBox(e, i), t.restore();
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t, e) {
                    this.resize(), "top-left" === this.options.shapeProperties.coordinateOrigin ? (this.left = t, this.top = e) : (this.left = t - this.width / 2, this.top = e - this.height / 2), this.boundingBox.left = this.left, this.boundingBox.top = this.top, this.boundingBox.bottom = this.top + this.height, this.boundingBox.right = this.left + this.width, void 0 !== this.options.label && this.labelModule.size.width > 0 && (this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left), this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width), this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset));
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Yk);
    function v_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var g_ = function(t) {
        Rk(i, t);
        var e = v_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "square", 2, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function y_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var m_ = function(t) {
        Rk(i, t);
        var e = y_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "hexagon", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function b_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var w_ = function(t) {
        Rk(i, t);
        var e = b_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "star", 4, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function k_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var __ = function(t) {
        Rk(i, t);
        var e = k_(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._setMargins(n), r;
        }
        return $l(i, [
            {
                key: "resize",
                value: function(t, e, i) {
                    this.needsRefresh(e, i) && (this.textSize = this.labelModule.getTextSize(t, e, i), this.width = this.textSize.width + this.margin.right + this.margin.left, this.height = this.textSize.height + this.margin.top + this.margin.bottom, this.radius = .5 * this.width);
                }
            },
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    this.resize(t, o, n), this.left = e - this.width / 2, this.top = i - this.height / 2, this.enableShadow(t, r), this.labelModule.draw(t, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, o, n), this.disableShadow(t, r), this.updateBoundingBox(e, i, t, o, n);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Wk);
    function x_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var E_ = function(t) {
        Rk(i, t);
        var e = x_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangle", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function O_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var C_ = function(t) {
        Rk(i, t);
        var e = O_(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "draw",
                value: function(t, e, i, o, n, r) {
                    return this._drawShape(t, "triangleDown", 3, e, i, o, n, r);
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this._distanceToBorder(t, e);
                }
            }
        ]), i;
    }(Qk);
    function S_(t, e) {
        var i = mu(t);
        if (dl) {
            var o = dl(t);
            e && (o = Yf(o).call(o, function(e) {
                return wl(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function T_(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Fu(i = S_(Object(n), !0)).call(i, function(e) {
                Zl(t, e, n[e]);
            }) : Dl ? Rl(t, Dl(n)) : Fu(o = S_(Object(n))).call(o, function(e) {
                Yl(t, e, wl(n, e));
            });
        }
        return t;
    }
    var M_ = function() {
        function t(e, i, o, n, r, s) {
            Xl(this, t), this.options = Jy(r), this.globalOptions = r, this.defaultOptions = s, this.body = i, this.edges = [], this.id = void 0, this.imagelist = o, this.grouplist = n, this.x = void 0, this.y = void 0, this.baseSize = this.options.size, this.baseFontSize = this.options.font.size, this.predefinedPosition = !1, this.selected = !1, this.hover = !1, this.labelModule = new gk(this.body, this.options, !1), this.setOptions(e);
        }
        return $l(t, [
            {
                key: "attachEdge",
                value: function(t) {
                    var e;
                    -1 === zp(e = this.edges).call(e, t) && this.edges.push(t);
                }
            },
            {
                key: "detachEdge",
                value: function(t) {
                    var e, i, o = zp(e = this.edges).call(e, t);
                    -1 != o && uf(i = this.edges).call(i, o, 1);
                }
            },
            {
                key: "setOptions",
                value: function(e) {
                    var i = this.options.shape;
                    if (e) {
                        if (void 0 !== e.color && (this._localColor = e.color), void 0 !== e.id && (this.id = e.id), void 0 === this.id) throw new Error("Node must have an id");
                        t.checkMass(e, this.id), void 0 !== e.x && (null === e.x ? (this.x = void 0, this.predefinedPosition = !1) : (this.x = _p(e.x), this.predefinedPosition = !0)), void 0 !== e.y && (null === e.y ? (this.y = void 0, this.predefinedPosition = !1) : (this.y = _p(e.y), this.predefinedPosition = !0)), void 0 !== e.size && (this.baseSize = e.size), void 0 !== e.value && (e.value = Yw(e.value)), t.parseOptions(this.options, e, !0, this.globalOptions, this.grouplist);
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Jw("node", o), this._load_images(), this.updateLabelModule(e), void 0 !== e.opacity && t.checkOpacity(e.opacity) && (this.options.opacity = e.opacity), this.updateShape(i), void 0 !== e.hidden || void 0 !== e.physics;
                    }
                }
            },
            {
                key: "_load_images",
                value: function() {
                    if (("circularImage" === this.options.shape || "image" === this.options.shape) && void 0 === this.options.image) throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
                    if (void 0 !== this.options.image) {
                        if (void 0 === this.imagelist) throw new Error("Internal Error: No images provided");
                        if ("string" == typeof this.options.image) this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
                        else {
                            if (void 0 === this.options.image.unselected) throw new Error("No unselected image provided");
                            this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id), void 0 !== this.options.image.selected ? this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id) : this.imageObjAlt = void 0;
                        }
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = {
                        color: this.options.color.background,
                        opacity: this.options.opacity,
                        borderWidth: this.options.borderWidth,
                        borderColor: this.options.color.border,
                        size: this.options.size,
                        borderDashes: this.options.shapeProperties.borderDashes,
                        borderRadius: this.options.shapeProperties.borderRadius,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y
                    };
                    if (this.selected || this.hover ? !0 === this.chooser ? this.selected ? (null != this.options.borderWidthSelected ? t.borderWidth = this.options.borderWidthSelected : t.borderWidth *= 2, t.color = this.options.color.highlight.background, t.borderColor = this.options.color.highlight.border, t.shadow = this.options.shadow.enabled) : this.hover && (t.color = this.options.color.hover.background, t.borderColor = this.options.color.hover.border, t.shadow = this.options.shadow.enabled) : "function" == typeof this.chooser && (this.chooser(t, this.options.id, this.selected, this.hover), !1 === t.shadow && (t.shadowColor === this.options.shadow.color && t.shadowSize === this.options.shadow.size && t.shadowX === this.options.shadow.x && t.shadowY === this.options.shadow.y || (t.shadow = !0))) : t.shadow = this.options.shadow.enabled, void 0 !== this.options.opacity) {
                        var e = this.options.opacity;
                        t.borderColor = qy(t.borderColor, e), t.color = qy(t.color, e), t.shadowColor = qy(t.shadowColor, e);
                    }
                    return t;
                }
            },
            {
                key: "updateLabelModule",
                value: function(e) {
                    void 0 !== this.options.label && null !== this.options.label || (this.options.label = ""), t.updateGroupOptions(this.options, T_(T_({}, e), {}, {
                        color: e && e.color || this._localColor || void 0
                    }), this.grouplist);
                    var i = this.grouplist.get(this.options.group, !1), o = [
                        e,
                        this.options,
                        i,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, o), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateShape",
                value: function(t) {
                    if (t === this.options.shape && this.shape) this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
                    else switch(this.options.shape){
                        case "box":
                            this.shape = new qk(this.options, this.body, this.labelModule);
                            break;
                        case "circle":
                            this.shape = new Gk(this.options, this.body, this.labelModule);
                            break;
                        case "circularImage":
                            this.shape = new $k(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "custom":
                            this.shape = new i_(this.options, this.body, this.labelModule, this.options.ctxRenderer);
                            break;
                        case "database":
                            this.shape = new n_(this.options, this.body, this.labelModule);
                            break;
                        case "diamond":
                            this.shape = new s_(this.options, this.body, this.labelModule);
                            break;
                        case "dot":
                            this.shape = new h_(this.options, this.body, this.labelModule);
                            break;
                        case "ellipse":
                        default:
                            this.shape = new l_(this.options, this.body, this.labelModule);
                            break;
                        case "icon":
                            this.shape = new u_(this.options, this.body, this.labelModule);
                            break;
                        case "image":
                            this.shape = new p_(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
                            break;
                        case "square":
                            this.shape = new g_(this.options, this.body, this.labelModule);
                            break;
                        case "hexagon":
                            this.shape = new m_(this.options, this.body, this.labelModule);
                            break;
                        case "star":
                            this.shape = new w_(this.options, this.body, this.labelModule);
                            break;
                        case "text":
                            this.shape = new __(this.options, this.body, this.labelModule);
                            break;
                        case "triangle":
                            this.shape = new E_(this.options, this.body, this.labelModule);
                            break;
                        case "triangleDown":
                            this.shape = new C_(this.options, this.body, this.labelModule);
                    }
                    this.needsRefresh();
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0, this.needsRefresh();
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1, this.needsRefresh();
                }
            },
            {
                key: "needsRefresh",
                value: function() {
                    this.shape.refreshNeeded = !0;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.options.title;
                }
            },
            {
                key: "distanceToBorder",
                value: function(t, e) {
                    return this.shape.distanceToBorder(t, e);
                }
            },
            {
                key: "isFixed",
                value: function() {
                    return this.options.fixed.x && this.options.fixed.y;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "getLabelSize",
                value: function() {
                    return this.labelModule.size();
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.size = this.options.scaling.min + o * n;
                    } else this.options.size = this.baseSize, this.options.font.size = this.baseFontSize;
                    this.updateLabelModule();
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    return this.shape.draw(t, this.x, this.y, this.selected, this.hover, e) || {};
                }
            },
            {
                key: "updateBoundingBox",
                value: function(t) {
                    this.shape.updateBoundingBox(this.x, this.y, t);
                }
            },
            {
                key: "resize",
                value: function(t) {
                    var e = this.getFormattingValues();
                    this.shape.resize(t, this.selected, this.hover, e);
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    return this.labelModule.visible() && tk(this.labelModule.getSize(), t) && e.push({
                        nodeId: this.id,
                        labelId: 0
                    }), tk(this.shape.boundingBox, t) && e.push({
                        nodeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    return this.shape.left < t.right && this.shape.left + this.shape.width > t.left && this.shape.top < t.bottom && this.shape.top + this.shape.height > t.top;
                }
            },
            {
                key: "isBoundingBoxOverlappingWith",
                value: function(t) {
                    return this.shape.boundingBox.left < t.right && this.shape.boundingBox.right > t.left && this.shape.boundingBox.top < t.bottom && this.shape.boundingBox.bottom > t.top;
                }
            }
        ], [
            {
                key: "checkOpacity",
                value: function(t) {
                    return 0 <= t && t <= 1;
                }
            },
            {
                key: "checkCoordinateOrigin",
                value: function(t) {
                    return void 0 === t || "center" === t || "top-left" === t;
                }
            },
            {
                key: "updateGroupOptions",
                value: function(e, i, o) {
                    var n;
                    if (void 0 !== o) {
                        var r = e.group;
                        if (void 0 !== i && void 0 !== i.group && r !== i.group) throw new Error("updateGroupOptions: group values in options don't match.");
                        if ("number" == typeof r || "string" == typeof r && "" != r) {
                            var s = o.get(r);
                            void 0 !== s.opacity && void 0 === i.opacity && (t.checkOpacity(s.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + s.opacity), s.opacity = void 0));
                            var a = Yf(n = Qw(i)).call(n, function(t) {
                                return null != i[t];
                            });
                            a.push("font"), Ay(a, e, s), e.color = Yy(e.color);
                        }
                    }
                }
            },
            {
                key: "parseOptions",
                value: function(e, i) {
                    var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, r = arguments.length > 4 ? arguments[4] : void 0, s = [
                        "color",
                        "fixed",
                        "shadow"
                    ];
                    if (Ay(s, e, i, o), t.checkMass(i), void 0 !== e.opacity && (t.checkOpacity(e.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + e.opacity), e.opacity = void 0)), void 0 !== i.opacity && (t.checkOpacity(i.opacity) || (console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + i.opacity), i.opacity = void 0)), i.shapeProperties && !t.checkCoordinateOrigin(i.shapeProperties.coordinateOrigin) && console.error("Invalid option for node coordinateOrigin, found: " + i.shapeProperties.coordinateOrigin), tm(e, i, "shadow", n), void 0 !== i.color && null !== i.color) {
                        var a = Yy(i.color);
                        Fy(e.color, a);
                    } else !0 === o && null === i.color && (e.color = Jy(n.color));
                    void 0 !== i.fixed && null !== i.fixed && ("boolean" == typeof i.fixed ? (e.fixed.x = i.fixed, e.fixed.y = i.fixed) : (void 0 !== i.fixed.x && "boolean" == typeof i.fixed.x && (e.fixed.x = i.fixed.x), void 0 !== i.fixed.y && "boolean" == typeof i.fixed.y && (e.fixed.y = i.fixed.y))), !0 === o && null === i.font && (e.font = Jy(n.font)), t.updateGroupOptions(e, i, r), void 0 !== i.scaling && tm(e.scaling, i.scaling, "label", n.scaling);
                }
            },
            {
                key: "checkMass",
                value: function(t, e) {
                    if (void 0 !== t.mass && t.mass <= 0) {
                        var i = "";
                        void 0 !== e && (i = " in node id: " + e), console.error("%cNegative or zero mass disallowed" + i + ", setting mass to 1.", gm), t.mass = 1;
                    }
                }
            }
        ]), t;
    }();
    function P_(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return D_(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return D_(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function D_(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var B_ = function() {
        function t(e, i, o, n) {
            var r, s = this;
            if (Xl(this, t), this.body = e, this.images = i, this.groups = o, this.layoutEngine = n, this.body.functions.createNode = Fo(r = this.create).call(r, this), this.nodesListeners = {
                add: function(t, e) {
                    s.add(e.items);
                },
                update: function(t, e) {
                    s.update(e.items, e.data, e.oldData);
                },
                remove: function(t, e) {
                    s.remove(e.items);
                }
            }, this.defaultOptions = {
                borderWidth: 1,
                borderWidthSelected: void 0,
                brokenImage: void 0,
                color: {
                    border: "#2B7CE9",
                    background: "#97C2FC",
                    highlight: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    },
                    hover: {
                        border: "#2B7CE9",
                        background: "#D2E5FF"
                    }
                },
                opacity: void 0,
                fixed: {
                    x: !1,
                    y: !1
                },
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 0,
                    strokeColor: "#ffffff",
                    align: "center",
                    vadjust: 0,
                    multi: !1,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "monospace",
                        vadjust: 2
                    }
                },
                group: void 0,
                hidden: !1,
                icon: {
                    face: "FontAwesome",
                    code: void 0,
                    size: 50,
                    color: "#2B7CE9"
                },
                image: void 0,
                imagePadding: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                label: void 0,
                labelHighlightBold: !0,
                level: void 0,
                margin: {
                    top: 5,
                    right: 5,
                    bottom: 5,
                    left: 5
                },
                mass: 1,
                physics: !0,
                scaling: {
                    min: 10,
                    max: 30,
                    label: {
                        enabled: !1,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return .5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                shape: "ellipse",
                shapeProperties: {
                    borderDashes: !1,
                    borderRadius: 6,
                    interpolation: !0,
                    useImageSize: !1,
                    useBorderWithImage: !1,
                    coordinateOrigin: "center"
                },
                size: 25,
                title: void 0,
                value: void 0,
                x: void 0,
                y: void 0
            }, this.defaultOptions.mass <= 0) throw "Internal error: mass in defaultOptions of NodesHandler may not be zero or negative";
            this.options = Jy(this.defaultOptions), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e, i = this;
                    this.body.emitter.on("refreshNodes", Fo(t = this.refresh).call(t, this)), this.body.emitter.on("refresh", Fo(e = this.refresh).call(e, this)), this.body.emitter.on("destroy", function() {
                        Wy(i.nodesListeners, function(t, e) {
                            i.body.data.nodes && i.body.data.nodes.off(e, t);
                        }), delete i.body.functions.createNode, delete i.nodesListeners.add, delete i.nodesListeners.update, delete i.nodesListeners.remove, delete i.nodesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (M_.parseOptions(this.options, t), void 0 !== t.opacity && (Cw(t.opacity) || !Mw(t.opacity) || t.opacity < 0 || t.opacity > 1 ? console.error("Invalid option for node opacity. Value must be between 0 and 1, found: " + t.opacity) : this.options.opacity = t.opacity), void 0 !== t.shape) for(var e in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && this.body.nodes[e].updateShape();
                        if (void 0 !== t.font || void 0 !== t.widthConstraint || void 0 !== t.heightConstraint) for(var i = 0, o = mu(this.body.nodes); i < o.length; i++){
                            var n = o[i];
                            this.body.nodes[n].updateLabelModule(), this.body.nodes[n].needsRefresh();
                        }
                        if (void 0 !== t.size) for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.body.nodes[r].needsRefresh();
                        void 0 === t.hidden && void 0 === t.physics || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t) {
                    var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = this.body.data.nodes;
                    if (e.isDataViewLike("id", t)) this.body.data.nodes = t;
                    else if (hu(t)) this.body.data.nodes = new e.DataSet, this.body.data.nodes.add(t);
                    else {
                        if (t) throw new TypeError("Array or DataSet expected");
                        this.body.data.nodes = new e.DataSet;
                    }
                    if (o && Wy(this.nodesListeners, function(t, e) {
                        o.off(e, t);
                    }), this.body.nodes = {}, this.body.data.nodes) {
                        var n = this;
                        Wy(this.nodesListeners, function(t, e) {
                            n.body.data.nodes.on(e, t);
                        });
                        var r = this.body.data.nodes.getIds();
                        this.add(r, !0);
                    }
                    !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o = [], n = 0; n < t.length; n++){
                        e = t[n];
                        var r = this.body.data.nodes.get(e), s = this.create(r);
                        o.push(s), this.body.nodes[e] = s;
                    }
                    this.layoutEngine.positionInitially(o), !1 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t, e, i) {
                    for(var o = this.body.nodes, n = !1, r = 0; r < t.length; r++){
                        var s = t[r], a = o[s], h = e[r];
                        void 0 !== a ? a.setOptions(h) && (n = !0) : (n = !0, a = this.create(h), o[s] = a);
                    }
                    n || void 0 === i || (n = Nw(e).call(e, function(t, e) {
                        var o = i[e];
                        return o && o.level !== t.level;
                    })), !0 === n ? this.body.emitter.emit("_dataChanged") : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    for(var e = this.body.nodes, i = 0; i < t.length; i++)delete e[t[i]];
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "create",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : M_;
                    return new e(t, this.body, this.images, this.groups, this.options, this.defaultOptions);
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    Wy(this.body.nodes, function(i, o) {
                        var n = t.body.data.nodes.get(o);
                        void 0 !== n && (!0 === e && i.setOptions({
                            x: null,
                            y: null
                        }), i.setOptions({
                            fixed: !1
                        }), i.setOptions(n));
                    });
                }
            },
            {
                key: "getPositions",
                value: function(t) {
                    var e = {};
                    if (void 0 !== t) {
                        if (!0 === hu(t)) {
                            for(var i = 0; i < t.length; i++)if (void 0 !== this.body.nodes[t[i]]) {
                                var o = this.body.nodes[t[i]];
                                e[t[i]] = {
                                    x: Math.round(o.x),
                                    y: Math.round(o.y)
                                };
                            }
                        } else if (void 0 !== this.body.nodes[t]) {
                            var n = this.body.nodes[t];
                            e[t] = {
                                x: Math.round(n.x),
                                y: Math.round(n.y)
                            };
                        }
                    } else for(var r = 0; r < this.body.nodeIndices.length; r++){
                        var s = this.body.nodes[this.body.nodeIndices[r]];
                        e[this.body.nodeIndices[r]] = {
                            x: Math.round(s.x),
                            y: Math.round(s.y)
                        };
                    }
                    return e;
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    if (null == t) throw new TypeError("No id was specified for getPosition method.");
                    if (null == this.body.nodes[t]) throw new ReferenceError("NodeId provided for getPosition does not exist. Provided: ".concat(t));
                    return {
                        x: Math.round(this.body.nodes[t].x),
                        y: Math.round(this.body.nodes[t].y)
                    };
                }
            },
            {
                key: "storePositions",
                value: function() {
                    var t, e = [], i = this.body.data.nodes.getDataSet(), o = P_(i.get());
                    try {
                        for(o.s(); !(t = o.n()).done;){
                            var n = t.value, r = n.id, s = this.body.nodes[r], a = Math.round(s.x), h = Math.round(s.y);
                            n.x === a && n.y === h || e.push({
                                id: r,
                                x: a,
                                y: h
                            });
                        }
                    } catch (t1) {
                        o.e(t1);
                    } finally{
                        o.f();
                    }
                    i.update(e);
                }
            },
            {
                key: "getBoundingBox",
                value: function(t) {
                    if (void 0 !== this.body.nodes[t]) return this.body.nodes[t].shape.boundingBox;
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t, e) {
                    var i = [];
                    if (void 0 !== this.body.nodes[t]) for(var o = this.body.nodes[t], n = {}, r = 0; r < o.edges.length; r++){
                        var s = o.edges[r];
                        "to" !== e && s.toId == o.id ? void 0 === n[s.fromId] && (i.push(s.fromId), n[s.fromId] = !0) : "from" !== e && s.fromId == o.id && void 0 === n[s.toId] && (i.push(s.toId), n[s.toId] = !0);
                    }
                    return i;
                }
            },
            {
                key: "getConnectedEdges",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.nodes[t]) for(var i = this.body.nodes[t], o = 0; o < i.edges.length; o++)e.push(i.edges[o].id);
                    else console.error("NodeId provided for getConnectedEdges does not exist. Provided: ", t);
                    return e;
                }
            },
            {
                key: "moveNode",
                value: function(t, e, i) {
                    var o = this;
                    void 0 !== this.body.nodes[t] ? (this.body.nodes[t].x = Number(e), this.body.nodes[t].y = Number(i), bv(function() {
                        o.body.emitter.emit("startSimulation");
                    }, 0)) : console.error("Node id supplied to moveNode does not exist. Provided: ", t);
                }
            }
        ]), t;
    }(), I_ = Vt, z_ = x, F_ = X, N_ = Ze, A_ = function(t) {
        return void 0 !== t && (I_(t, "value") || I_(t, "writable"));
    }, R_ = b, j_ = Dr;
    xi({
        target: "Reflect",
        stat: !0
    }, {
        get: function t(e, i) {
            var o, n, r = arguments.length < 3 ? e : arguments[2];
            return N_(e) === r ? e[i] : (o = R_.f(e, i)) ? A_(o) ? o.value : void 0 === o.get ? void 0 : z_(o.get, r) : F_(n = j_(e)) ? t(n, i, r) : void 0;
        }
    });
    var L_ = G.Reflect.get, H_ = bl;
    function W_(t, e) {
        for(; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = Hk(t)););
        return t;
    }
    function V_() {
        return V_ = "undefined" != typeof Reflect && L_ ? L_ : function(t, e, i) {
            var o = W_(t, e);
            if (o) {
                var n = H_(o, e);
                return n.get ? n.get.call(arguments.length < 3 ? t : i) : n.value;
            }
        }, V_.apply(this, arguments);
    }
    var q_ = xi, U_ = Math.hypot, Y_ = Math.abs, X_ = Math.sqrt;
    q_({
        target: "Math",
        stat: !0,
        forced: !!U_ && U_(1 / 0, NaN) !== 1 / 0
    }, {
        hypot: function(t, e) {
            for(var i, o, n = 0, r = 0, s = arguments.length, a = 0; r < s;)a < (i = Y_(arguments[r++])) ? (n = n * (o = a / i) * o + 1, a = i) : n += i > 0 ? (o = i / a) * o : i;
            return a === 1 / 0 ? 1 / 0 : a * X_(n);
        }
    });
    var G_ = G.Math.hypot;
    function K_(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var $_ = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "transform",
                value: function(t, e) {
                    hu(t) || (t = [
                        t
                    ]);
                    for(var i = e.point.x, o = e.point.y, n = e.angle, r = e.length, s = 0; s < t.length; ++s){
                        var a = t[s], h = a.x * Math.cos(n) - a.y * Math.sin(n), d = a.x * Math.sin(n) + a.y * Math.cos(n);
                        a.x = i + r * h, a.y = o + r * d;
                    }
                }
            },
            {
                key: "drawPath",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(e[0].x, e[0].y);
                    for(var i = 1; i < e.length; ++i)t.lineTo(e[i].x, e[i].y);
                    t.closePath();
                }
            }
        ]), t;
    }(), Z_ = function(t) {
        Rk(i, t);
        var e = K_(i);
        function i() {
            return Xl(this, i), e.apply(this, arguments);
        }
        return $l(i, null, [
            {
                key: "draw",
                value: function(t, e) {
                    if (e.image) {
                        t.save(), t.translate(e.point.x, e.point.y), t.rotate(Math.PI / 2 + e.angle);
                        var i = null != e.imageWidth ? e.imageWidth : e.image.width, o = null != e.imageHeight ? e.imageHeight : e.image.height;
                        e.image.drawImageAtPosition(t, 1, -i / 2, 0, i, o), t.restore();
                    }
                    return !1;
                }
            }
        ]), i;
    }($_), Q_ = function(t) {
        Rk(i, t);
        var e = K_(i);
        function i() {
            return Xl(this, i), e.apply(this, arguments);
        }
        return $l(i, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -0.9,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), i;
    }($_), J_ = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: -0.4,
                            y: 0
                        },
                        {
                            x: 0,
                            y: -0.3
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), tx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    $_.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle - o / 2, r = e.angle + o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t;
    }(), ex = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.3,
                        y: 0
                    };
                    $_.transform(i, e), t.strokeStyle = t.fillStyle, t.fillStyle = "rgba(0, 0, 0, 0)";
                    var o = Math.PI, n = e.angle + o / 2, r = e.angle + 3 * o / 2;
                    return t.beginPath(), t.arc(i.x, i.y, .4 * e.length, n, r, !1), t.stroke(), !0;
                }
            }
        ]), t;
    }(), ix = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: .02,
                            y: 0
                        },
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -1,
                            y: -0.3
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), ox = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), nx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = {
                        x: -0.4,
                        y: 0
                    };
                    return $_.transform(i, e), No(t, i.x, i.y, .4 * e.length), !0;
                }
            }
        ]), t;
    }(), rx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .5
                        },
                        {
                            x: 0,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: -0.5
                        },
                        {
                            x: -0.15,
                            y: .5
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), sx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: .3
                        },
                        {
                            x: 0,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: -0.3
                        },
                        {
                            x: -0.6,
                            y: .3
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), ax = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: 0,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: -0.3
                        },
                        {
                            x: -1,
                            y: 0
                        },
                        {
                            x: -0.5,
                            y: .3
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), hx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i = [
                        {
                            x: -1,
                            y: .3
                        },
                        {
                            x: -0.5,
                            y: 0
                        },
                        {
                            x: -1,
                            y: -0.3
                        },
                        {
                            x: 0,
                            y: 0
                        }
                    ];
                    return $_.transform(i, e), $_.drawPath(t, i), !0;
                }
            }
        ]), t;
    }(), dx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "draw",
                value: function(t, e) {
                    var i;
                    switch(e.type && (i = e.type.toLowerCase()), i){
                        case "image":
                            return Z_.draw(t, e);
                        case "circle":
                            return nx.draw(t, e);
                        case "box":
                            return sx.draw(t, e);
                        case "crow":
                            return J_.draw(t, e);
                        case "curve":
                            return tx.draw(t, e);
                        case "diamond":
                            return ax.draw(t, e);
                        case "inv_curve":
                            return ex.draw(t, e);
                        case "triangle":
                            return ix.draw(t, e);
                        case "inv_triangle":
                            return ox.draw(t, e);
                        case "bar":
                            return rx.draw(t, e);
                        case "vee":
                            return hx.draw(t, e);
                        default:
                            return Q_.draw(t, e);
                    }
                }
            }
        ]), t;
    }();
    function lx(t, e) {
        var i = mu(t);
        if (dl) {
            var o = dl(t);
            e && (o = Yf(o).call(o, function(e) {
                return wl(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function cx(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Fu(i = lx(Object(n), !0)).call(i, function(e) {
                Zl(t, e, n[e]);
            }) : Dl ? Rl(t, Dl(n)) : Fu(o = lx(Object(n))).call(o, function(e) {
                Yl(t, e, wl(n, e));
            });
        }
        return t;
    }
    var ux = function() {
        function t(e, i, o) {
            Xl(this, t), this._body = i, this._labelModule = o, this.color = {}, this.colorDirty = !0, this.hoverWidth = 1.5, this.selectionWidth = 2, this.setOptions(e), this.fromPoint = this.from, this.toPoint = this.to;
        }
        return $l(t, [
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to];
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return !1;
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.id = this.options.id;
                }
            },
            {
                key: "drawLine",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.getViaNode();
                    t.strokeStyle = this.getColor(t, e), t.lineWidth = e.width, !1 !== e.dashes ? this._drawDashedLine(t, e, n) : this._drawLine(t, e, n);
                }
            },
            {
                key: "_drawLine",
                value: function(t, e, i, o, n) {
                    if (this.from != this.to) this._line(t, e, i, o, n);
                    else {
                        var r = $c(this._getCircleData(t), 3), s = r[0], a = r[1], h = r[2];
                        this._circle(t, e, s, a, h);
                    }
                }
            },
            {
                key: "_drawDashedLine",
                value: function(t, e, i, o, n) {
                    t.lineCap = "round";
                    var r = hu(e.dashes) ? e.dashes : [
                        5,
                        5
                    ];
                    if (void 0 !== t.setLineDash) {
                        if (t.save(), t.setLineDash(r), t.lineDashOffset = 0, this.from != this.to) this._line(t, e, i);
                        else {
                            var s = $c(this._getCircleData(t), 3), a = s[0], h = s[1], d = s[2];
                            this._circle(t, e, a, h, d);
                        }
                        t.setLineDash([
                            0
                        ]), t.lineDashOffset = 0, t.restore();
                    } else {
                        if (this.from != this.to) Lo(t, this.from.x, this.from.y, this.to.x, this.to.y, r);
                        else {
                            var l = $c(this._getCircleData(t), 3), c = l[0], u = l[1], f = l[2];
                            this._circle(t, e, c, u, f);
                        }
                        this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                    }
                }
            },
            {
                key: "findBorderPosition",
                value: function(t, e, i) {
                    return this.from != this.to ? this._findBorderPosition(t, e, i) : this._findBorderPositionCircle(t, e, i);
                }
            },
            {
                key: "findBorderPositions",
                value: function(t) {
                    if (this.from != this.to) return {
                        from: this._findBorderPosition(this.from, t),
                        to: this._findBorderPosition(this.to, t)
                    };
                    var e, i = $c(au(e = this._getCircleData(t)).call(e, 0, 2), 2), o = i[0], n = i[1];
                    return {
                        from: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: .25,
                            high: .6,
                            direction: -1
                        }),
                        to: this._findBorderPositionCircle(this.from, t, {
                            x: o,
                            y: n,
                            low: .6,
                            high: .8,
                            direction: 1
                        })
                    };
                }
            },
            {
                key: "_getCircleData",
                value: function(t) {
                    var e = this.options.selfReference.size;
                    void 0 !== t && void 0 === this.from.shape.width && this.from.shape.resize(t);
                    var i = ik(t, this.options.selfReference.angle, e, this.from);
                    return [
                        i.x,
                        i.y,
                        e
                    ];
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    var n = 2 * o * Math.PI;
                    return {
                        x: t + i * Math.cos(n),
                        y: e - i * Math.sin(n)
                    };
                }
            },
            {
                key: "_findBorderPositionCircle",
                value: function(t, e, i) {
                    var o, n = i.x, r = i.y, s = i.low, a = i.high, h = i.direction, d = this.options.selfReference.size, l = .5 * (s + a), c = 0;
                    !0 === this.options.arrowStrikethrough && (-1 === h ? c = this.options.endPointOffset.from : 1 === h && (c = this.options.endPointOffset.to));
                    var u = 0;
                    do {
                        l = .5 * (s + a), o = this._pointOnCircle(n, r, d, l);
                        var f = Math.atan2(t.y - o.y, t.x - o.x), p = t.distanceToBorder(e, f) + c - Math.sqrt(Math.pow(o.x - t.x, 2) + Math.pow(o.y - t.y, 2));
                        if (Math.abs(p) < .05) break;
                        p > 0 ? h > 0 ? s = l : a = l : h > 0 ? a = l : s = l, ++u;
                    }while (s <= a && u < 10);
                    return cx(cx({}, o), {}, {
                        t: l
                    });
                }
            },
            {
                key: "getLineWidth",
                value: function(t, e) {
                    return !0 === t ? Math.max(this.selectionWidth, .3 / this._body.view.scale) : !0 === e ? Math.max(this.hoverWidth, .3 / this._body.view.scale) : Math.max(this.options.width, .3 / this._body.view.scale);
                }
            },
            {
                key: "getColor",
                value: function(t, e) {
                    if (!1 !== e.inheritsColor) {
                        if ("both" === e.inheritsColor && this.from.id !== this.to.id) {
                            var i = t.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y), o = this.from.options.color.highlight.border, n = this.to.options.color.highlight.border;
                            return !1 === this.from.selected && !1 === this.to.selected ? (o = qy(this.from.options.color.border, e.opacity), n = qy(this.to.options.color.border, e.opacity)) : !0 === this.from.selected && !1 === this.to.selected ? n = this.to.options.color.border : !1 === this.from.selected && !0 === this.to.selected && (o = this.from.options.color.border), i.addColorStop(0, o), i.addColorStop(1, n), i;
                        }
                        return "to" === e.inheritsColor ? qy(this.to.options.color.border, e.opacity) : qy(this.from.options.color.border, e.opacity);
                    }
                    return qy(e.color, e.opacity);
                }
            },
            {
                key: "_circle",
                value: function(t, e, i, o, n) {
                    this.enableShadow(t, e);
                    var r = 0, s = 2 * Math.PI;
                    if (!this.options.selfReference.renderBehindTheNode) {
                        var a = this.options.selfReference.angle, h = this.options.selfReference.angle + Math.PI, d = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: -1
                        }), l = this._findBorderPositionCircle(this.from, t, {
                            x: i,
                            y: o,
                            low: a,
                            high: h,
                            direction: 1
                        });
                        r = Math.atan2(d.y - o, d.x - i), s = Math.atan2(l.y - o, l.x - i);
                    }
                    t.beginPath(), t.arc(i, o, n, r, s, !1), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    if (this.from != this.to) return this._getDistanceToEdge(t, e, i, o, n, r);
                    var s = $c(this._getCircleData(void 0), 3), a = s[0], h = s[1], d = s[2], l = a - n, c = h - r;
                    return Math.abs(Math.sqrt(l * l + c * c) - d);
                }
            },
            {
                key: "_getDistanceToLine",
                value: function(t, e, i, o, n, r) {
                    var s = i - t, a = o - e, h = ((n - t) * s + (r - e) * a) / (s * s + a * a);
                    h > 1 ? h = 1 : h < 0 && (h = 0);
                    var d = t + h * s - n, l = e + h * a - r;
                    return Math.sqrt(d * d + l * l);
                }
            },
            {
                key: "getArrowData",
                value: function(t, e, i, o, n, r) {
                    var s, a, h, d, l, c, u, f = r.width;
                    "from" === e ? (h = this.from, d = this.to, l = r.fromArrowScale < 0, c = Math.abs(r.fromArrowScale), u = r.fromArrowType) : "to" === e ? (h = this.to, d = this.from, l = r.toArrowScale < 0, c = Math.abs(r.toArrowScale), u = r.toArrowType) : (h = this.to, d = this.from, l = r.middleArrowScale < 0, c = Math.abs(r.middleArrowScale), u = r.middleArrowType);
                    var p = 15 * c + 3 * f;
                    if (h != d) {
                        var v = p / G_(h.x - d.x, h.y - d.y);
                        if ("middle" !== e) {
                            if (!0 === this.options.smooth.enabled) {
                                var g = this._findBorderPosition(h, t, {
                                    via: i
                                }), y = this.getPoint(g.t + v * ("from" === e ? 1 : -1), i);
                                s = Math.atan2(g.y - y.y, g.x - y.x), a = g;
                            } else s = Math.atan2(h.y - d.y, h.x - d.x), a = this._findBorderPosition(h, t);
                        } else {
                            var m = (l ? -v : v) / 2, b = this.getPoint(.5 + m, i), w = this.getPoint(.5 - m, i);
                            s = Math.atan2(b.y - w.y, b.x - w.x), a = this.getPoint(.5, i);
                        }
                    } else {
                        var k = $c(this._getCircleData(t), 3), _ = k[0], x = k[1], E = k[2];
                        if ("from" === e) {
                            var O = this.options.selfReference.angle, C = this.options.selfReference.angle + Math.PI, S = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: O,
                                high: C,
                                direction: -1
                            });
                            s = -2 * S.t * Math.PI + 1.5 * Math.PI + .1 * Math.PI, a = S;
                        } else if ("to" === e) {
                            var T = this.options.selfReference.angle, M = this.options.selfReference.angle + Math.PI, P = this._findBorderPositionCircle(this.from, t, {
                                x: _,
                                y: x,
                                low: T,
                                high: M,
                                direction: 1
                            });
                            s = -2 * P.t * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI, a = P;
                        } else {
                            var D = this.options.selfReference.angle / (2 * Math.PI);
                            a = this._pointOnCircle(_, x, E, D), s = -2 * D * Math.PI + 1.5 * Math.PI + .1 * Math.PI;
                        }
                    }
                    return {
                        point: a,
                        core: {
                            x: a.x - .9 * p * Math.cos(s),
                            y: a.y - .9 * p * Math.sin(s)
                        },
                        angle: s,
                        length: p,
                        type: u
                    };
                }
            },
            {
                key: "drawArrowHead",
                value: function(t, e, i, o, n) {
                    t.strokeStyle = this.getColor(t, e), t.fillStyle = t.strokeStyle, t.lineWidth = e.width, dx.draw(t, n) && (this.enableShadow(t, e), Pv(t).call(t), this.disableShadow(t, e));
                }
            },
            {
                key: "enableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = e.shadowColor, t.shadowBlur = e.shadowSize, t.shadowOffsetX = e.shadowX, t.shadowOffsetY = e.shadowY);
                }
            },
            {
                key: "disableShadow",
                value: function(t, e) {
                    !0 === e.shadow && (t.shadowColor = "rgba(0,0,0,0)", t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0);
                }
            },
            {
                key: "drawBackground",
                value: function(t, e) {
                    if (!1 !== e.background) {
                        var i = {
                            strokeStyle: t.strokeStyle,
                            lineWidth: t.lineWidth,
                            dashes: t.dashes
                        };
                        t.strokeStyle = e.backgroundColor, t.lineWidth = e.backgroundSize, this.setStrokeDashed(t, e.backgroundDashes), t.stroke(), t.strokeStyle = i.strokeStyle, t.lineWidth = i.lineWidth, t.dashes = i.dashes, this.setStrokeDashed(t, e.dashes);
                    }
                }
            },
            {
                key: "setStrokeDashed",
                value: function(t, e) {
                    if (!1 !== e) {
                        if (void 0 !== t.setLineDash) {
                            var i = hu(e) ? e : [
                                5,
                                5
                            ];
                            t.setLineDash(i);
                        } else console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                    } else void 0 !== t.setLineDash ? t.setLineDash([]) : console.warn("setLineDash is not supported in this browser. The dashed stroke cannot be used.");
                }
            }
        ]), t;
    }();
    function fx(t, e) {
        var i = mu(t);
        if (dl) {
            var o = dl(t);
            e && (o = Yf(o).call(o, function(e) {
                return wl(t, e).enumerable;
            })), i.push.apply(i, o);
        }
        return i;
    }
    function px(t) {
        for(var e = 1; e < arguments.length; e++){
            var i, o, n = null != arguments[e] ? arguments[e] : {};
            e % 2 ? Fu(i = fx(Object(n), !0)).call(i, function(e) {
                Zl(t, e, n[e]);
            }) : Dl ? Rl(t, Dl(n)) : Fu(o = fx(Object(n))).call(o, function(e) {
                Yl(t, e, wl(n, e));
            });
        }
        return t;
    }
    function vx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var gx = function(t) {
        Rk(i, t);
        var e = vx(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_findBorderPositionBezier",
                value: function(t, e) {
                    var i, o, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this._getViaCoordinates(), r = 10, s = .2, a = !1, h = 1, d = 0, l = this.to, c = this.options.endPointOffset ? this.options.endPointOffset.to : 0;
                    t.id === this.from.id && (l = this.from, a = !0, c = this.options.endPointOffset ? this.options.endPointOffset.from : 0), !1 === this.options.arrowStrikethrough && (c = 0);
                    var u = 0;
                    do {
                        o = .5 * (d + h), i = this.getPoint(o, n);
                        var f = Math.atan2(l.y - i.y, l.x - i.x), p = l.distanceToBorder(e, f) + c, v = Math.sqrt(Math.pow(i.x - l.x, 2) + Math.pow(i.y - l.y, 2)), g = p - v;
                        if (Math.abs(g) < s) break;
                        g < 0 ? !1 === a ? d = o : h = o : !1 === a ? h = o : d = o, ++u;
                    }while (d <= h && u < r);
                    return px(px({}, i), {}, {
                        t: o
                    });
                }
            },
            {
                key: "_getDistanceToBezierEdge",
                value: function(t, e, i, o, n, r, s) {
                    var a, h, d, l, c, u = 1e9, f = t, p = e;
                    for(h = 1; h < 10; h++)d = .1 * h, l = Math.pow(1 - d, 2) * t + 2 * d * (1 - d) * s.x + Math.pow(d, 2) * i, c = Math.pow(1 - d, 2) * e + 2 * d * (1 - d) * s.y + Math.pow(d, 2) * o, h > 0 && (u = (a = this._getDistanceToLine(f, p, l, c, n, r)) < u ? a : u), f = l, p = c;
                    return u;
                }
            },
            {
                key: "_bezierCurve",
                value: function(t, e, i, o) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), null != i && null != i.x ? null != o && null != o.x ? t.bezierCurveTo(i.x, i.y, o.x, o.y, this.toPoint.x, this.toPoint.y) : t.quadraticCurveTo(i.x, i.y, this.toPoint.x, this.toPoint.y) : t.lineTo(this.toPoint.x, this.toPoint.y), this.drawBackground(t, e), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            }
        ]), i;
    }(ux);
    function yx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var mx = function(t) {
        Rk(i, t);
        var e = yx(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n)).via = r.via, r._boundFunction = function() {
                r.positionBezierNode();
            }, r._body.emitter.on("_repositionBezierNodes", r._boundFunction), r;
        }
        return $l(i, [
            {
                key: "setOptions",
                value: function(t) {
                    V_(Hk(i.prototype), "setOptions", this).call(this, t);
                    var e = !1;
                    this.options.physics !== t.physics && (e = !0), this.options = t, this.id = this.options.id, this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], this.setupSupportNode(), this.connect(), !0 === e && (this.via.setOptions({
                        physics: this.options.physics
                    }), this.positionBezierNode());
                }
            },
            {
                key: "connect",
                value: function() {
                    this.from = this._body.nodes[this.options.from], this.to = this._body.nodes[this.options.to], void 0 === this.from || void 0 === this.to || !1 === this.options.physics || this.from.id === this.to.id ? this.via.setOptions({
                        physics: !1
                    }) : this.via.setOptions({
                        physics: !0
                    });
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this._body.emitter.off("_repositionBezierNodes", this._boundFunction), void 0 !== this.via && (delete this._body.nodes[this.via.id], this.via = void 0, !0);
                }
            },
            {
                key: "setupSupportNode",
                value: function() {
                    if (void 0 === this.via) {
                        var t = "edgeId:" + this.id, e = this._body.functions.createNode({
                            id: t,
                            shape: "circle",
                            physics: !0,
                            hidden: !0
                        });
                        this._body.nodes[t] = e, this.via = e, this.via.parentEdgeId = this.id, this.positionBezierNode();
                    }
                }
            },
            {
                key: "positionBezierNode",
                value: function() {
                    void 0 !== this.via && void 0 !== this.from && void 0 !== this.to ? (this.via.x = .5 * (this.from.x + this.to.x), this.via.y = .5 * (this.from.y + this.to.y)) : void 0 !== this.via && (this.via.x = 0, this.via.y = 0);
                }
            },
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this.via;
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.via;
                    if (this.from === this.to) {
                        var i = this._getCircleData(), o = $c(i, 3), n = o[0], r = o[1], s = o[2], a = 2 * Math.PI * (1 - t);
                        return {
                            x: n + s * Math.sin(a),
                            y: r + s - s * (1 - Math.cos(a))
                        };
                    }
                    return {
                        x: Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * e.x + Math.pow(t, 2) * this.toPoint.x,
                        y: Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * e.y + Math.pow(t, 2) * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e, this.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, this.via);
                }
            }
        ]), i;
    }(gx);
    function bx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var wx = function(t) {
        Rk(i, t);
        var e = bx(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_line",
                value: function(t, e, i) {
                    this._bezierCurve(t, e, i);
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i = this.options.smooth.roundness, o = this.options.smooth.type, n = Math.abs(this.from.x - this.to.x), r = Math.abs(this.from.y - this.to.y);
                    if ("discrete" === o || "diagonalCross" === o) {
                        var s, a;
                        s = a = n <= r ? i * r : i * n, this.from.x > this.to.x && (s = -s), this.from.y >= this.to.y && (a = -a);
                        var h = this.from.x + s, d = this.from.y + a;
                        return "discrete" === o && (n <= r ? h = n < i * r ? this.from.x : h : d = r < i * n ? this.from.y : d), {
                            x: h,
                            y: d
                        };
                    }
                    if ("straightCross" === o) {
                        var l = (1 - i) * n, c = (1 - i) * r;
                        return n <= r ? (l = 0, this.from.y < this.to.y && (c = -c)) : (this.from.x < this.to.x && (l = -l), c = 0), {
                            x: this.to.x + l,
                            y: this.to.y + c
                        };
                    }
                    if ("horizontal" === o) {
                        var u = (1 - i) * n;
                        return this.from.x < this.to.x && (u = -u), {
                            x: this.to.x + u,
                            y: this.from.y
                        };
                    }
                    if ("vertical" === o) {
                        var f = (1 - i) * r;
                        return this.from.y < this.to.y && (f = -f), {
                            x: this.from.x,
                            y: this.to.y + f
                        };
                    }
                    if ("curvedCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var p = Math.sqrt(n * n + r * r), v = Math.PI, g = (Math.atan2(r, n) + (.5 * i + .5) * v) % (2 * v);
                        return {
                            x: this.from.x + (.5 * i + .5) * p * Math.sin(g),
                            y: this.from.y + (.5 * i + .5) * p * Math.cos(g)
                        };
                    }
                    if ("curvedCCW" === o) {
                        n = this.to.x - this.from.x, r = this.from.y - this.to.y;
                        var y = Math.sqrt(n * n + r * r), m = Math.PI, b = (Math.atan2(r, n) + (.5 * -i + .5) * m) % (2 * m);
                        return {
                            x: this.from.x + (.5 * i + .5) * y * Math.sin(b),
                            y: this.from.y + (.5 * i + .5) * y * Math.cos(b)
                        };
                    }
                    t = e = n <= r ? i * r : i * n, this.from.x > this.to.x && (t = -t), this.from.y >= this.to.y && (e = -e);
                    var w = this.from.x + t, k = this.from.y + e;
                    return n <= r ? w = this.from.x <= this.to.x ? this.to.x < w ? this.to.x : w : this.to.x > w ? this.to.x : w : k = this.from.y >= this.to.y ? this.to.y > k ? this.to.y : k : this.to.y < k ? this.to.y : k, {
                        x: w,
                        y: k
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return this._findBorderPositionBezier(t, e, i.via);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates();
                    return this._getDistanceToBezierEdge(t, e, i, o, n, r, s);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i = t, o = Math.pow(1 - i, 2) * this.fromPoint.x + 2 * i * (1 - i) * e.x + Math.pow(i, 2) * this.toPoint.x, n = Math.pow(1 - i, 2) * this.fromPoint.y + 2 * i * (1 - i) * e.y + Math.pow(i, 2) * this.toPoint.y;
                    return {
                        x: o,
                        y: n
                    };
                }
            }
        ]), i;
    }(gx);
    function kx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var _x = function(t) {
        Rk(i, t);
        var e = kx(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_getDistanceToBezierEdge2",
                value: function(t, e, i, o, n, r, s, a) {
                    for(var h = 1e9, d = t, l = e, c = [
                        0,
                        0,
                        0,
                        0
                    ], u = 1; u < 10; u++){
                        var f = .1 * u;
                        c[0] = Math.pow(1 - f, 3), c[1] = 3 * f * Math.pow(1 - f, 2), c[2] = 3 * Math.pow(f, 2) * (1 - f), c[3] = Math.pow(f, 3);
                        var p = c[0] * t + c[1] * s.x + c[2] * a.x + c[3] * i, v = c[0] * e + c[1] * s.y + c[2] * a.y + c[3] * o;
                        if (u > 0) {
                            var g = this._getDistanceToLine(d, l, p, v, n, r);
                            h = g < h ? g : h;
                        }
                        d = p, l = v;
                    }
                    return h;
                }
            }
        ]), i;
    }(gx);
    function xx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Ex = function(t) {
        Rk(i, t);
        var e = xx(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_line",
                value: function(t, e, i) {
                    var o = i[0], n = i[1];
                    this._bezierCurve(t, e, o, n);
                }
            },
            {
                key: "_getViaCoordinates",
                value: function() {
                    var t, e, i, o, n = this.from.x - this.to.x, r = this.from.y - this.to.y, s = this.options.smooth.roundness;
                    return (Math.abs(n) > Math.abs(r) || !0 === this.options.smooth.forceDirection || "horizontal" === this.options.smooth.forceDirection) && "vertical" !== this.options.smooth.forceDirection ? (e = this.from.y, o = this.to.y, t = this.from.x - s * n, i = this.to.x + s * n) : (e = this.from.y - s * r, o = this.to.y + s * r, t = this.from.x, i = this.to.x), [
                        {
                            x: t,
                            y: e
                        },
                        {
                            x: i,
                            y: o
                        }
                    ];
                }
            },
            {
                key: "getViaNode",
                value: function() {
                    return this._getViaCoordinates();
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    return this._findBorderPositionBezier(t, e);
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    var s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : this._getViaCoordinates(), a = $c(s, 2), h = a[0], d = a[1];
                    return this._getDistanceToBezierEdge2(t, e, i, o, n, r, h, d);
                }
            },
            {
                key: "getPoint",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this._getViaCoordinates(), i = $c(e, 2), o = i[0], n = i[1], r = t, s = [
                        Math.pow(1 - r, 3),
                        3 * r * Math.pow(1 - r, 2),
                        3 * Math.pow(r, 2) * (1 - r),
                        Math.pow(r, 3)
                    ], a = s[0] * this.fromPoint.x + s[1] * o.x + s[2] * n.x + s[3] * this.toPoint.x, h = s[0] * this.fromPoint.y + s[1] * o.y + s[2] * n.y + s[3] * this.toPoint.y;
                    return {
                        x: a,
                        y: h
                    };
                }
            }
        ]), i;
    }(_x);
    function Ox(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Cx = function(t) {
        Rk(i, t);
        var e = Ox(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_line",
                value: function(t, e) {
                    t.beginPath(), t.moveTo(this.fromPoint.x, this.fromPoint.y), t.lineTo(this.toPoint.x, this.toPoint.y), this.enableShadow(t, e), t.stroke(), this.disableShadow(t, e);
                }
            },
            {
                key: "getViaNode",
                value: function() {}
            },
            {
                key: "getPoint",
                value: function(t) {
                    return {
                        x: (1 - t) * this.fromPoint.x + t * this.toPoint.x,
                        y: (1 - t) * this.fromPoint.y + t * this.toPoint.y
                    };
                }
            },
            {
                key: "_findBorderPosition",
                value: function(t, e) {
                    var i = this.to, o = this.from;
                    t.id === this.from.id && (i = this.from, o = this.to);
                    var n = Math.atan2(i.y - o.y, i.x - o.x), r = i.x - o.x, s = i.y - o.y, a = Math.sqrt(r * r + s * s), h = (a - t.distanceToBorder(e, n)) / a;
                    return {
                        x: (1 - h) * o.x + h * i.x,
                        y: (1 - h) * o.y + h * i.y,
                        t: 0
                    };
                }
            },
            {
                key: "_getDistanceToEdge",
                value: function(t, e, i, o, n, r) {
                    return this._getDistanceToLine(t, e, i, o, n, r);
                }
            }
        ]), i;
    }(ux), Sx = function() {
        function t(e, i, o, n, r) {
            if (Xl(this, t), void 0 === i) throw new Error("No body provided");
            this.options = Jy(n), this.globalOptions = n, this.defaultOptions = r, this.body = i, this.imagelist = o, this.id = void 0, this.fromId = void 0, this.toId = void 0, this.selected = !1, this.hover = !1, this.labelDirty = !0, this.baseWidth = this.options.width, this.baseFontSize = this.options.font.size, this.from = void 0, this.to = void 0, this.edgeType = void 0, this.connected = !1, this.labelModule = new gk(this.body, this.options, !0), this.setOptions(e);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(e) {
                    if (e) {
                        var i = void 0 !== e.physics && this.options.physics !== e.physics || void 0 !== e.hidden && (this.options.hidden || !1) !== (e.hidden || !1) || void 0 !== e.from && this.options.from !== e.from || void 0 !== e.to && this.options.to !== e.to;
                        t.parseOptions(this.options, e, !0, this.globalOptions), void 0 !== e.id && (this.id = e.id), void 0 !== e.from && (this.fromId = e.from), void 0 !== e.to && (this.toId = e.to), void 0 !== e.title && (this.title = e.title), void 0 !== e.value && (e.value = Yw(e.value));
                        var o = [
                            e,
                            this.options,
                            this.defaultOptions
                        ];
                        return this.chooser = Jw("edge", o), this.updateLabelModule(e), i = this.updateEdgeType() || i, this._setInteractionWidths(), this.connect(), i;
                    }
                }
            },
            {
                key: "getFormattingValues",
                value: function() {
                    var t = !0 === this.options.arrows.to || !0 === this.options.arrows.to.enabled, e = !0 === this.options.arrows.from || !0 === this.options.arrows.from.enabled, i = !0 === this.options.arrows.middle || !0 === this.options.arrows.middle.enabled, o = this.options.color.inherit, n = {
                        toArrow: t,
                        toArrowScale: this.options.arrows.to.scaleFactor,
                        toArrowType: this.options.arrows.to.type,
                        toArrowSrc: this.options.arrows.to.src,
                        toArrowImageWidth: this.options.arrows.to.imageWidth,
                        toArrowImageHeight: this.options.arrows.to.imageHeight,
                        middleArrow: i,
                        middleArrowScale: this.options.arrows.middle.scaleFactor,
                        middleArrowType: this.options.arrows.middle.type,
                        middleArrowSrc: this.options.arrows.middle.src,
                        middleArrowImageWidth: this.options.arrows.middle.imageWidth,
                        middleArrowImageHeight: this.options.arrows.middle.imageHeight,
                        fromArrow: e,
                        fromArrowScale: this.options.arrows.from.scaleFactor,
                        fromArrowType: this.options.arrows.from.type,
                        fromArrowSrc: this.options.arrows.from.src,
                        fromArrowImageWidth: this.options.arrows.from.imageWidth,
                        fromArrowImageHeight: this.options.arrows.from.imageHeight,
                        arrowStrikethrough: this.options.arrowStrikethrough,
                        color: o ? void 0 : this.options.color.color,
                        inheritsColor: o,
                        opacity: this.options.color.opacity,
                        hidden: this.options.hidden,
                        length: this.options.length,
                        shadow: this.options.shadow.enabled,
                        shadowColor: this.options.shadow.color,
                        shadowSize: this.options.shadow.size,
                        shadowX: this.options.shadow.x,
                        shadowY: this.options.shadow.y,
                        dashes: this.options.dashes,
                        width: this.options.width,
                        background: this.options.background.enabled,
                        backgroundColor: this.options.background.color,
                        backgroundSize: this.options.background.size,
                        backgroundDashes: this.options.background.dashes
                    };
                    if (this.selected || this.hover) {
                        if (!0 === this.chooser) {
                            if (this.selected) {
                                var r = this.options.selectionWidth;
                                "function" == typeof r ? n.width = r(n.width) : "number" == typeof r && (n.width += r), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.highlight, n.shadow = this.options.shadow.enabled;
                            } else if (this.hover) {
                                var s = this.options.hoverWidth;
                                "function" == typeof s ? n.width = s(n.width) : "number" == typeof s && (n.width += s), n.width = Math.max(n.width, .3 / this.body.view.scale), n.color = this.options.color.hover, n.shadow = this.options.shadow.enabled;
                            }
                        } else "function" == typeof this.chooser && (this.chooser(n, this.options.id, this.selected, this.hover), void 0 !== n.color && (n.inheritsColor = !1), !1 === n.shadow && (n.shadowColor === this.options.shadow.color && n.shadowSize === this.options.shadow.size && n.shadowX === this.options.shadow.x && n.shadowY === this.options.shadow.y || (n.shadow = !0)));
                    } else n.shadow = this.options.shadow.enabled, n.width = Math.max(n.width, .3 / this.body.view.scale);
                    return n;
                }
            },
            {
                key: "updateLabelModule",
                value: function(t) {
                    var e = [
                        t,
                        this.options,
                        this.globalOptions,
                        this.defaultOptions
                    ];
                    this.labelModule.update(this.options, e), void 0 !== this.labelModule.baseSize && (this.baseFontSize = this.labelModule.baseSize);
                }
            },
            {
                key: "updateEdgeType",
                value: function() {
                    var t = this.options.smooth, e = !1, i = !0;
                    return void 0 !== this.edgeType && ((this.edgeType instanceof mx && !0 === t.enabled && "dynamic" === t.type || this.edgeType instanceof Ex && !0 === t.enabled && "cubicBezier" === t.type || this.edgeType instanceof wx && !0 === t.enabled && "dynamic" !== t.type && "cubicBezier" !== t.type || this.edgeType instanceof Cx && !1 === t.type.enabled) && (i = !1), !0 === i && (e = this.cleanup())), !0 === i ? !0 === t.enabled ? "dynamic" === t.type ? (e = !0, this.edgeType = new mx(this.options, this.body, this.labelModule)) : "cubicBezier" === t.type ? this.edgeType = new Ex(this.options, this.body, this.labelModule) : this.edgeType = new wx(this.options, this.body, this.labelModule) : this.edgeType = new Cx(this.options, this.body, this.labelModule) : this.edgeType.setOptions(this.options), e;
                }
            },
            {
                key: "connect",
                value: function() {
                    this.disconnect(), this.from = this.body.nodes[this.fromId] || void 0, this.to = this.body.nodes[this.toId] || void 0, this.connected = void 0 !== this.from && void 0 !== this.to, !0 === this.connected ? (this.from.attachEdge(this), this.to.attachEdge(this)) : (this.from && this.from.detachEdge(this), this.to && this.to.detachEdge(this)), this.edgeType.connect();
                }
            },
            {
                key: "disconnect",
                value: function() {
                    this.from && (this.from.detachEdge(this), this.from = void 0), this.to && (this.to.detachEdge(this), this.to = void 0), this.connected = !1;
                }
            },
            {
                key: "getTitle",
                value: function() {
                    return this.title;
                }
            },
            {
                key: "isSelected",
                value: function() {
                    return this.selected;
                }
            },
            {
                key: "getValue",
                value: function() {
                    return this.options.value;
                }
            },
            {
                key: "setValueRange",
                value: function(t, e, i) {
                    if (void 0 !== this.options.value) {
                        var o = this.options.scaling.customScalingFunction(t, e, i, this.options.value), n = this.options.scaling.max - this.options.scaling.min;
                        if (!0 === this.options.scaling.label.enabled) {
                            var r = this.options.scaling.label.max - this.options.scaling.label.min;
                            this.options.font.size = this.options.scaling.label.min + o * r;
                        }
                        this.options.width = this.options.scaling.min + o * n;
                    } else this.options.width = this.baseWidth, this.options.font.size = this.baseFontSize;
                    this._setInteractionWidths(), this.updateLabelModule();
                }
            },
            {
                key: "_setInteractionWidths",
                value: function() {
                    "function" == typeof this.options.hoverWidth ? this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width) : this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width, "function" == typeof this.options.selectionWidth ? this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width) : this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
                }
            },
            {
                key: "draw",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode();
                        this.edgeType.drawLine(t, e, this.selected, this.hover, i), this.drawLabel(t, i);
                    }
                }
            },
            {
                key: "drawArrows",
                value: function(t) {
                    var e = this.getFormattingValues();
                    if (!e.hidden) {
                        var i = this.edgeType.getViaNode(), o = {};
                        this.edgeType.fromPoint = this.edgeType.from, this.edgeType.toPoint = this.edgeType.to, e.fromArrow && (o.from = this.edgeType.getArrowData(t, "from", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.fromPoint = o.from.core), e.fromArrowSrc && (o.from.image = this.imagelist.load(e.fromArrowSrc)), e.fromArrowImageWidth && (o.from.imageWidth = e.fromArrowImageWidth), e.fromArrowImageHeight && (o.from.imageHeight = e.fromArrowImageHeight)), e.toArrow && (o.to = this.edgeType.getArrowData(t, "to", i, this.selected, this.hover, e), !1 === e.arrowStrikethrough && (this.edgeType.toPoint = o.to.core), e.toArrowSrc && (o.to.image = this.imagelist.load(e.toArrowSrc)), e.toArrowImageWidth && (o.to.imageWidth = e.toArrowImageWidth), e.toArrowImageHeight && (o.to.imageHeight = e.toArrowImageHeight)), e.middleArrow && (o.middle = this.edgeType.getArrowData(t, "middle", i, this.selected, this.hover, e), e.middleArrowSrc && (o.middle.image = this.imagelist.load(e.middleArrowSrc)), e.middleArrowImageWidth && (o.middle.imageWidth = e.middleArrowImageWidth), e.middleArrowImageHeight && (o.middle.imageHeight = e.middleArrowImageHeight)), e.fromArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.from), e.middleArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.middle), e.toArrow && this.edgeType.drawArrowHead(t, e, this.selected, this.hover, o.to);
                    }
                }
            },
            {
                key: "drawLabel",
                value: function(t, e) {
                    if (void 0 !== this.options.label) {
                        var i, o = this.from, n = this.to;
                        if (this.labelModule.differentState(this.selected, this.hover) && this.labelModule.getTextSize(t, this.selected, this.hover), o.id != n.id) {
                            this.labelModule.pointToSelf = !1, i = this.edgeType.getPoint(.5, e), t.save();
                            var r = this._getRotation(t);
                            0 != r.angle && (t.translate(r.x, r.y), t.rotate(r.angle)), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover), t.restore();
                        } else {
                            this.labelModule.pointToSelf = !0;
                            var s = ik(t, this.options.selfReference.angle, this.options.selfReference.size, o);
                            i = this._pointOnCircle(s.x, s.y, this.options.selfReference.size, this.options.selfReference.angle), this.labelModule.draw(t, i.x, i.y, this.selected, this.hover);
                        }
                    }
                }
            },
            {
                key: "getItemsOnPoint",
                value: function(t) {
                    var e = [];
                    if (this.labelModule.visible()) {
                        var i = this._getRotation();
                        tk(this.labelModule.getSize(), t, i) && e.push({
                            edgeId: this.id,
                            labelId: 0
                        });
                    }
                    var o = {
                        left: t.x,
                        top: t.y
                    };
                    return this.isOverlappingWith(o) && e.push({
                        edgeId: this.id
                    }), e;
                }
            },
            {
                key: "isOverlappingWith",
                value: function(t) {
                    if (this.connected) {
                        var e = this.from.x, i = this.from.y, o = this.to.x, n = this.to.y, r = t.left, s = t.top;
                        return this.edgeType.getDistanceToEdge(e, i, o, n, r, s) < 10;
                    }
                    return !1;
                }
            },
            {
                key: "_getRotation",
                value: function(t) {
                    var e = this.edgeType.getViaNode(), i = this.edgeType.getPoint(.5, e);
                    void 0 !== t && this.labelModule.calculateLabelSize(t, this.selected, this.hover, i.x, i.y);
                    var o = {
                        x: i.x,
                        y: this.labelModule.size.yLine,
                        angle: 0
                    };
                    if (!this.labelModule.visible()) return o;
                    if ("horizontal" === this.options.font.align) return o;
                    var n = this.from.y - this.to.y, r = this.from.x - this.to.x, s = Math.atan2(n, r);
                    return (s < -1 && r < 0 || s > 0 && r < 0) && (s += Math.PI), o.angle = s, o;
                }
            },
            {
                key: "_pointOnCircle",
                value: function(t, e, i, o) {
                    return {
                        x: t + i * Math.cos(o),
                        y: e - i * Math.sin(o)
                    };
                }
            },
            {
                key: "select",
                value: function() {
                    this.selected = !0;
                }
            },
            {
                key: "unselect",
                value: function() {
                    this.selected = !1;
                }
            },
            {
                key: "cleanup",
                value: function() {
                    return this.edgeType.cleanup();
                }
            },
            {
                key: "remove",
                value: function() {
                    this.cleanup(), this.disconnect(), delete this.body.edges[this.id];
                }
            },
            {
                key: "endPointsValid",
                value: function() {
                    return void 0 !== this.body.nodes[this.fromId] && void 0 !== this.body.nodes[this.toId];
                }
            }
        ], [
            {
                key: "parseOptions",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r = [
                        "endPointOffset",
                        "arrowStrikethrough",
                        "id",
                        "from",
                        "hidden",
                        "hoverWidth",
                        "labelHighlightBold",
                        "length",
                        "line",
                        "opacity",
                        "physics",
                        "scaling",
                        "selectionWidth",
                        "selfReferenceSize",
                        "selfReference",
                        "to",
                        "title",
                        "value",
                        "width",
                        "font",
                        "chosen",
                        "widthConstraint"
                    ];
                    if (Ny(r, t, e, i), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.from && (Mw(e.endPointOffset.from) ? t.endPointOffset.from = e.endPointOffset.from : (t.endPointOffset.from = void 0 !== o.endPointOffset.from ? o.endPointOffset.from : 0, console.error("endPointOffset.from is not a valid number"))), void 0 !== e.endPointOffset && void 0 !== e.endPointOffset.to && (Mw(e.endPointOffset.to) ? t.endPointOffset.to = e.endPointOffset.to : (t.endPointOffset.to = void 0 !== o.endPointOffset.to ? o.endPointOffset.to : 0, console.error("endPointOffset.to is not a valid number"))), ek(e.label) ? t.label = e.label : ek(t.label) || (t.label = void 0), tm(t, e, "smooth", o), tm(t, e, "shadow", o), tm(t, e, "background", o), void 0 !== e.dashes && null !== e.dashes ? t.dashes = e.dashes : !0 === i && null === e.dashes && (t.dashes = Hp(o.dashes)), void 0 !== e.scaling && null !== e.scaling ? (void 0 !== e.scaling.min && (t.scaling.min = e.scaling.min), void 0 !== e.scaling.max && (t.scaling.max = e.scaling.max), tm(t.scaling, e.scaling, "label", o.scaling)) : !0 === i && null === e.scaling && (t.scaling = Hp(o.scaling)), void 0 !== e.arrows && null !== e.arrows) {
                        if ("string" == typeof e.arrows) {
                            var s = e.arrows.toLowerCase();
                            t.arrows.to.enabled = -1 != zp(s).call(s, "to"), t.arrows.middle.enabled = -1 != zp(s).call(s, "middle"), t.arrows.from.enabled = -1 != zp(s).call(s, "from");
                        } else {
                            if ("object" !== Qc(e.arrows)) throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + hv(e.arrows));
                            tm(t.arrows, e.arrows, "to", o.arrows), tm(t.arrows, e.arrows, "middle", o.arrows), tm(t.arrows, e.arrows, "from", o.arrows);
                        }
                    } else !0 === i && null === e.arrows && (t.arrows = Hp(o.arrows));
                    if (void 0 !== e.color && null !== e.color) {
                        var a = By(e.color) ? {
                            color: e.color,
                            highlight: e.color,
                            hover: e.color,
                            inherit: !1,
                            opacity: 1
                        } : e.color, h = t.color;
                        if (n) Ry(h, o.color, !1, i);
                        else for(var d in h)Object.prototype.hasOwnProperty.call(h, d) && delete h[d];
                        if (By(h)) h.color = h, h.highlight = h, h.hover = h, h.inherit = !1, void 0 === a.opacity && (h.opacity = 1);
                        else {
                            var l = !1;
                            void 0 !== a.color && (h.color = a.color, l = !0), void 0 !== a.highlight && (h.highlight = a.highlight, l = !0), void 0 !== a.hover && (h.hover = a.hover, l = !0), void 0 !== a.inherit && (h.inherit = a.inherit), void 0 !== a.opacity && (h.opacity = Math.min(1, Math.max(0, a.opacity))), !0 === l ? h.inherit = !1 : void 0 === h.inherit && (h.inherit = "from");
                        }
                    } else !0 === i && null === e.color && (t.color = Jy(o.color));
                    !0 === i && null === e.font && (t.font = Jy(o.font)), Object.prototype.hasOwnProperty.call(e, "selfReferenceSize") && (console.warn("The selfReferenceSize property has been deprecated. Please use selfReference property instead. The selfReference can be set like thise selfReference:{size:30, angle:Math.PI / 4}"), t.selfReference.size = e.selfReferenceSize);
                }
            }
        ]), t;
    }(), Tx = function() {
        function t(e, i, o) {
            var n, r = this;
            Xl(this, t), this.body = e, this.images = i, this.groups = o, this.body.functions.createEdge = Fo(n = this.create).call(n, this), this.edgesListeners = {
                add: function(t, e) {
                    r.add(e.items);
                },
                update: function(t, e) {
                    r.update(e.items);
                },
                remove: function(t, e) {
                    r.remove(e.items);
                }
            }, this.options = {}, this.defaultOptions = {
                arrows: {
                    to: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    middle: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    },
                    from: {
                        enabled: !1,
                        scaleFactor: 1,
                        type: "arrow"
                    }
                },
                endPointOffset: {
                    from: 0,
                    to: 0
                },
                arrowStrikethrough: !0,
                color: {
                    color: "#848484",
                    highlight: "#848484",
                    hover: "#848484",
                    inherit: "from",
                    opacity: 1
                },
                dashes: !1,
                font: {
                    color: "#343434",
                    size: 14,
                    face: "arial",
                    background: "none",
                    strokeWidth: 2,
                    strokeColor: "#ffffff",
                    align: "horizontal",
                    multi: !1,
                    vadjust: 0,
                    bold: {
                        mod: "bold"
                    },
                    boldital: {
                        mod: "bold italic"
                    },
                    ital: {
                        mod: "italic"
                    },
                    mono: {
                        mod: "",
                        size: 15,
                        face: "courier new",
                        vadjust: 2
                    }
                },
                hidden: !1,
                hoverWidth: 1.5,
                label: void 0,
                labelHighlightBold: !0,
                length: void 0,
                physics: !0,
                scaling: {
                    min: 1,
                    max: 15,
                    label: {
                        enabled: !0,
                        min: 14,
                        max: 30,
                        maxVisible: 30,
                        drawThreshold: 5
                    },
                    customScalingFunction: function(t, e, i, o) {
                        if (e === t) return .5;
                        var n = 1 / (e - t);
                        return Math.max(0, (o - t) * n);
                    }
                },
                selectionWidth: 1.5,
                selfReference: {
                    size: 20,
                    angle: Math.PI / 4,
                    renderBehindTheNode: !0
                },
                shadow: {
                    enabled: !1,
                    color: "rgba(0,0,0,0.5)",
                    size: 10,
                    x: 5,
                    y: 5
                },
                background: {
                    enabled: !1,
                    color: "rgba(111,111,111,1)",
                    size: 10,
                    dashes: !1
                },
                smooth: {
                    enabled: !0,
                    type: "dynamic",
                    forceDirection: "none",
                    roundness: .5
                },
                title: void 0,
                width: 1,
                value: void 0
            }, Ry(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e, i = this;
                    this.body.emitter.on("_forceDisableDynamicCurves", function(t) {
                        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                        "dynamic" === t && (t = "continuous");
                        var o = !1;
                        for(var n in i.body.edges)if (Object.prototype.hasOwnProperty.call(i.body.edges, n)) {
                            var r = i.body.edges[n], s = i.body.data.edges.get(n);
                            if (null != s) {
                                var a = s.smooth;
                                void 0 !== a && !0 === a.enabled && "dynamic" === a.type && (void 0 === t ? r.setOptions({
                                    smooth: !1
                                }) : r.setOptions({
                                    smooth: {
                                        type: t
                                    }
                                }), o = !0);
                            }
                        }
                        !0 === e && !0 === o && i.body.emitter.emit("_dataChanged");
                    }), this.body.emitter.on("_dataUpdated", function() {
                        i.reconnectEdges();
                    }), this.body.emitter.on("refreshEdges", Fo(t = this.refresh).call(t, this)), this.body.emitter.on("refresh", Fo(e = this.refresh).call(e, this)), this.body.emitter.on("destroy", function() {
                        Wy(i.edgesListeners, function(t, e) {
                            i.body.data.edges && i.body.data.edges.off(e, t);
                        }), delete i.body.functions.createEdge, delete i.edgesListeners.add, delete i.edgesListeners.update, delete i.edgesListeners.remove, delete i.edgesListeners;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        Sx.parseOptions(this.options, t, !0, this.defaultOptions, !0);
                        var e = !1;
                        if (void 0 !== t.smooth) for(var i in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, i) && (e = this.body.edges[i].updateEdgeType() || e);
                        if (void 0 !== t.font) for(var o in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, o) && this.body.edges[o].updateLabelModule();
                        void 0 === t.hidden && void 0 === t.physics && !0 !== e || this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "setData",
                value: function(t) {
                    var i = this, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.data.edges;
                    if (e.isDataViewLike("id", t)) this.body.data.edges = t;
                    else if (hu(t)) this.body.data.edges = new e.DataSet, this.body.data.edges.add(t);
                    else {
                        if (t) throw new TypeError("Array or DataSet expected");
                        this.body.data.edges = new e.DataSet;
                    }
                    if (n && Wy(this.edgesListeners, function(t, e) {
                        n.off(e, t);
                    }), this.body.edges = {}, this.body.data.edges) {
                        Wy(this.edgesListeners, function(t, e) {
                            i.body.data.edges.on(e, t);
                        });
                        var r = this.body.data.edges.getIds();
                        this.add(r, !0);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "add",
                value: function(t) {
                    for(var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = this.body.edges, o = this.body.data.edges, n = 0; n < t.length; n++){
                        var r = t[n], s = i[r];
                        s && s.disconnect();
                        var a = o.get(r, {
                            showInternalIds: !0
                        });
                        i[r] = this.create(a);
                    }
                    this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), !1 === e && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "update",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.data.edges, o = !1, n = 0; n < t.length; n++){
                        var r = t[n], s = i.get(r), a = e[r];
                        void 0 !== a ? (a.disconnect(), o = a.setOptions(s) || o, a.connect()) : (this.body.edges[r] = this.create(s), o = !0);
                    }
                    !0 === o ? (this.body.emitter.emit("_adjustEdgesForHierarchicalLayout"), this.body.emitter.emit("_dataChanged")) : this.body.emitter.emit("_dataUpdated");
                }
            },
            {
                key: "remove",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (0 !== t.length) {
                        var i = this.body.edges;
                        Wy(t, function(t) {
                            var e = i[t];
                            void 0 !== e && e.remove();
                        }), e && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "refresh",
                value: function() {
                    var t = this;
                    Wy(this.body.edges, function(e, i) {
                        var o = t.body.data.edges.get(i);
                        void 0 !== o && e.setOptions(o);
                    });
                }
            },
            {
                key: "create",
                value: function(t) {
                    return new Sx(t, this.body, this.images, this.options, this.defaultOptions);
                }
            },
            {
                key: "reconnectEdges",
                value: function() {
                    var t, e = this.body.nodes, i = this.body.edges;
                    for(t in e)Object.prototype.hasOwnProperty.call(e, t) && (e[t].edges = []);
                    for(t in i)if (Object.prototype.hasOwnProperty.call(i, t)) {
                        var o = i[t];
                        o.from = null, o.to = null, o.connect();
                    }
                }
            },
            {
                key: "getConnectedNodes",
                value: function(t) {
                    var e = [];
                    if (void 0 !== this.body.edges[t]) {
                        var i = this.body.edges[t];
                        void 0 !== i.fromId && e.push(i.fromId), void 0 !== i.toId && e.push(i.toId);
                    }
                    return e;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    this._addMissingEdges(), this._removeInvalidEdges();
                }
            },
            {
                key: "_removeInvalidEdges",
                value: function() {
                    var t = this, e = [];
                    Wy(this.body.edges, function(i, o) {
                        var n = t.body.nodes[i.toId], r = t.body.nodes[i.fromId];
                        void 0 !== n && !0 === n.isCluster || void 0 !== r && !0 === r.isCluster || void 0 !== n && void 0 !== r || e.push(o);
                    }), this.remove(e, !1);
                }
            },
            {
                key: "_addMissingEdges",
                value: function() {
                    var t = this.body.data.edges;
                    if (null != t) {
                        var e = this.body.edges, i = [];
                        Fu(t).call(t, function(t, o) {
                            void 0 === e[o] && i.push(o);
                        }), this.add(i, !0);
                    }
                }
            }
        ]), t;
    }(), Mx = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.physicsBody = i, this.barnesHutTree, this.setOptions(o), this._rng = _y("BARNES HUT SOLVER");
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.thetaInversed = 1 / this.options.theta, this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
                }
            },
            {
                key: "solve",
                value: function() {
                    if (0 !== this.options.gravitationalConstant && this.physicsBody.physicsNodeIndices.length > 0) {
                        var t, e = this.body.nodes, i = this.physicsBody.physicsNodeIndices, o = i.length, n = this._formBarnesHutTree(e, i);
                        this.barnesHutTree = n;
                        for(var r = 0; r < o; r++)(t = e[i[r]]).options.mass > 0 && this._getForceContributions(n.root, t);
                    }
                }
            },
            {
                key: "_getForceContributions",
                value: function(t, e) {
                    this._getForceContribution(t.children.NW, e), this._getForceContribution(t.children.NE, e), this._getForceContribution(t.children.SW, e), this._getForceContribution(t.children.SE, e);
                }
            },
            {
                key: "_getForceContribution",
                value: function(t, e) {
                    if (t.childrenCount > 0) {
                        var i = t.centerOfMass.x - e.x, o = t.centerOfMass.y - e.y, n = Math.sqrt(i * i + o * o);
                        n * t.calcSize > this.thetaInversed ? this._calculateForces(n, i, o, e, t) : 4 === t.childrenCount ? this._getForceContributions(t, e) : t.children.data.id != e.id && this._calculateForces(n, i, o, e, t);
                    }
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = .1), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = this.options.gravitationalConstant * n.mass * o.options.mass / Math.pow(t, 3), s = e * r, a = i * r;
                    this.physicsBody.forces[o.id].x += s, this.physicsBody.forces[o.id].y += a;
                }
            },
            {
                key: "_formBarnesHutTree",
                value: function(t, e) {
                    for(var i, o = e.length, n = t[e[0]].x, r = t[e[0]].y, s = t[e[0]].x, a = t[e[0]].y, h = 1; h < o; h++){
                        var d = t[e[h]], l = d.x, c = d.y;
                        d.options.mass > 0 && (l < n && (n = l), l > s && (s = l), c < r && (r = c), c > a && (a = c));
                    }
                    var u = Math.abs(s - n) - Math.abs(a - r);
                    u > 0 ? (r -= .5 * u, a += .5 * u) : (n += .5 * u, s -= .5 * u);
                    var f = Math.max(1e-5, Math.abs(s - n)), p = .5 * f, v = .5 * (n + s), g = .5 * (r + a), y = {
                        root: {
                            centerOfMass: {
                                x: 0,
                                y: 0
                            },
                            mass: 0,
                            range: {
                                minX: v - p,
                                maxX: v + p,
                                minY: g - p,
                                maxY: g + p
                            },
                            size: f,
                            calcSize: 1 / f,
                            children: {
                                data: null
                            },
                            maxWidth: 0,
                            level: 0,
                            childrenCount: 4
                        }
                    };
                    this._splitBranch(y.root);
                    for(var m = 0; m < o; m++)(i = t[e[m]]).options.mass > 0 && this._placeInTree(y.root, i);
                    return y;
                }
            },
            {
                key: "_updateBranchMass",
                value: function(t, e) {
                    var i = t.centerOfMass, o = t.mass + e.options.mass, n = 1 / o;
                    i.x = i.x * t.mass + e.x * e.options.mass, i.x *= n, i.y = i.y * t.mass + e.y * e.options.mass, i.y *= n, t.mass = o;
                    var r = Math.max(Math.max(e.height, e.radius), e.width);
                    t.maxWidth = t.maxWidth < r ? r : t.maxWidth;
                }
            },
            {
                key: "_placeInTree",
                value: function(t, e, i) {
                    1 == i && void 0 !== i || this._updateBranchMass(t, e);
                    var o, n = t.children.NW.range;
                    o = n.maxX > e.x ? n.maxY > e.y ? "NW" : "SW" : n.maxY > e.y ? "NE" : "SE", this._placeInRegion(t, e, o);
                }
            },
            {
                key: "_placeInRegion",
                value: function(t, e, i) {
                    var o = t.children[i];
                    switch(o.childrenCount){
                        case 0:
                            o.children.data = e, o.childrenCount = 1, this._updateBranchMass(o, e);
                            break;
                        case 1:
                            o.children.data.x === e.x && o.children.data.y === e.y ? (e.x += this._rng(), e.y += this._rng()) : (this._splitBranch(o), this._placeInTree(o, e));
                            break;
                        case 4:
                            this._placeInTree(o, e);
                    }
                }
            },
            {
                key: "_splitBranch",
                value: function(t) {
                    var e = null;
                    1 === t.childrenCount && (e = t.children.data, t.mass = 0, t.centerOfMass.x = 0, t.centerOfMass.y = 0), t.childrenCount = 4, t.children.data = null, this._insertRegion(t, "NW"), this._insertRegion(t, "NE"), this._insertRegion(t, "SW"), this._insertRegion(t, "SE"), null != e && this._placeInTree(t, e);
                }
            },
            {
                key: "_insertRegion",
                value: function(t, e) {
                    var i, o, n, r, s = .5 * t.size;
                    switch(e){
                        case "NW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "NE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY, r = t.range.minY + s;
                            break;
                        case "SW":
                            i = t.range.minX, o = t.range.minX + s, n = t.range.minY + s, r = t.range.maxY;
                            break;
                        case "SE":
                            i = t.range.minX + s, o = t.range.maxX, n = t.range.minY + s, r = t.range.maxY;
                    }
                    t.children[e] = {
                        centerOfMass: {
                            x: 0,
                            y: 0
                        },
                        mass: 0,
                        range: {
                            minX: i,
                            maxX: o,
                            minY: n,
                            maxY: r
                        },
                        size: .5 * t.size,
                        calcSize: 2 * t.calcSize,
                        children: {
                            data: null
                        },
                        maxWidth: 0,
                        level: t.level + 1,
                        childrenCount: 0
                    };
                }
            },
            {
                key: "_debug",
                value: function(t, e) {
                    void 0 !== this.barnesHutTree && (t.lineWidth = 1, this._drawBranch(this.barnesHutTree.root, t, e));
                }
            },
            {
                key: "_drawBranch",
                value: function(t, e, i) {
                    void 0 === i && (i = "#FF0000"), 4 === t.childrenCount && (this._drawBranch(t.children.NW, e), this._drawBranch(t.children.NE, e), this._drawBranch(t.children.SE, e), this._drawBranch(t.children.SW, e)), e.strokeStyle = i, e.beginPath(), e.moveTo(t.range.minX, t.range.minY), e.lineTo(t.range.maxX, t.range.minY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.minY), e.lineTo(t.range.maxX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.maxX, t.range.maxY), e.lineTo(t.range.minX, t.range.maxY), e.stroke(), e.beginPath(), e.moveTo(t.range.minX, t.range.maxY), e.lineTo(t.range.minX, t.range.minY), e.stroke();
                }
            }
        ]), t;
    }(), Px = function() {
        function t(e, i, o) {
            Xl(this, t), this._rng = _y("REPULSION SOLVER"), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h = this.body.nodes, d = this.physicsBody.physicsNodeIndices, l = this.physicsBody.forces, c = this.options.nodeDistance, u = -2 / 3 / c, f = 0; f < d.length - 1; f++){
                        s = h[d[f]];
                        for(var p = f + 1; p < d.length; p++)t = (a = h[d[p]]).x - s.x, e = a.y - s.y, 0 === (i = Math.sqrt(t * t + e * e)) && (t = i = .1 * this._rng()), i < 2 * c && (r = i < .5 * c ? 1 : u * i + 1.3333333333333333, o = t * (r /= i), n = e * r, l[s.id].x -= o, l[s.id].y -= n, l[a.id].x += o, l[a.id].y += n);
                    }
                }
            }
        ]), t;
    }(), Dx = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t, this.overlapAvoidanceFactor = Math.max(0, Math.min(1, this.options.avoidOverlap || 0));
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t = this.body.nodes, e = this.physicsBody.physicsNodeIndices, i = this.physicsBody.forces, o = this.options.nodeDistance, n = 0; n < e.length - 1; n++)for(var r = t[e[n]], s = n + 1; s < e.length; s++){
                        var a = t[e[s]];
                        if (r.level === a.level) {
                            var h = o + this.overlapAvoidanceFactor * ((r.shape.radius || 0) / 2 + (a.shape.radius || 0) / 2), d = a.x - r.x, l = a.y - r.y, c = Math.sqrt(d * d + l * l), u = void 0;
                            u = c < h ? -Math.pow(.05 * c, 2) + Math.pow(.05 * h, 2) : 0, 0 !== c && (u /= c);
                            var f = d * u, p = l * u;
                            i[r.id].x -= f, i[r.id].y -= p, i[a.id].x += f, i[a.id].y += p;
                        }
                    }
                }
            }
        ]), t;
    }(), Bx = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r = this.physicsBody.physicsEdgeIndices, s = this.body.edges, a = 0; a < r.length; a++)!0 === (e = s[r[a]]).connected && e.toId !== e.fromId && void 0 !== this.body.nodes[e.toId] && void 0 !== this.body.nodes[e.fromId] && (void 0 !== e.edgeType.via ? (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.to, o = e.edgeType.via, n = e.from, this._calculateSpringForce(i, o, .5 * t), this._calculateSpringForce(o, n, .5 * t)) : (t = void 0 === e.options.length ? 1.5 * this.options.springLength : e.options.length, this._calculateSpringForce(e.from, e.to, t)));
                }
            },
            {
                key: "_calculateSpringForce",
                value: function(t, e, i) {
                    var o = t.x - e.x, n = t.y - e.y, r = Math.max(Math.sqrt(o * o + n * n), .01), s = this.options.springConstant * (i - r) / r, a = o * s, h = n * s;
                    void 0 !== this.physicsBody.forces[t.id] && (this.physicsBody.forces[t.id].x += a, this.physicsBody.forces[t.id].y += h), void 0 !== this.physicsBody.forces[e.id] && (this.physicsBody.forces[e.id].x -= a, this.physicsBody.forces[e.id].y -= h);
                }
            }
        ]), t;
    }(), Ix = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n, r, s, a, h, d, l = this.body.edges, c = .5, u = this.physicsBody.physicsEdgeIndices, f = this.physicsBody.physicsNodeIndices, p = this.physicsBody.forces, v = 0; v < f.length; v++){
                        var g = f[v];
                        p[g].springFx = 0, p[g].springFy = 0;
                    }
                    for(var y = 0; y < u.length; y++)!0 === (e = l[u[y]]).connected && (t = void 0 === e.options.length ? this.options.springLength : e.options.length, i = e.from.x - e.to.x, o = e.from.y - e.to.y, a = 0 === (a = Math.sqrt(i * i + o * o)) ? .01 : a, n = i * (s = this.options.springConstant * (t - a) / a), r = o * s, e.to.level != e.from.level ? (void 0 !== p[e.toId] && (p[e.toId].springFx -= n, p[e.toId].springFy -= r), void 0 !== p[e.fromId] && (p[e.fromId].springFx += n, p[e.fromId].springFy += r)) : (void 0 !== p[e.toId] && (p[e.toId].x -= c * n, p[e.toId].y -= c * r), void 0 !== p[e.fromId] && (p[e.fromId].x += c * n, p[e.fromId].y += c * r)));
                    s = 1;
                    for(var m = 0; m < f.length; m++){
                        var b = f[m];
                        h = Math.min(s, Math.max(-s, p[b].springFx)), d = Math.min(s, Math.max(-s, p[b].springFy)), p[b].x += h, p[b].y += d;
                    }
                    for(var w = 0, k = 0, _ = 0; _ < f.length; _++){
                        var x = f[_];
                        w += p[x].x, k += p[x].y;
                    }
                    for(var E = w / f.length, O = k / f.length, C = 0; C < f.length; C++){
                        var S = f[C];
                        p[S].x -= E, p[S].y -= O;
                    }
                }
            }
        ]), t;
    }(), zx = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.physicsBody = i, this.setOptions(o);
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    this.options = t;
                }
            },
            {
                key: "solve",
                value: function() {
                    for(var t, e, i, o, n = this.body.nodes, r = this.physicsBody.physicsNodeIndices, s = this.physicsBody.forces, a = 0; a < r.length; a++)t = -(o = n[r[a]]).x, e = -o.y, i = Math.sqrt(t * t + e * e), this._calculateForces(i, t, e, s, o);
                }
            },
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    var r = 0 === t ? 0 : this.options.centralGravity / t;
                    o[n.id].x = e * r, o[n.id].y = i * r;
                }
            }
        ]), t;
    }();
    function Fx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Nx = function(t) {
        Rk(i, t);
        var e = Fx(i);
        function i(t, o, n) {
            var r;
            return Xl(this, i), (r = e.call(this, t, o, n))._rng = _y("FORCE ATLAS 2 BASED REPULSION SOLVER"), r;
        }
        return $l(i, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    0 === t && (e = t = .1 * this._rng()), this.overlapAvoidanceFactor < 1 && o.shape.radius && (t = Math.max(.1 + this.overlapAvoidanceFactor * o.shape.radius, t - o.shape.radius));
                    var r = o.edges.length + 1, s = this.options.gravitationalConstant * n.mass * o.options.mass * r / Math.pow(t, 2), a = e * s, h = i * s;
                    this.physicsBody.forces[o.id].x += a, this.physicsBody.forces[o.id].y += h;
                }
            }
        ]), i;
    }(Mx);
    function Ax(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var Rx, jx = function(t) {
        Rk(i, t);
        var e = Ax(i);
        function i(t, o, n) {
            return Xl(this, i), e.call(this, t, o, n);
        }
        return $l(i, [
            {
                key: "_calculateForces",
                value: function(t, e, i, o, n) {
                    if (t > 0) {
                        var r = n.edges.length + 1, s = this.options.centralGravity * r * n.options.mass;
                        o[n.id].x = e * s, o[n.id].y = i * s;
                    }
                }
            }
        ]), i;
    }(zx), Lx = function() {
        function t(e) {
            Xl(this, t), this.body = e, this.physicsBody = {
                physicsNodeIndices: [],
                physicsEdgeIndices: [],
                forces: {},
                velocities: {}
            }, this.physicsEnabled = !0, this.simulationInterval = 1e3 / 60, this.requiresTimeout = !0, this.previousStates = {}, this.referenceState = {}, this.freezeCache = {}, this.renderTimer = void 0, this.adaptiveTimestep = !1, this.adaptiveTimestepEnabled = !1, this.adaptiveCounter = 0, this.adaptiveInterval = 3, this.stabilized = !1, this.startedStabilization = !1, this.stabilizationIterations = 0, this.ready = !1, this.options = {}, this.defaultOptions = {
                enabled: !0,
                barnesHut: {
                    theta: .5,
                    gravitationalConstant: -2000,
                    centralGravity: .3,
                    springLength: 95,
                    springConstant: .04,
                    damping: .09,
                    avoidOverlap: 0
                },
                forceAtlas2Based: {
                    theta: .5,
                    gravitationalConstant: -50,
                    centralGravity: .01,
                    springConstant: .08,
                    springLength: 100,
                    damping: .4,
                    avoidOverlap: 0
                },
                repulsion: {
                    centralGravity: .2,
                    springLength: 200,
                    springConstant: .05,
                    nodeDistance: 100,
                    damping: .09,
                    avoidOverlap: 0
                },
                hierarchicalRepulsion: {
                    centralGravity: 0,
                    springLength: 100,
                    springConstant: .01,
                    nodeDistance: 120,
                    damping: .09
                },
                maxVelocity: 50,
                minVelocity: .75,
                solver: "barnesHut",
                stabilization: {
                    enabled: !0,
                    iterations: 1e3,
                    updateInterval: 50,
                    onlyDynamicEdges: !1,
                    fit: !0
                },
                timestep: .5,
                adaptiveTimestep: !0,
                wind: {
                    x: 0,
                    y: 0
                }
            }, fo(this.options, this.defaultOptions), this.timestep = .5, this.layoutFailed = !1, this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("initPhysics", function() {
                        t.initPhysics();
                    }), this.body.emitter.on("_layoutFailed", function() {
                        t.layoutFailed = !0;
                    }), this.body.emitter.on("resetPhysics", function() {
                        t.stopSimulation(), t.ready = !1;
                    }), this.body.emitter.on("disablePhysics", function() {
                        t.physicsEnabled = !1, t.stopSimulation();
                    }), this.body.emitter.on("restorePhysics", function() {
                        t.setOptions(t.options), !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("startSimulation", function() {
                        !0 === t.ready && t.startSimulation();
                    }), this.body.emitter.on("stopSimulation", function() {
                        t.stopSimulation();
                    }), this.body.emitter.on("destroy", function() {
                        t.stopSimulation(!1), t.body.emitter.off();
                    }), this.body.emitter.on("_dataChanged", function() {
                        t.updatePhysicsData();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) {
                        if (!1 === t) this.options.enabled = !1, this.physicsEnabled = !1, this.stopSimulation();
                        else if (!0 === t) this.options.enabled = !0, this.physicsEnabled = !0, this.startSimulation();
                        else {
                            this.physicsEnabled = !0, Ay([
                                "stabilization"
                            ], this.options, t), tm(this.options, t, "stabilization"), void 0 === t.enabled && (this.options.enabled = !0), !1 === this.options.enabled && (this.physicsEnabled = !1, this.stopSimulation());
                            var e = this.options.wind;
                            e && (("number" != typeof e.x || Cw(e.x)) && (e.x = 0), ("number" != typeof e.y || Cw(e.y)) && (e.y = 0)), this.timestep = this.options.timestep;
                        }
                    }
                    this.init();
                }
            },
            {
                key: "init",
                value: function() {
                    var t;
                    "forceAtlas2Based" === this.options.solver ? (t = this.options.forceAtlas2Based, this.nodesSolver = new Nx(this.body, this.physicsBody, t), this.edgesSolver = new Bx(this.body, this.physicsBody, t), this.gravitySolver = new jx(this.body, this.physicsBody, t)) : "repulsion" === this.options.solver ? (t = this.options.repulsion, this.nodesSolver = new Px(this.body, this.physicsBody, t), this.edgesSolver = new Bx(this.body, this.physicsBody, t), this.gravitySolver = new zx(this.body, this.physicsBody, t)) : "hierarchicalRepulsion" === this.options.solver ? (t = this.options.hierarchicalRepulsion, this.nodesSolver = new Dx(this.body, this.physicsBody, t), this.edgesSolver = new Ix(this.body, this.physicsBody, t), this.gravitySolver = new zx(this.body, this.physicsBody, t)) : (t = this.options.barnesHut, this.nodesSolver = new Mx(this.body, this.physicsBody, t), this.edgesSolver = new Bx(this.body, this.physicsBody, t), this.gravitySolver = new zx(this.body, this.physicsBody, t)), this.modelOptions = t;
                }
            },
            {
                key: "initPhysics",
                value: function() {
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? !0 === this.options.stabilization.enabled ? this.stabilize() : (this.stabilized = !1, this.ready = !0, this.body.emitter.emit("fit", {}, this.layoutFailed), this.startSimulation()) : (this.ready = !0, this.body.emitter.emit("fit"));
                }
            },
            {
                key: "startSimulation",
                value: function() {
                    var t;
                    !0 === this.physicsEnabled && !0 === this.options.enabled ? (this.stabilized = !1, this.adaptiveTimestep = !1, this.body.emitter.emit("_resizeNodes"), void 0 === this.viewFunction && (this.viewFunction = Fo(t = this.simulationStep).call(t, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering"))) : this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "stopSimulation",
                value: function() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    this.stabilized = !0, !0 === t && this._emitStabilized(), void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.viewFunction = void 0, !0 === t && this.body.emitter.emit("_stopRendering"));
                }
            },
            {
                key: "simulationStep",
                value: function() {
                    var t = xu();
                    this.physicsTick(), (xu() - t < .4 * this.simulationInterval || !0 === this.runDoubleSpeed) && !1 === this.stabilized && (this.physicsTick(), this.runDoubleSpeed = !0), !0 === this.stabilized && this.stopSimulation();
                }
            },
            {
                key: "_emitStabilized",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.stabilizationIterations;
                    (this.stabilizationIterations > 1 || !0 === this.startedStabilization) && bv(function() {
                        t.body.emitter.emit("stabilized", {
                            iterations: e
                        }), t.startedStabilization = !1, t.stabilizationIterations = 0;
                    }, 0);
                }
            },
            {
                key: "physicsStep",
                value: function() {
                    this.gravitySolver.solve(), this.nodesSolver.solve(), this.edgesSolver.solve(), this.moveNodes();
                }
            },
            {
                key: "adjustTimeStep",
                value: function() {
                    !0 === this._evaluateStepQuality() ? this.timestep = 1.2 * this.timestep : this.timestep / 1.2 < this.options.timestep ? this.timestep = this.options.timestep : (this.adaptiveCounter = -1, this.timestep = Math.max(this.options.timestep, this.timestep / 1.2));
                }
            },
            {
                key: "physicsTick",
                value: function() {
                    if (this._startStabilizing(), !0 !== this.stabilized) {
                        if (!0 === this.adaptiveTimestep && !0 === this.adaptiveTimestepEnabled) this.adaptiveCounter % this.adaptiveInterval == 0 ? (this.timestep = 2 * this.timestep, this.physicsStep(), this.revert(), this.timestep = .5 * this.timestep, this.physicsStep(), this.physicsStep(), this.adjustTimeStep()) : this.physicsStep(), this.adaptiveCounter += 1;
                        else this.timestep = this.options.timestep, this.physicsStep();
                        !0 === this.stabilized && this.revert(), this.stabilizationIterations++;
                    }
                }
            },
            {
                key: "updatePhysicsData",
                value: function() {
                    this.physicsBody.forces = {}, this.physicsBody.physicsNodeIndices = [], this.physicsBody.physicsEdgeIndices = [];
                    var t = this.body.nodes, e = this.body.edges;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && !0 === t[i].options.physics && this.physicsBody.physicsNodeIndices.push(t[i].id);
                    for(var o in e)Object.prototype.hasOwnProperty.call(e, o) && !0 === e[o].options.physics && this.physicsBody.physicsEdgeIndices.push(e[o].id);
                    for(var n = 0; n < this.physicsBody.physicsNodeIndices.length; n++){
                        var r = this.physicsBody.physicsNodeIndices[n];
                        this.physicsBody.forces[r] = {
                            x: 0,
                            y: 0
                        }, void 0 === this.physicsBody.velocities[r] && (this.physicsBody.velocities[r] = {
                            x: 0,
                            y: 0
                        });
                    }
                    for(var s in this.physicsBody.velocities)void 0 === t[s] && delete this.physicsBody.velocities[s];
                }
            },
            {
                key: "revert",
                value: function() {
                    var t = mu(this.previousStates), e = this.body.nodes, i = this.physicsBody.velocities;
                    this.referenceState = {};
                    for(var o = 0; o < t.length; o++){
                        var n = t[o];
                        void 0 !== e[n] ? !0 === e[n].options.physics && (this.referenceState[n] = {
                            positions: {
                                x: e[n].x,
                                y: e[n].y
                            }
                        }, i[n].x = this.previousStates[n].vx, i[n].y = this.previousStates[n].vy, e[n].x = this.previousStates[n].x, e[n].y = this.previousStates[n].y) : delete this.previousStates[n];
                    }
                }
            },
            {
                key: "_evaluateStepQuality",
                value: function() {
                    var t, e, i = this.body.nodes, o = this.referenceState;
                    for(var n in this.referenceState)if (Object.prototype.hasOwnProperty.call(this.referenceState, n) && void 0 !== i[n] && (t = i[n].x - o[n].positions.x, e = i[n].y - o[n].positions.y, Math.sqrt(Math.pow(t, 2) + Math.pow(e, 2)) > .3)) return !1;
                    return !0;
                }
            },
            {
                key: "moveNodes",
                value: function() {
                    for(var t = this.physicsBody.physicsNodeIndices, e = 0, i = 0, o = 0; o < t.length; o++){
                        var n = t[o], r = this._performStep(n);
                        e = Math.max(e, r), i += r;
                    }
                    this.adaptiveTimestepEnabled = i / t.length < 5, this.stabilized = e < this.options.minVelocity;
                }
            },
            {
                key: "calculateComponentVelocity",
                value: function(t, e, i) {
                    t += (e - this.modelOptions.damping * t) / i * this.timestep;
                    var o = this.options.maxVelocity || 1e9;
                    return Math.abs(t) > o && (t = t > 0 ? o : -o), t;
                }
            },
            {
                key: "_performStep",
                value: function(t) {
                    var e = this.body.nodes[t], i = this.physicsBody.forces[t];
                    this.options.wind && (i.x += this.options.wind.x, i.y += this.options.wind.y);
                    var o = this.physicsBody.velocities[t];
                    return this.previousStates[t] = {
                        x: e.x,
                        y: e.y,
                        vx: o.x,
                        vy: o.y
                    }, !1 === e.options.fixed.x ? (o.x = this.calculateComponentVelocity(o.x, i.x, e.options.mass), e.x += o.x * this.timestep) : (i.x = 0, o.x = 0), !1 === e.options.fixed.y ? (o.y = this.calculateComponentVelocity(o.y, i.y, e.options.mass), e.y += o.y * this.timestep) : (i.y = 0, o.y = 0), Math.sqrt(Math.pow(o.x, 2) + Math.pow(o.y, 2));
                }
            },
            {
                key: "_freezeNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e) && t[e].x && t[e].y) {
                        var i = t[e].options.fixed;
                        this.freezeCache[e] = {
                            x: i.x,
                            y: i.y
                        }, i.x = !0, i.y = !0;
                    }
                }
            },
            {
                key: "_restoreFrozenNodes",
                value: function() {
                    var t = this.body.nodes;
                    for(var e in t)Object.prototype.hasOwnProperty.call(t, e) && void 0 !== this.freezeCache[e] && (t[e].options.fixed.x = this.freezeCache[e].x, t[e].options.fixed.y = this.freezeCache[e].y);
                    this.freezeCache = {};
                }
            },
            {
                key: "stabilize",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.stabilization.iterations;
                    "number" != typeof e && (e = this.options.stabilization.iterations, console.error("The stabilize method needs a numeric amount of iterations. Switching to default: ", e)), 0 !== this.physicsBody.physicsNodeIndices.length ? (this.adaptiveTimestep = this.options.adaptiveTimestep, this.body.emitter.emit("_resizeNodes"), this.stopSimulation(), this.stabilized = !1, this.body.emitter.emit("_blockRedraw"), this.targetIterations = e, !0 === this.options.stabilization.onlyDynamicEdges && this._freezeNodes(), this.stabilizationIterations = 0, bv(function() {
                        return t._stabilizationBatch();
                    }, 0)) : this.ready = !0;
                }
            },
            {
                key: "_startStabilizing",
                value: function() {
                    return !0 !== this.startedStabilization && (this.body.emitter.emit("startStabilizing"), this.startedStabilization = !0, !0);
                }
            },
            {
                key: "_stabilizationBatch",
                value: function() {
                    var t = this, e = function() {
                        return !1 === t.stabilized && t.stabilizationIterations < t.targetIterations;
                    }, i = function() {
                        t.body.emitter.emit("stabilizationProgress", {
                            iterations: t.stabilizationIterations,
                            total: t.targetIterations
                        });
                    };
                    this._startStabilizing() && i();
                    for(var o, n = 0; e() && n < this.options.stabilization.updateInterval;)this.physicsTick(), n++;
                    (i(), e()) ? bv(Fo(o = this._stabilizationBatch).call(o, this), 0) : this._finalizeStabilization();
                }
            },
            {
                key: "_finalizeStabilization",
                value: function() {
                    this.body.emitter.emit("_allowRedraw"), !0 === this.options.stabilization.fit && this.body.emitter.emit("fit"), !0 === this.options.stabilization.onlyDynamicEdges && this._restoreFrozenNodes(), this.body.emitter.emit("stabilizationIterationsDone"), this.body.emitter.emit("_requestRedraw"), !0 === this.stabilized ? this._emitStabilized() : this.startSimulation(), this.ready = !0;
                }
            },
            {
                key: "_drawForces",
                value: function(t) {
                    for(var e = 0; e < this.physicsBody.physicsNodeIndices.length; e++){
                        var i = this.physicsBody.physicsNodeIndices[e], o = this.body.nodes[i], n = this.physicsBody.forces[i], r = Math.sqrt(Math.pow(n.x, 2) + Math.pow(n.x, 2)), s = Math.min(Math.max(5, r), 15), a = 3 * s, h = Ky((180 - 180 * Math.min(1, Math.max(0, .03 * r))) / 360, 1, 1), d = {
                            x: o.x + 20 * n.x,
                            y: o.y + 20 * n.y
                        };
                        t.lineWidth = s, t.strokeStyle = h, t.beginPath(), t.moveTo(o.x, o.y), t.lineTo(d.x, d.y), t.stroke();
                        var l = Math.atan2(n.y, n.x);
                        t.fillStyle = h, dx.draw(t, {
                            type: "arrow",
                            point: d,
                            angle: l,
                            length: a
                        }), Pv(t).call(t);
                    }
                }
            }
        ]), t;
    }(), Hx = new Uint8Array(16);
    function Wx() {
        if (!Rx && !(Rx = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto))) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        return Rx(Hx);
    }
    var Vx = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function qx(t) {
        return "string" == typeof t && Vx.test(t);
    }
    for(var Ux = [], Yx = 0; Yx < 256; ++Yx)Ux.push((Yx + 256).toString(16).substr(1));
    function Xx(t, e, i) {
        var o = (t = t || {}).random || (t.rng || Wx)();
        if (o[6] = 15 & o[6] | 64, o[8] = 63 & o[8] | 128, e) {
            i = i || 0;
            for(var n = 0; n < 16; ++n)e[i + n] = o[n];
            return e;
        }
        return function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = (Ux[t[e + 0]] + Ux[t[e + 1]] + Ux[t[e + 2]] + Ux[t[e + 3]] + "-" + Ux[t[e + 4]] + Ux[t[e + 5]] + "-" + Ux[t[e + 6]] + Ux[t[e + 7]] + "-" + Ux[t[e + 8]] + Ux[t[e + 9]] + "-" + Ux[t[e + 10]] + Ux[t[e + 11]] + Ux[t[e + 12]] + Ux[t[e + 13]] + Ux[t[e + 14]] + Ux[t[e + 15]]).toLowerCase();
            if (!qx(i)) throw TypeError("Stringified UUID is invalid");
            return i;
        }(o);
    }
    var Gx = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, null, [
            {
                key: "getRange",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1e9, n = -1000000000, r = 1e9, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).shape.boundingBox.left && (r = e.shape.boundingBox.left), s < e.shape.boundingBox.right && (s = e.shape.boundingBox.right), o > e.shape.boundingBox.top && (o = e.shape.boundingBox.top), n < e.shape.boundingBox.bottom && (n = e.shape.boundingBox.bottom);
                    return 1e9 === r && -1000000000 === s && 1e9 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "getRangeCore",
                value: function(t) {
                    var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], o = 1e9, n = -1000000000, r = 1e9, s = -1000000000;
                    if (i.length > 0) for(var a = 0; a < i.length; a++)r > (e = t[i[a]]).x && (r = e.x), s < e.x && (s = e.x), o > e.y && (o = e.y), n < e.y && (n = e.y);
                    return 1e9 === r && -1000000000 === s && 1e9 === o && -1000000000 === n && (o = 0, n = 0, r = 0, s = 0), {
                        minX: r,
                        maxX: s,
                        minY: o,
                        maxY: n
                    };
                }
            },
            {
                key: "findCenter",
                value: function(t) {
                    return {
                        x: .5 * (t.maxX + t.minX),
                        y: .5 * (t.maxY + t.minY)
                    };
                }
            },
            {
                key: "cloneOptions",
                value: function(t, e) {
                    var i = {};
                    return void 0 === e || "node" === e ? (Ry(i, t.options, !0), i.x = t.x, i.y = t.y, i.amountOfConnections = t.edges.length) : Ry(i, t.options, !0), i;
                }
            }
        ]), t;
    }();
    function Kx(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var $x = function(t) {
        Rk(i, t);
        var e = Kx(i);
        function i(t, o, n, r, s, a) {
            var h;
            return Xl(this, i), (h = e.call(this, t, o, n, r, s, a)).isCluster = !0, h.containedNodes = {}, h.containedEdges = {}, h;
        }
        return $l(i, [
            {
                key: "_openChildCluster",
                value: function(t) {
                    var e = this, i = this.body.nodes[t];
                    if (void 0 === this.containedNodes[t]) throw new Error("node with id: " + t + " not in current cluster");
                    if (!i.isCluster) throw new Error("node with id: " + t + " is not a cluster");
                    delete this.containedNodes[t], Wy(i.edges, function(t) {
                        delete e.containedEdges[t.id];
                    }), Wy(i.containedNodes, function(t, i) {
                        e.containedNodes[i] = t;
                    }), i.containedNodes = {}, Wy(i.containedEdges, function(t, i) {
                        e.containedEdges[i] = t;
                    }), i.containedEdges = {}, Wy(i.edges, function(t) {
                        Wy(e.edges, function(i) {
                            var o, n, r = zp(o = i.clusteringEdgeReplacingIds).call(o, t.id);
                            -1 !== r && (Wy(t.clusteringEdgeReplacingIds, function(t) {
                                i.clusteringEdgeReplacingIds.push(t), e.body.edges[t].edgeReplacedById = i.id;
                            }), uf(n = i.clusteringEdgeReplacingIds).call(n, r, 1));
                        });
                    }), i.edges = [];
                }
            }
        ]), i;
    }(M_), Zx = function() {
        function t(e) {
            var i = this;
            Xl(this, t), this.body = e, this.clusteredNodes = {}, this.clusteredEdges = {}, this.options = {}, this.defaultOptions = {}, fo(this.options, this.defaultOptions), this.body.emitter.on("_resetData", function() {
                i.clusteredNodes = {}, i.clusteredEdges = {};
            });
        }
        return $l(t, [
            {
                key: "clusterByHubsize",
                value: function(t, e) {
                    void 0 === t ? t = this._getHubSize() : "object" === Qc(t) && (e = this._checkOptions(t), t = this._getHubSize());
                    for(var i = [], o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodes[this.body.nodeIndices[o]];
                        n.edges.length >= t && i.push(n.id);
                    }
                    for(var r = 0; r < i.length; r++)this.clusterByConnection(i[r], e, !0);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "cluster",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (void 0 === e.joinCondition) throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
                    e = this._checkOptions(e);
                    var o = {}, n = {};
                    Wy(this.body.nodes, function(i, r) {
                        i.options && !0 === e.joinCondition(i.options) && (o[r] = i, Wy(i.edges, function(e) {
                            void 0 === t.clusteredEdges[e.id] && (n[e.id] = e);
                        }));
                    }), this._cluster(o, n, e, i);
                }
            },
            {
                key: "clusterByEdgeCount",
                value: function(t, e) {
                    var i = this, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    e = this._checkOptions(e);
                    for(var n, r, s, a = [], h = {}, d = function(o) {
                        var d = {}, l = {}, c = i.body.nodeIndices[o], u = i.body.nodes[c];
                        if (void 0 === h[c]) {
                            s = 0, r = [];
                            for(var f = 0; f < u.edges.length; f++)n = u.edges[f], void 0 === i.clusteredEdges[n.id] && (n.toId !== n.fromId && s++, r.push(n));
                            if (s === t) {
                                for(var p = function(t) {
                                    if (void 0 === e.joinCondition || null === e.joinCondition) return !0;
                                    var i = Gx.cloneOptions(t);
                                    return e.joinCondition(i);
                                }, v = !0, g = 0; g < r.length; g++){
                                    n = r[g];
                                    var y = i._getConnectedId(n, c);
                                    if (!p(u)) {
                                        v = !1;
                                        break;
                                    }
                                    l[n.id] = n, d[c] = u, d[y] = i.body.nodes[y], h[c] = !0;
                                }
                                if (mu(d).length > 0 && mu(l).length > 0 && !0 === v) {
                                    var m = function() {
                                        for(var t = 0; t < a.length; ++t)for(var e in d)if (void 0 !== a[t].nodes[e]) return a[t];
                                    }();
                                    if (void 0 !== m) {
                                        for(var b in d)void 0 === m.nodes[b] && (m.nodes[b] = d[b]);
                                        for(var w in l)void 0 === m.edges[w] && (m.edges[w] = l[w]);
                                    } else a.push({
                                        nodes: d,
                                        edges: l
                                    });
                                }
                            }
                        }
                    }, l = 0; l < this.body.nodeIndices.length; l++)d(l);
                    for(var c = 0; c < a.length; c++)this._cluster(a[c].nodes, a[c].edges, e, !1);
                    !0 === o && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "clusterOutliers",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(1, t, e);
                }
            },
            {
                key: "clusterBridges",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    this.clusterByEdgeCount(2, t, e);
                }
            },
            {
                key: "clusterByConnection",
                value: function(t, e) {
                    var i, o = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t) throw new Error("No nodeId supplied to clusterByConnection!");
                    if (void 0 === this.body.nodes[t]) throw new Error("The nodeId given to clusterByConnection does not exist!");
                    var n = this.body.nodes[t];
                    void 0 === (e = this._checkOptions(e, n)).clusterNodeProperties.x && (e.clusterNodeProperties.x = n.x), void 0 === e.clusterNodeProperties.y && (e.clusterNodeProperties.y = n.y), void 0 === e.clusterNodeProperties.fixed && (e.clusterNodeProperties.fixed = {}, e.clusterNodeProperties.fixed.x = n.options.fixed.x, e.clusterNodeProperties.fixed.y = n.options.fixed.y);
                    var r = {}, s = {}, a = n.id, h = Gx.cloneOptions(n);
                    r[a] = n;
                    for(var d = 0; d < n.edges.length; d++){
                        var l = n.edges[d];
                        if (void 0 === this.clusteredEdges[l.id]) {
                            var c = this._getConnectedId(l, a);
                            if (void 0 === this.clusteredNodes[c]) {
                                if (c !== a) {
                                    if (void 0 === e.joinCondition) s[l.id] = l, r[c] = this.body.nodes[c];
                                    else {
                                        var u = Gx.cloneOptions(this.body.nodes[c]);
                                        !0 === e.joinCondition(h, u) && (s[l.id] = l, r[c] = this.body.nodes[c]);
                                    }
                                } else s[l.id] = l;
                            }
                        }
                    }
                    var f = vu(i = mu(r)).call(i, function(t) {
                        return r[t].id;
                    });
                    for(var p in r)if (Object.prototype.hasOwnProperty.call(r, p)) for(var v = r[p], g = 0; g < v.edges.length; g++){
                        var y = v.edges[g];
                        zp(f).call(f, this._getConnectedId(y, v.id)) > -1 && (s[y.id] = y);
                    }
                    this._cluster(r, s, e, o);
                }
            },
            {
                key: "_createClusterEdges",
                value: function(t, e, i, o) {
                    for(var n, r, s, a, h, d, l = mu(t), c = [], u = 0; u < l.length; u++){
                        s = t[r = l[u]];
                        for(var f = 0; f < s.edges.length; f++)n = s.edges[f], void 0 === this.clusteredEdges[n.id] && (n.toId == n.fromId ? e[n.id] = n : n.toId == r ? (a = i.id, d = h = n.fromId) : (a = n.toId, h = i.id, d = a), void 0 === t[d] && c.push({
                            edge: n,
                            fromId: h,
                            toId: a
                        }));
                    }
                    for(var p = [], v = function(t) {
                        for(var e = 0; e < p.length; e++){
                            var i = p[e], o = t.fromId === i.fromId && t.toId === i.toId, n = t.fromId === i.toId && t.toId === i.fromId;
                            if (o || n) return i;
                        }
                        return null;
                    }, g = 0; g < c.length; g++){
                        var y = c[g], m = y.edge, b = v(y);
                        null === b ? (b = this._createClusteredEdge(y.fromId, y.toId, m, o), p.push(b)) : b.clusteringEdgeReplacingIds.push(m.id), this.body.edges[m.id].edgeReplacedById = b.id, this._backupEdgeOptions(m), m.setOptions({
                            physics: !1
                        });
                    }
                }
            },
            {
                key: "_checkOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    return void 0 === t.clusterEdgeProperties && (t.clusterEdgeProperties = {}), void 0 === t.clusterNodeProperties && (t.clusterNodeProperties = {}), t;
                }
            },
            {
                key: "_cluster",
                value: function(t, e, i) {
                    var o = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], n = [];
                    for(var r in t)Object.prototype.hasOwnProperty.call(t, r) && void 0 !== this.clusteredNodes[r] && n.push(r);
                    for(var s = 0; s < n.length; ++s)delete t[n[s]];
                    if (0 != mu(t).length && (1 != mu(t).length || 1 == i.clusterNodeProperties.allowSingleNodeCluster)) {
                        var a = Ry({}, i.clusterNodeProperties);
                        if (void 0 !== i.processProperties) {
                            var h = [];
                            for(var d in t)if (Object.prototype.hasOwnProperty.call(t, d)) {
                                var l = Gx.cloneOptions(t[d]);
                                h.push(l);
                            }
                            var c = [];
                            for(var u in e)if (Object.prototype.hasOwnProperty.call(e, u) && "clusterEdge:" !== u.substr(0, 12)) {
                                var f = Gx.cloneOptions(e[u], "edge");
                                c.push(f);
                            }
                            if (!(a = i.processProperties(a, h, c))) throw new Error("The processProperties function does not return properties!");
                        }
                        void 0 === a.id && (a.id = "cluster:" + Xx());
                        var p = a.id;
                        void 0 === a.label && (a.label = "cluster");
                        var v = void 0;
                        void 0 === a.x && (v = this._getClusterPosition(t), a.x = v.x), void 0 === a.y && (void 0 === v && (v = this._getClusterPosition(t)), a.y = v.y), a.id = p;
                        var g = this.body.functions.createNode(a, $x);
                        g.containedNodes = t, g.containedEdges = e, g.clusterEdgeProperties = i.clusterEdgeProperties, this.body.nodes[a.id] = g, this._clusterEdges(t, e, a, i.clusterEdgeProperties), a.id = void 0, !0 === o && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "_backupEdgeOptions",
                value: function(t) {
                    void 0 === this.clusteredEdges[t.id] && (this.clusteredEdges[t.id] = {
                        physics: t.options.physics
                    });
                }
            },
            {
                key: "_restoreEdge",
                value: function(t) {
                    var e = this.clusteredEdges[t.id];
                    void 0 !== e && (t.setOptions({
                        physics: e.physics
                    }), delete this.clusteredEdges[t.id]);
                }
            },
            {
                key: "isCluster",
                value: function(t) {
                    return void 0 !== this.body.nodes[t] ? !0 === this.body.nodes[t].isCluster : (console.error("Node does not exist."), !1);
                }
            },
            {
                key: "_getClusterPosition",
                value: function(t) {
                    for(var e, i = mu(t), o = t[i[0]].x, n = t[i[0]].x, r = t[i[0]].y, s = t[i[0]].y, a = 1; a < i.length; a++)o = (e = t[i[a]]).x < o ? e.x : o, n = e.x > n ? e.x : n, r = e.y < r ? e.y : r, s = e.y > s ? e.y : s;
                    return {
                        x: .5 * (o + n),
                        y: .5 * (r + s)
                    };
                }
            },
            {
                key: "openCluster",
                value: function(t, e) {
                    var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                    if (void 0 === t) throw new Error("No clusterNodeId supplied to openCluster.");
                    var o = this.body.nodes[t];
                    if (void 0 === o) throw new Error("The clusterNodeId supplied to openCluster does not exist.");
                    if (!0 !== o.isCluster || void 0 === o.containedNodes || void 0 === o.containedEdges) throw new Error("The node:" + t + " is not a valid cluster.");
                    var n = this.findNode(t), r = zp(n).call(n, t) - 1;
                    if (r >= 0) {
                        var s = n[r], a = this.body.nodes[s];
                        return a._openChildCluster(t), delete this.body.nodes[t], void (!0 === i && this.body.emitter.emit("_dataChanged"));
                    }
                    var h = o.containedNodes, d = o.containedEdges;
                    if (void 0 !== e && void 0 !== e.releaseFunction && "function" == typeof e.releaseFunction) {
                        var l = {}, c = {
                            x: o.x,
                            y: o.y
                        };
                        for(var u in h)if (Object.prototype.hasOwnProperty.call(h, u)) {
                            var f = this.body.nodes[u];
                            l[u] = {
                                x: f.x,
                                y: f.y
                            };
                        }
                        var p = e.releaseFunction(c, l);
                        for(var v in h)if (Object.prototype.hasOwnProperty.call(h, v)) {
                            var g = this.body.nodes[v];
                            void 0 !== p[v] && (g.x = void 0 === p[v].x ? o.x : p[v].x, g.y = void 0 === p[v].y ? o.y : p[v].y);
                        }
                    } else Wy(h, function(t) {
                        !1 === t.options.fixed.x && (t.x = o.x), !1 === t.options.fixed.y && (t.y = o.y);
                    });
                    for(var y in h)if (Object.prototype.hasOwnProperty.call(h, y)) {
                        var m = this.body.nodes[y];
                        m.vx = o.vx, m.vy = o.vy, m.setOptions({
                            physics: !0
                        }), delete this.clusteredNodes[y];
                    }
                    for(var b = [], w = 0; w < o.edges.length; w++)b.push(o.edges[w]);
                    for(var k = 0; k < b.length; k++){
                        for(var _ = b[k], x = this._getConnectedId(_, t), E = this.clusteredNodes[x], O = 0; O < _.clusteringEdgeReplacingIds.length; O++){
                            var C = _.clusteringEdgeReplacingIds[O], S = this.body.edges[C];
                            if (void 0 !== S) {
                                if (void 0 !== E) {
                                    var T = this.body.nodes[E.clusterId];
                                    T.containedEdges[S.id] = S, delete d[S.id];
                                    var M = S.fromId, P = S.toId;
                                    S.toId == x ? P = E.clusterId : M = E.clusterId, this._createClusteredEdge(M, P, S, T.clusterEdgeProperties, {
                                        hidden: !1,
                                        physics: !0
                                    });
                                } else this._restoreEdge(S);
                            }
                        }
                        _.remove();
                    }
                    for(var D in d)Object.prototype.hasOwnProperty.call(d, D) && this._restoreEdge(d[D]);
                    delete this.body.nodes[t], !0 === i && this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getNodesInCluster",
                value: function(t) {
                    var e = [];
                    if (!0 === this.isCluster(t)) {
                        var i = this.body.nodes[t].containedNodes;
                        for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && e.push(this.body.nodes[o].id);
                    }
                    return e;
                }
            },
            {
                key: "findNode",
                value: function(t) {
                    for(var e, i = [], o = 0; void 0 !== this.clusteredNodes[t] && o < 100;){
                        if (void 0 === (e = this.body.nodes[t])) return [];
                        i.push(e.id), t = this.clusteredNodes[t].clusterId, o++;
                    }
                    return void 0 === (e = this.body.nodes[t]) ? [] : (i.push(e.id), Uu(i).call(i), i);
                }
            },
            {
                key: "updateClusteredNode",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateClusteredNode.");
                    if (void 0 === this.body.nodes[t]) throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
                    this.body.nodes[t].setOptions(e), this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "updateEdge",
                value: function(t, e) {
                    if (void 0 === t) throw new Error("No startEdgeId supplied to updateEdge.");
                    if (void 0 === e) throw new Error("No newOptions supplied to updateEdge.");
                    if (void 0 === this.body.edges[t]) throw new Error("The startEdgeId supplied to updateEdge does not exist.");
                    for(var i = this.getClusteredEdges(t), o = 0; o < i.length; o++)this.body.edges[i[o]].setOptions(e);
                    this.body.emitter.emit("_dataChanged");
                }
            },
            {
                key: "getClusteredEdges",
                value: function(t) {
                    for(var e = [], i = 0; void 0 !== t && void 0 !== this.body.edges[t] && i < 100;)e.push(this.body.edges[t].id), t = this.body.edges[t].edgeReplacedById, i++;
                    return Uu(e).call(e), e;
                }
            },
            {
                key: "getBaseEdge",
                value: function(t) {
                    return this.getBaseEdges(t)[0];
                }
            },
            {
                key: "getBaseEdges",
                value: function(t) {
                    for(var e = [
                        t
                    ], i = [], o = [], n = 0; e.length > 0 && n < 100;){
                        var r = e.pop();
                        if (void 0 !== r) {
                            var s = this.body.edges[r];
                            if (void 0 !== s) {
                                n++;
                                var a = s.clusteringEdgeReplacingIds;
                                if (void 0 === a) o.push(r);
                                else for(var h = 0; h < a.length; ++h){
                                    var d = a[h];
                                    -1 === zp(e).call(e, a) && -1 === zp(i).call(i, a) && e.push(d);
                                }
                                i.push(r);
                            }
                        }
                    }
                    return o;
                }
            },
            {
                key: "_getConnectedId",
                value: function(t, e) {
                    return t.toId != e ? t.toId : (t.fromId, t.fromId);
                }
            },
            {
                key: "_getHubSize",
                value: function() {
                    for(var t = 0, e = 0, i = 0, o = 0, n = 0; n < this.body.nodeIndices.length; n++){
                        var r = this.body.nodes[this.body.nodeIndices[n]];
                        r.edges.length > o && (o = r.edges.length), t += r.edges.length, e += Math.pow(r.edges.length, 2), i += 1;
                    }
                    t /= i;
                    var s = (e /= i) - Math.pow(t, 2), a = Math.sqrt(s), h = Math.floor(t + 2 * a);
                    return h > o && (h = o), h;
                }
            },
            {
                key: "_createClusteredEdge",
                value: function(t, e, i, o, n) {
                    var r = Gx.cloneOptions(i, "edge");
                    Ry(r, o), r.from = t, r.to = e, r.id = "clusterEdge:" + Xx(), void 0 !== n && Ry(r, n);
                    var s = this.body.functions.createEdge(r);
                    return s.clusteringEdgeReplacingIds = [
                        i.id
                    ], s.connect(), this.body.edges[s.id] = s, s;
                }
            },
            {
                key: "_clusterEdges",
                value: function(t, e, i, o) {
                    if (e instanceof Sx) {
                        var n = e, r = {};
                        r[n.id] = n, e = r;
                    }
                    if (t instanceof M_) {
                        var s = t, a = {};
                        a[s.id] = s, t = a;
                    }
                    if (null == i) throw new Error("_clusterEdges: parameter clusterNode required");
                    for(var h in void 0 === o && (o = i.clusterEdgeProperties), this._createClusterEdges(t, e, i, o), e)if (Object.prototype.hasOwnProperty.call(e, h) && void 0 !== this.body.edges[h]) {
                        var d = this.body.edges[h];
                        this._backupEdgeOptions(d), d.setOptions({
                            physics: !1
                        });
                    }
                    for(var l in t)Object.prototype.hasOwnProperty.call(t, l) && (this.clusteredNodes[l] = {
                        clusterId: i.id,
                        node: this.body.nodes[l]
                    }, this.body.nodes[l].setOptions({
                        physics: !1
                    }));
                }
            },
            {
                key: "_getClusterNodeForNode",
                value: function(t) {
                    if (void 0 !== t) {
                        var e = this.clusteredNodes[t];
                        if (void 0 !== e) {
                            var i = e.clusterId;
                            if (void 0 !== i) return this.body.nodes[i];
                        }
                    }
                }
            },
            {
                key: "_filter",
                value: function(t, e) {
                    var i = [];
                    return Wy(t, function(t) {
                        e(t) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_updateState",
                value: function() {
                    var t, e = this, i = [], o = {}, n = function(t) {
                        Wy(e.body.nodes, function(e) {
                            !0 === e.isCluster && t(e);
                        });
                    };
                    for(t in this.clusteredNodes)if (Object.prototype.hasOwnProperty.call(this.clusteredNodes, t)) void 0 === this.body.nodes[t] && i.push(t);
                    n(function(t) {
                        for(var e = 0; e < i.length; e++)delete t.containedNodes[i[e]];
                    });
                    for(var r = 0; r < i.length; r++)delete this.clusteredNodes[i[r]];
                    Wy(this.clusteredEdges, function(t) {
                        var i = e.body.edges[t];
                        void 0 !== i && i.endPointsValid() || (o[t] = t);
                    }), n(function(t) {
                        Wy(t.containedEdges, function(t, e) {
                            t.endPointsValid() || o[e] || (o[e] = e);
                        });
                    }), Wy(this.body.edges, function(t, i) {
                        var n = !0, r = t.clusteringEdgeReplacingIds;
                        if (void 0 !== r) {
                            var s = 0;
                            Wy(r, function(t) {
                                var i = e.body.edges[t];
                                void 0 !== i && i.endPointsValid() && (s += 1);
                            }), n = s > 0;
                        }
                        t.endPointsValid() && n || (o[i] = i);
                    }), n(function(t) {
                        Wy(o, function(i) {
                            delete t.containedEdges[i], Wy(t.edges, function(n, r) {
                                n.id !== i ? n.clusteringEdgeReplacingIds = e._filter(n.clusteringEdgeReplacingIds, function(t) {
                                    return !o[t];
                                }) : t.edges[r] = null;
                            }), t.edges = e._filter(t.edges, function(t) {
                                return null !== t;
                            });
                        });
                    }), Wy(o, function(t) {
                        delete e.clusteredEdges[t];
                    }), Wy(o, function(t) {
                        delete e.body.edges[t];
                    }), Wy(mu(this.body.edges), function(t) {
                        var i = e.body.edges[t], o = e._isClusteredNode(i.fromId) || e._isClusteredNode(i.toId);
                        if (o !== e._isClusteredEdge(i.id)) {
                            if (o) {
                                var n = e._getClusterNodeForNode(i.fromId);
                                void 0 !== n && e._clusterEdges(e.body.nodes[i.fromId], i, n);
                                var r = e._getClusterNodeForNode(i.toId);
                                void 0 !== r && e._clusterEdges(e.body.nodes[i.toId], i, r);
                            } else delete e._clusterEdges[t], e._restoreEdge(i);
                        }
                    });
                    for(var s = !1, a = !0, h = function() {
                        var t = [];
                        n(function(e) {
                            var i = mu(e.containedNodes).length, o = !0 === e.options.allowSingleNodeCluster;
                            (o && i < 1 || !o && i < 2) && t.push(e.id);
                        });
                        for(var i = 0; i < t.length; ++i)e.openCluster(t[i], {}, !1);
                        a = t.length > 0, s = s || a;
                    }; a;)h();
                    s && this._updateState();
                }
            },
            {
                key: "_isClusteredNode",
                value: function(t) {
                    return void 0 !== this.clusteredNodes[t];
                }
            },
            {
                key: "_isClusteredEdge",
                value: function(t) {
                    return void 0 !== this.clusteredEdges[t];
                }
            }
        ]), t;
    }();
    function Qx(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return Jx(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return Jx(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function Jx(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var tE = function() {
        function t(e, i) {
            var o;
            Xl(this, t), void 0 !== window && (o = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame), window.requestAnimationFrame = void 0 === o ? function(t) {
                t();
            } : o, this.body = e, this.canvas = i, this.redrawRequested = !1, this.renderTimer = void 0, this.requiresTimeout = !0, this.renderingActive = !1, this.renderRequests = 0, this.allowRedraw = !0, this.dragging = !1, this.zooming = !1, this.options = {}, this.defaultOptions = {
                hideEdgesOnDrag: !1,
                hideEdgesOnZoom: !1,
                hideNodesOnDrag: !1
            }, fo(this.options, this.defaultOptions), this._determineBrowserMethod(), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e = this;
                    this.body.emitter.on("dragStart", function() {
                        e.dragging = !0;
                    }), this.body.emitter.on("dragEnd", function() {
                        e.dragging = !1;
                    }), this.body.emitter.on("zoom", function() {
                        e.zooming = !0, window.clearTimeout(e.zoomTimeoutId), e.zoomTimeoutId = bv(function() {
                            var t;
                            e.zooming = !1, Fo(t = e._requestRedraw).call(t, e)();
                        }, 250);
                    }), this.body.emitter.on("_resizeNodes", function() {
                        e._resizeNodes();
                    }), this.body.emitter.on("_redraw", function() {
                        !1 === e.renderingActive && e._redraw();
                    }), this.body.emitter.on("_blockRedraw", function() {
                        e.allowRedraw = !1;
                    }), this.body.emitter.on("_allowRedraw", function() {
                        e.allowRedraw = !0, e.redrawRequested = !1;
                    }), this.body.emitter.on("_requestRedraw", Fo(t = this._requestRedraw).call(t, this)), this.body.emitter.on("_startRendering", function() {
                        e.renderRequests += 1, e.renderingActive = !0, e._startRendering();
                    }), this.body.emitter.on("_stopRendering", function() {
                        e.renderRequests -= 1, e.renderingActive = e.renderRequests > 0, e.renderTimer = void 0;
                    }), this.body.emitter.on("destroy", function() {
                        e.renderRequests = 0, e.allowRedraw = !1, e.renderingActive = !1, !0 === e.requiresTimeout ? clearTimeout(e.renderTimer) : window.cancelAnimationFrame(e.renderTimer), e.body.emitter.off();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Ny([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag"
                    ], this.options, t);
                }
            },
            {
                key: "_requestNextFrame",
                value: function(t, e) {
                    if ("undefined" != typeof window) {
                        var i, o = window;
                        return !0 === this.requiresTimeout ? i = bv(t, e) : o.requestAnimationFrame && (i = o.requestAnimationFrame(t)), i;
                    }
                }
            },
            {
                key: "_startRendering",
                value: function() {
                    var t;
                    !0 === this.renderingActive && void 0 === this.renderTimer && (this.renderTimer = this._requestNextFrame(Fo(t = this._renderStep).call(t, this), this.simulationInterval));
                }
            },
            {
                key: "_renderStep",
                value: function() {
                    !0 === this.renderingActive && (this.renderTimer = void 0, !0 === this.requiresTimeout && this._startRendering(), this._redraw(), !1 === this.requiresTimeout && this._startRendering());
                }
            },
            {
                key: "redraw",
                value: function() {
                    this.body.emitter.emit("setSize"), this._redraw();
                }
            },
            {
                key: "_requestRedraw",
                value: function() {
                    var t = this;
                    !0 !== this.redrawRequested && !1 === this.renderingActive && !0 === this.allowRedraw && (this.redrawRequested = !0, this._requestNextFrame(function() {
                        t._redraw(!1);
                    }, 0));
                }
            },
            {
                key: "_redraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    if (!0 === this.allowRedraw) {
                        this.body.emitter.emit("initRedraw"), this.redrawRequested = !1;
                        var e = {
                            drawExternalLabels: null
                        };
                        0 !== this.canvas.frame.canvas.width && 0 !== this.canvas.frame.canvas.height || this.canvas.setSize(), this.canvas.setTransform();
                        var i = this.canvas.getContext(), o = this.canvas.frame.canvas.clientWidth, n = this.canvas.frame.canvas.clientHeight;
                        if (i.clearRect(0, 0, o, n), 0 === this.canvas.frame.clientWidth) return;
                        if (i.save(), i.translate(this.body.view.translation.x, this.body.view.translation.y), i.scale(this.body.view.scale, this.body.view.scale), i.beginPath(), this.body.emitter.emit("beforeDrawing", i), i.closePath(), !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawEdges(i), !1 === this.dragging || !0 === this.dragging && !1 === this.options.hideNodesOnDrag) {
                            var r = this._drawNodes(i, t), s = r.drawExternalLabels;
                            e.drawExternalLabels = s;
                        }
                        !1 === t && (!1 === this.dragging || !0 === this.dragging && !1 === this.options.hideEdgesOnDrag) && (!1 === this.zooming || !0 === this.zooming && !1 === this.options.hideEdgesOnZoom) && this._drawArrows(i), null != e.drawExternalLabels && e.drawExternalLabels(), !1 === t && this._drawSelectionBox(i), i.beginPath(), this.body.emitter.emit("afterDrawing", i), i.closePath(), i.restore(), !0 === t && i.clearRect(0, 0, o, n);
                    }
                }
            },
            {
                key: "_resizeNodes",
                value: function() {
                    this.canvas.setTransform();
                    var t = this.canvas.getContext();
                    t.save(), t.translate(this.body.view.translation.x, this.body.view.translation.y), t.scale(this.body.view.scale, this.body.view.scale);
                    var e, i = this.body.nodes;
                    for(var o in i)Object.prototype.hasOwnProperty.call(i, o) && ((e = i[o]).resize(t), e.updateBoundingBox(t, e.selected));
                    t.restore();
                }
            },
            {
                key: "_drawNodes",
                value: function(t) {
                    for(var e, i, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = this.body.nodes, r = this.body.nodeIndices, s = [], a = [], h = 20, d = this.canvas.DOMtoCanvas({
                        x: -h,
                        y: -h
                    }), l = this.canvas.DOMtoCanvas({
                        x: this.canvas.frame.canvas.clientWidth + h,
                        y: this.canvas.frame.canvas.clientHeight + h
                    }), c = {
                        top: d.y,
                        left: d.x,
                        bottom: l.y,
                        right: l.x
                    }, u = [], f = 0; f < r.length; f++)if ((e = n[r[f]]).hover) a.push(r[f]);
                    else if (e.isSelected()) s.push(r[f]);
                    else if (!0 === o) {
                        var p = e.draw(t);
                        null != p.drawExternalLabel && u.push(p.drawExternalLabel);
                    } else if (!0 === e.isBoundingBoxOverlappingWith(c)) {
                        var v = e.draw(t);
                        null != v.drawExternalLabel && u.push(v.drawExternalLabel);
                    } else e.updateBoundingBox(t, e.selected);
                    var g = s.length, y = a.length;
                    for(i = 0; i < g; i++){
                        var m = (e = n[s[i]]).draw(t);
                        null != m.drawExternalLabel && u.push(m.drawExternalLabel);
                    }
                    for(i = 0; i < y; i++){
                        var b = (e = n[a[i]]).draw(t);
                        null != b.drawExternalLabel && u.push(b.drawExternalLabel);
                    }
                    return {
                        drawExternalLabels: function() {
                            var t, e = Qx(u);
                            try {
                                for(e.s(); !(t = e.n()).done;)(0, t.value)();
                            } catch (t1) {
                                e.e(t1);
                            } finally{
                                e.f();
                            }
                        }
                    };
                }
            },
            {
                key: "_drawEdges",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.draw(t);
                    }
                }
            },
            {
                key: "_drawArrows",
                value: function(t) {
                    for(var e = this.body.edges, i = this.body.edgeIndices, o = 0; o < i.length; o++){
                        var n = e[i[o]];
                        !0 === n.connected && n.drawArrows(t);
                    }
                }
            },
            {
                key: "_determineBrowserMethod",
                value: function() {
                    if ("undefined" != typeof window) {
                        var t = navigator.userAgent.toLowerCase();
                        this.requiresTimeout = !1, (-1 != zp(t).call(t, "msie 9.0") || -1 != zp(t).call(t, "safari") && zp(t).call(t, "chrome") <= -1) && (this.requiresTimeout = !0);
                    } else this.requiresTimeout = !0;
                }
            },
            {
                key: "_drawSelectionBox",
                value: function(t) {
                    if (this.body.selectionBox.show) {
                        t.beginPath();
                        var e = this.body.selectionBox.position.end.x - this.body.selectionBox.position.start.x, i = this.body.selectionBox.position.end.y - this.body.selectionBox.position.start.y;
                        t.rect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.fillStyle = "rgba(151, 194, 252, 0.2)", t.fillRect(this.body.selectionBox.position.start.x, this.body.selectionBox.position.start.y, e, i), t.strokeStyle = "rgba(151, 194, 252, 1)", t.stroke();
                    } else t.closePath();
                }
            }
        ]), t;
    }(), eE = G.setInterval;
    function iE(t, e) {
        e.inputHandler = function(t) {
            t.isFirst && e(t);
        }, t.on("hammer.input", e.inputHandler);
    }
    function oE(t, e) {
        return e.inputHandler = function(t) {
            t.isFinal && e(t);
        }, t.on("hammer.input", e.inputHandler);
    }
    var nE = function() {
        function t(e) {
            Xl(this, t), this.body = e, this.pixelRatio = 1, this.cameraState = {}, this.initialized = !1, this.canvasViewCenter = {}, this._cleanupCallbacks = [], this.options = {}, this.defaultOptions = {
                autoResize: !0,
                height: "100%",
                width: "100%"
            }, fo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t, e = this;
                    this.body.emitter.once("resize", function(t) {
                        0 !== t.width && (e.body.view.translation.x = .5 * t.width), 0 !== t.height && (e.body.view.translation.y = .5 * t.height);
                    }), this.body.emitter.on("setSize", Fo(t = this.setSize).call(t, this)), this.body.emitter.on("destroy", function() {
                        e.hammerFrame.destroy(), e.hammer.destroy(), e._cleanUp();
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    var e, i, o, n, r, s = this;
                    if (void 0 !== t) Ny([
                        "width",
                        "height",
                        "autoResize"
                    ], this.options, t);
                    if (this._cleanUp(), !0 === this.options.autoResize) {
                        var a;
                        if (window.ResizeObserver) {
                            var h = new ResizeObserver(function() {
                                !0 === s.setSize() && s.body.emitter.emit("_requestRedraw");
                            }), d = this.frame;
                            h.observe(d), this._cleanupCallbacks.push(function() {
                                h.unobserve(d);
                            });
                        } else {
                            var l = eE(function() {
                                !0 === s.setSize() && s.body.emitter.emit("_requestRedraw");
                            }, 1e3);
                            this._cleanupCallbacks.push(function() {
                                clearInterval(l);
                            });
                        }
                        var c = Fo(a = this._onResize).call(a, this);
                        e = window, i = "resize", o = c, e.addEventListener ? (void 0 === n && (n = !1), "mousewheel" === i && zf(r = navigator.userAgent).call(r, "Firefox") && (i = "DOMMouseScroll"), e.addEventListener(i, o, n)) : e.attachEvent("on" + i, o), this._cleanupCallbacks.push(function() {
                            !function(t, e, i, o) {
                                var n;
                                t.removeEventListener ? (void 0 === o && (o = !1), "mousewheel" === e && zf(n = navigator.userAgent).call(n, "Firefox") && (e = "DOMMouseScroll"), t.removeEventListener(e, i, o)) : t.detachEvent("on" + e, i);
                            }(window, "resize", c);
                        });
                    }
                }
            },
            {
                key: "_cleanUp",
                value: function() {
                    var t, e, i;
                    Fu(t = Uu(e = uf(i = this._cleanupCallbacks).call(i, 0)).call(e)).call(t, function(t) {
                        try {
                            t();
                        } catch (t1) {
                            console.error(t1);
                        }
                    });
                }
            },
            {
                key: "_onResize",
                value: function() {
                    this.setSize(), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_getCameraState",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.pixelRatio;
                    !0 === this.initialized && (this.cameraState.previousWidth = this.frame.canvas.width / t, this.cameraState.previousHeight = this.frame.canvas.height / t, this.cameraState.scale = this.body.view.scale, this.cameraState.position = this.DOMtoCanvas({
                        x: .5 * this.frame.canvas.width / t,
                        y: .5 * this.frame.canvas.height / t
                    }));
                }
            },
            {
                key: "_setCameraState",
                value: function() {
                    if (void 0 !== this.cameraState.scale && 0 !== this.frame.canvas.clientWidth && 0 !== this.frame.canvas.clientHeight && 0 !== this.pixelRatio && this.cameraState.previousWidth > 0 && this.cameraState.previousHeight > 0) {
                        var t = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth, e = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight, i = this.cameraState.scale;
                        1 != t && 1 != e ? i = .5 * this.cameraState.scale * (t + e) : 1 != t ? i = this.cameraState.scale * t : 1 != e && (i = this.cameraState.scale * e), this.body.view.scale = i;
                        var o = this.DOMtoCanvas({
                            x: .5 * this.frame.canvas.clientWidth,
                            y: .5 * this.frame.canvas.clientHeight
                        }), n = {
                            x: o.x - this.cameraState.position.x,
                            y: o.y - this.cameraState.position.y
                        };
                        this.body.view.translation.x += n.x * this.body.view.scale, this.body.view.translation.y += n.y * this.body.view.scale;
                    }
                }
            },
            {
                key: "_prepareValue",
                value: function(t) {
                    if ("number" == typeof t) return t + "px";
                    if ("string" == typeof t) {
                        if (-1 !== zp(t).call(t, "%") || -1 !== zp(t).call(t, "px")) return t;
                        if (-1 === zp(t).call(t, "%")) return t + "px";
                    }
                    throw new Error("Could not use the value supplied for width or height:" + t);
                }
            },
            {
                key: "_create",
                value: function() {
                    for(; this.body.container.hasChildNodes();)this.body.container.removeChild(this.body.container.firstChild);
                    if (this.frame = document.createElement("div"), this.frame.className = "vis-network", this.frame.style.position = "relative", this.frame.style.overflow = "hidden", this.frame.tabIndex = 0, this.frame.canvas = document.createElement("canvas"), this.frame.canvas.style.position = "relative", this.frame.appendChild(this.frame.canvas), this.frame.canvas.getContext) this._setPixelRatio(), this.setTransform();
                    else {
                        var t = document.createElement("DIV");
                        t.style.color = "red", t.style.fontWeight = "bold", t.style.padding = "10px", t.innerText = "Error: your browser does not support HTML canvas", this.frame.canvas.appendChild(t);
                    }
                    this.body.container.appendChild(this.frame), this.body.view.scale = 1, this.body.view.translation = {
                        x: .5 * this.frame.canvas.clientWidth,
                        y: .5 * this.frame.canvas.clientHeight
                    }, this._bindHammer();
                }
            },
            {
                key: "_bindHammer",
                value: function() {
                    var t = this;
                    void 0 !== this.hammer && this.hammer.destroy(), this.drag = {}, this.pinch = {}, this.hammer = new pm(this.frame.canvas), this.hammer.get("pinch").set({
                        enable: !0
                    }), this.hammer.get("pan").set({
                        threshold: 5,
                        direction: pm.DIRECTION_ALL
                    }), iE(this.hammer, function(e) {
                        t.body.eventListeners.onTouch(e);
                    }), this.hammer.on("tap", function(e) {
                        t.body.eventListeners.onTap(e);
                    }), this.hammer.on("doubletap", function(e) {
                        t.body.eventListeners.onDoubleTap(e);
                    }), this.hammer.on("press", function(e) {
                        t.body.eventListeners.onHold(e);
                    }), this.hammer.on("panstart", function(e) {
                        t.body.eventListeners.onDragStart(e);
                    }), this.hammer.on("panmove", function(e) {
                        t.body.eventListeners.onDrag(e);
                    }), this.hammer.on("panend", function(e) {
                        t.body.eventListeners.onDragEnd(e);
                    }), this.hammer.on("pinch", function(e) {
                        t.body.eventListeners.onPinch(e);
                    }), this.frame.canvas.addEventListener("wheel", function(e) {
                        t.body.eventListeners.onMouseWheel(e);
                    }), this.frame.canvas.addEventListener("mousemove", function(e) {
                        t.body.eventListeners.onMouseMove(e);
                    }), this.frame.canvas.addEventListener("contextmenu", function(e) {
                        t.body.eventListeners.onContext(e);
                    }), this.hammerFrame = new pm(this.frame), oE(this.hammerFrame, function(e) {
                        t.body.eventListeners.onRelease(e);
                    });
                }
            },
            {
                key: "setSize",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.options.width, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.height;
                    t = this._prepareValue(t), e = this._prepareValue(e);
                    var i = !1, o = this.frame.canvas.width, n = this.frame.canvas.height, r = this.pixelRatio;
                    if (this._setPixelRatio(), t != this.options.width || e != this.options.height || this.frame.style.width != t || this.frame.style.height != e) this._getCameraState(r), this.frame.style.width = t, this.frame.style.height = e, this.frame.canvas.style.width = "100%", this.frame.canvas.style.height = "100%", this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio), this.options.width = t, this.options.height = e, this.canvasViewCenter = {
                        x: .5 * this.frame.clientWidth,
                        y: .5 * this.frame.clientHeight
                    }, i = !0;
                    else {
                        var s = Math.round(this.frame.canvas.clientWidth * this.pixelRatio), a = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);
                        this.frame.canvas.width === s && this.frame.canvas.height === a || this._getCameraState(r), this.frame.canvas.width !== s && (this.frame.canvas.width = s, i = !0), this.frame.canvas.height !== a && (this.frame.canvas.height = a, i = !0);
                    }
                    return !0 === i && (this.body.emitter.emit("resize", {
                        width: Math.round(this.frame.canvas.width / this.pixelRatio),
                        height: Math.round(this.frame.canvas.height / this.pixelRatio),
                        oldWidth: Math.round(o / this.pixelRatio),
                        oldHeight: Math.round(n / this.pixelRatio)
                    }), this._setCameraState()), this.initialized = !0, i;
                }
            },
            {
                key: "getContext",
                value: function() {
                    return this.frame.canvas.getContext("2d");
                }
            },
            {
                key: "_determinePixelRatio",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    var e = 1;
                    return "undefined" != typeof window && (e = window.devicePixelRatio || 1), e / (t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1);
                }
            },
            {
                key: "_setPixelRatio",
                value: function() {
                    this.pixelRatio = this._determinePixelRatio();
                }
            },
            {
                key: "setTransform",
                value: function() {
                    var t = this.getContext();
                    if (void 0 === t) throw new Error("Could not get canvax context");
                    t.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
                }
            },
            {
                key: "_XconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.x) / this.body.view.scale;
                }
            },
            {
                key: "_XconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.x;
                }
            },
            {
                key: "_YconvertDOMtoCanvas",
                value: function(t) {
                    return (t - this.body.view.translation.y) / this.body.view.scale;
                }
            },
            {
                key: "_YconvertCanvasToDOM",
                value: function(t) {
                    return t * this.body.view.scale + this.body.view.translation.y;
                }
            },
            {
                key: "canvasToDOM",
                value: function(t) {
                    return {
                        x: this._XconvertCanvasToDOM(t.x),
                        y: this._YconvertCanvasToDOM(t.y)
                    };
                }
            },
            {
                key: "DOMtoCanvas",
                value: function(t) {
                    return {
                        x: this._XconvertDOMtoCanvas(t.x),
                        y: this._YconvertDOMtoCanvas(t.y)
                    };
                }
            }
        ]), t;
    }();
    function rE(t, e) {
        var i = fo({
            nodes: e,
            minZoomLevel: Number.MIN_VALUE,
            maxZoomLevel: 1
        }, null != t ? t : {});
        if (!hu(i.nodes)) throw new TypeError("Nodes has to be an array of ids.");
        if (0 === i.nodes.length && (i.nodes = e), !("number" == typeof i.minZoomLevel && i.minZoomLevel > 0)) throw new TypeError("Min zoom level has to be a number higher than zero.");
        if (!("number" == typeof i.maxZoomLevel && i.minZoomLevel <= i.maxZoomLevel)) throw new TypeError("Max zoom level has to be a number higher than min zoom level.");
        return i;
    }
    var sE = function() {
        function t(e, i) {
            var o, n, r = this;
            Xl(this, t), this.body = e, this.canvas = i, this.animationSpeed = 1 / this.renderRefreshRate, this.animationEasingFunction = "easeInOutQuint", this.easingTime = 0, this.sourceScale = 0, this.targetScale = 0, this.sourceTranslation = 0, this.targetTranslation = 0, this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0, this.touchTime = 0, this.viewFunction = void 0, this.body.emitter.on("fit", Fo(o = this.fit).call(o, this)), this.body.emitter.on("animationFinished", function() {
                r.body.emitter.emit("_stopRendering");
            }), this.body.emitter.on("unlockNode", Fo(n = this.releaseNode).call(n, this));
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    this.options = t;
                }
            },
            {
                key: "fit",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    t = rE(t, this.body.nodeIndices);
                    var i, o, n = this.canvas.frame.canvas.clientWidth, r = this.canvas.frame.canvas.clientHeight;
                    if (0 === n || 0 === r) o = 1, i = Gx.getRange(this.body.nodes, t.nodes);
                    else if (!0 === e) {
                        var s = 0;
                        for(var a in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, a)) {
                            var h = this.body.nodes[a];
                            !0 === h.predefinedPosition && (s += 1);
                        }
                        if (s > .5 * this.body.nodeIndices.length) return void this.fit(t, !1);
                        i = Gx.getRange(this.body.nodes, t.nodes);
                        var d = this.body.nodeIndices.length;
                        o = 12.662 / (d + 7.4147) + .0964822;
                        var l = Math.min(n / 600, r / 600);
                        o *= l;
                    } else {
                        this.body.emitter.emit("_resizeNodes"), i = Gx.getRange(this.body.nodes, t.nodes);
                        var c = 1.1 * Math.abs(i.maxX - i.minX), u = 1.1 * Math.abs(i.maxY - i.minY), f = n / c, p = r / u;
                        o = f <= p ? f : p;
                    }
                    o > t.maxZoomLevel ? o = t.maxZoomLevel : o < t.minZoomLevel && (o = t.minZoomLevel);
                    var v = Gx.findCenter(i), g = {
                        position: v,
                        scale: o,
                        animation: t.animation
                    };
                    this.moveTo(g);
                }
            },
            {
                key: "focus",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (void 0 !== this.body.nodes[t]) {
                        var i = {
                            x: this.body.nodes[t].x,
                            y: this.body.nodes[t].y
                        };
                        e.position = i, e.lockedOnNode = t, this.moveTo(e);
                    } else console.error("Node: " + t + " cannot be found.");
                }
            },
            {
                key: "moveTo",
                value: function(t) {
                    if (void 0 !== t) {
                        if (null != t.offset) {
                            if (null != t.offset.x) {
                                if (t.offset.x = +t.offset.x, !Mw(t.offset.x)) throw new TypeError('The option "offset.x" has to be a finite number.');
                            } else t.offset.x = 0;
                            if (null != t.offset.y) {
                                if (t.offset.y = +t.offset.y, !Mw(t.offset.y)) throw new TypeError('The option "offset.y" has to be a finite number.');
                            } else t.offset.x = 0;
                        } else t.offset = {
                            x: 0,
                            y: 0
                        };
                        if (null != t.position) {
                            if (null != t.position.x) {
                                if (t.position.x = +t.position.x, !Mw(t.position.x)) throw new TypeError('The option "position.x" has to be a finite number.');
                            } else t.position.x = 0;
                            if (null != t.position.y) {
                                if (t.position.y = +t.position.y, !Mw(t.position.y)) throw new TypeError('The option "position.y" has to be a finite number.');
                            } else t.position.x = 0;
                        } else t.position = this.getViewPosition();
                        if (null != t.scale) {
                            if (t.scale = +t.scale, !(t.scale > 0)) throw new TypeError('The option "scale" has to be a number greater than zero.');
                        } else t.scale = this.body.view.scale;
                        void 0 === t.animation && (t.animation = {
                            duration: 0
                        }), !1 === t.animation && (t.animation = {
                            duration: 0
                        }), !0 === t.animation && (t.animation = {}), void 0 === t.animation.duration && (t.animation.duration = 1e3), void 0 === t.animation.easingFunction && (t.animation.easingFunction = "easeInOutQuad"), this.animateView(t);
                    } else t = {};
                }
            },
            {
                key: "animateView",
                value: function(t) {
                    if (void 0 !== t) {
                        this.animationEasingFunction = t.animation.easingFunction, this.releaseNode(), !0 === t.locked && (this.lockedOnNodeId = t.lockedOnNode, this.lockedOnNodeOffset = t.offset), 0 != this.easingTime && this._transitionRedraw(!0), this.sourceScale = this.body.view.scale, this.sourceTranslation = this.body.view.translation, this.targetScale = t.scale, this.body.view.scale = this.targetScale;
                        var e, i, o = this.canvas.DOMtoCanvas({
                            x: .5 * this.canvas.frame.canvas.clientWidth,
                            y: .5 * this.canvas.frame.canvas.clientHeight
                        }), n = o.x - t.position.x, r = o.y - t.position.y;
                        if (this.targetTranslation = {
                            x: this.sourceTranslation.x + n * this.targetScale + t.offset.x,
                            y: this.sourceTranslation.y + r * this.targetScale + t.offset.y
                        }, 0 === t.animation.duration) {
                            if (null != this.lockedOnNodeId) this.viewFunction = Fo(e = this._lockedRedraw).call(e, this), this.body.emitter.on("initRedraw", this.viewFunction);
                            else this.body.view.scale = this.targetScale, this.body.view.translation = this.targetTranslation, this.body.emitter.emit("_requestRedraw");
                        } else this.animationSpeed = 1 / (60 * t.animation.duration * .001) || 1 / 60, this.animationEasingFunction = t.animation.easingFunction, this.viewFunction = Fo(i = this._transitionRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction), this.body.emitter.emit("_startRendering");
                    }
                }
            },
            {
                key: "_lockedRedraw",
                value: function() {
                    var t = this.body.nodes[this.lockedOnNodeId].x, e = this.body.nodes[this.lockedOnNodeId].y, i = this.canvas.DOMtoCanvas({
                        x: .5 * this.canvas.frame.canvas.clientWidth,
                        y: .5 * this.canvas.frame.canvas.clientHeight
                    }), o = i.x - t, n = i.y - e, r = this.body.view.translation, s = {
                        x: r.x + o * this.body.view.scale + this.lockedOnNodeOffset.x,
                        y: r.y + n * this.body.view.scale + this.lockedOnNodeOffset.y
                    };
                    this.body.view.translation = s;
                }
            },
            {
                key: "releaseNode",
                value: function() {
                    void 0 !== this.lockedOnNodeId && void 0 !== this.viewFunction && (this.body.emitter.off("initRedraw", this.viewFunction), this.lockedOnNodeId = void 0, this.lockedOnNodeOffset = void 0);
                }
            },
            {
                key: "_transitionRedraw",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    this.easingTime += this.animationSpeed, this.easingTime = !0 === t ? 1 : this.easingTime;
                    var e = em[this.animationEasingFunction](this.easingTime);
                    if (this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * e, this.body.view.translation = {
                        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * e,
                        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * e
                    }, this.easingTime >= 1) {
                        var i;
                        if (this.body.emitter.off("initRedraw", this.viewFunction), this.easingTime = 0, null != this.lockedOnNodeId) this.viewFunction = Fo(i = this._lockedRedraw).call(i, this), this.body.emitter.on("initRedraw", this.viewFunction);
                        this.body.emitter.emit("animationFinished");
                    }
                }
            },
            {
                key: "getScale",
                value: function() {
                    return this.body.view.scale;
                }
            },
            {
                key: "getViewPosition",
                value: function() {
                    return this.canvas.DOMtoCanvas({
                        x: .5 * this.canvas.frame.canvas.clientWidth,
                        y: .5 * this.canvas.frame.canvas.clientHeight
                    });
                }
            }
        ]), t;
    }();
    function aE(t) {
        var e, i = t && t.preventDefault || !1, o = t && t.container || window, n = {}, r = {
            keydown: {},
            keyup: {}
        }, s = {};
        for(e = 97; e <= 122; e++)s[String.fromCharCode(e)] = {
            code: e - 97 + 65,
            shift: !1
        };
        for(e = 65; e <= 90; e++)s[String.fromCharCode(e)] = {
            code: e,
            shift: !0
        };
        for(e = 0; e <= 9; e++)s["" + e] = {
            code: 48 + e,
            shift: !1
        };
        for(e = 1; e <= 12; e++)s["F" + e] = {
            code: 111 + e,
            shift: !1
        };
        for(e = 0; e <= 9; e++)s["num" + e] = {
            code: 96 + e,
            shift: !1
        };
        s["num*"] = {
            code: 106,
            shift: !1
        }, s["num+"] = {
            code: 107,
            shift: !1
        }, s["num-"] = {
            code: 109,
            shift: !1
        }, s["num/"] = {
            code: 111,
            shift: !1
        }, s["num."] = {
            code: 110,
            shift: !1
        }, s.left = {
            code: 37,
            shift: !1
        }, s.up = {
            code: 38,
            shift: !1
        }, s.right = {
            code: 39,
            shift: !1
        }, s.down = {
            code: 40,
            shift: !1
        }, s.space = {
            code: 32,
            shift: !1
        }, s.enter = {
            code: 13,
            shift: !1
        }, s.shift = {
            code: 16,
            shift: void 0
        }, s.esc = {
            code: 27,
            shift: !1
        }, s.backspace = {
            code: 8,
            shift: !1
        }, s.tab = {
            code: 9,
            shift: !1
        }, s.ctrl = {
            code: 17,
            shift: !1
        }, s.alt = {
            code: 18,
            shift: !1
        }, s.delete = {
            code: 46,
            shift: !1
        }, s.pageup = {
            code: 33,
            shift: !1
        }, s.pagedown = {
            code: 34,
            shift: !1
        }, s["="] = {
            code: 187,
            shift: !1
        }, s["-"] = {
            code: 189,
            shift: !1
        }, s["]"] = {
            code: 221,
            shift: !1
        }, s["["] = {
            code: 219,
            shift: !1
        };
        var a = function(t) {
            d(t, "keydown");
        }, h = function(t) {
            d(t, "keyup");
        }, d = function(t, e) {
            if (void 0 !== r[e][t.keyCode]) {
                for(var o = r[e][t.keyCode], n = 0; n < o.length; n++)(void 0 === o[n].shift || 1 == o[n].shift && 1 == t.shiftKey || 0 == o[n].shift && 0 == t.shiftKey) && o[n].fn(t);
                1 == i && t.preventDefault();
            }
        };
        return n.bind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            void 0 === r[i][s[t].code] && (r[i][s[t].code] = []), r[i][s[t].code].push({
                fn: e,
                shift: s[t].shift
            });
        }, n.bindAll = function(t, e) {
            for(var i in void 0 === e && (e = "keydown"), s)s.hasOwnProperty(i) && n.bind(i, t, e);
        }, n.getKey = function(t) {
            for(var e in s)if (s.hasOwnProperty(e)) {
                if (1 == t.shiftKey && 1 == s[e].shift && t.keyCode == s[e].code) return e;
                if (0 == t.shiftKey && 0 == s[e].shift && t.keyCode == s[e].code) return e;
                if (t.keyCode == s[e].code && "shift" == e) return e;
            }
            return "unknown key, currently not supported";
        }, n.unbind = function(t, e, i) {
            if (void 0 === i && (i = "keydown"), void 0 === s[t]) throw new Error("unsupported key: " + t);
            if (void 0 !== e) {
                var o = [], n = r[i][s[t].code];
                if (void 0 !== n) for(var a = 0; a < n.length; a++)n[a].fn == e && n[a].shift == s[t].shift || o.push(r[i][s[t].code][a]);
                r[i][s[t].code] = o;
            } else r[i][s[t].code] = [];
        }, n.reset = function() {
            r = {
                keydown: {},
                keyup: {}
            };
        }, n.destroy = function() {
            r = {
                keydown: {},
                keyup: {}
            }, o.removeEventListener("keydown", a, !0), o.removeEventListener("keyup", h, !0);
        }, o.addEventListener("keydown", a, !0), o.addEventListener("keyup", h, !0), n;
    }
    var hE = function() {
        function t(e, i) {
            var o = this;
            Xl(this, t), this.body = e, this.canvas = i, this.iconsCreated = !1, this.navigationHammers = [], this.boundFunctions = {}, this.touchTime = 0, this.activated = !1, this.body.emitter.on("activate", function() {
                o.activated = !0, o.configureKeyboardBindings();
            }), this.body.emitter.on("deactivate", function() {
                o.activated = !1, o.configureKeyboardBindings();
            }), this.body.emitter.on("destroy", function() {
                void 0 !== o.keycharm && o.keycharm.destroy();
            }), this.options = {};
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    void 0 !== t && (this.options = t, this.create());
                }
            },
            {
                key: "create",
                value: function() {
                    !0 === this.options.navigationButtons ? !1 === this.iconsCreated && this.loadNavigationElements() : !0 === this.iconsCreated && this.cleanNavigation(), this.configureKeyboardBindings();
                }
            },
            {
                key: "cleanNavigation",
                value: function() {
                    if (0 != this.navigationHammers.length) {
                        for(var t = 0; t < this.navigationHammers.length; t++)this.navigationHammers[t].destroy();
                        this.navigationHammers = [];
                    }
                    this.navigationDOM && this.navigationDOM.wrapper && this.navigationDOM.wrapper.parentNode && this.navigationDOM.wrapper.parentNode.removeChild(this.navigationDOM.wrapper), this.iconsCreated = !1;
                }
            },
            {
                key: "loadNavigationElements",
                value: function() {
                    var t = this;
                    this.cleanNavigation(), this.navigationDOM = {};
                    var e = [
                        "up",
                        "down",
                        "left",
                        "right",
                        "zoomIn",
                        "zoomOut",
                        "zoomExtends"
                    ], i = [
                        "_moveUp",
                        "_moveDown",
                        "_moveLeft",
                        "_moveRight",
                        "_zoomIn",
                        "_zoomOut",
                        "_fit"
                    ];
                    this.navigationDOM.wrapper = document.createElement("div"), this.navigationDOM.wrapper.className = "vis-navigation", this.canvas.frame.appendChild(this.navigationDOM.wrapper);
                    for(var o = 0; o < e.length; o++){
                        this.navigationDOM[e[o]] = document.createElement("div"), this.navigationDOM[e[o]].className = "vis-button vis-" + e[o], this.navigationDOM.wrapper.appendChild(this.navigationDOM[e[o]]);
                        var n, r, s = new pm(this.navigationDOM[e[o]]);
                        if ("_fit" === i[o]) iE(s, Fo(n = this._fit).call(n, this));
                        else iE(s, Fo(r = this.bindToRedraw).call(r, this, i[o]));
                        this.navigationHammers.push(s);
                    }
                    var a = new pm(this.canvas.frame);
                    oE(a, function() {
                        t._stopMovement();
                    }), this.navigationHammers.push(a), this.iconsCreated = !0;
                }
            },
            {
                key: "bindToRedraw",
                value: function(t) {
                    var e;
                    void 0 === this.boundFunctions[t] && (this.boundFunctions[t] = Fo(e = this[t]).call(e, this), this.body.emitter.on("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_startRendering"));
                }
            },
            {
                key: "unbindFromRedraw",
                value: function(t) {
                    void 0 !== this.boundFunctions[t] && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"), delete this.boundFunctions[t]);
                }
            },
            {
                key: "_fit",
                value: function() {
                    (new Date).valueOf() - this.touchTime > 700 && (this.body.emitter.emit("fit", {
                        duration: 700
                    }), this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "_stopMovement",
                value: function() {
                    for(var t in this.boundFunctions)Object.prototype.hasOwnProperty.call(this.boundFunctions, t) && (this.body.emitter.off("initRedraw", this.boundFunctions[t]), this.body.emitter.emit("_stopRendering"));
                    this.boundFunctions = {};
                }
            },
            {
                key: "_moveUp",
                value: function() {
                    this.body.view.translation.y += this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveDown",
                value: function() {
                    this.body.view.translation.y -= this.options.keyboard.speed.y;
                }
            },
            {
                key: "_moveLeft",
                value: function() {
                    this.body.view.translation.x += this.options.keyboard.speed.x;
                }
            },
            {
                key: "_moveRight",
                value: function() {
                    this.body.view.translation.x -= this.options.keyboard.speed.x;
                }
            },
            {
                key: "_zoomIn",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale * (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "+",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "_zoomOut",
                value: function() {
                    var t = this.body.view.scale, e = this.body.view.scale / (1 + this.options.keyboard.speed.zoom), i = this.body.view.translation, o = e / t, n = (1 - o) * this.canvas.canvasViewCenter.x + i.x * o, r = (1 - o) * this.canvas.canvasViewCenter.y + i.y * o;
                    this.body.view.scale = e, this.body.view.translation = {
                        x: n,
                        y: r
                    }, this.body.emitter.emit("zoom", {
                        direction: "-",
                        scale: this.body.view.scale,
                        pointer: null
                    });
                }
            },
            {
                key: "configureKeyboardBindings",
                value: function() {
                    var t, e, i, o, n, r, s, a, h, d, l, c, u, f, p, v, g, y, m, b, w, k, _, x, E = this;
                    (void 0 !== this.keycharm && this.keycharm.destroy(), !0 === this.options.keyboard.enabled) && (!0 === this.options.keyboard.bindToWindow ? this.keycharm = aE({
                        container: window,
                        preventDefault: !0
                    }) : this.keycharm = aE({
                        container: this.canvas.frame,
                        preventDefault: !0
                    }), this.keycharm.reset(), !0 === this.activated && (Fo(t = this.keycharm).call(t, "up", function() {
                        E.bindToRedraw("_moveUp");
                    }, "keydown"), Fo(e = this.keycharm).call(e, "down", function() {
                        E.bindToRedraw("_moveDown");
                    }, "keydown"), Fo(i = this.keycharm).call(i, "left", function() {
                        E.bindToRedraw("_moveLeft");
                    }, "keydown"), Fo(o = this.keycharm).call(o, "right", function() {
                        E.bindToRedraw("_moveRight");
                    }, "keydown"), Fo(n = this.keycharm).call(n, "=", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Fo(r = this.keycharm).call(r, "num+", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Fo(s = this.keycharm).call(s, "num-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Fo(a = this.keycharm).call(a, "-", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Fo(h = this.keycharm).call(h, "[", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Fo(d = this.keycharm).call(d, "]", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Fo(l = this.keycharm).call(l, "pageup", function() {
                        E.bindToRedraw("_zoomIn");
                    }, "keydown"), Fo(c = this.keycharm).call(c, "pagedown", function() {
                        E.bindToRedraw("_zoomOut");
                    }, "keydown"), Fo(u = this.keycharm).call(u, "up", function() {
                        E.unbindFromRedraw("_moveUp");
                    }, "keyup"), Fo(f = this.keycharm).call(f, "down", function() {
                        E.unbindFromRedraw("_moveDown");
                    }, "keyup"), Fo(p = this.keycharm).call(p, "left", function() {
                        E.unbindFromRedraw("_moveLeft");
                    }, "keyup"), Fo(v = this.keycharm).call(v, "right", function() {
                        E.unbindFromRedraw("_moveRight");
                    }, "keyup"), Fo(g = this.keycharm).call(g, "=", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Fo(y = this.keycharm).call(y, "num+", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Fo(m = this.keycharm).call(m, "num-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Fo(b = this.keycharm).call(b, "-", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Fo(w = this.keycharm).call(w, "[", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup"), Fo(k = this.keycharm).call(k, "]", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Fo(_ = this.keycharm).call(_, "pageup", function() {
                        E.unbindFromRedraw("_zoomIn");
                    }, "keyup"), Fo(x = this.keycharm).call(x, "pagedown", function() {
                        E.unbindFromRedraw("_zoomOut");
                    }, "keyup")));
                }
            }
        ]), t;
    }();
    function dE(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return lE(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return lE(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function lE(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var cE = function() {
        function t(e, i, o) {
            var n, r, s, a, h, d, l, c, u, f, p, v, g;
            Xl(this, t), this.body = e, this.canvas = i, this.selectionHandler = o, this.navigationHandler = new hE(e, i), this.body.eventListeners.onTap = Fo(n = this.onTap).call(n, this), this.body.eventListeners.onTouch = Fo(r = this.onTouch).call(r, this), this.body.eventListeners.onDoubleTap = Fo(s = this.onDoubleTap).call(s, this), this.body.eventListeners.onHold = Fo(a = this.onHold).call(a, this), this.body.eventListeners.onDragStart = Fo(h = this.onDragStart).call(h, this), this.body.eventListeners.onDrag = Fo(d = this.onDrag).call(d, this), this.body.eventListeners.onDragEnd = Fo(l = this.onDragEnd).call(l, this), this.body.eventListeners.onMouseWheel = Fo(c = this.onMouseWheel).call(c, this), this.body.eventListeners.onPinch = Fo(u = this.onPinch).call(u, this), this.body.eventListeners.onMouseMove = Fo(f = this.onMouseMove).call(f, this), this.body.eventListeners.onRelease = Fo(p = this.onRelease).call(p, this), this.body.eventListeners.onContext = Fo(v = this.onContext).call(v, this), this.touchTime = 0, this.drag = {}, this.pinch = {}, this.popup = void 0, this.popupObj = void 0, this.popupTimer = void 0, this.body.functions.getPointer = Fo(g = this.getPointer).call(g, this), this.options = {}, this.defaultOptions = {
                dragNodes: !0,
                dragView: !0,
                hover: !1,
                keyboard: {
                    enabled: !1,
                    speed: {
                        x: 10,
                        y: 10,
                        zoom: .02
                    },
                    bindToWindow: !0,
                    autoFocus: !0
                },
                navigationButtons: !1,
                tooltipDelay: 300,
                zoomView: !0,
                zoomSpeed: 1
            }, fo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("destroy", function() {
                        clearTimeout(t.popupTimer), delete t.body.functions.getPointer;
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Ay([
                        "hideEdgesOnDrag",
                        "hideEdgesOnZoom",
                        "hideNodesOnDrag",
                        "keyboard",
                        "multiselect",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t), tm(this.options, t, "keyboard"), t.tooltip && (fo(this.options.tooltip, t.tooltip), t.tooltip.color && (this.options.tooltip.color = Yy(t.tooltip.color)));
                    this.navigationHandler.setOptions(this.options);
                }
            },
            {
                key: "getPointer",
                value: function(t) {
                    var e;
                    return {
                        x: t.x - (e = this.canvas.frame.canvas, e.getBoundingClientRect().left),
                        y: t.y - Hy(this.canvas.frame.canvas)
                    };
                }
            },
            {
                key: "onTouch",
                value: function(t) {
                    (new Date).valueOf() - this.touchTime > 50 && (this.drag.pointer = this.getPointer(t.center), this.drag.pinched = !1, this.pinch.scale = this.body.view.scale, this.touchTime = (new Date).valueOf());
                }
            },
            {
                key: "onTap",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect && (t.changedPointers[0].ctrlKey || t.changedPointers[0].metaKey);
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e);
                }
            },
            {
                key: "onDoubleTap",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.selectionHandler.generateClickEvent("doubleClick", t, e);
                }
            },
            {
                key: "onHold",
                value: function(t) {
                    var e = this.getPointer(t.center), i = this.selectionHandler.options.multiselect;
                    this.checkSelectionChanges(e, i), this.selectionHandler.commitAndEmit(e, t), this.selectionHandler.generateClickEvent("click", t, e), this.selectionHandler.generateClickEvent("hold", t, e);
                }
            },
            {
                key: "onRelease",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 10) {
                        var e = this.getPointer(t.center);
                        this.selectionHandler.generateClickEvent("release", t, e), this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "onContext",
                value: function(t) {
                    var e = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    });
                    this.selectionHandler.generateClickEvent("oncontext", t, e);
                }
            },
            {
                key: "checkSelectionChanges",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    !0 === e ? this.selectionHandler.selectAdditionalOnPoint(t) : this.selectionHandler.selectOnPoint(t);
                }
            },
            {
                key: "_determineDifference",
                value: function(t, e) {
                    var i = function(t, e) {
                        for(var i = [], o = 0; o < t.length; o++){
                            var n = t[o];
                            -1 === zp(e).call(e, n) && i.push(n);
                        }
                        return i;
                    };
                    return {
                        nodes: i(t.nodes, e.nodes),
                        edges: i(t.edges, e.edges)
                    };
                }
            },
            {
                key: "onDragStart",
                value: function(t) {
                    if (!this.drag.dragging) {
                        void 0 === this.drag.pointer && this.onTouch(t);
                        var e = this.selectionHandler.getNodeAt(this.drag.pointer);
                        if (this.drag.dragging = !0, this.drag.selection = [], this.drag.translation = fo({}, this.body.view.translation), this.drag.nodeId = void 0, t.srcEvent.shiftKey) {
                            this.body.selectionBox.show = !0;
                            var i = this.getPointer(t.center);
                            this.body.selectionBox.position.start = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            }, this.body.selectionBox.position.end = {
                                x: this.canvas._XconvertDOMtoCanvas(i.x),
                                y: this.canvas._YconvertDOMtoCanvas(i.y)
                            };
                        }
                        if (void 0 !== e && !0 === this.options.dragNodes) {
                            this.drag.nodeId = e.id, !1 === e.isSelected() && this.selectionHandler.setSelection({
                                nodes: [
                                    e.id
                                ]
                            }), this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer);
                            var o, n = dE(this.selectionHandler.getSelectedNodes());
                            try {
                                for(n.s(); !(o = n.n()).done;){
                                    var r = o.value, s = {
                                        id: r.id,
                                        node: r,
                                        x: r.x,
                                        y: r.y,
                                        xFixed: r.options.fixed.x,
                                        yFixed: r.options.fixed.y
                                    };
                                    r.options.fixed.x = !0, r.options.fixed.y = !0, this.drag.selection.push(s);
                                }
                            } catch (t1) {
                                n.e(t1);
                            } finally{
                                n.f();
                            }
                        } else this.selectionHandler.generateClickEvent("dragStart", t, this.drag.pointer, void 0, !0);
                    }
                }
            },
            {
                key: "onDrag",
                value: function(t) {
                    var e = this;
                    if (!0 !== this.drag.pinched) {
                        this.body.emitter.emit("unlockNode");
                        var i = this.getPointer(t.center), o = this.drag.selection;
                        if (o && o.length && !0 === this.options.dragNodes) {
                            this.selectionHandler.generateClickEvent("dragging", t, i);
                            var n = i.x - this.drag.pointer.x, r = i.y - this.drag.pointer.y;
                            Fu(o).call(o, function(t) {
                                var i = t.node;
                                !1 === t.xFixed && (i.x = e.canvas._XconvertDOMtoCanvas(e.canvas._XconvertCanvasToDOM(t.x) + n)), !1 === t.yFixed && (i.y = e.canvas._YconvertDOMtoCanvas(e.canvas._YconvertCanvasToDOM(t.y) + r));
                            }), this.body.emitter.emit("startSimulation");
                        } else {
                            if (t.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t, i, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t);
                                this.body.selectionBox.position.end = {
                                    x: this.canvas._XconvertDOMtoCanvas(i.x),
                                    y: this.canvas._YconvertDOMtoCanvas(i.y)
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                            if (!0 === this.options.dragView && !t.srcEvent.shiftKey) {
                                if (this.selectionHandler.generateClickEvent("dragging", t, i, void 0, !0), void 0 === this.drag.pointer) return void this.onDragStart(t);
                                var s = i.x - this.drag.pointer.x, a = i.y - this.drag.pointer.y;
                                this.body.view.translation = {
                                    x: this.drag.translation.x + s,
                                    y: this.drag.translation.y + a
                                }, this.body.emitter.emit("_requestRedraw");
                            }
                        }
                    }
                }
            },
            {
                key: "onDragEnd",
                value: function(t) {
                    var e = this;
                    if (this.drag.dragging = !1, this.body.selectionBox.show) {
                        var i;
                        this.body.selectionBox.show = !1;
                        var o = this.body.selectionBox.position, n = {
                            minX: Math.min(o.start.x, o.end.x),
                            minY: Math.min(o.start.y, o.end.y),
                            maxX: Math.max(o.start.x, o.end.x),
                            maxY: Math.max(o.start.y, o.end.y)
                        }, r = Yf(i = this.body.nodeIndices).call(i, function(t) {
                            var i = e.body.nodes[t];
                            return i.x >= n.minX && i.x <= n.maxX && i.y >= n.minY && i.y <= n.maxY;
                        });
                        Fu(r).call(r, function(t) {
                            return e.selectionHandler.selectObject(e.body.nodes[t]);
                        });
                        var s = this.getPointer(t.center);
                        this.selectionHandler.commitAndEmit(s, t), this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center), void 0, !0), this.body.emitter.emit("_requestRedraw");
                    } else {
                        var a = this.drag.selection;
                        a && a.length ? (Fu(a).call(a, function(t) {
                            t.node.options.fixed.x = t.xFixed, t.node.options.fixed.y = t.yFixed;
                        }), this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center)), this.body.emitter.emit("startSimulation")) : (this.selectionHandler.generateClickEvent("dragEnd", t, this.getPointer(t.center), void 0, !0), this.body.emitter.emit("_requestRedraw"));
                    }
                }
            },
            {
                key: "onPinch",
                value: function(t) {
                    var e = this.getPointer(t.center);
                    this.drag.pinched = !0, void 0 === this.pinch.scale && (this.pinch.scale = 1);
                    var i = this.pinch.scale * t.scale;
                    this.zoom(i, e);
                }
            },
            {
                key: "zoom",
                value: function(t, e) {
                    if (!0 === this.options.zoomView) {
                        var i = this.body.view.scale;
                        t < 1e-5 && (t = 1e-5), t > 10 && (t = 10);
                        var o = void 0;
                        void 0 !== this.drag && !0 === this.drag.dragging && (o = this.canvas.DOMtoCanvas(this.drag.pointer));
                        var n = this.body.view.translation, r = t / i, s = (1 - r) * e.x + n.x * r, a = (1 - r) * e.y + n.y * r;
                        if (this.body.view.scale = t, this.body.view.translation = {
                            x: s,
                            y: a
                        }, null != o) {
                            var h = this.canvas.canvasToDOM(o);
                            this.drag.pointer.x = h.x, this.drag.pointer.y = h.y;
                        }
                        this.body.emitter.emit("_requestRedraw"), i < t ? this.body.emitter.emit("zoom", {
                            direction: "+",
                            scale: this.body.view.scale,
                            pointer: e
                        }) : this.body.emitter.emit("zoom", {
                            direction: "-",
                            scale: this.body.view.scale,
                            pointer: e
                        });
                    }
                }
            },
            {
                key: "onMouseWheel",
                value: function(t) {
                    if (!0 === this.options.zoomView) {
                        if (0 !== t.deltaY) {
                            var e = this.body.view.scale;
                            e *= 1 + (t.deltaY < 0 ? 1 : -1) * (.1 * this.options.zoomSpeed);
                            var i = this.getPointer({
                                x: t.clientX,
                                y: t.clientY
                            });
                            this.zoom(e, i);
                        }
                        t.preventDefault();
                    }
                }
            },
            {
                key: "onMouseMove",
                value: function(t) {
                    var e = this, i = this.getPointer({
                        x: t.clientX,
                        y: t.clientY
                    }), o = !1;
                    void 0 !== this.popup && (!1 === this.popup.hidden && this._checkHidePopup(i), !1 === this.popup.hidden && (o = !0, this.popup.setPosition(i.x + 3, i.y - 5), this.popup.show())), this.options.keyboard.autoFocus && !1 === this.options.keyboard.bindToWindow && !0 === this.options.keyboard.enabled && this.canvas.frame.focus(), !1 === o && (void 0 !== this.popupTimer && (clearInterval(this.popupTimer), this.popupTimer = void 0), this.drag.dragging || (this.popupTimer = bv(function() {
                        return e._checkShowPopup(i);
                    }, this.options.tooltipDelay))), !0 === this.options.hover && this.selectionHandler.hoverObject(t, i);
                }
            },
            {
                key: "_checkShowPopup",
                value: function(t) {
                    var e = this.canvas._XconvertDOMtoCanvas(t.x), i = this.canvas._YconvertDOMtoCanvas(t.y), o = {
                        left: e,
                        top: i,
                        right: e,
                        bottom: i
                    }, n = void 0 === this.popupObj ? void 0 : this.popupObj.id, r = !1, s = "node";
                    if (void 0 === this.popupObj) {
                        for(var a, h = this.body.nodeIndices, d = this.body.nodes, l = [], c = 0; c < h.length; c++)!0 === (a = d[h[c]]).isOverlappingWith(o) && (r = !0, void 0 !== a.getTitle() && l.push(h[c]));
                        l.length > 0 && (this.popupObj = d[l[l.length - 1]], r = !0);
                    }
                    if (void 0 === this.popupObj && !1 === r) {
                        for(var u, f = this.body.edgeIndices, p = this.body.edges, v = [], g = 0; g < f.length; g++)!0 === (u = p[f[g]]).isOverlappingWith(o) && !0 === u.connected && void 0 !== u.getTitle() && v.push(f[g]);
                        v.length > 0 && (this.popupObj = p[v[v.length - 1]], s = "edge");
                    }
                    void 0 !== this.popupObj ? this.popupObj.id !== n && (void 0 === this.popup && (this.popup = new vm(this.canvas.frame)), this.popup.popupTargetType = s, this.popup.popupTargetId = this.popupObj.id, this.popup.setPosition(t.x + 3, t.y - 5), this.popup.setText(this.popupObj.getTitle()), this.popup.show(), this.body.emitter.emit("showPopup", this.popupObj.id)) : void 0 !== this.popup && (this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            },
            {
                key: "_checkHidePopup",
                value: function(t) {
                    var e = this.selectionHandler._pointerToPositionObject(t), i = !1;
                    if ("node" === this.popup.popupTargetType) {
                        if (void 0 !== this.body.nodes[this.popup.popupTargetId] && !0 === (i = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(e))) {
                            var o = this.selectionHandler.getNodeAt(t);
                            i = void 0 !== o && o.id === this.popup.popupTargetId;
                        }
                    } else void 0 === this.selectionHandler.getNodeAt(t) && void 0 !== this.body.edges[this.popup.popupTargetId] && (i = this.body.edges[this.popup.popupTargetId].isOverlappingWith(e));
                    !1 === i && (this.popupObj = void 0, this.popup.hide(), this.body.emitter.emit("hidePopup"));
                }
            }
        ]), t;
    }();
    nw("Set", function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, xw);
    var uE = G.Set, fE = y, pE = sw, vE = ib.exports.getWeakData, gE = Ze, yE = X, mE = Wb, bE = jb, wE = Vt, kE = Un.set, _E = Un.getterFor, xE = Vh.find, EE = Vh.findIndex, OE = fE([].splice), CE = 0, SE = function(t) {
        return t.frozen || (t.frozen = new TE);
    }, TE = function() {
        this.entries = [];
    }, ME = function(t, e) {
        return xE(t.entries, function(t) {
            return t[0] === e;
        });
    };
    TE.prototype = {
        get: function(t) {
            var e = ME(this, t);
            if (e) return e[1];
        },
        has: function(t) {
            return !!ME(this, t);
        },
        set: function(t, e) {
            var i = ME(this, t);
            i ? i[1] = e : this.entries.push([
                t,
                e
            ]);
        },
        delete: function(t) {
            var e = EE(this.entries, function(e) {
                return e[0] === t;
            });
            return ~e && OE(this.entries, e, 1), !!~e;
        }
    };
    var PE, DE = {
        getConstructor: function(t, e, i, o) {
            var n = t(function(t, n) {
                mE(t, r), kE(t, {
                    type: e,
                    id: CE++,
                    frozen: void 0
                }), null != n && bE(n, t[o], {
                    that: t,
                    AS_ENTRIES: i
                });
            }), r = n.prototype, s = _E(e), a = function(t, e, i) {
                var o = s(t), n = vE(gE(e), !0);
                return !0 === n ? SE(o).set(e, i) : n[o.id] = i, t;
            };
            return pE(r, {
                delete: function(t) {
                    var e = s(this);
                    if (!yE(t)) return !1;
                    var i = vE(t);
                    return !0 === i ? SE(e).delete(t) : i && wE(i, e.id) && delete i[e.id];
                },
                has: function(t) {
                    var e = s(this);
                    if (!yE(t)) return !1;
                    var i = vE(t);
                    return !0 === i ? SE(e).has(t) : i && wE(i, e.id);
                }
            }), pE(r, i ? {
                get: function(t) {
                    var e = s(this);
                    if (yE(t)) {
                        var i = vE(t);
                        return !0 === i ? SE(e).get(t) : i ? i[e.id] : void 0;
                    }
                },
                set: function(t, e) {
                    return a(this, t, e);
                }
            } : {
                add: function(t) {
                    return a(this, t, !0);
                }
            }), n;
        }
    }, BE = n, IE = y, zE = sw, FE = ib.exports, NE = nw, AE = DE, RE = X, jE = db, LE = Un.enforce, HE = xn, WE = !BE.ActiveXObject && "ActiveXObject" in BE, VE = function(t) {
        return function() {
            return t(this, arguments.length ? arguments[0] : void 0);
        };
    }, qE = NE("WeakMap", VE, AE);
    if (HE && WE) {
        PE = AE.getConstructor(VE, "WeakMap", !0), FE.enable();
        var UE = qE.prototype, YE = IE(UE.delete), XE = IE(UE.has), GE = IE(UE.get), KE = IE(UE.set);
        zE(UE, {
            delete: function(t) {
                if (RE(t) && !jE(t)) {
                    var e = LE(this);
                    return e.frozen || (e.frozen = new PE), YE(this, t) || e.frozen.delete(t);
                }
                return YE(this, t);
            },
            has: function(t) {
                if (RE(t) && !jE(t)) {
                    var e = LE(this);
                    return e.frozen || (e.frozen = new PE), XE(this, t) || e.frozen.has(t);
                }
                return XE(this, t);
            },
            get: function(t) {
                if (RE(t) && !jE(t)) {
                    var e = LE(this);
                    return e.frozen || (e.frozen = new PE), XE(this, t) ? GE(this, t) : e.frozen.get(t);
                }
                return GE(this, t);
            },
            set: function(t, e) {
                if (RE(t) && !jE(t)) {
                    var i = LE(this);
                    i.frozen || (i.frozen = new PE), XE(this, t) ? KE(this, t, e) : i.frozen.set(t, e);
                } else KE(this, t, e);
                return this;
            }
        });
    }
    var $E, ZE, QE, JE, tO, eO = G.WeakMap;
    /*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */ function iO(t, e, i, o) {
        if ("a" === i && !o) throw new TypeError("Private accessor was defined without a getter");
        if ("function" == typeof e ? t !== e || !o : !e.has(t)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return "m" === i ? o : "a" === i ? o.call(t) : o ? o.value : e.get(t);
    }
    function oO(t, e, i, o, n) {
        if ("m" === o) throw new TypeError("Private method is not writable");
        if ("a" === o && !n) throw new TypeError("Private accessor was defined without a setter");
        if ("function" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return "a" === o ? n.call(t, i) : n ? n.value = i : e.set(t, i), i;
    }
    function nO(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return rO(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return rO(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function rO(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function sO(t, e) {
        var i, o = new uE, n = nO(e);
        try {
            for(n.s(); !(i = n.n()).done;){
                var r = i.value;
                t.has(r) || o.add(r);
            }
        } catch (t1) {
            n.e(t1);
        } finally{
            n.f();
        }
        return o;
    }
    var aO = function() {
        function t() {
            Xl(this, t), $E.set(this, new uE), ZE.set(this, new uE);
        }
        return $l(t, [
            {
                key: "size",
                get: function() {
                    return iO(this, ZE, "f").size;
                }
            },
            {
                key: "add",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        iO(this, ZE, "f").add(r);
                    }
                }
            },
            {
                key: "delete",
                value: function() {
                    for(var t = arguments.length, e = new Array(t), i = 0; i < t; i++)e[i] = arguments[i];
                    for(var o = 0, n = e; o < n.length; o++){
                        var r = n[o];
                        iO(this, ZE, "f").delete(r);
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    iO(this, ZE, "f").clear();
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return Jc(iO(this, ZE, "f"));
                }
            },
            {
                key: "getChanges",
                value: function() {
                    return {
                        added: Jc(sO(iO(this, $E, "f"), iO(this, ZE, "f"))),
                        deleted: Jc(sO(iO(this, ZE, "f"), iO(this, $E, "f"))),
                        previous: Jc(new uE(iO(this, $E, "f"))),
                        current: Jc(new uE(iO(this, ZE, "f")))
                    };
                }
            },
            {
                key: "commit",
                value: function() {
                    var t = this.getChanges();
                    oO(this, $E, iO(this, ZE, "f"), "f"), oO(this, ZE, new uE(iO(this, $E, "f")), "f");
                    var e, i = nO(t.added);
                    try {
                        for(i.s(); !(e = i.n()).done;)e.value.select();
                    } catch (t1) {
                        i.e(t1);
                    } finally{
                        i.f();
                    }
                    var o, n = nO(t.deleted);
                    try {
                        for(n.s(); !(o = n.n()).done;)o.value.unselect();
                    } catch (t2) {
                        n.e(t2);
                    } finally{
                        n.f();
                    }
                    return t;
                }
            }
        ]), t;
    }();
    $E = new eO, ZE = new eO;
    var hO = function() {
        function t() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {};
            Xl(this, t), QE.set(this, new aO), JE.set(this, new aO), tO.set(this, void 0), oO(this, tO, e, "f");
        }
        return $l(t, [
            {
                key: "sizeNodes",
                get: function() {
                    return iO(this, QE, "f").size;
                }
            },
            {
                key: "sizeEdges",
                get: function() {
                    return iO(this, JE, "f").size;
                }
            },
            {
                key: "getNodes",
                value: function() {
                    return iO(this, QE, "f").getSelection();
                }
            },
            {
                key: "getEdges",
                value: function() {
                    return iO(this, JE, "f").getSelection();
                }
            },
            {
                key: "addNodes",
                value: function() {
                    var t;
                    (t = iO(this, QE, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "addEdges",
                value: function() {
                    var t;
                    (t = iO(this, JE, "f")).add.apply(t, arguments);
                }
            },
            {
                key: "deleteNodes",
                value: function(t) {
                    iO(this, QE, "f").delete(t);
                }
            },
            {
                key: "deleteEdges",
                value: function(t) {
                    iO(this, JE, "f").delete(t);
                }
            },
            {
                key: "clear",
                value: function() {
                    iO(this, QE, "f").clear(), iO(this, JE, "f").clear();
                }
            },
            {
                key: "commit",
                value: function() {
                    for(var t, e, i = {
                        nodes: iO(this, QE, "f").commit(),
                        edges: iO(this, JE, "f").commit()
                    }, o = arguments.length, n = new Array(o), r = 0; r < o; r++)n[r] = arguments[r];
                    return (t = iO(this, tO, "f")).call.apply(t, su(e = [
                        this,
                        i
                    ]).call(e, n)), i;
                }
            }
        ]), t;
    }();
    function dO(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return lO(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return lO(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function lO(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    QE = new eO, JE = new eO, tO = new eO;
    var cO = function() {
        function t(e, i) {
            var o = this;
            Xl(this, t), this.body = e, this.canvas = i, this._selectionAccumulator = new hO, this.hoverObj = {
                nodes: {},
                edges: {}
            }, this.options = {}, this.defaultOptions = {
                multiselect: !1,
                selectable: !0,
                selectConnectedEdges: !0,
                hoverConnectedEdges: !0
            }, fo(this.options, this.defaultOptions), this.body.emitter.on("_dataChanged", function() {
                o.updateSelection();
            });
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    if (void 0 !== t) Ny([
                        "multiselect",
                        "hoverConnectedEdges",
                        "selectable",
                        "selectConnectedEdges"
                    ], this.options, t);
                }
            },
            {
                key: "selectOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        this.unselectAll(), void 0 !== i && (e = this.selectObject(i)), this.body.emitter.emit("_requestRedraw");
                    }
                    return e;
                }
            },
            {
                key: "selectAdditionalOnPoint",
                value: function(t) {
                    var e = !1;
                    if (!0 === this.options.selectable) {
                        var i = this.getNodeAt(t) || this.getEdgeAt(t);
                        void 0 !== i && (e = !0, !0 === i.isSelected() ? this.deselectObject(i) : this.selectObject(i), this.body.emitter.emit("_requestRedraw"));
                    }
                    return e;
                }
            },
            {
                key: "_initBaseEvent",
                value: function(t, e) {
                    var i = {};
                    return i.pointer = {
                        DOM: {
                            x: e.x,
                            y: e.y
                        },
                        canvas: this.canvas.DOMtoCanvas(e)
                    }, i.event = t, i;
                }
            },
            {
                key: "generateClickEvent",
                value: function(t, e, i, o) {
                    var n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r = this._initBaseEvent(e, i);
                    if (!0 === n) r.nodes = [], r.edges = [];
                    else {
                        var s = this.getSelection();
                        r.nodes = s.nodes, r.edges = s.edges;
                    }
                    void 0 !== o && (r.previousSelection = o), "click" == t && (r.items = this.getClickedItems(i)), void 0 !== e.controlEdge && (r.controlEdge = e.controlEdge), this.body.emitter.emit(t, r);
                }
            },
            {
                key: "selectObject",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.options.selectConnectedEdges;
                    if (void 0 !== t) {
                        if (t instanceof M_) {
                            var i;
                            if (!0 === e) (i = this._selectionAccumulator).addEdges.apply(i, Jc(t.edges));
                            this._selectionAccumulator.addNodes(t);
                        } else this._selectionAccumulator.addEdges(t);
                        return !0;
                    }
                    return !1;
                }
            },
            {
                key: "deselectObject",
                value: function(t) {
                    !0 === t.isSelected() && (t.selected = !1, this._removeFromSelection(t));
                }
            },
            {
                key: "_getAllNodesOverlappingWith",
                value: function(t) {
                    for(var e = [], i = this.body.nodes, o = 0; o < this.body.nodeIndices.length; o++){
                        var n = this.body.nodeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                    return e;
                }
            },
            {
                key: "_pointerToPositionObject",
                value: function(t) {
                    var e = this.canvas.DOMtoCanvas(t);
                    return {
                        left: e.x - 1,
                        top: e.y + 1,
                        right: e.x + 1,
                        bottom: e.y - 1
                    };
                }
            },
            {
                key: "getNodeAt",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this._pointerToPositionObject(t), o = this._getAllNodesOverlappingWith(i);
                    return o.length > 0 ? !0 === e ? this.body.nodes[o[o.length - 1]] : o[o.length - 1] : void 0;
                }
            },
            {
                key: "_getEdgesOverlappingWith",
                value: function(t, e) {
                    for(var i = this.body.edges, o = 0; o < this.body.edgeIndices.length; o++){
                        var n = this.body.edgeIndices[o];
                        i[n].isOverlappingWith(t) && e.push(n);
                    }
                }
            },
            {
                key: "_getAllEdgesOverlappingWith",
                value: function(t) {
                    var e = [];
                    return this._getEdgesOverlappingWith(t, e), e;
                }
            },
            {
                key: "getEdgeAt",
                value: function(t) {
                    for(var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this.canvas.DOMtoCanvas(t), o = 10, n = null, r = this.body.edges, s = 0; s < this.body.edgeIndices.length; s++){
                        var a = this.body.edgeIndices[s], h = r[a];
                        if (h.connected) {
                            var d = h.from.x, l = h.from.y, c = h.to.x, u = h.to.y, f = h.edgeType.getDistanceToEdge(d, l, c, u, i.x, i.y);
                            f < o && (n = a, o = f);
                        }
                    }
                    return null !== n ? !0 === e ? this.body.edges[n] : n : void 0;
                }
            },
            {
                key: "_addToHover",
                value: function(t) {
                    t instanceof M_ ? this.hoverObj.nodes[t.id] = t : this.hoverObj.edges[t.id] = t;
                }
            },
            {
                key: "_removeFromSelection",
                value: function(t) {
                    var e;
                    t instanceof M_ ? (this._selectionAccumulator.deleteNodes(t), (e = this._selectionAccumulator).deleteEdges.apply(e, Jc(t.edges))) : this._selectionAccumulator.deleteEdges(t);
                }
            },
            {
                key: "unselectAll",
                value: function() {
                    this._selectionAccumulator.clear();
                }
            },
            {
                key: "getSelectedNodeCount",
                value: function() {
                    return this._selectionAccumulator.sizeNodes;
                }
            },
            {
                key: "getSelectedEdgeCount",
                value: function() {
                    return this._selectionAccumulator.sizeEdges;
                }
            },
            {
                key: "_hoverConnectedEdges",
                value: function(t) {
                    for(var e = 0; e < t.edges.length; e++){
                        var i = t.edges[e];
                        i.hover = !0, this._addToHover(i);
                    }
                }
            },
            {
                key: "emitBlurEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e);
                    !0 === i.hover && (i.hover = !1, i instanceof M_ ? (o.node = i.id, this.body.emitter.emit("blurNode", o)) : (o.edge = i.id, this.body.emitter.emit("blurEdge", o)));
                }
            },
            {
                key: "emitHoverEvent",
                value: function(t, e, i) {
                    var o = this._initBaseEvent(t, e), n = !1;
                    return !1 === i.hover && (i.hover = !0, this._addToHover(i), n = !0, i instanceof M_ ? (o.node = i.id, this.body.emitter.emit("hoverNode", o)) : (o.edge = i.id, this.body.emitter.emit("hoverEdge", o))), n;
                }
            },
            {
                key: "hoverObject",
                value: function(t, e) {
                    var i = this.getNodeAt(e);
                    void 0 === i && (i = this.getEdgeAt(e));
                    var o = !1;
                    for(var n in this.hoverObj.nodes)Object.prototype.hasOwnProperty.call(this.hoverObj.nodes, n) && (void 0 === i || i instanceof M_ && i.id != n || i instanceof Sx) && (this.emitBlurEvent(t, e, this.hoverObj.nodes[n]), delete this.hoverObj.nodes[n], o = !0);
                    for(var r in this.hoverObj.edges)Object.prototype.hasOwnProperty.call(this.hoverObj.edges, r) && (!0 === o ? (this.hoverObj.edges[r].hover = !1, delete this.hoverObj.edges[r]) : (void 0 === i || i instanceof Sx && i.id != r || i instanceof M_ && !i.hover) && (this.emitBlurEvent(t, e, this.hoverObj.edges[r]), delete this.hoverObj.edges[r], o = !0));
                    if (void 0 !== i) {
                        var s = mu(this.hoverObj.edges).length, a = mu(this.hoverObj.nodes).length;
                        (o || i instanceof Sx && 0 === s && 0 === a || i instanceof M_ && 0 === s && 0 === a) && (o = this.emitHoverEvent(t, e, i)), i instanceof M_ && !0 === this.options.hoverConnectedEdges && this._hoverConnectedEdges(i);
                    }
                    !0 === o && this.body.emitter.emit("_requestRedraw");
                }
            },
            {
                key: "commitWithoutEmitting",
                value: function() {
                    this._selectionAccumulator.commit();
                }
            },
            {
                key: "commitAndEmit",
                value: function(t, e) {
                    var i = !1, o = this._selectionAccumulator.commit(), n = {
                        nodes: o.nodes.previous,
                        edges: o.edges.previous
                    };
                    o.edges.deleted.length > 0 && (this.generateClickEvent("deselectEdge", e, t, n), i = !0), o.nodes.deleted.length > 0 && (this.generateClickEvent("deselectNode", e, t, n), i = !0), o.nodes.added.length > 0 && (this.generateClickEvent("selectNode", e, t), i = !0), o.edges.added.length > 0 && (this.generateClickEvent("selectEdge", e, t), i = !0), !0 === i && this.generateClickEvent("select", e, t);
                }
            },
            {
                key: "getSelection",
                value: function() {
                    return {
                        nodes: this.getSelectedNodeIds(),
                        edges: this.getSelectedEdgeIds()
                    };
                }
            },
            {
                key: "getSelectedNodes",
                value: function() {
                    return this._selectionAccumulator.getNodes();
                }
            },
            {
                key: "getSelectedEdges",
                value: function() {
                    return this._selectionAccumulator.getEdges();
                }
            },
            {
                key: "getSelectedNodeIds",
                value: function() {
                    var t;
                    return vu(t = this._selectionAccumulator.getNodes()).call(t, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "getSelectedEdgeIds",
                value: function() {
                    var t;
                    return vu(t = this._selectionAccumulator.getEdges()).call(t, function(t) {
                        return t.id;
                    });
                }
            },
            {
                key: "setSelection",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (!t || !t.nodes && !t.edges) throw new TypeError("Selection must be an object with nodes and/or edges properties");
                    if ((e.unselectAll || void 0 === e.unselectAll) && this.unselectAll(), t.nodes) {
                        var i, o = dO(t.nodes);
                        try {
                            for(o.s(); !(i = o.n()).done;){
                                var n = i.value, r = this.body.nodes[n];
                                if (!r) throw new RangeError('Node with id "' + n + '" not found');
                                this.selectObject(r, e.highlightEdges);
                            }
                        } catch (t1) {
                            o.e(t1);
                        } finally{
                            o.f();
                        }
                    }
                    if (t.edges) {
                        var s, a = dO(t.edges);
                        try {
                            for(a.s(); !(s = a.n()).done;){
                                var h = s.value, d = this.body.edges[h];
                                if (!d) throw new RangeError('Edge with id "' + h + '" not found');
                                this.selectObject(d);
                            }
                        } catch (t2) {
                            a.e(t2);
                        } finally{
                            a.f();
                        }
                    }
                    this.body.emitter.emit("_requestRedraw"), this._selectionAccumulator.commit();
                }
            },
            {
                key: "selectNodes",
                value: function(t) {
                    var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        nodes: t
                    }, {
                        highlightEdges: e
                    });
                }
            },
            {
                key: "selectEdges",
                value: function(t) {
                    if (!t || void 0 === t.length) throw "Selection must be an array with ids";
                    this.setSelection({
                        edges: t
                    });
                }
            },
            {
                key: "updateSelection",
                value: function() {
                    for(var t in this._selectionAccumulator.getNodes())Object.prototype.hasOwnProperty.call(this.body.nodes, t.id) || this._selectionAccumulator.deleteNodes(t);
                    for(var e in this._selectionAccumulator.getEdges())Object.prototype.hasOwnProperty.call(this.body.edges, e.id) || this._selectionAccumulator.deleteEdges(e);
                }
            },
            {
                key: "getClickedItems",
                value: function(t) {
                    for(var e = this.canvas.DOMtoCanvas(t), i = [], o = this.body.nodeIndices, n = this.body.nodes, r = o.length - 1; r >= 0; r--){
                        var s = n[o[r]].getItemsOnPoint(e);
                        i.push.apply(i, s);
                    }
                    for(var a = this.body.edgeIndices, h = this.body.edges, d = a.length - 1; d >= 0; d--){
                        var l = h[a[d]].getItemsOnPoint(e);
                        i.push.apply(i, l);
                    }
                    return i;
                }
            }
        ]), t;
    }(), uO = vh, fO = Math.floor, pO = function(t, e) {
        var i = t.length, o = fO(i / 2);
        return i < 8 ? vO(t, e) : gO(t, pO(uO(t, 0, o), e), pO(uO(t, o), e), e);
    }, vO = function(t, e) {
        for(var i, o, n = t.length, r = 1; r < n;){
            for(o = r, i = t[r]; o && e(t[o - 1], i) > 0;)t[o] = t[--o];
            o !== r++ && (t[o] = i);
        }
        return t;
    }, gO = function(t, e, i, o) {
        for(var n = e.length, r = i.length, s = 0, a = 0; s < n || a < r;)t[s + a] = s < n && a < r ? o(e[s], i[a]) <= 0 ? e[s++] : i[a++] : s < n ? e[s++] : i[a++];
        return t;
    }, yO = pO, mO = et.match(/firefox\/(\d+)/i), bO = !!mO && +mO[1], wO = /MSIE|Trident/.test(et), kO = et.match(/AppleWebKit\/(\d+)\./), _O = !!kO && +kO[1], xO = xi, EO = y, OO = Et, CO = Lt, SO = zi, TO = on, MO = r, PO = yO, DO = Ou, BO = bO, IO = wO, zO = ht, FO = _O, NO = [], AO = EO(NO.sort), RO = EO(NO.push), jO = MO(function() {
        NO.sort(void 0);
    }), LO = MO(function() {
        NO.sort(null);
    }), HO = DO("sort"), WO = !MO(function() {
        if (zO) return zO < 70;
        if (!(BO && BO > 3)) {
            if (IO) return !0;
            if (FO) return FO < 603;
            var t, e, i, o, n = "";
            for(t = 65; t < 76; t++){
                switch(e = String.fromCharCode(t), t){
                    case 66:
                    case 69:
                    case 70:
                    case 72:
                        i = 3;
                        break;
                    case 68:
                    case 71:
                        i = 4;
                        break;
                    default:
                        i = 2;
                }
                for(o = 0; o < 47; o++)NO.push({
                    k: e + o,
                    v: i
                });
            }
            for(NO.sort(function(t, e) {
                return e.v - t.v;
            }), o = 0; o < NO.length; o++)e = NO[o].k.charAt(0), n.charAt(n.length - 1) !== e && (n += e);
            return "DGBEFHACIJK" !== n;
        }
    });
    xO({
        target: "Array",
        proto: !0,
        forced: jO || !LO || !HO || !WO
    }, {
        sort: function(t) {
            void 0 !== t && OO(t);
            var e = CO(this);
            if (WO) return void 0 === t ? AO(e) : AO(e, t);
            var i, o, n = [], r = SO(e);
            for(o = 0; o < r; o++)o in e && RO(n, e[o]);
            for(PO(n, function(t) {
                return function(e, i) {
                    return void 0 === i ? -1 : void 0 === e ? 1 : void 0 !== t ? +t(e, i) || 0 : TO(e) > TO(i) ? 1 : -1;
                };
            }(t)), i = n.length, o = 0; o < i;)e[o] = n[o++];
            for(; o < r;)delete e[o++];
            return e;
        }
    });
    var VO = Mo("Array").sort, qO = tt, UO = VO, YO = Array.prototype, XO = function(t) {
        var e = t.sort;
        return t === YO || qO(YO, t) && e === YO.sort ? UO : e;
    }, GO = XO, KO = Et, $O = Lt, ZO = L, QO = zi, JO = n.TypeError, tC = function(t) {
        return function(e, i, o, n) {
            KO(i);
            var r = $O(e), s = ZO(r), a = QO(r), h = t ? a - 1 : 0, d = t ? -1 : 1;
            if (o < 2) for(;;){
                if (h in s) {
                    n = s[h], h += d;
                    break;
                }
                if (h += d, t ? h < 0 : a <= h) throw JO("Reduce of empty array with no initial value");
            }
            for(; t ? h >= 0 : a > h; h += d)h in s && (n = i(n, s[h], h, r));
            return n;
        };
    }, eC = {
        left: tC(!1),
        right: tC(!0)
    }, iC = "process" == z(n.process), oC = eC.left, nC = ht, rC = iC;
    xi({
        target: "Array",
        proto: !0,
        forced: !Ou("reduce") || !rC && nC > 79 && nC < 83
    }, {
        reduce: function(t) {
            var e = arguments.length;
            return oC(this, t, e, e > 1 ? arguments[1] : void 0);
        }
    });
    var sC = Mo("Array").reduce, aC = tt, hC = sC, dC = Array.prototype, lC = function(t) {
        var e = t.reduce;
        return t === dC || aC(dC, t) && e === dC.reduce ? hC : e;
    }, cC = lC, uC = {};
    !function(t) {
        !function(t) {
            function e(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
            }
            t.__esModule = !0, t.sort = v;
            var i = 32, o = 7, n = 256, r = [
                1,
                10,
                100,
                1e3,
                1e4,
                1e5,
                1e6,
                1e7,
                1e8,
                1e9
            ];
            function s(t) {
                return t < 1e5 ? t < 100 ? t < 10 ? 0 : 1 : t < 1e4 ? t < 1e3 ? 2 : 3 : 4 : t < 1e7 ? t < 1e6 ? 5 : 6 : t < 1e9 ? t < 1e8 ? 7 : 8 : 9;
            }
            function a(t, e) {
                if (t === e) return 0;
                if (~~t === t && ~~e === e) {
                    if (0 === t || 0 === e) return t < e ? -1 : 1;
                    if (t < 0 || e < 0) {
                        if (e >= 0) return -1;
                        if (t >= 0) return 1;
                        t = -t, e = -e;
                    }
                    var i = s(t), o = s(e), n = 0;
                    return i < o ? (t *= r[o - i - 1], e /= 10, n = -1) : i > o && (e *= r[i - o - 1], t /= 10, n = 1), t === e ? n : t < e ? -1 : 1;
                }
                var a = String(t), h = String(e);
                return a === h ? 0 : a < h ? -1 : 1;
            }
            function h(t) {
                for(var e = 0; t >= i;)e |= 1 & t, t >>= 1;
                return t + e;
            }
            function d(t, e, i, o) {
                var n = e + 1;
                if (n === i) return 1;
                if (o(t[n++], t[e]) < 0) {
                    for(; n < i && o(t[n], t[n - 1]) < 0;)n++;
                    l(t, e, n);
                } else for(; n < i && o(t[n], t[n - 1]) >= 0;)n++;
                return n - e;
            }
            function l(t, e, i) {
                for(i--; e < i;){
                    var o = t[e];
                    t[e++] = t[i], t[i--] = o;
                }
            }
            function c(t, e, i, o, n) {
                for(o === e && o++; o < i; o++){
                    for(var r = t[o], s = e, a = o; s < a;){
                        var h = s + a >>> 1;
                        n(r, t[h]) < 0 ? a = h : s = h + 1;
                    }
                    var d = o - s;
                    switch(d){
                        case 3:
                            t[s + 3] = t[s + 2];
                        case 2:
                            t[s + 2] = t[s + 1];
                        case 1:
                            t[s + 1] = t[s];
                            break;
                        default:
                            for(; d > 0;)t[s + d] = t[s + d - 1], d--;
                    }
                    t[s] = r;
                }
            }
            function u(t, e, i, o, n, r) {
                var s = 0, a = 0, h = 1;
                if (r(t, e[i + n]) > 0) {
                    for(a = o - n; h < a && r(t, e[i + n + h]) > 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a), s += n, h += n;
                } else {
                    for(a = n + 1; h < a && r(t, e[i + n - h]) <= 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a);
                    var d = s;
                    s = n - h, h = n - d;
                }
                for(s++; s < h;){
                    var l = s + (h - s >>> 1);
                    r(t, e[i + l]) > 0 ? s = l + 1 : h = l;
                }
                return h;
            }
            function f(t, e, i, o, n, r) {
                var s = 0, a = 0, h = 1;
                if (r(t, e[i + n]) < 0) {
                    for(a = n + 1; h < a && r(t, e[i + n - h]) < 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a);
                    var d = s;
                    s = n - h, h = n - d;
                } else {
                    for(a = o - n; h < a && r(t, e[i + n + h]) >= 0;)s = h, (h = 1 + (h << 1)) <= 0 && (h = a);
                    h > a && (h = a), s += n, h += n;
                }
                for(s++; s < h;){
                    var l = s + (h - s >>> 1);
                    r(t, e[i + l]) < 0 ? h = l : s = l + 1;
                }
                return h;
            }
            var p = function() {
                function t(i, r) {
                    e(this, t), this.array = null, this.compare = null, this.minGallop = o, this.length = 0, this.tmpStorageLength = n, this.stackLength = 0, this.runStart = null, this.runLength = null, this.stackSize = 0, this.array = i, this.compare = r, this.length = i.length, this.length < 2 * n && (this.tmpStorageLength = this.length >>> 1), this.tmp = new Array(this.tmpStorageLength), this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40, this.runStart = new Array(this.stackLength), this.runLength = new Array(this.stackLength);
                }
                return t.prototype.pushRun = function(t, e) {
                    this.runStart[this.stackSize] = t, this.runLength[this.stackSize] = e, this.stackSize += 1;
                }, t.prototype.mergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t = this.stackSize - 2;
                        if (t >= 1 && this.runLength[t - 1] <= this.runLength[t] + this.runLength[t + 1] || t >= 2 && this.runLength[t - 2] <= this.runLength[t] + this.runLength[t - 1]) this.runLength[t - 1] < this.runLength[t + 1] && t--;
                        else if (this.runLength[t] > this.runLength[t + 1]) break;
                        this.mergeAt(t);
                    }
                }, t.prototype.forceMergeRuns = function() {
                    for(; this.stackSize > 1;){
                        var t = this.stackSize - 2;
                        t > 0 && this.runLength[t - 1] < this.runLength[t + 1] && t--, this.mergeAt(t);
                    }
                }, t.prototype.mergeAt = function(t) {
                    var e = this.compare, i = this.array, o = this.runStart[t], n = this.runLength[t], r = this.runStart[t + 1], s = this.runLength[t + 1];
                    this.runLength[t] = n + s, t === this.stackSize - 3 && (this.runStart[t + 1] = this.runStart[t + 2], this.runLength[t + 1] = this.runLength[t + 2]), this.stackSize--;
                    var a = f(i[r], i, o, n, 0, e);
                    o += a, 0 != (n -= a) && 0 !== (s = u(i[o + n - 1], i, r, s, s - 1, e)) && (n <= s ? this.mergeLow(o, n, r, s) : this.mergeHigh(o, n, r, s));
                }, t.prototype.mergeLow = function(t, e, i, n) {
                    var r = this.compare, s = this.array, a = this.tmp, h = 0;
                    for(h = 0; h < e; h++)a[h] = s[t + h];
                    var d = 0, l = i, c = t;
                    if (s[c++] = s[l++], 0 != --n) {
                        if (1 !== e) {
                            for(var p = this.minGallop;;){
                                var v = 0, g = 0, y = !1;
                                do {
                                    if (r(s[l], a[d]) < 0) {
                                        if (s[c++] = s[l++], g++, v = 0, 0 == --n) {
                                            y = !0;
                                            break;
                                        }
                                    } else if (s[c++] = a[d++], v++, g = 0, 1 == --e) {
                                        y = !0;
                                        break;
                                    }
                                }while ((v | g) < p);
                                if (y) break;
                                do {
                                    if (0 !== (v = f(s[l], a, d, e, 0, r))) {
                                        for(h = 0; h < v; h++)s[c + h] = a[d + h];
                                        if (c += v, d += v, (e -= v) <= 1) {
                                            y = !0;
                                            break;
                                        }
                                    }
                                    if (s[c++] = s[l++], 0 == --n) {
                                        y = !0;
                                        break;
                                    }
                                    if (0 !== (g = u(a[d], s, l, n, 0, r))) {
                                        for(h = 0; h < g; h++)s[c + h] = s[l + h];
                                        if (c += g, l += g, 0 == (n -= g)) {
                                            y = !0;
                                            break;
                                        }
                                    }
                                    if (s[c++] = a[d++], 1 == --e) {
                                        y = !0;
                                        break;
                                    }
                                    p--;
                                }while (v >= o || g >= o);
                                if (y) break;
                                p < 0 && (p = 0), p += 2;
                            }
                            if (this.minGallop = p, p < 1 && (this.minGallop = 1), 1 === e) {
                                for(h = 0; h < n; h++)s[c + h] = s[l + h];
                                s[c + n] = a[d];
                            } else {
                                if (0 === e) throw new Error("mergeLow preconditions were not respected");
                                for(h = 0; h < e; h++)s[c + h] = a[d + h];
                            }
                        } else {
                            for(h = 0; h < n; h++)s[c + h] = s[l + h];
                            s[c + n] = a[d];
                        }
                    } else for(h = 0; h < e; h++)s[c + h] = a[d + h];
                }, t.prototype.mergeHigh = function(t, e, i, n) {
                    var r = this.compare, s = this.array, a = this.tmp, h = 0;
                    for(h = 0; h < n; h++)a[h] = s[i + h];
                    var d = t + e - 1, l = n - 1, c = i + n - 1, p = 0, v = 0;
                    if (s[c--] = s[d--], 0 != --e) {
                        if (1 !== n) {
                            for(var g = this.minGallop;;){
                                var y = 0, m = 0, b = !1;
                                do {
                                    if (r(a[l], s[d]) < 0) {
                                        if (s[c--] = s[d--], y++, m = 0, 0 == --e) {
                                            b = !0;
                                            break;
                                        }
                                    } else if (s[c--] = a[l--], m++, y = 0, 1 == --n) {
                                        b = !0;
                                        break;
                                    }
                                }while ((y | m) < g);
                                if (b) break;
                                do {
                                    if (0 != (y = e - f(a[l], s, t, e, e - 1, r))) {
                                        for(e -= y, v = 1 + (c -= y), p = 1 + (d -= y), h = y - 1; h >= 0; h--)s[v + h] = s[p + h];
                                        if (0 === e) {
                                            b = !0;
                                            break;
                                        }
                                    }
                                    if (s[c--] = a[l--], 1 == --n) {
                                        b = !0;
                                        break;
                                    }
                                    if (0 != (m = n - u(s[d], a, 0, n, n - 1, r))) {
                                        for(n -= m, v = 1 + (c -= m), p = 1 + (l -= m), h = 0; h < m; h++)s[v + h] = a[p + h];
                                        if (n <= 1) {
                                            b = !0;
                                            break;
                                        }
                                    }
                                    if (s[c--] = s[d--], 0 == --e) {
                                        b = !0;
                                        break;
                                    }
                                    g--;
                                }while (y >= o || m >= o);
                                if (b) break;
                                g < 0 && (g = 0), g += 2;
                            }
                            if (this.minGallop = g, g < 1 && (this.minGallop = 1), 1 === n) {
                                for(v = 1 + (c -= e), p = 1 + (d -= e), h = e - 1; h >= 0; h--)s[v + h] = s[p + h];
                                s[c] = a[l];
                            } else {
                                if (0 === n) throw new Error("mergeHigh preconditions were not respected");
                                for(p = c - (n - 1), h = 0; h < n; h++)s[p + h] = a[h];
                            }
                        } else {
                            for(v = 1 + (c -= e), p = 1 + (d -= e), h = e - 1; h >= 0; h--)s[v + h] = s[p + h];
                            s[c] = a[l];
                        }
                    } else for(p = c - (n - 1), h = 0; h < n; h++)s[p + h] = a[h];
                }, t;
            }();
            function v(t, e, o, n) {
                if (!Array.isArray(t)) throw new TypeError("Can only sort arrays");
                e ? "function" != typeof e && (n = o, o = e, e = a) : e = a, o || (o = 0), n || (n = t.length);
                var r = n - o;
                if (!(r < 2)) {
                    var s = 0;
                    if (r < i) c(t, o, n, o + (s = d(t, o, n, e)), e);
                    else {
                        var l = new p(t, e), u = h(r);
                        do {
                            if ((s = d(t, o, n, e)) < u) {
                                var f = r;
                                f > u && (f = u), c(t, o, o + f, o + s, e), s = f;
                            }
                            l.pushRun(o, s), l.mergeRuns(), r -= s, o += s;
                        }while (0 !== r);
                        l.forceMergeRuns();
                    }
                }
            }
        }(t);
    }(uC);
    var fC = uC;
    function pC(t) {
        var e = function() {
            if ("undefined" == typeof Reflect || !zk) return !1;
            if (zk.sham) return !1;
            if ("function" == typeof Proxy) return !0;
            try {
                return Boolean.prototype.valueOf.call(zk(Boolean, [], function() {})), !0;
            } catch (t) {
                return !1;
            }
        }();
        return function() {
            var i, o = Hk(t);
            if (e) {
                var n = Hk(this).constructor;
                i = zk(o, arguments, n);
            } else i = o.apply(this, arguments);
            return jk(this, i);
        };
    }
    var vC = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, [
            {
                key: "abstract",
                value: function() {
                    throw new Error("Can't instantiate abstract class!");
                }
            },
            {
                key: "fake_use",
                value: function() {}
            },
            {
                key: "curveType",
                value: function() {
                    return this.abstract();
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    this.fake_use(t, e, i), this.abstract();
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    return this.fake_use(t), this.abstract();
                }
            },
            {
                key: "sort",
                value: function(t) {
                    this.fake_use(t), this.abstract();
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.fake_use(t, e), this.abstract();
                }
            }
        ]), t;
    }(), gC = function(t) {
        Rk(i, t);
        var e = pC(i);
        function i(t) {
            var o;
            return Xl(this, i), (o = e.call(this)).layout = t, o;
        }
        return $l(i, [
            {
                key: "curveType",
                value: function() {
                    return "horizontal";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.x;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.x = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_x,
                        max: e.max_x
                    };
                }
            },
            {
                key: "sort",
                value: function(t) {
                    fC.sort(t, function(t, e) {
                        return t.x - e.x;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.y = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.y = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].x += e;
                }
            }
        ]), i;
    }(vC), yC = function(t) {
        Rk(i, t);
        var e = pC(i);
        function i(t) {
            var o;
            return Xl(this, i), (o = e.call(this)).layout = t, o;
        }
        return $l(i, [
            {
                key: "curveType",
                value: function() {
                    return "vertical";
                }
            },
            {
                key: "getPosition",
                value: function(t) {
                    return t.y;
                }
            },
            {
                key: "setPosition",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
                    void 0 !== i && this.layout.hierarchical.addToOrdering(t, i), t.y = e;
                }
            },
            {
                key: "getTreeSize",
                value: function(t) {
                    var e = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, t);
                    return {
                        min: e.min_y,
                        max: e.max_y
                    };
                }
            },
            {
                key: "sort",
                value: function(t) {
                    fC.sort(t, function(t, e) {
                        return t.y - e.y;
                    });
                }
            },
            {
                key: "fix",
                value: function(t, e) {
                    t.x = this.layout.options.hierarchical.levelSeparation * e, t.options.fixed.x = !0;
                }
            },
            {
                key: "shift",
                value: function(t, e) {
                    this.layout.body.nodes[t].y += e;
                }
            }
        ]), i;
    }(vC), mC = Vh.every;
    xi({
        target: "Array",
        proto: !0,
        forced: !Ou("every")
    }, {
        every: function(t) {
            return mC(this, t, arguments.length > 1 ? arguments[1] : void 0);
        }
    });
    var bC = Mo("Array").every, wC = tt, kC = bC, _C = Array.prototype, xC = function(t) {
        var e = t.every;
        return t === _C || wC(_C, t) && e === _C.every ? kC : e;
    }, EC = xC;
    function OC(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return CC(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return CC(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function CC(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    function SC(t, e) {
        var i = new uE;
        return Fu(t).call(t, function(t) {
            var e;
            Fu(e = t.edges).call(e, function(t) {
                t.connected && i.add(t);
            });
        }), Fu(i).call(i, function(t) {
            var i = t.from.id, o = t.to.id;
            null == e[i] && (e[i] = 0), (null == e[o] || e[i] >= e[o]) && (e[o] = e[i] + 1);
        }), e;
    }
    function TC(t, e, i, o) {
        var n, r, s = Hp(null), a = cC(n = Jc(lk(o).call(o))).call(n, function(t, e) {
            return t + 1 + e.edges.length;
        }, 0), h = i + "Id", d = "to" === i ? 1 : -1, l = OC(o);
        try {
            var c = function() {
                var n = $c(r.value, 2), l = n[0], c = n[1];
                if (!o.has(l) || !t(c)) return "continue";
                s[l] = 0;
                for(var u = [
                    c
                ], f = 0, p = void 0, v = function() {
                    var t, n;
                    if (!o.has(l)) return "continue";
                    var r = s[p.id] + d;
                    if (Fu(t = Yf(n = p.edges).call(n, function(t) {
                        return t.connected && t.to !== t.from && t[i] !== p && o.has(t.toId) && o.has(t.fromId);
                    })).call(t, function(t) {
                        var o = t[h], n = s[o];
                        (null == n || e(r, n)) && (s[o] = r, u.push(t[i]));
                    }), f > a) return {
                        v: {
                            v: SC(o, s)
                        }
                    };
                    ++f;
                }; p = u.pop();){
                    var g = v();
                    if ("continue" !== g && "object" === Qc(g)) return g.v;
                }
            };
            for(l.s(); !(r = l.n()).done;){
                var u = c();
                if ("continue" !== u && "object" === Qc(u)) return u.v;
            }
        } catch (t1) {
            l.e(t1);
        } finally{
            l.f();
        }
        return s;
    }
    var MC = function() {
        function t() {
            Xl(this, t), this.childrenReference = {}, this.parentReference = {}, this.trees = {}, this.distributionOrdering = {}, this.levels = {}, this.distributionIndex = {}, this.isTree = !1, this.treeIndex = -1;
        }
        return $l(t, [
            {
                key: "addRelation",
                value: function(t, e) {
                    void 0 === this.childrenReference[t] && (this.childrenReference[t] = []), this.childrenReference[t].push(e), void 0 === this.parentReference[e] && (this.parentReference[e] = []), this.parentReference[e].push(t);
                }
            },
            {
                key: "checkIfTree",
                value: function() {
                    for(var t in this.parentReference)if (this.parentReference[t].length > 1) return void (this.isTree = !1);
                    this.isTree = !0;
                }
            },
            {
                key: "numTrees",
                value: function() {
                    return this.treeIndex + 1;
                }
            },
            {
                key: "setTreeIndex",
                value: function(t, e) {
                    void 0 !== e && void 0 === this.trees[t.id] && (this.trees[t.id] = e, this.treeIndex = Math.max(e, this.treeIndex));
                }
            },
            {
                key: "ensureLevel",
                value: function(t) {
                    void 0 === this.levels[t] && (this.levels[t] = 0);
                }
            },
            {
                key: "getMaxLevel",
                value: function(t) {
                    var e = this, i = {};
                    return function t(o) {
                        if (void 0 !== i[o]) return i[o];
                        var n = e.levels[o];
                        if (e.childrenReference[o]) {
                            var r = e.childrenReference[o];
                            if (r.length > 0) for(var s = 0; s < r.length; s++)n = Math.max(n, t(r[s]));
                        }
                        return i[o] = n, n;
                    }(t);
                }
            },
            {
                key: "levelDownstream",
                value: function(t, e) {
                    void 0 === this.levels[e.id] && (void 0 === this.levels[t.id] && (this.levels[t.id] = 0), this.levels[e.id] = this.levels[t.id] + 1);
                }
            },
            {
                key: "setMinLevelToZero",
                value: function(t) {
                    var e = 1e9;
                    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && void 0 !== this.levels[i] && (e = Math.min(this.levels[i], e));
                    for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && void 0 !== this.levels[o] && (this.levels[o] -= e);
                }
            },
            {
                key: "getTreeSize",
                value: function(t, e) {
                    var i = 1e9, o = -1000000000, n = 1e9, r = -1000000000;
                    for(var s in this.trees)if (Object.prototype.hasOwnProperty.call(this.trees, s) && this.trees[s] === e) {
                        var a = t[s];
                        i = Math.min(a.x, i), o = Math.max(a.x, o), n = Math.min(a.y, n), r = Math.max(a.y, r);
                    }
                    return {
                        min_x: i,
                        max_x: o,
                        min_y: n,
                        max_y: r
                    };
                }
            },
            {
                key: "hasSameParent",
                value: function(t, e) {
                    var i = this.parentReference[t.id], o = this.parentReference[e.id];
                    if (void 0 === i || void 0 === o) return !1;
                    for(var n = 0; n < i.length; n++)for(var r = 0; r < o.length; r++)if (i[n] == o[r]) return !0;
                    return !1;
                }
            },
            {
                key: "inSameSubNetwork",
                value: function(t, e) {
                    return this.trees[t.id] === this.trees[e.id];
                }
            },
            {
                key: "getLevels",
                value: function() {
                    return mu(this.distributionOrdering);
                }
            },
            {
                key: "addToOrdering",
                value: function(t, e) {
                    void 0 === this.distributionOrdering[e] && (this.distributionOrdering[e] = []);
                    var i = !1, o = this.distributionOrdering[e];
                    for(var n in o)if (o[n] === t) {
                        i = !0;
                        break;
                    }
                    i || (this.distributionOrdering[e].push(t), this.distributionIndex[t.id] = this.distributionOrdering[e].length - 1);
                }
            }
        ]), t;
    }(), PC = function() {
        function t(e) {
            Xl(this, t), this.body = e, this._resetRNG(Math.random() + ":" + xu()), this.setPhysics = !1, this.options = {}, this.optionsBackup = {
                physics: {}
            }, this.defaultOptions = {
                randomSeed: void 0,
                improvedLayout: !0,
                clusterThreshold: 150,
                hierarchical: {
                    enabled: !1,
                    levelSeparation: 150,
                    nodeSpacing: 100,
                    treeSpacing: 200,
                    blockShifting: !0,
                    edgeMinimization: !0,
                    parentCentralization: !0,
                    direction: "UD",
                    sortMethod: "hubsize"
                }
            }, fo(this.options, this.defaultOptions), this.bindEventListeners();
        }
        return $l(t, [
            {
                key: "bindEventListeners",
                value: function() {
                    var t = this;
                    this.body.emitter.on("_dataChanged", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_dataLoaded", function() {
                        t.layoutNetwork();
                    }), this.body.emitter.on("_resetHierarchicalLayout", function() {
                        t.setupHierarchicalLayout();
                    }), this.body.emitter.on("_adjustEdgesForHierarchicalLayout", function() {
                        if (!0 === t.options.hierarchical.enabled) {
                            var e = t.direction.curveType();
                            t.body.emitter.emit("_forceDisableDynamicCurves", e, !1);
                        }
                    });
                }
            },
            {
                key: "setOptions",
                value: function(t, e) {
                    if (void 0 !== t) {
                        var i = this.options.hierarchical, o = i.enabled;
                        if (Ny([
                            "randomSeed",
                            "improvedLayout",
                            "clusterThreshold"
                        ], this.options, t), tm(this.options, t, "hierarchical"), void 0 !== t.randomSeed && this._resetRNG(t.randomSeed), !0 === i.enabled) return !0 === o && this.body.emitter.emit("refresh", !0), "RL" === i.direction || "DU" === i.direction ? i.levelSeparation > 0 && (i.levelSeparation *= -1) : i.levelSeparation < 0 && (i.levelSeparation *= -1), this.setDirectionStrategy(), this.body.emitter.emit("_resetHierarchicalLayout"), this.adaptAllOptionsForHierarchicalLayout(e);
                        if (!0 === o) return this.body.emitter.emit("refresh"), Ry(e, this.optionsBackup);
                    }
                    return e;
                }
            },
            {
                key: "_resetRNG",
                value: function(t) {
                    this.initialRandomSeed = t, this._rng = _y(this.initialRandomSeed);
                }
            },
            {
                key: "adaptAllOptionsForHierarchicalLayout",
                value: function(t) {
                    if (!0 === this.options.hierarchical.enabled) {
                        var e = this.optionsBackup.physics;
                        void 0 === t.physics || !0 === t.physics ? (t.physics = {
                            enabled: void 0 === e.enabled || e.enabled,
                            solver: "hierarchicalRepulsion"
                        }, e.enabled = void 0 === e.enabled || e.enabled, e.solver = e.solver || "barnesHut") : "object" === Qc(t.physics) ? (e.enabled = void 0 === t.physics.enabled || t.physics.enabled, e.solver = t.physics.solver || "barnesHut", t.physics.solver = "hierarchicalRepulsion") : !1 !== t.physics && (e.solver = "barnesHut", t.physics = {
                            solver: "hierarchicalRepulsion"
                        });
                        var i = this.direction.curveType();
                        if (void 0 === t.edges) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges = {
                            smooth: !1
                        };
                        else if (void 0 === t.edges.smooth) this.optionsBackup.edges = {
                            smooth: {
                                enabled: !0,
                                type: "dynamic"
                            }
                        }, t.edges.smooth = !1;
                        else if ("boolean" == typeof t.edges.smooth) this.optionsBackup.edges = {
                            smooth: t.edges.smooth
                        }, t.edges.smooth = {
                            enabled: t.edges.smooth,
                            type: i
                        };
                        else {
                            var o = t.edges.smooth;
                            void 0 !== o.type && "dynamic" !== o.type && (i = o.type), this.optionsBackup.edges = {
                                smooth: {
                                    enabled: void 0 === o.enabled || o.enabled,
                                    type: void 0 === o.type ? "dynamic" : o.type,
                                    roundness: void 0 === o.roundness ? .5 : o.roundness,
                                    forceDirection: void 0 !== o.forceDirection && o.forceDirection
                                }
                            }, t.edges.smooth = {
                                enabled: void 0 === o.enabled || o.enabled,
                                type: i,
                                roundness: void 0 === o.roundness ? .5 : o.roundness,
                                forceDirection: void 0 !== o.forceDirection && o.forceDirection
                            };
                        }
                        this.body.emitter.emit("_forceDisableDynamicCurves", i);
                    }
                    return t;
                }
            },
            {
                key: "positionInitially",
                value: function(t) {
                    if (!0 !== this.options.hierarchical.enabled) {
                        this._resetRNG(this.initialRandomSeed);
                        for(var e = t.length + 50, i = 0; i < t.length; i++){
                            var o = t[i], n = 2 * Math.PI * this._rng();
                            void 0 === o.x && (o.x = e * Math.cos(n)), void 0 === o.y && (o.y = e * Math.sin(n));
                        }
                    }
                }
            },
            {
                key: "layoutNetwork",
                value: function() {
                    if (!0 !== this.options.hierarchical.enabled && !0 === this.options.improvedLayout) {
                        for(var t = this.body.nodeIndices, e = 0, i = 0; i < t.length; i++)!0 === this.body.nodes[t[i]].predefinedPosition && (e += 1);
                        if (e < .5 * t.length) {
                            var o = 0, n = this.options.clusterThreshold, r = {
                                clusterNodeProperties: {
                                    shape: "ellipse",
                                    label: "",
                                    group: "",
                                    font: {
                                        multi: !1
                                    }
                                },
                                clusterEdgeProperties: {
                                    label: "",
                                    font: {
                                        multi: !1
                                    },
                                    smooth: {
                                        enabled: !1
                                    }
                                }
                            };
                            if (t.length > n) {
                                for(var s = t.length; t.length > n && o <= 10;){
                                    o += 1;
                                    var a = t.length;
                                    if (o % 3 == 0 ? this.body.modules.clustering.clusterBridges(r) : this.body.modules.clustering.clusterOutliers(r), a == t.length && o % 3 != 0) return this._declusterAll(), this.body.emitter.emit("_layoutFailed"), void console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");
                                }
                                this.body.modules.kamadaKawai.setOptions({
                                    springLength: Math.max(150, 2 * s)
                                });
                            }
                            o > 10 && console.info("The clustering didn't succeed within the amount of interations allowed, progressing with partial result."), this.body.modules.kamadaKawai.solve(t, this.body.edgeIndices, !0), this._shiftToCenter();
                            for(var h = 0; h < t.length; h++){
                                var d = this.body.nodes[t[h]];
                                !1 === d.predefinedPosition && (d.x += 70 * (.5 - this._rng()), d.y += 70 * (.5 - this._rng()));
                            }
                            this._declusterAll(), this.body.emitter.emit("_repositionBezierNodes");
                        }
                    }
                }
            },
            {
                key: "_shiftToCenter",
                value: function() {
                    for(var t = Gx.getRangeCore(this.body.nodes, this.body.nodeIndices), e = Gx.findCenter(t), i = 0; i < this.body.nodeIndices.length; i++){
                        var o = this.body.nodes[this.body.nodeIndices[i]];
                        o.x -= e.x, o.y -= e.y;
                    }
                }
            },
            {
                key: "_declusterAll",
                value: function() {
                    for(var t = !0; !0 === t;){
                        t = !1;
                        for(var e = 0; e < this.body.nodeIndices.length; e++)!0 === this.body.nodes[this.body.nodeIndices[e]].isCluster && (t = !0, this.body.modules.clustering.openCluster(this.body.nodeIndices[e], {}, !1));
                        !0 === t && this.body.emitter.emit("_dataChanged");
                    }
                }
            },
            {
                key: "getSeed",
                value: function() {
                    return this.initialRandomSeed;
                }
            },
            {
                key: "setupHierarchicalLayout",
                value: function() {
                    if (!0 === this.options.hierarchical.enabled && this.body.nodeIndices.length > 0) {
                        var t, e, i = !1, o = !1;
                        for(e in this.lastNodeOnLevel = {}, this.hierarchical = new MC, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, e) && (void 0 !== (t = this.body.nodes[e]).options.level ? (i = !0, this.hierarchical.levels[e] = t.options.level) : o = !0);
                        if (!0 === o && !0 === i) throw new Error("To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.");
                        if (!0 === o) {
                            var n = this.options.hierarchical.sortMethod;
                            "hubsize" === n ? this._determineLevelsByHubsize() : "directed" === n ? this._determineLevelsDirected() : "custom" === n && this._determineLevelsCustomCallback();
                        }
                        for(var r in this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, r) && this.hierarchical.ensureLevel(r);
                        var s = this._getDistribution();
                        this._generateMap(), this._placeNodesByHierarchy(s), this._condenseHierarchy(), this._shiftToCenter();
                    }
                }
            },
            {
                key: "_condenseHierarchy",
                value: function() {
                    var t = this, e = !1, i = {}, o = function(e, i) {
                        var o = t.hierarchical.trees;
                        for(var n in o)Object.prototype.hasOwnProperty.call(o, n) && o[n] === e && t.direction.shift(n, i);
                    }, n = function() {
                        for(var e = [], i = 0; i < t.hierarchical.numTrees(); i++)e.push(t.direction.getTreeSize(i));
                        return e;
                    }, r = function e(i, o) {
                        if (!o[i.id] && (o[i.id] = !0, t.hierarchical.childrenReference[i.id])) {
                            var n = t.hierarchical.childrenReference[i.id];
                            if (n.length > 0) for(var r = 0; r < n.length; r++)e(t.body.nodes[n[r]], o);
                        }
                    }, s = function(e) {
                        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e9, o = 1e9, n = 1e9, r = 1e9, s = -1000000000;
                        for(var a in e)if (Object.prototype.hasOwnProperty.call(e, a)) {
                            var h = t.body.nodes[a], d = t.hierarchical.levels[h.id], l = t.direction.getPosition(h), c = t._getSpaceAroundNode(h, e), u = $c(c, 2), f = u[0], p = u[1];
                            o = Math.min(f, o), n = Math.min(p, n), d <= i && (r = Math.min(l, r), s = Math.max(l, s));
                        }
                        return [
                            r,
                            s,
                            o,
                            n
                        ];
                    }, a = function(e, i) {
                        var o = t.hierarchical.getMaxLevel(e.id), n = t.hierarchical.getMaxLevel(i.id);
                        return Math.min(o, n);
                    }, h = function(e, i, o) {
                        for(var n = t.hierarchical, r = 0; r < i.length; r++){
                            var s = i[r], a = n.distributionOrdering[s];
                            if (a.length > 1) for(var h = 0; h < a.length - 1; h++){
                                var d = a[h], l = a[h + 1];
                                n.hasSameParent(d, l) && n.inSameSubNetwork(d, l) && e(d, l, o);
                            }
                        }
                    }, d = function(i, o) {
                        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], h = t.direction.getPosition(i), d = t.direction.getPosition(o), l = Math.abs(d - h), c = t.options.hierarchical.nodeSpacing;
                        if (l > c) {
                            var u = {}, f = {};
                            r(i, u), r(o, f);
                            var p = a(i, o), v = s(u, p), g = s(f, p), y = v[1], m = g[0], b = g[2], w = Math.abs(y - m);
                            if (w > c) {
                                var k = y - m + c;
                                k < -b + c && (k = -b + c), k < 0 && (t._shiftBlock(o.id, k), e = !0, !0 === n && t._centerParent(o));
                            }
                        }
                    }, l = function(o, n) {
                        for(var a = n.id, h = n.edges, d = t.hierarchical.levels[n.id], l = t.options.hierarchical.levelSeparation * t.options.hierarchical.levelSeparation, c = {}, u = [], f = 0; f < h.length; f++){
                            var p = h[f];
                            if (p.toId != p.fromId) {
                                var v = p.toId == a ? p.from : p.to;
                                c[h[f].id] = v, t.hierarchical.levels[v.id] < d && u.push(p);
                            }
                        }
                        var g = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c[i[n].id]) {
                                var r = t.direction.getPosition(c[i[n].id]) - e;
                                o += r / Math.sqrt(r * r + l);
                            }
                            return o;
                        }, y = function(e, i) {
                            for(var o = 0, n = 0; n < i.length; n++)if (void 0 !== c[i[n].id]) {
                                var r = t.direction.getPosition(c[i[n].id]) - e;
                                o -= l * Math.pow(r * r + l, -1.5);
                            }
                            return o;
                        }, m = function(e, i) {
                            for(var o = t.direction.getPosition(n), r = {}, s = 0; s < e; s++){
                                var a = g(o, i), h = y(o, i);
                                if (void 0 !== r[o -= Math.max(-40, Math.min(40, Math.round(a / h)))]) break;
                                r[o] = s;
                            }
                            return o;
                        }, b = m(o, u);
                        !function(o) {
                            var a = t.direction.getPosition(n);
                            if (void 0 === i[n.id]) {
                                var h = {};
                                r(n, h), i[n.id] = h;
                            }
                            var d = s(i[n.id]), l = d[2], c = d[3], u = o - a, f = 0;
                            u > 0 ? f = Math.min(u, c - t.options.hierarchical.nodeSpacing) : u < 0 && (f = -Math.min(-u, l - t.options.hierarchical.nodeSpacing)), 0 != f && (t._shiftBlock(n.id, f), e = !0);
                        }(b), function(i) {
                            var o = t.direction.getPosition(n), r = $c(t._getSpaceAroundNode(n), 2), s = r[0], a = r[1], h = i - o, d = o;
                            h > 0 ? d = Math.min(o + (a - t.options.hierarchical.nodeSpacing), i) : h < 0 && (d = Math.max(o - (s - t.options.hierarchical.nodeSpacing), i)), d !== o && (t.direction.setPosition(n, d), e = !0);
                        }(b = m(o, h));
                    };
                    !0 === this.options.hierarchical.blockShifting && (function(i) {
                        var o = t.hierarchical.getLevels();
                        o = Uu(o).call(o);
                        for(var n = 0; n < i && (e = !1, h(d, o, !0), !0 === e); n++);
                    }(5), function() {
                        for(var e in t.body.nodes)Object.prototype.hasOwnProperty.call(t.body.nodes, e) && t._centerParent(t.body.nodes[e]);
                    }()), !0 === this.options.hierarchical.edgeMinimization && function(i) {
                        var o = t.hierarchical.getLevels();
                        o = Uu(o).call(o);
                        for(var n = 0; n < i; n++){
                            e = !1;
                            for(var r = 0; r < o.length; r++)for(var s = o[r], a = t.hierarchical.distributionOrdering[s], h = 0; h < a.length; h++)l(1e3, a[h]);
                            if (!0 !== e) break;
                        }
                    }(20), !0 === this.options.hierarchical.parentCentralization && function() {
                        var e = t.hierarchical.getLevels();
                        e = Uu(e).call(e);
                        for(var i = 0; i < e.length; i++)for(var o = e[i], n = t.hierarchical.distributionOrdering[o], r = 0; r < n.length; r++)t._centerParent(n[r]);
                    }(), function() {
                        for(var e = n(), i = 0, r = 0; r < e.length - 1; r++)i += e[r].max - e[r + 1].min + t.options.hierarchical.treeSpacing, o(r + 1, i);
                    }();
                }
            },
            {
                key: "_getSpaceAroundNode",
                value: function(t, e) {
                    var i = !0;
                    void 0 === e && (i = !1);
                    var o = this.hierarchical.levels[t.id];
                    if (void 0 !== o) {
                        var n = this.hierarchical.distributionIndex[t.id], r = this.direction.getPosition(t), s = this.hierarchical.distributionOrdering[o], a = 1e9, h = 1e9;
                        if (0 !== n) {
                            var d = s[n - 1];
                            if (!0 === i && void 0 === e[d.id] || !1 === i) a = r - this.direction.getPosition(d);
                        }
                        if (n != s.length - 1) {
                            var l = s[n + 1];
                            if (!0 === i && void 0 === e[l.id] || !1 === i) {
                                var c = this.direction.getPosition(l);
                                h = Math.min(h, c - r);
                            }
                        }
                        return [
                            a,
                            h
                        ];
                    }
                    return [
                        0,
                        0
                    ];
                }
            },
            {
                key: "_centerParent",
                value: function(t) {
                    if (this.hierarchical.parentReference[t.id]) for(var e = this.hierarchical.parentReference[t.id], i = 0; i < e.length; i++){
                        var o = e[i], n = this.body.nodes[o], r = this.hierarchical.childrenReference[o];
                        if (void 0 !== r) {
                            var s = this._getCenterPosition(r), a = this.direction.getPosition(n), h = $c(this._getSpaceAroundNode(n), 2), d = h[0], l = h[1], c = a - s;
                            (c < 0 && Math.abs(c) < l - this.options.hierarchical.nodeSpacing || c > 0 && Math.abs(c) < d - this.options.hierarchical.nodeSpacing) && this.direction.setPosition(n, s);
                        }
                    }
                }
            },
            {
                key: "_placeNodesByHierarchy",
                value: function(t) {
                    for(var e in this.positionedNodes = {}, t)if (Object.prototype.hasOwnProperty.call(t, e)) {
                        var i, o = mu(t[e]);
                        o = this._indexArrayToNodes(o), GO(i = this.direction).call(i, o);
                        for(var n = 0, r = 0; r < o.length; r++){
                            var s = o[r];
                            if (void 0 === this.positionedNodes[s.id]) {
                                var a = this.options.hierarchical.nodeSpacing, h = a * n;
                                n > 0 && (h = this.direction.getPosition(o[r - 1]) + a), this.direction.setPosition(s, h, e), this._validatePositionAndContinue(s, e, h), n++;
                            }
                        }
                    }
                }
            },
            {
                key: "_placeBranchNodes",
                value: function(t, e) {
                    var i, o = this.hierarchical.childrenReference[t];
                    if (void 0 !== o) {
                        for(var n = [], r = 0; r < o.length; r++)n.push(this.body.nodes[o[r]]);
                        GO(i = this.direction).call(i, n);
                        for(var s = 0; s < n.length; s++){
                            var a = n[s], h = this.hierarchical.levels[a.id];
                            if (!(h > e && void 0 === this.positionedNodes[a.id])) return;
                            var d = this.options.hierarchical.nodeSpacing, l = void 0;
                            l = 0 === s ? this.direction.getPosition(this.body.nodes[t]) : this.direction.getPosition(n[s - 1]) + d, this.direction.setPosition(a, l, h), this._validatePositionAndContinue(a, h, l);
                        }
                        var c = this._getCenterPosition(n);
                        this.direction.setPosition(this.body.nodes[t], c, e);
                    }
                }
            },
            {
                key: "_validatePositionAndContinue",
                value: function(t, e, i) {
                    if (this.hierarchical.isTree) {
                        if (void 0 !== this.lastNodeOnLevel[e]) {
                            var o = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[e]]);
                            if (i - o < this.options.hierarchical.nodeSpacing) {
                                var n = o + this.options.hierarchical.nodeSpacing - i, r = this._findCommonParent(this.lastNodeOnLevel[e], t.id);
                                this._shiftBlock(r.withChild, n);
                            }
                        }
                        this.lastNodeOnLevel[e] = t.id, this.positionedNodes[t.id] = !0, this._placeBranchNodes(t.id, e);
                    }
                }
            },
            {
                key: "_indexArrayToNodes",
                value: function(t) {
                    for(var e = [], i = 0; i < t.length; i++)e.push(this.body.nodes[t[i]]);
                    return e;
                }
            },
            {
                key: "_getDistribution",
                value: function() {
                    var t, e, i = {};
                    for(t in this.body.nodes)if (Object.prototype.hasOwnProperty.call(this.body.nodes, t)) {
                        e = this.body.nodes[t];
                        var o = void 0 === this.hierarchical.levels[t] ? 0 : this.hierarchical.levels[t];
                        this.direction.fix(e, o), void 0 === i[o] && (i[o] = {}), i[o][t] = e;
                    }
                    return i;
                }
            },
            {
                key: "_getActiveEdges",
                value: function(t) {
                    var e = this, i = [];
                    return Wy(t.edges, function(t) {
                        var o;
                        -1 !== zp(o = e.body.edgeIndices).call(o, t.id) && i.push(t);
                    }), i;
                }
            },
            {
                key: "_getHubSizes",
                value: function() {
                    var t = this, e = {};
                    Wy(this.body.nodeIndices, function(i) {
                        var o = t.body.nodes[i], n = t._getActiveEdges(o).length;
                        e[n] = !0;
                    });
                    var i = [];
                    return Wy(e, function(t) {
                        i.push(Number(t));
                    }), GO(fC).call(fC, i, function(t, e) {
                        return e - t;
                    }), i;
                }
            },
            {
                key: "_determineLevelsByHubsize",
                value: function() {
                    for(var t = this, e = function(e, i) {
                        t.hierarchical.levelDownstream(e, i);
                    }, i = this._getHubSizes(), o = function(o) {
                        var n = i[o];
                        if (0 === n) return "break";
                        Wy(t.body.nodeIndices, function(i) {
                            var o = t.body.nodes[i];
                            n === t._getActiveEdges(o).length && t._crawlNetwork(e, i);
                        });
                    }, n = 0; n < i.length; ++n){
                        if ("break" === o(n)) break;
                    }
                }
            },
            {
                key: "_determineLevelsCustomCallback",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i, o) {
                        var n = t.hierarchical.levels[e.id];
                        void 0 === n && (n = t.hierarchical.levels[e.id] = 1e5);
                        var r = (Gx.cloneOptions(e, "node"), Gx.cloneOptions(i, "node"), void Gx.cloneOptions(o, "edge"));
                        t.hierarchical.levels[i.id] = n + r;
                    }), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_determineLevelsDirected",
                value: function() {
                    var t, e = this, i = cC(t = this.body.nodeIndices).call(t, function(t, i) {
                        return t.set(i, e.body.nodes[i]), t;
                    }, new Ew);
                    "roots" === this.options.hierarchical.shakeTowards ? this.hierarchical.levels = function(t) {
                        return TC(function(e) {
                            var i, o;
                            return EC(i = Yf(o = e.edges).call(o, function(e) {
                                return t.has(e.toId);
                            })).call(i, function(t) {
                                return t.from === e;
                            });
                        }, function(t, e) {
                            return e < t;
                        }, "to", t);
                    }(i) : this.hierarchical.levels = function(t) {
                        return TC(function(e) {
                            var i, o;
                            return EC(i = Yf(o = e.edges).call(o, function(e) {
                                return t.has(e.toId);
                            })).call(i, function(t) {
                                return t.to === e;
                            });
                        }, function(t, e) {
                            return e > t;
                        }, "from", t);
                    }(i), this.hierarchical.setMinLevelToZero(this.body.nodes);
                }
            },
            {
                key: "_generateMap",
                value: function() {
                    var t = this;
                    this._crawlNetwork(function(e, i) {
                        t.hierarchical.levels[i.id] > t.hierarchical.levels[e.id] && t.hierarchical.addRelation(e.id, i.id);
                    }), this.hierarchical.checkIfTree();
                }
            },
            {
                key: "_crawlNetwork",
                value: function() {
                    var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function() {}, i = arguments.length > 1 ? arguments[1] : void 0, o = {}, n = function i(n, r) {
                        if (void 0 === o[n.id]) {
                            var s;
                            t.hierarchical.setTreeIndex(n, r), o[n.id] = !0;
                            for(var a = t._getActiveEdges(n), h = 0; h < a.length; h++){
                                var d = a[h];
                                !0 === d.connected && (s = d.toId == n.id ? d.from : d.to, n.id != s.id && (e(n, s, d), i(s, r)));
                            }
                        }
                    };
                    if (void 0 === i) for(var r = 0, s = 0; s < this.body.nodeIndices.length; s++){
                        var a = this.body.nodeIndices[s];
                        if (void 0 === o[a]) {
                            var h = this.body.nodes[a];
                            n(h, r), r += 1;
                        }
                    }
                    else {
                        var d = this.body.nodes[i];
                        if (void 0 === d) return void console.error("Node not found:", i);
                        n(d);
                    }
                }
            },
            {
                key: "_shiftBlock",
                value: function(t, e) {
                    var i = this, o = {};
                    !function t(n) {
                        if (!o[n]) {
                            o[n] = !0, i.direction.shift(n, e);
                            var r = i.hierarchical.childrenReference[n];
                            if (void 0 !== r) for(var s = 0; s < r.length; s++)t(r[s]);
                        }
                    }(t);
                }
            },
            {
                key: "_findCommonParent",
                value: function(t, e) {
                    var i = this, o = {};
                    return function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            e[s] = !0, t(e, s);
                        }
                    }(o, t), function t(e, o) {
                        var n = i.hierarchical.parentReference[o];
                        if (void 0 !== n) for(var r = 0; r < n.length; r++){
                            var s = n[r];
                            if (void 0 !== e[s]) return {
                                foundParent: s,
                                withChild: o
                            };
                            var a = t(e, s);
                            if (null !== a.foundParent) return a;
                        }
                        return {
                            foundParent: null,
                            withChild: o
                        };
                    }(o, e);
                }
            },
            {
                key: "setDirectionStrategy",
                value: function() {
                    var t = "UD" === this.options.hierarchical.direction || "DU" === this.options.hierarchical.direction;
                    this.direction = t ? new gC(this) : new yC(this);
                }
            },
            {
                key: "_getCenterPosition",
                value: function(t) {
                    for(var e = 1e9, i = -1000000000, o = 0; o < t.length; o++){
                        var n = void 0;
                        if (void 0 !== t[o].id) n = t[o];
                        else {
                            var r = t[o];
                            n = this.body.nodes[r];
                        }
                        var s = this.direction.getPosition(n);
                        e = Math.min(e, s), i = Math.max(i, s);
                    }
                    return .5 * (e + i);
                }
            }
        ]), t;
    }();
    function DC(t, e) {
        var i = void 0 !== tu && oh(t) || t["@@iterator"];
        if (!i) {
            if (hu(t) || (i = function(t, e) {
                var i;
                if (!t) return;
                if ("string" == typeof t) return BC(t, e);
                var o = au(i = Object.prototype.toString.call(t)).call(i, 8, -1);
                "Object" === o && t.constructor && (o = t.constructor.name);
                if ("Map" === o || "Set" === o) return ja(t);
                if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return BC(t, e);
            }(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0, n = function() {};
                return {
                    s: n,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        };
                    },
                    e: function(t) {
                        throw t;
                    },
                    f: n
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var r, s = !0, a = !1;
        return {
            s: function() {
                i = i.call(t);
            },
            n: function() {
                var t = i.next();
                return s = t.done, t;
            },
            e: function(t) {
                a = !0, r = t;
            },
            f: function() {
                try {
                    s || null == i.return || i.return();
                } finally{
                    if (a) throw r;
                }
            }
        };
    }
    function BC(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for(var i = 0, o = new Array(e); i < e; i++)o[i] = t[i];
        return o;
    }
    var IC = function() {
        function t(e, i, o, n) {
            var r, s, a = this;
            Xl(this, t), this.body = e, this.canvas = i, this.selectionHandler = o, this.interactionHandler = n, this.editMode = !1, this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0, this._domEventListenerCleanupQueue = [], this.temporaryUIFunctions = {}, this.temporaryEventFunctions = [], this.touchTime = 0, this.temporaryIds = {
                nodes: [],
                edges: []
            }, this.guiEnabled = !1, this.inMode = !1, this.selectedControlNode = void 0, this.options = {}, this.defaultOptions = {
                enabled: !1,
                initiallyActive: !1,
                addNode: !0,
                addEdge: !0,
                editNode: void 0,
                editEdge: !0,
                deleteNode: !0,
                deleteEdge: !0,
                controlNodeStyle: {
                    shape: "dot",
                    size: 6,
                    color: {
                        background: "#ff0000",
                        border: "#3c3c3c",
                        highlight: {
                            background: "#07f968",
                            border: "#3c3c3c"
                        }
                    },
                    borderWidth: 2,
                    borderWidthSelected: 2
                }
            }, fo(this.options, this.defaultOptions), this.body.emitter.on("destroy", function() {
                a._clean();
            }), this.body.emitter.on("_dataChanged", Fo(r = this._restore).call(r, this)), this.body.emitter.on("_resetData", Fo(s = this._restore).call(s, this));
        }
        return $l(t, [
            {
                key: "_restore",
                value: function() {
                    !1 !== this.inMode && (!0 === this.options.initiallyActive ? this.enableEditMode() : this.disableEditMode());
                }
            },
            {
                key: "setOptions",
                value: function(t, e, i) {
                    void 0 !== e && (void 0 !== e.locale ? this.options.locale = e.locale : this.options.locale = i.locale, void 0 !== e.locales ? this.options.locales = e.locales : this.options.locales = i.locales), void 0 !== t && ("boolean" == typeof t ? this.options.enabled = t : (this.options.enabled = !0, Ry(this.options, t)), !0 === this.options.initiallyActive && (this.editMode = !0), this._setup());
                }
            },
            {
                key: "toggleEditMode",
                value: function() {
                    !0 === this.editMode ? this.disableEditMode() : this.enableEditMode();
                }
            },
            {
                key: "enableEditMode",
                value: function() {
                    this.editMode = !0, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block", this.editModeDiv.style.display = "none", this.showManipulatorToolbar());
                }
            },
            {
                key: "disableEditMode",
                value: function() {
                    this.editMode = !1, this._clean(), !0 === this.guiEnabled && (this.manipulationDiv.style.display = "none", this.closeDiv.style.display = "none", this.editModeDiv.style.display = "block", this._createEditButton());
                }
            },
            {
                key: "showManipulatorToolbar",
                value: function() {
                    if (this._clean(), this.manipulationDOM = {}, !0 === this.guiEnabled) {
                        var t, e;
                        this.editMode = !0, this.manipulationDiv.style.display = "block", this.closeDiv.style.display = "block";
                        var i = this.selectionHandler.getSelectedNodeCount(), o = this.selectionHandler.getSelectedEdgeCount(), n = i + o, r = this.options.locales[this.options.locale], s = !1;
                        !1 !== this.options.addNode && (this._createAddNodeButton(r), s = !0), !1 !== this.options.addEdge && (!0 === s ? this._createSeperator(1) : s = !0, this._createAddEdgeButton(r)), 1 === i && "function" == typeof this.options.editNode ? (!0 === s ? this._createSeperator(2) : s = !0, this._createEditNodeButton(r)) : 1 === o && 0 === i && !1 !== this.options.editEdge && (!0 === s ? this._createSeperator(3) : s = !0, this._createEditEdgeButton(r)), 0 !== n && (i > 0 && !1 !== this.options.deleteNode || 0 === i && !1 !== this.options.deleteEdge) && (!0 === s && this._createSeperator(4), this._createDeleteButton(r)), this._bindElementEvents(this.closeDiv, Fo(t = this.toggleEditMode).call(t, this)), this._temporaryBindEvent("select", Fo(e = this.showManipulatorToolbar).call(e, this));
                    }
                    this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "addNodeMode",
                value: function() {
                    var t;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addNode", !0 === this.guiEnabled) {
                        var e, i = this.options.locales[this.options.locale];
                        this.manipulationDOM = {}, this._createBackButton(i), this._createSeperator(), this._createDescription(i.addDescription || this.options.locales.en.addDescription), this._bindElementEvents(this.closeDiv, Fo(e = this.toggleEditMode).call(e, this));
                    }
                    this._temporaryBindEvent("click", Fo(t = this._performAddNode).call(t, this));
                }
            },
            {
                key: "editNode",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean();
                    var e = this.selectionHandler.getSelectedNodes()[0];
                    if (void 0 !== e) {
                        if (this.inMode = "editNode", "function" != typeof this.options.editNode) throw new Error("No function has been configured to handle the editing of nodes.");
                        if (!0 !== e.isCluster) {
                            var i = Ry({}, e.options, !1);
                            if (i.x = e.x, i.y = e.y, 2 !== this.options.editNode.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                            this.options.editNode(i, function(e) {
                                null != e && "editNode" === t.inMode && t.body.data.nodes.getDataSet().update(e), t.showManipulatorToolbar();
                            });
                        } else alert(this.options.locales[this.options.locale].editClusterError || this.options.locales.en.editClusterError);
                    } else this.showManipulatorToolbar();
                }
            },
            {
                key: "addEdgeMode",
                value: function() {
                    var t, e, i, o, n;
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "addEdge", !0 === this.guiEnabled) {
                        var r, s = this.options.locales[this.options.locale];
                        this.manipulationDOM = {}, this._createBackButton(s), this._createSeperator(), this._createDescription(s.edgeDescription || this.options.locales.en.edgeDescription), this._bindElementEvents(this.closeDiv, Fo(r = this.toggleEditMode).call(r, this));
                    }
                    this._temporaryBindUI("onTouch", Fo(t = this._handleConnect).call(t, this)), this._temporaryBindUI("onDragEnd", Fo(e = this._finishConnect).call(e, this)), this._temporaryBindUI("onDrag", Fo(i = this._dragControlNode).call(i, this)), this._temporaryBindUI("onRelease", Fo(o = this._finishConnect).call(o, this)), this._temporaryBindUI("onDragStart", Fo(n = this._dragStartEdge).call(n, this)), this._temporaryBindUI("onHold", function() {});
                }
            },
            {
                key: "editEdgeMode",
                value: function() {
                    if (!0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "editEdge", "object" !== Qc(this.options.editEdge) || "function" != typeof this.options.editEdge.editWithoutDrag || (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 === this.edgeBeingEditedId)) {
                        if (!0 === this.guiEnabled) {
                            var t, e = this.options.locales[this.options.locale];
                            this.manipulationDOM = {}, this._createBackButton(e), this._createSeperator(), this._createDescription(e.editEdgeDescription || this.options.locales.en.editEdgeDescription), this._bindElementEvents(this.closeDiv, Fo(t = this.toggleEditMode).call(t, this));
                        }
                        if (this.edgeBeingEditedId = this.selectionHandler.getSelectedEdgeIds()[0], void 0 !== this.edgeBeingEditedId) {
                            var i, o, n, r, s = this.body.edges[this.edgeBeingEditedId], a = this._getNewTargetNode(s.from.x, s.from.y), h = this._getNewTargetNode(s.to.x, s.to.y);
                            this.temporaryIds.nodes.push(a.id), this.temporaryIds.nodes.push(h.id), this.body.nodes[a.id] = a, this.body.nodeIndices.push(a.id), this.body.nodes[h.id] = h, this.body.nodeIndices.push(h.id), this._temporaryBindUI("onTouch", Fo(i = this._controlNodeTouch).call(i, this)), this._temporaryBindUI("onTap", function() {}), this._temporaryBindUI("onHold", function() {}), this._temporaryBindUI("onDragStart", Fo(o = this._controlNodeDragStart).call(o, this)), this._temporaryBindUI("onDrag", Fo(n = this._controlNodeDrag).call(n, this)), this._temporaryBindUI("onDragEnd", Fo(r = this._controlNodeDragEnd).call(r, this)), this._temporaryBindUI("onMouseMove", function() {}), this._temporaryBindEvent("beforeDrawing", function(t) {
                                var e = s.edgeType.findBorderPositions(t);
                                !1 === a.selected && (a.x = e.from.x, a.y = e.from.y), !1 === h.selected && (h.x = e.to.x, h.y = e.to.y);
                            }), this.body.emitter.emit("_redraw");
                        } else this.showManipulatorToolbar();
                    } else {
                        var d = this.body.edges[this.edgeBeingEditedId];
                        this._performEditEdge(d.from.id, d.to.id);
                    }
                }
            },
            {
                key: "deleteSelected",
                value: function() {
                    var t = this;
                    !0 !== this.editMode && this.enableEditMode(), this._clean(), this.inMode = "delete";
                    var e = this.selectionHandler.getSelectedNodeIds(), i = this.selectionHandler.getSelectedEdgeIds(), o = void 0;
                    if (e.length > 0) {
                        for(var n = 0; n < e.length; n++)if (!0 === this.body.nodes[e[n]].isCluster) return void alert(this.options.locales[this.options.locale].deleteClusterError || this.options.locales.en.deleteClusterError);
                        "function" == typeof this.options.deleteNode && (o = this.options.deleteNode);
                    } else i.length > 0 && "function" == typeof this.options.deleteEdge && (o = this.options.deleteEdge);
                    if ("function" == typeof o) {
                        var r = {
                            nodes: e,
                            edges: i
                        };
                        if (2 !== o.length) throw new Error("The function for delete does not support two arguments (data, callback)");
                        o(r, function(e) {
                            null != e && "delete" === t.inMode ? (t.body.data.edges.getDataSet().remove(e.edges), t.body.data.nodes.getDataSet().remove(e.nodes), t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar()) : (t.body.emitter.emit("startSimulation"), t.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().remove(i), this.body.data.nodes.getDataSet().remove(e), this.body.emitter.emit("startSimulation"), this.showManipulatorToolbar();
                }
            },
            {
                key: "_setup",
                value: function() {
                    !0 === this.options.enabled ? (this.guiEnabled = !0, this._createWrappers(), !1 === this.editMode ? this._createEditButton() : this.showManipulatorToolbar()) : (this._removeManipulationDOM(), this.guiEnabled = !1);
                }
            },
            {
                key: "_createWrappers",
                value: function() {
                    var t, e;
                    (void 0 === this.manipulationDiv && (this.manipulationDiv = document.createElement("div"), this.manipulationDiv.className = "vis-manipulation", !0 === this.editMode ? this.manipulationDiv.style.display = "block" : this.manipulationDiv.style.display = "none", this.canvas.frame.appendChild(this.manipulationDiv)), void 0 === this.editModeDiv && (this.editModeDiv = document.createElement("div"), this.editModeDiv.className = "vis-edit-mode", !0 === this.editMode ? this.editModeDiv.style.display = "none" : this.editModeDiv.style.display = "block", this.canvas.frame.appendChild(this.editModeDiv)), void 0 === this.closeDiv) && (this.closeDiv = document.createElement("button"), this.closeDiv.className = "vis-close", this.closeDiv.setAttribute("aria-label", null !== (t = null === (e = this.options.locales[this.options.locale]) || void 0 === e ? void 0 : e.close) && void 0 !== t ? t : this.options.locales.en.close), this.closeDiv.style.display = this.manipulationDiv.style.display, this.canvas.frame.appendChild(this.closeDiv));
                }
            },
            {
                key: "_getNewTargetNode",
                value: function(t, e) {
                    var i = Ry({}, this.options.controlNodeStyle);
                    i.id = "targetNode" + Xx(), i.hidden = !1, i.physics = !1, i.x = t, i.y = e;
                    var o = this.body.functions.createNode(i);
                    return o.shape.boundingBox = {
                        left: t,
                        right: t,
                        top: e,
                        bottom: e
                    }, o;
                }
            },
            {
                key: "_createEditButton",
                value: function() {
                    var t;
                    this._clean(), this.manipulationDOM = {}, Dy(this.editModeDiv);
                    var e = this.options.locales[this.options.locale], i = this._createButton("editMode", "vis-edit vis-edit-mode", e.edit || this.options.locales.en.edit);
                    this.editModeDiv.appendChild(i), this._bindElementEvents(i, Fo(t = this.toggleEditMode).call(t, this));
                }
            },
            {
                key: "_clean",
                value: function() {
                    this.inMode = !1, !0 === this.guiEnabled && (Dy(this.editModeDiv), Dy(this.manipulationDiv), this._cleanupDOMEventListeners()), this._cleanupTemporaryNodesAndEdges(), this._unbindTemporaryUIs(), this._unbindTemporaryEvents(), this.body.emitter.emit("restorePhysics");
                }
            },
            {
                key: "_cleanupDOMEventListeners",
                value: function() {
                    var t, e, i = DC(uf(t = this._domEventListenerCleanupQueue).call(t, 0));
                    try {
                        for(i.s(); !(e = i.n()).done;)(0, e.value)();
                    } catch (t1) {
                        i.e(t1);
                    } finally{
                        i.f();
                    }
                }
            },
            {
                key: "_removeManipulationDOM",
                value: function() {
                    this._clean(), Dy(this.manipulationDiv), Dy(this.editModeDiv), Dy(this.closeDiv), this.manipulationDiv && this.canvas.frame.removeChild(this.manipulationDiv), this.editModeDiv && this.canvas.frame.removeChild(this.editModeDiv), this.closeDiv && this.canvas.frame.removeChild(this.closeDiv), this.manipulationDiv = void 0, this.editModeDiv = void 0, this.closeDiv = void 0;
                }
            },
            {
                key: "_createSeperator",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                    this.manipulationDOM["seperatorLineDiv" + t] = document.createElement("div"), this.manipulationDOM["seperatorLineDiv" + t].className = "vis-separator-line", this.manipulationDiv.appendChild(this.manipulationDOM["seperatorLineDiv" + t]);
                }
            },
            {
                key: "_createAddNodeButton",
                value: function(t) {
                    var e, i = this._createButton("addNode", "vis-add", t.addNode || this.options.locales.en.addNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Fo(e = this.addNodeMode).call(e, this));
                }
            },
            {
                key: "_createAddEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("addEdge", "vis-connect", t.addEdge || this.options.locales.en.addEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Fo(e = this.addEdgeMode).call(e, this));
                }
            },
            {
                key: "_createEditNodeButton",
                value: function(t) {
                    var e, i = this._createButton("editNode", "vis-edit", t.editNode || this.options.locales.en.editNode);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Fo(e = this.editNode).call(e, this));
                }
            },
            {
                key: "_createEditEdgeButton",
                value: function(t) {
                    var e, i = this._createButton("editEdge", "vis-edit", t.editEdge || this.options.locales.en.editEdge);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Fo(e = this.editEdgeMode).call(e, this));
                }
            },
            {
                key: "_createDeleteButton",
                value: function(t) {
                    var e, i;
                    i = this.options.rtl ? "vis-delete-rtl" : "vis-delete";
                    var o = this._createButton("delete", i, t.del || this.options.locales.en.del);
                    this.manipulationDiv.appendChild(o), this._bindElementEvents(o, Fo(e = this.deleteSelected).call(e, this));
                }
            },
            {
                key: "_createBackButton",
                value: function(t) {
                    var e, i = this._createButton("back", "vis-back", t.back || this.options.locales.en.back);
                    this.manipulationDiv.appendChild(i), this._bindElementEvents(i, Fo(e = this.showManipulatorToolbar).call(e, this));
                }
            },
            {
                key: "_createButton",
                value: function(t, e, i) {
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "vis-label";
                    return this.manipulationDOM[t + "Div"] = document.createElement("button"), this.manipulationDOM[t + "Div"].className = "vis-button " + e, this.manipulationDOM[t + "Label"] = document.createElement("div"), this.manipulationDOM[t + "Label"].className = o, this.manipulationDOM[t + "Label"].innerText = i, this.manipulationDOM[t + "Div"].appendChild(this.manipulationDOM[t + "Label"]), this.manipulationDOM[t + "Div"];
                }
            },
            {
                key: "_createDescription",
                value: function(t) {
                    this.manipulationDOM.descriptionLabel = document.createElement("div"), this.manipulationDOM.descriptionLabel.className = "vis-none", this.manipulationDOM.descriptionLabel.innerText = t, this.manipulationDiv.appendChild(this.manipulationDOM.descriptionLabel);
                }
            },
            {
                key: "_temporaryBindEvent",
                value: function(t, e) {
                    this.temporaryEventFunctions.push({
                        event: t,
                        boundFunction: e
                    }), this.body.emitter.on(t, e);
                }
            },
            {
                key: "_temporaryBindUI",
                value: function(t, e) {
                    if (void 0 === this.body.eventListeners[t]) throw new Error("This UI function does not exist. Typo? You tried: " + t + " possible are: " + hv(mu(this.body.eventListeners)));
                    this.temporaryUIFunctions[t] = this.body.eventListeners[t], this.body.eventListeners[t] = e;
                }
            },
            {
                key: "_unbindTemporaryUIs",
                value: function() {
                    for(var t in this.temporaryUIFunctions)Object.prototype.hasOwnProperty.call(this.temporaryUIFunctions, t) && (this.body.eventListeners[t] = this.temporaryUIFunctions[t], delete this.temporaryUIFunctions[t]);
                    this.temporaryUIFunctions = {};
                }
            },
            {
                key: "_unbindTemporaryEvents",
                value: function() {
                    for(var t = 0; t < this.temporaryEventFunctions.length; t++){
                        var e = this.temporaryEventFunctions[t].event, i = this.temporaryEventFunctions[t].boundFunction;
                        this.body.emitter.off(e, i);
                    }
                    this.temporaryEventFunctions = [];
                }
            },
            {
                key: "_bindElementEvents",
                value: function(t, e) {
                    var i = new pm(t, {});
                    iE(i, e), this._domEventListenerCleanupQueue.push(function() {
                        i.destroy();
                    });
                    var o = function(t) {
                        var i = t.keyCode, o = t.key;
                        "Enter" !== o && " " !== o && 13 !== i && 32 !== i || e();
                    };
                    t.addEventListener("keyup", o, !1), this._domEventListenerCleanupQueue.push(function() {
                        t.removeEventListener("keyup", o, !1);
                    });
                }
            },
            {
                key: "_cleanupTemporaryNodesAndEdges",
                value: function() {
                    for(var t = 0; t < this.temporaryIds.edges.length; t++){
                        var e;
                        this.body.edges[this.temporaryIds.edges[t]].disconnect(), delete this.body.edges[this.temporaryIds.edges[t]];
                        var i, o = zp(e = this.body.edgeIndices).call(e, this.temporaryIds.edges[t]);
                        if (-1 !== o) uf(i = this.body.edgeIndices).call(i, o, 1);
                    }
                    for(var n = 0; n < this.temporaryIds.nodes.length; n++){
                        var r;
                        delete this.body.nodes[this.temporaryIds.nodes[n]];
                        var s, a = zp(r = this.body.nodeIndices).call(r, this.temporaryIds.nodes[n]);
                        if (-1 !== a) uf(s = this.body.nodeIndices).call(s, a, 1);
                    }
                    this.temporaryIds = {
                        nodes: [],
                        edges: []
                    };
                }
            },
            {
                key: "_controlNodeTouch",
                value: function(t) {
                    this.selectionHandler.unselectAll(), this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = fo({}, this.body.view.translation);
                }
            },
            {
                key: "_controlNodeDragStart",
                value: function() {
                    var t = this.lastTouch, e = this.selectionHandler._pointerToPositionObject(t), i = this.body.nodes[this.temporaryIds.nodes[0]], o = this.body.nodes[this.temporaryIds.nodes[1]], n = this.body.edges[this.edgeBeingEditedId];
                    this.selectedControlNode = void 0;
                    var r = i.isOverlappingWith(e), s = o.isOverlappingWith(e);
                    !0 === r ? (this.selectedControlNode = i, n.edgeType.from = i) : !0 === s && (this.selectedControlNode = o, n.edgeType.to = o), void 0 !== this.selectedControlNode && this.selectionHandler.selectObject(this.selectedControlNode), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDrag",
                value: function(t) {
                    this.body.emitter.emit("disablePhysics");
                    var e = this.body.functions.getPointer(t.center), i = this.canvas.DOMtoCanvas(e);
                    void 0 !== this.selectedControlNode ? (this.selectedControlNode.x = i.x, this.selectedControlNode.y = i.y) : this.interactionHandler.onDrag(t), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_controlNodeDragEnd",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = this.body.edges[this.edgeBeingEditedId];
                    if (void 0 !== this.selectedControlNode) {
                        this.selectionHandler.unselectAll();
                        for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--)if (n[s] !== this.selectedControlNode.id) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                        if (void 0 !== r && void 0 !== this.selectedControlNode) {
                            if (!0 === r.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var a = this.body.nodes[this.temporaryIds.nodes[0]];
                                this.selectedControlNode.id === a.id ? this._performEditEdge(r.id, o.to.id) : this._performEditEdge(o.from.id, r.id);
                            }
                        } else o.updateEdgeType(), this.body.emitter.emit("restorePhysics");
                        this.body.emitter.emit("_redraw");
                    }
                }
            },
            {
                key: "_handleConnect",
                value: function(t) {
                    if ((new Date).valueOf() - this.touchTime > 100) {
                        this.lastTouch = this.body.functions.getPointer(t.center), this.lastTouch.translation = fo({}, this.body.view.translation), this.interactionHandler.drag.pointer = this.lastTouch, this.interactionHandler.drag.translation = this.lastTouch.translation;
                        var e = this.lastTouch, i = this.selectionHandler.getNodeAt(e);
                        if (void 0 !== i) {
                            if (!0 === i.isCluster) alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError);
                            else {
                                var o = this._getNewTargetNode(i.x, i.y);
                                this.body.nodes[o.id] = o, this.body.nodeIndices.push(o.id);
                                var n = this.body.functions.createEdge({
                                    id: "connectionEdge" + Xx(),
                                    from: i.id,
                                    to: o.id,
                                    physics: !1,
                                    smooth: {
                                        enabled: !0,
                                        type: "continuous",
                                        roundness: .5
                                    }
                                });
                                this.body.edges[n.id] = n, this.body.edgeIndices.push(n.id), this.temporaryIds.nodes.push(o.id), this.temporaryIds.edges.push(n.id);
                            }
                        }
                        this.touchTime = (new Date).valueOf();
                    }
                }
            },
            {
                key: "_dragControlNode",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === zp(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    if (t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragging", t, e), void 0 !== this.temporaryIds.nodes[0]) {
                        var h = this.body.nodes[this.temporaryIds.nodes[0]];
                        h.x = this.canvas._XconvertDOMtoCanvas(e.x), h.y = this.canvas._YconvertDOMtoCanvas(e.y), this.body.emitter.emit("_redraw");
                    } else this.interactionHandler.onDrag(t);
                }
            },
            {
                key: "_finishConnect",
                value: function(t) {
                    var e = this.body.functions.getPointer(t.center), i = this.selectionHandler._pointerToPositionObject(e), o = void 0;
                    void 0 !== this.temporaryIds.edges[0] && (o = this.body.edges[this.temporaryIds.edges[0]].fromId);
                    for(var n = this.selectionHandler._getAllNodesOverlappingWith(i), r = void 0, s = n.length - 1; s >= 0; s--){
                        var a;
                        if (-1 === zp(a = this.temporaryIds.nodes).call(a, n[s])) {
                            r = this.body.nodes[n[s]];
                            break;
                        }
                    }
                    this._cleanupTemporaryNodesAndEdges(), void 0 !== r && (!0 === r.isCluster ? alert(this.options.locales[this.options.locale].createEdgeError || this.options.locales.en.createEdgeError) : void 0 !== this.body.nodes[o] && void 0 !== this.body.nodes[r.id] && this._performAddEdge(o, r.id)), t.controlEdge = {
                        from: o,
                        to: r ? r.id : void 0
                    }, this.selectionHandler.generateClickEvent("controlNodeDragEnd", t, e), this.body.emitter.emit("_redraw");
                }
            },
            {
                key: "_dragStartEdge",
                value: function(t) {
                    var e = this.lastTouch;
                    this.selectionHandler.generateClickEvent("dragStart", t, e, void 0, !0);
                }
            },
            {
                key: "_performAddNode",
                value: function(t) {
                    var e = this, i = {
                        id: Xx(),
                        x: t.pointer.canvas.x,
                        y: t.pointer.canvas.y,
                        label: "new"
                    };
                    if ("function" == typeof this.options.addNode) {
                        if (2 !== this.options.addNode.length) throw this.showManipulatorToolbar(), new Error("The function for add does not support two arguments (data,callback)");
                        this.options.addNode(i, function(t) {
                            null != t && "addNode" === e.inMode && e.body.data.nodes.getDataSet().add(t), e.showManipulatorToolbar();
                        });
                    } else this.body.data.nodes.getDataSet().add(i), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performAddEdge",
                value: function(t, e) {
                    var i = this, o = {
                        from: t,
                        to: e
                    };
                    if ("function" == typeof this.options.addEdge) {
                        if (2 !== this.options.addEdge.length) throw new Error("The function for connect does not support two arguments (data,callback)");
                        this.options.addEdge(o, function(t) {
                            null != t && "addEdge" === i.inMode && (i.body.data.edges.getDataSet().add(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().add(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            },
            {
                key: "_performEditEdge",
                value: function(t, e) {
                    var i = this, o = {
                        id: this.edgeBeingEditedId,
                        from: t,
                        to: e,
                        label: this.body.data.edges.get(this.edgeBeingEditedId).label
                    }, n = this.options.editEdge;
                    if ("object" === Qc(n) && (n = n.editWithoutDrag), "function" == typeof n) {
                        if (2 !== n.length) throw new Error("The function for edit does not support two arguments (data, callback)");
                        n(o, function(t) {
                            null == t || "editEdge" !== i.inMode ? (i.body.edges[o.id].updateEdgeType(), i.body.emitter.emit("_redraw"), i.showManipulatorToolbar()) : (i.body.data.edges.getDataSet().update(t), i.selectionHandler.unselectAll(), i.showManipulatorToolbar());
                        });
                    } else this.body.data.edges.getDataSet().update(o), this.selectionHandler.unselectAll(), this.showManipulatorToolbar();
                }
            }
        ]), t;
    }(), zC = "string", FC = "boolean", NC = "number", AC = "array", RC = "object", jC = [
        "arrow",
        "bar",
        "box",
        "circle",
        "crow",
        "curve",
        "diamond",
        "image",
        "inv_curve",
        "inv_triangle",
        "triangle",
        "vee"
    ], LC = {
        borderWidth: {
            number: NC
        },
        borderWidthSelected: {
            number: NC,
            undefined: "undefined"
        },
        brokenImage: {
            string: zC,
            undefined: "undefined"
        },
        chosen: {
            label: {
                boolean: FC,
                function: "function"
            },
            node: {
                boolean: FC,
                function: "function"
            },
            __type__: {
                object: RC,
                boolean: FC
            }
        },
        color: {
            border: {
                string: zC
            },
            background: {
                string: zC
            },
            highlight: {
                border: {
                    string: zC
                },
                background: {
                    string: zC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            hover: {
                border: {
                    string: zC
                },
                background: {
                    string: zC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            __type__: {
                object: RC,
                string: zC
            }
        },
        opacity: {
            number: NC,
            undefined: "undefined"
        },
        fixed: {
            x: {
                boolean: FC
            },
            y: {
                boolean: FC
            },
            __type__: {
                object: RC,
                boolean: FC
            }
        },
        font: {
            align: {
                string: zC
            },
            color: {
                string: zC
            },
            size: {
                number: NC
            },
            face: {
                string: zC
            },
            background: {
                string: zC
            },
            strokeWidth: {
                number: NC
            },
            strokeColor: {
                string: zC
            },
            vadjust: {
                number: NC
            },
            multi: {
                boolean: FC,
                string: zC
            },
            bold: {
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                face: {
                    string: zC
                },
                mod: {
                    string: zC
                },
                vadjust: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            boldital: {
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                face: {
                    string: zC
                },
                mod: {
                    string: zC
                },
                vadjust: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            ital: {
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                face: {
                    string: zC
                },
                mod: {
                    string: zC
                },
                vadjust: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            mono: {
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                face: {
                    string: zC
                },
                mod: {
                    string: zC
                },
                vadjust: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            __type__: {
                object: RC,
                string: zC
            }
        },
        group: {
            string: zC,
            number: NC,
            undefined: "undefined"
        },
        heightConstraint: {
            minimum: {
                number: NC
            },
            valign: {
                string: zC
            },
            __type__: {
                object: RC,
                boolean: FC,
                number: NC
            }
        },
        hidden: {
            boolean: FC
        },
        icon: {
            face: {
                string: zC
            },
            code: {
                string: zC
            },
            size: {
                number: NC
            },
            color: {
                string: zC
            },
            weight: {
                string: zC,
                number: NC
            },
            __type__: {
                object: RC
            }
        },
        id: {
            string: zC,
            number: NC
        },
        image: {
            selected: {
                string: zC,
                undefined: "undefined"
            },
            unselected: {
                string: zC,
                undefined: "undefined"
            },
            __type__: {
                object: RC,
                string: zC
            }
        },
        imagePadding: {
            top: {
                number: NC
            },
            right: {
                number: NC
            },
            bottom: {
                number: NC
            },
            left: {
                number: NC
            },
            __type__: {
                object: RC,
                number: NC
            }
        },
        label: {
            string: zC,
            undefined: "undefined"
        },
        labelHighlightBold: {
            boolean: FC
        },
        level: {
            number: NC,
            undefined: "undefined"
        },
        margin: {
            top: {
                number: NC
            },
            right: {
                number: NC
            },
            bottom: {
                number: NC
            },
            left: {
                number: NC
            },
            __type__: {
                object: RC,
                number: NC
            }
        },
        mass: {
            number: NC
        },
        physics: {
            boolean: FC
        },
        scaling: {
            min: {
                number: NC
            },
            max: {
                number: NC
            },
            label: {
                enabled: {
                    boolean: FC
                },
                min: {
                    number: NC
                },
                max: {
                    number: NC
                },
                maxVisible: {
                    number: NC
                },
                drawThreshold: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            customScalingFunction: {
                function: "function"
            },
            __type__: {
                object: RC
            }
        },
        shadow: {
            enabled: {
                boolean: FC
            },
            color: {
                string: zC
            },
            size: {
                number: NC
            },
            x: {
                number: NC
            },
            y: {
                number: NC
            },
            __type__: {
                object: RC,
                boolean: FC
            }
        },
        shape: {
            string: [
                "custom",
                "ellipse",
                "circle",
                "database",
                "box",
                "text",
                "image",
                "circularImage",
                "diamond",
                "dot",
                "star",
                "triangle",
                "triangleDown",
                "square",
                "icon",
                "hexagon"
            ]
        },
        ctxRenderer: {
            function: "function"
        },
        shapeProperties: {
            borderDashes: {
                boolean: FC,
                array: AC
            },
            borderRadius: {
                number: NC
            },
            interpolation: {
                boolean: FC
            },
            useImageSize: {
                boolean: FC
            },
            useBorderWithImage: {
                boolean: FC
            },
            coordinateOrigin: {
                string: [
                    "center",
                    "top-left"
                ]
            },
            __type__: {
                object: RC
            }
        },
        size: {
            number: NC
        },
        title: {
            string: zC,
            dom: "dom",
            undefined: "undefined"
        },
        value: {
            number: NC,
            undefined: "undefined"
        },
        widthConstraint: {
            minimum: {
                number: NC
            },
            maximum: {
                number: NC
            },
            __type__: {
                object: RC,
                boolean: FC,
                number: NC
            }
        },
        x: {
            number: NC
        },
        y: {
            number: NC
        },
        __type__: {
            object: RC
        }
    }, HC = {
        configure: {
            enabled: {
                boolean: FC
            },
            filter: {
                boolean: FC,
                string: zC,
                array: AC,
                function: "function"
            },
            container: {
                dom: "dom"
            },
            showButton: {
                boolean: FC
            },
            __type__: {
                object: RC,
                boolean: FC,
                string: zC,
                array: AC,
                function: "function"
            }
        },
        edges: {
            arrows: {
                to: {
                    enabled: {
                        boolean: FC
                    },
                    scaleFactor: {
                        number: NC
                    },
                    type: {
                        string: jC
                    },
                    imageHeight: {
                        number: NC
                    },
                    imageWidth: {
                        number: NC
                    },
                    src: {
                        string: zC
                    },
                    __type__: {
                        object: RC,
                        boolean: FC
                    }
                },
                middle: {
                    enabled: {
                        boolean: FC
                    },
                    scaleFactor: {
                        number: NC
                    },
                    type: {
                        string: jC
                    },
                    imageWidth: {
                        number: NC
                    },
                    imageHeight: {
                        number: NC
                    },
                    src: {
                        string: zC
                    },
                    __type__: {
                        object: RC,
                        boolean: FC
                    }
                },
                from: {
                    enabled: {
                        boolean: FC
                    },
                    scaleFactor: {
                        number: NC
                    },
                    type: {
                        string: jC
                    },
                    imageWidth: {
                        number: NC
                    },
                    imageHeight: {
                        number: NC
                    },
                    src: {
                        string: zC
                    },
                    __type__: {
                        object: RC,
                        boolean: FC
                    }
                },
                __type__: {
                    string: [
                        "from",
                        "to",
                        "middle"
                    ],
                    object: RC
                }
            },
            endPointOffset: {
                from: {
                    number: NC
                },
                to: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    number: NC
                }
            },
            arrowStrikethrough: {
                boolean: FC
            },
            background: {
                enabled: {
                    boolean: FC
                },
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                dashes: {
                    boolean: FC,
                    array: AC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            chosen: {
                label: {
                    boolean: FC,
                    function: "function"
                },
                edge: {
                    boolean: FC,
                    function: "function"
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            color: {
                color: {
                    string: zC
                },
                highlight: {
                    string: zC
                },
                hover: {
                    string: zC
                },
                inherit: {
                    string: [
                        "from",
                        "to",
                        "both"
                    ],
                    boolean: FC
                },
                opacity: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            dashes: {
                boolean: FC,
                array: AC
            },
            font: {
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                face: {
                    string: zC
                },
                background: {
                    string: zC
                },
                strokeWidth: {
                    number: NC
                },
                strokeColor: {
                    string: zC
                },
                align: {
                    string: [
                        "horizontal",
                        "top",
                        "middle",
                        "bottom"
                    ]
                },
                vadjust: {
                    number: NC
                },
                multi: {
                    boolean: FC,
                    string: zC
                },
                bold: {
                    color: {
                        string: zC
                    },
                    size: {
                        number: NC
                    },
                    face: {
                        string: zC
                    },
                    mod: {
                        string: zC
                    },
                    vadjust: {
                        number: NC
                    },
                    __type__: {
                        object: RC,
                        string: zC
                    }
                },
                boldital: {
                    color: {
                        string: zC
                    },
                    size: {
                        number: NC
                    },
                    face: {
                        string: zC
                    },
                    mod: {
                        string: zC
                    },
                    vadjust: {
                        number: NC
                    },
                    __type__: {
                        object: RC,
                        string: zC
                    }
                },
                ital: {
                    color: {
                        string: zC
                    },
                    size: {
                        number: NC
                    },
                    face: {
                        string: zC
                    },
                    mod: {
                        string: zC
                    },
                    vadjust: {
                        number: NC
                    },
                    __type__: {
                        object: RC,
                        string: zC
                    }
                },
                mono: {
                    color: {
                        string: zC
                    },
                    size: {
                        number: NC
                    },
                    face: {
                        string: zC
                    },
                    mod: {
                        string: zC
                    },
                    vadjust: {
                        number: NC
                    },
                    __type__: {
                        object: RC,
                        string: zC
                    }
                },
                __type__: {
                    object: RC,
                    string: zC
                }
            },
            hidden: {
                boolean: FC
            },
            hoverWidth: {
                function: "function",
                number: NC
            },
            label: {
                string: zC,
                undefined: "undefined"
            },
            labelHighlightBold: {
                boolean: FC
            },
            length: {
                number: NC,
                undefined: "undefined"
            },
            physics: {
                boolean: FC
            },
            scaling: {
                min: {
                    number: NC
                },
                max: {
                    number: NC
                },
                label: {
                    enabled: {
                        boolean: FC
                    },
                    min: {
                        number: NC
                    },
                    max: {
                        number: NC
                    },
                    maxVisible: {
                        number: NC
                    },
                    drawThreshold: {
                        number: NC
                    },
                    __type__: {
                        object: RC,
                        boolean: FC
                    }
                },
                customScalingFunction: {
                    function: "function"
                },
                __type__: {
                    object: RC
                }
            },
            selectionWidth: {
                function: "function",
                number: NC
            },
            selfReferenceSize: {
                number: NC
            },
            selfReference: {
                size: {
                    number: NC
                },
                angle: {
                    number: NC
                },
                renderBehindTheNode: {
                    boolean: FC
                },
                __type__: {
                    object: RC
                }
            },
            shadow: {
                enabled: {
                    boolean: FC
                },
                color: {
                    string: zC
                },
                size: {
                    number: NC
                },
                x: {
                    number: NC
                },
                y: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            smooth: {
                enabled: {
                    boolean: FC
                },
                type: {
                    string: [
                        "dynamic",
                        "continuous",
                        "discrete",
                        "diagonalCross",
                        "straightCross",
                        "horizontal",
                        "vertical",
                        "curvedCW",
                        "curvedCCW",
                        "cubicBezier"
                    ]
                },
                roundness: {
                    number: NC
                },
                forceDirection: {
                    string: [
                        "horizontal",
                        "vertical",
                        "none"
                    ],
                    boolean: FC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            title: {
                string: zC,
                undefined: "undefined"
            },
            width: {
                number: NC
            },
            widthConstraint: {
                maximum: {
                    number: NC
                },
                __type__: {
                    object: RC,
                    boolean: FC,
                    number: NC
                }
            },
            value: {
                number: NC,
                undefined: "undefined"
            },
            __type__: {
                object: RC
            }
        },
        groups: {
            useDefaultGroups: {
                boolean: FC
            },
            __any__: LC,
            __type__: {
                object: RC
            }
        },
        interaction: {
            dragNodes: {
                boolean: FC
            },
            dragView: {
                boolean: FC
            },
            hideEdgesOnDrag: {
                boolean: FC
            },
            hideEdgesOnZoom: {
                boolean: FC
            },
            hideNodesOnDrag: {
                boolean: FC
            },
            hover: {
                boolean: FC
            },
            keyboard: {
                enabled: {
                    boolean: FC
                },
                speed: {
                    x: {
                        number: NC
                    },
                    y: {
                        number: NC
                    },
                    zoom: {
                        number: NC
                    },
                    __type__: {
                        object: RC
                    }
                },
                bindToWindow: {
                    boolean: FC
                },
                autoFocus: {
                    boolean: FC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            multiselect: {
                boolean: FC
            },
            navigationButtons: {
                boolean: FC
            },
            selectable: {
                boolean: FC
            },
            selectConnectedEdges: {
                boolean: FC
            },
            hoverConnectedEdges: {
                boolean: FC
            },
            tooltipDelay: {
                number: NC
            },
            zoomView: {
                boolean: FC
            },
            zoomSpeed: {
                number: NC
            },
            __type__: {
                object: RC
            }
        },
        layout: {
            randomSeed: {
                undefined: "undefined",
                number: NC,
                string: zC
            },
            improvedLayout: {
                boolean: FC
            },
            clusterThreshold: {
                number: NC
            },
            hierarchical: {
                enabled: {
                    boolean: FC
                },
                levelSeparation: {
                    number: NC
                },
                nodeSpacing: {
                    number: NC
                },
                treeSpacing: {
                    number: NC
                },
                blockShifting: {
                    boolean: FC
                },
                edgeMinimization: {
                    boolean: FC
                },
                parentCentralization: {
                    boolean: FC
                },
                direction: {
                    string: [
                        "UD",
                        "DU",
                        "LR",
                        "RL"
                    ]
                },
                sortMethod: {
                    string: [
                        "hubsize",
                        "directed"
                    ]
                },
                shakeTowards: {
                    string: [
                        "leaves",
                        "roots"
                    ]
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            __type__: {
                object: RC
            }
        },
        manipulation: {
            enabled: {
                boolean: FC
            },
            initiallyActive: {
                boolean: FC
            },
            addNode: {
                boolean: FC,
                function: "function"
            },
            addEdge: {
                boolean: FC,
                function: "function"
            },
            editNode: {
                function: "function"
            },
            editEdge: {
                editWithoutDrag: {
                    function: "function"
                },
                __type__: {
                    object: RC,
                    boolean: FC,
                    function: "function"
                }
            },
            deleteNode: {
                boolean: FC,
                function: "function"
            },
            deleteEdge: {
                boolean: FC,
                function: "function"
            },
            controlNodeStyle: LC,
            __type__: {
                object: RC,
                boolean: FC
            }
        },
        nodes: LC,
        physics: {
            enabled: {
                boolean: FC
            },
            barnesHut: {
                theta: {
                    number: NC
                },
                gravitationalConstant: {
                    number: NC
                },
                centralGravity: {
                    number: NC
                },
                springLength: {
                    number: NC
                },
                springConstant: {
                    number: NC
                },
                damping: {
                    number: NC
                },
                avoidOverlap: {
                    number: NC
                },
                __type__: {
                    object: RC
                }
            },
            forceAtlas2Based: {
                theta: {
                    number: NC
                },
                gravitationalConstant: {
                    number: NC
                },
                centralGravity: {
                    number: NC
                },
                springLength: {
                    number: NC
                },
                springConstant: {
                    number: NC
                },
                damping: {
                    number: NC
                },
                avoidOverlap: {
                    number: NC
                },
                __type__: {
                    object: RC
                }
            },
            repulsion: {
                centralGravity: {
                    number: NC
                },
                springLength: {
                    number: NC
                },
                springConstant: {
                    number: NC
                },
                nodeDistance: {
                    number: NC
                },
                damping: {
                    number: NC
                },
                __type__: {
                    object: RC
                }
            },
            hierarchicalRepulsion: {
                centralGravity: {
                    number: NC
                },
                springLength: {
                    number: NC
                },
                springConstant: {
                    number: NC
                },
                nodeDistance: {
                    number: NC
                },
                damping: {
                    number: NC
                },
                avoidOverlap: {
                    number: NC
                },
                __type__: {
                    object: RC
                }
            },
            maxVelocity: {
                number: NC
            },
            minVelocity: {
                number: NC
            },
            solver: {
                string: [
                    "barnesHut",
                    "repulsion",
                    "hierarchicalRepulsion",
                    "forceAtlas2Based"
                ]
            },
            stabilization: {
                enabled: {
                    boolean: FC
                },
                iterations: {
                    number: NC
                },
                updateInterval: {
                    number: NC
                },
                onlyDynamicEdges: {
                    boolean: FC
                },
                fit: {
                    boolean: FC
                },
                __type__: {
                    object: RC,
                    boolean: FC
                }
            },
            timestep: {
                number: NC
            },
            adaptiveTimestep: {
                boolean: FC
            },
            wind: {
                x: {
                    number: NC
                },
                y: {
                    number: NC
                },
                __type__: {
                    object: RC
                }
            },
            __type__: {
                object: RC,
                boolean: FC
            }
        },
        autoResize: {
            boolean: FC
        },
        clickToUse: {
            boolean: FC
        },
        locale: {
            string: zC
        },
        locales: {
            __any__: {
                any: "any"
            },
            __type__: {
                object: RC
            }
        },
        height: {
            string: zC
        },
        width: {
            string: zC
        },
        __type__: {
            object: RC
        }
    }, WC = {
        nodes: {
            borderWidth: [
                1,
                0,
                10,
                1
            ],
            borderWidthSelected: [
                2,
                0,
                10,
                1
            ],
            color: {
                border: [
                    "color",
                    "#2B7CE9"
                ],
                background: [
                    "color",
                    "#97C2FC"
                ],
                highlight: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                },
                hover: {
                    border: [
                        "color",
                        "#2B7CE9"
                    ],
                    background: [
                        "color",
                        "#D2E5FF"
                    ]
                }
            },
            opacity: [
                0,
                0,
                1,
                .1
            ],
            fixed: {
                x: !1,
                y: !1
            },
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    0,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ]
            },
            hidden: !1,
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    10,
                    0,
                    200,
                    1
                ],
                max: [
                    30,
                    0,
                    200,
                    1
                ],
                label: {
                    enabled: !1,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            shape: [
                "ellipse",
                "box",
                "circle",
                "database",
                "diamond",
                "dot",
                "square",
                "star",
                "text",
                "triangle",
                "triangleDown",
                "hexagon"
            ],
            shapeProperties: {
                borderDashes: !1,
                borderRadius: [
                    6,
                    0,
                    20,
                    1
                ],
                interpolation: !0,
                useImageSize: !1
            },
            size: [
                25,
                0,
                200,
                1
            ]
        },
        edges: {
            arrows: {
                to: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                },
                middle: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                },
                from: {
                    enabled: !1,
                    scaleFactor: [
                        1,
                        0,
                        3,
                        .05
                    ],
                    type: "arrow"
                }
            },
            endPointOffset: {
                from: [
                    0,
                    -10,
                    10,
                    1
                ],
                to: [
                    0,
                    -10,
                    10,
                    1
                ]
            },
            arrowStrikethrough: !0,
            color: {
                color: [
                    "color",
                    "#848484"
                ],
                highlight: [
                    "color",
                    "#848484"
                ],
                hover: [
                    "color",
                    "#848484"
                ],
                inherit: [
                    "from",
                    "to",
                    "both",
                    !0,
                    !1
                ],
                opacity: [
                    1,
                    0,
                    1,
                    .05
                ]
            },
            dashes: !1,
            font: {
                color: [
                    "color",
                    "#343434"
                ],
                size: [
                    14,
                    0,
                    100,
                    1
                ],
                face: [
                    "arial",
                    "verdana",
                    "tahoma"
                ],
                background: [
                    "color",
                    "none"
                ],
                strokeWidth: [
                    2,
                    0,
                    50,
                    1
                ],
                strokeColor: [
                    "color",
                    "#ffffff"
                ],
                align: [
                    "horizontal",
                    "top",
                    "middle",
                    "bottom"
                ]
            },
            hidden: !1,
            hoverWidth: [
                1.5,
                0,
                5,
                .1
            ],
            labelHighlightBold: !0,
            physics: !0,
            scaling: {
                min: [
                    1,
                    0,
                    100,
                    1
                ],
                max: [
                    15,
                    0,
                    100,
                    1
                ],
                label: {
                    enabled: !0,
                    min: [
                        14,
                        0,
                        200,
                        1
                    ],
                    max: [
                        30,
                        0,
                        200,
                        1
                    ],
                    maxVisible: [
                        30,
                        0,
                        200,
                        1
                    ],
                    drawThreshold: [
                        5,
                        0,
                        20,
                        1
                    ]
                }
            },
            selectionWidth: [
                1.5,
                0,
                5,
                .1
            ],
            selfReferenceSize: [
                20,
                0,
                200,
                1
            ],
            selfReference: {
                size: [
                    20,
                    0,
                    200,
                    1
                ],
                angle: [
                    Math.PI / 2,
                    -6 * Math.PI,
                    6 * Math.PI,
                    Math.PI / 8
                ],
                renderBehindTheNode: !0
            },
            shadow: {
                enabled: !1,
                color: "rgba(0,0,0,0.5)",
                size: [
                    10,
                    0,
                    20,
                    1
                ],
                x: [
                    5,
                    -30,
                    30,
                    1
                ],
                y: [
                    5,
                    -30,
                    30,
                    1
                ]
            },
            smooth: {
                enabled: !0,
                type: [
                    "dynamic",
                    "continuous",
                    "discrete",
                    "diagonalCross",
                    "straightCross",
                    "horizontal",
                    "vertical",
                    "curvedCW",
                    "curvedCCW",
                    "cubicBezier"
                ],
                forceDirection: [
                    "horizontal",
                    "vertical",
                    "none"
                ],
                roundness: [
                    .5,
                    0,
                    1,
                    .05
                ]
            },
            width: [
                1,
                0,
                30,
                1
            ]
        },
        layout: {
            hierarchical: {
                enabled: !1,
                levelSeparation: [
                    150,
                    20,
                    500,
                    5
                ],
                nodeSpacing: [
                    100,
                    20,
                    500,
                    5
                ],
                treeSpacing: [
                    200,
                    20,
                    500,
                    5
                ],
                blockShifting: !0,
                edgeMinimization: !0,
                parentCentralization: !0,
                direction: [
                    "UD",
                    "DU",
                    "LR",
                    "RL"
                ],
                sortMethod: [
                    "hubsize",
                    "directed"
                ],
                shakeTowards: [
                    "leaves",
                    "roots"
                ]
            }
        },
        interaction: {
            dragNodes: !0,
            dragView: !0,
            hideEdgesOnDrag: !1,
            hideEdgesOnZoom: !1,
            hideNodesOnDrag: !1,
            hover: !1,
            keyboard: {
                enabled: !1,
                speed: {
                    x: [
                        10,
                        0,
                        40,
                        1
                    ],
                    y: [
                        10,
                        0,
                        40,
                        1
                    ],
                    zoom: [
                        .02,
                        0,
                        .1,
                        .005
                    ]
                },
                bindToWindow: !0,
                autoFocus: !0
            },
            multiselect: !1,
            navigationButtons: !1,
            selectable: !0,
            selectConnectedEdges: !0,
            hoverConnectedEdges: !0,
            tooltipDelay: [
                300,
                0,
                1e3,
                25
            ],
            zoomView: !0,
            zoomSpeed: [
                1,
                .1,
                2,
                .1
            ]
        },
        manipulation: {
            enabled: !1,
            initiallyActive: !1
        },
        physics: {
            enabled: !0,
            barnesHut: {
                theta: [
                    .5,
                    .1,
                    1,
                    .05
                ],
                gravitationalConstant: [
                    -2000,
                    -30000,
                    0,
                    50
                ],
                centralGravity: [
                    .3,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .04,
                    0,
                    1.2,
                    .005
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            forceAtlas2Based: {
                theta: [
                    .5,
                    .1,
                    1,
                    .05
                ],
                gravitationalConstant: [
                    -50,
                    -500,
                    0,
                    1
                ],
                centralGravity: [
                    .01,
                    0,
                    1,
                    .005
                ],
                springLength: [
                    95,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .08,
                    0,
                    1.2,
                    .005
                ],
                damping: [
                    .4,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            repulsion: {
                centralGravity: [
                    .2,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    200,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .05,
                    0,
                    1.2,
                    .005
                ],
                nodeDistance: [
                    100,
                    0,
                    500,
                    5
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ]
            },
            hierarchicalRepulsion: {
                centralGravity: [
                    .2,
                    0,
                    10,
                    .05
                ],
                springLength: [
                    100,
                    0,
                    500,
                    5
                ],
                springConstant: [
                    .01,
                    0,
                    1.2,
                    .005
                ],
                nodeDistance: [
                    120,
                    0,
                    500,
                    5
                ],
                damping: [
                    .09,
                    0,
                    1,
                    .01
                ],
                avoidOverlap: [
                    0,
                    0,
                    1,
                    .01
                ]
            },
            maxVelocity: [
                50,
                0,
                150,
                1
            ],
            minVelocity: [
                .1,
                .01,
                .5,
                .01
            ],
            solver: [
                "barnesHut",
                "forceAtlas2Based",
                "repulsion",
                "hierarchicalRepulsion"
            ],
            timestep: [
                .5,
                .01,
                1,
                .01
            ],
            wind: {
                x: [
                    0,
                    -10,
                    10,
                    .1
                ],
                y: [
                    0,
                    -10,
                    10,
                    .1
                ]
            }
        }
    }, VC = function(t, e, i) {
        var o;
        return !(!zf(t).call(t, "physics") || !zf(o = WC.physics.solver).call(o, e) || i.physics.solver === e || "wind" === e);
    }, qC = Object.freeze({
        __proto__: null,
        configuratorHideOption: VC,
        allOptions: HC,
        configureOptions: WC
    }), UC = function() {
        function t() {
            Xl(this, t);
        }
        return $l(t, [
            {
                key: "getDistances",
                value: function(t, e, i) {
                    for(var o = {}, n = t.edges, r = 0; r < e.length; r++){
                        var s = {};
                        o[e[r]] = s;
                        for(var a = 0; a < e.length; a++)s[e[a]] = r == a ? 0 : 1e9;
                    }
                    for(var h = 0; h < i.length; h++){
                        var d = n[i[h]];
                        !0 === d.connected && void 0 !== o[d.fromId] && void 0 !== o[d.toId] && (o[d.fromId][d.toId] = 1, o[d.toId][d.fromId] = 1);
                    }
                    for(var l = e.length, c = 0; c < l; c++)for(var u = e[c], f = o[u], p = 0; p < l - 1; p++)for(var v = e[p], g = o[v], y = p + 1; y < l; y++){
                        var m = e[y], b = o[m], w = Math.min(g[m], g[u] + f[m]);
                        g[m] = w, b[v] = w;
                    }
                    return o;
                }
            }
        ]), t;
    }(), YC = function() {
        function t(e, i, o) {
            Xl(this, t), this.body = e, this.springLength = i, this.springConstant = o, this.distanceSolver = new UC;
        }
        return $l(t, [
            {
                key: "setOptions",
                value: function(t) {
                    t && (t.springLength && (this.springLength = t.springLength), t.springConstant && (this.springConstant = t.springConstant));
                }
            },
            {
                key: "solve",
                value: function(t, e) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = this.distanceSolver.getDistances(this.body, t, e);
                    this._createL_matrix(o), this._createK_matrix(o), this._createE_matrix();
                    for(var n = .01, r = 1, s = 0, a = Math.max(1e3, Math.min(10 * this.body.nodeIndices.length, 6e3)), h = 5, d = 1e9, l = 0, c = 0, u = 0, f = 0, p = 0; d > n && s < a;){
                        s += 1;
                        var v = this._getHighestEnergyNode(i), g = $c(v, 4);
                        for(l = g[0], d = g[1], c = g[2], u = g[3], f = d, p = 0; f > r && p < h;){
                            p += 1, this._moveNode(l, c, u);
                            var y = this._getEnergy(l), m = $c(y, 3);
                            f = m[0], c = m[1], u = m[2];
                        }
                    }
                }
            },
            {
                key: "_getHighestEnergyNode",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = 0, n = e[0], r = 0, s = 0, a = 0; a < e.length; a++){
                        var h = e[a];
                        if (!0 !== i[h].predefinedPosition || !0 === i[h].isCluster && !0 === t || !0 !== i[h].options.fixed.x || !0 !== i[h].options.fixed.y) {
                            var d = $c(this._getEnergy(h), 3), l = d[0], c = d[1], u = d[2];
                            o < l && (o = l, n = h, r = c, s = u);
                        }
                    }
                    return [
                        n,
                        o,
                        r,
                        s
                    ];
                }
            },
            {
                key: "_getEnergy",
                value: function(t) {
                    var e = $c(this.E_sums[t], 2), i = e[0], o = e[1];
                    return [
                        Math.sqrt(Math.pow(i, 2) + Math.pow(o, 2)),
                        i,
                        o
                    ];
                }
            },
            {
                key: "_moveNode",
                value: function(t, e, i) {
                    for(var o = this.body.nodeIndices, n = this.body.nodes, r = 0, s = 0, a = 0, h = n[t].x, d = n[t].y, l = this.K_matrix[t], c = this.L_matrix[t], u = 0; u < o.length; u++){
                        var f = o[u];
                        if (f !== t) {
                            var p = n[f].x, v = n[f].y, g = l[f], y = c[f], m = 1 / Math.pow(Math.pow(h - p, 2) + Math.pow(d - v, 2), 1.5);
                            r += g * (1 - y * Math.pow(d - v, 2) * m), s += g * (y * (h - p) * (d - v) * m), a += g * (1 - y * Math.pow(h - p, 2) * m);
                        }
                    }
                    var b = (e / r + i / s) / (s / r - a / s), w = -(s * b + e) / r;
                    n[t].x += w, n[t].y += b, this._updateE_matrix(t);
                }
            },
            {
                key: "_createL_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springLength;
                    this.L_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.L_matrix[e[o]] = {};
                        for(var n = 0; n < e.length; n++)this.L_matrix[e[o]][e[n]] = i * t[e[o]][e[n]];
                    }
                }
            },
            {
                key: "_createK_matrix",
                value: function(t) {
                    var e = this.body.nodeIndices, i = this.springConstant;
                    this.K_matrix = [];
                    for(var o = 0; o < e.length; o++){
                        this.K_matrix[e[o]] = {};
                        for(var n = 0; n < e.length; n++)this.K_matrix[e[o]][e[n]] = i * Math.pow(t[e[o]][e[n]], -2);
                    }
                }
            },
            {
                key: "_createE_matrix",
                value: function() {
                    var t = this.body.nodeIndices, e = this.body.nodes;
                    this.E_matrix = {}, this.E_sums = {};
                    for(var i = 0; i < t.length; i++)this.E_matrix[t[i]] = [];
                    for(var o = 0; o < t.length; o++){
                        for(var n = t[o], r = e[n].x, s = e[n].y, a = 0, h = 0, d = o; d < t.length; d++){
                            var l = t[d];
                            if (l !== n) {
                                var c = e[l].x, u = e[l].y, f = 1 / Math.sqrt(Math.pow(r - c, 2) + Math.pow(s - u, 2));
                                this.E_matrix[n][d] = [
                                    this.K_matrix[n][l] * (r - c - this.L_matrix[n][l] * (r - c) * f),
                                    this.K_matrix[n][l] * (s - u - this.L_matrix[n][l] * (s - u) * f)
                                ], this.E_matrix[l][o] = this.E_matrix[n][d], a += this.E_matrix[n][d][0], h += this.E_matrix[n][d][1];
                            }
                        }
                        this.E_sums[n] = [
                            a,
                            h
                        ];
                    }
                }
            },
            {
                key: "_updateE_matrix",
                value: function(t) {
                    for(var e = this.body.nodeIndices, i = this.body.nodes, o = this.E_matrix[t], n = this.K_matrix[t], r = this.L_matrix[t], s = i[t].x, a = i[t].y, h = 0, d = 0, l = 0; l < e.length; l++){
                        var c = e[l];
                        if (c !== t) {
                            var u = o[l], f = u[0], p = u[1], v = i[c].x, g = i[c].y, y = 1 / Math.sqrt(Math.pow(s - v, 2) + Math.pow(a - g, 2)), m = n[c] * (s - v - r[c] * (s - v) * y), b = n[c] * (a - g - r[c] * (a - g) * y);
                            o[l] = [
                                m,
                                b
                            ], h += m, d += b;
                            var w = this.E_sums[c];
                            w[0] += m - f, w[1] += b - p;
                        }
                    }
                    this.E_sums[t] = [
                        h,
                        d
                    ];
                }
            }
        ]), t;
    }();
    function XC(t, e, i) {
        var o, n, r, s, a = this;
        if (!(this instanceof XC)) throw new SyntaxError("Constructor must be called with the new operator");
        this.options = {}, this.defaultOptions = {
            locale: "en",
            locales: Jm,
            clickToUse: !1
        }, fo(this.options, this.defaultOptions), this.body = {
            container: t,
            nodes: {},
            nodeIndices: [],
            edges: {},
            edgeIndices: [],
            emitter: {
                on: Fo(o = this.on).call(o, this),
                off: Fo(n = this.off).call(n, this),
                emit: Fo(r = this.emit).call(r, this),
                once: Fo(s = this.once).call(s, this)
            },
            eventListeners: {
                onTap: function() {},
                onTouch: function() {},
                onDoubleTap: function() {},
                onHold: function() {},
                onDragStart: function() {},
                onDrag: function() {},
                onDragEnd: function() {},
                onMouseWheel: function() {},
                onPinch: function() {},
                onMouseMove: function() {},
                onRelease: function() {},
                onContext: function() {}
            },
            data: {
                nodes: null,
                edges: null
            },
            functions: {
                createNode: function() {},
                createEdge: function() {},
                getPointer: function() {}
            },
            modules: {},
            view: {
                scale: 1,
                translation: {
                    x: 0,
                    y: 0
                }
            },
            selectionBox: {
                show: !1,
                position: {
                    start: {
                        x: 0,
                        y: 0
                    },
                    end: {
                        x: 0,
                        y: 0
                    }
                }
            }
        }, this.bindEventListeners(), this.images = new eb(function() {
            return a.body.emitter.emit("_requestRedraw");
        }), this.groups = new Ow, this.canvas = new nE(this.body), this.selectionHandler = new cO(this.body, this.canvas), this.interactionHandler = new cE(this.body, this.canvas, this.selectionHandler), this.view = new sE(this.body, this.canvas), this.renderer = new tE(this.body, this.canvas), this.physics = new Lx(this.body), this.layoutEngine = new PC(this.body), this.clustering = new Zx(this.body), this.manipulation = new IC(this.body, this.canvas, this.selectionHandler, this.interactionHandler), this.nodesHandler = new B_(this.body, this.images, this.groups, this.layoutEngine), this.edgesHandler = new Tx(this.body, this.images, this.groups), this.body.modules.kamadaKawai = new YC(this.body, 150, .05), this.body.modules.clustering = this.clustering, this.canvas._create(), this.setOptions(i), this.setData(e);
    }
    Vo(XC.prototype), XC.prototype.setOptions = function(t) {
        var e = this;
        if (null === t && (t = void 0), void 0 !== t) {
            !0 === ym.validate(t, HC) && console.error("%cErrors have been found in the supplied options object.", gm);
            if (Ny([
                "locale",
                "locales",
                "clickToUse"
            ], this.options, t), void 0 !== t.locale && (t.locale = function(t, e) {
                try {
                    var i = $c(e.split(/[-_ /]/, 2), 2), o = i[0], n = i[1], r = null != o ? o.toLowerCase() : null, s = null != n ? n.toUpperCase() : null;
                    if (r && s) {
                        var a, h = r + "-" + s;
                        if (Object.prototype.hasOwnProperty.call(t, h)) return h;
                        console.warn(su(a = "Unknown variant ".concat(s, " of language ")).call(a, r, "."));
                    }
                    if (r) {
                        var d = r;
                        if (Object.prototype.hasOwnProperty.call(t, d)) return d;
                        console.warn("Unknown language ".concat(r));
                    }
                    return console.warn("Unknown locale ".concat(e, ", falling back to English.")), "en";
                } catch (t1) {
                    return console.error(t1), console.warn("Unexpected error while normalizing locale ".concat(e, ", falling back to English.")), "en";
                }
            }(t.locales || this.options.locales, t.locale)), t = this.layoutEngine.setOptions(t.layout, t), this.canvas.setOptions(t), this.groups.setOptions(t.groups), this.nodesHandler.setOptions(t.nodes), this.edgesHandler.setOptions(t.edges), this.physics.setOptions(t.physics), this.manipulation.setOptions(t.manipulation, t, this.options), this.interactionHandler.setOptions(t.interaction), this.renderer.setOptions(t.interaction), this.selectionHandler.setOptions(t.interaction), void 0 !== t.groups && this.body.emitter.emit("refreshNodes"), "configure" in t && (this.configurator || (this.configurator = new fm(this, this.body.container, WC, this.canvas.pixelRatio, VC)), this.configurator.setOptions(t.configure)), this.configurator && !0 === this.configurator.options.enabled) {
                var i = {
                    nodes: {},
                    edges: {},
                    layout: {},
                    interaction: {},
                    manipulation: {},
                    physics: {},
                    global: {}
                };
                Ry(i.nodes, this.nodesHandler.options), Ry(i.edges, this.edgesHandler.options), Ry(i.layout, this.layoutEngine.options), Ry(i.interaction, this.selectionHandler.options), Ry(i.interaction, this.renderer.options), Ry(i.interaction, this.interactionHandler.options), Ry(i.manipulation, this.manipulation.options), Ry(i.physics, this.physics.options), Ry(i.global, this.canvas.options), Ry(i.global, this.options), this.configurator.setModuleOptions(i);
            }
            void 0 !== t.clickToUse ? !0 === t.clickToUse ? void 0 === this.activator && (this.activator = new um(this.canvas.frame), this.activator.on("change", function() {
                e.body.emitter.emit("activate");
            })) : (void 0 !== this.activator && (this.activator.destroy(), delete this.activator), this.body.emitter.emit("activate")) : this.body.emitter.emit("activate"), this.canvas.setSize(), this.body.emitter.emit("startSimulation");
        }
    }, XC.prototype._updateVisibleIndices = function() {
        var t = this.body.nodes, e = this.body.edges;
        for(var i in this.body.nodeIndices = [], this.body.edgeIndices = [], t)Object.prototype.hasOwnProperty.call(t, i) && (this.clustering._isClusteredNode(i) || !1 !== t[i].options.hidden || this.body.nodeIndices.push(t[i].id));
        for(var o in e)if (Object.prototype.hasOwnProperty.call(e, o)) {
            var n = e[o], r = t[n.fromId], s = t[n.toId], a = void 0 !== r && void 0 !== s;
            !this.clustering._isClusteredEdge(o) && !1 === n.options.hidden && a && !1 === r.options.hidden && !1 === s.options.hidden && this.body.edgeIndices.push(n.id);
        }
    }, XC.prototype.bindEventListeners = function() {
        var t = this;
        this.body.emitter.on("_dataChanged", function() {
            t.edgesHandler._updateState(), t.body.emitter.emit("_dataUpdated");
        }), this.body.emitter.on("_dataUpdated", function() {
            t.clustering._updateState(), t._updateVisibleIndices(), t._updateValueRange(t.body.nodes), t._updateValueRange(t.body.edges), t.body.emitter.emit("startSimulation"), t.body.emitter.emit("_requestRedraw");
        });
    }, XC.prototype.setData = function(t) {
        if (this.body.emitter.emit("resetPhysics"), this.body.emitter.emit("_resetData"), this.selectionHandler.unselectAll(), t && t.dot && (t.nodes || t.edges)) throw new SyntaxError('Data must contain either parameter "dot" or  parameter pair "nodes" and "edges", but not both.');
        if (this.setOptions(t && t.options), t && t.dot) {
            console.warn("The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);");
            var e = Km(t.dot);
            this.setData(e);
        } else if (t && t.gephi) {
            console.warn("The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);");
            var i = Zm(t.gephi);
            this.setData(i);
        } else this.nodesHandler.setData(t && t.nodes, !0), this.edgesHandler.setData(t && t.edges, !0), this.body.emitter.emit("_dataChanged"), this.body.emitter.emit("_dataLoaded"), this.body.emitter.emit("initPhysics");
    }, XC.prototype.destroy = function() {
        for(var t in this.body.emitter.emit("destroy"), this.body.emitter.off(), this.off(), delete this.groups, delete this.canvas, delete this.selectionHandler, delete this.interactionHandler, delete this.view, delete this.renderer, delete this.physics, delete this.layoutEngine, delete this.clustering, delete this.manipulation, delete this.nodesHandler, delete this.edgesHandler, delete this.configurator, delete this.images, this.body.nodes)Object.prototype.hasOwnProperty.call(this.body.nodes, t) && delete this.body.nodes[t];
        for(var e in this.body.edges)Object.prototype.hasOwnProperty.call(this.body.edges, e) && delete this.body.edges[e];
        Dy(this.body.container);
    }, XC.prototype._updateValueRange = function(t) {
        var e, i = void 0, o = void 0, n = 0;
        for(e in t)if (Object.prototype.hasOwnProperty.call(t, e)) {
            var r = t[e].getValue();
            void 0 !== r && (i = void 0 === i ? r : Math.min(r, i), o = void 0 === o ? r : Math.max(r, o), n += r);
        }
        if (void 0 !== i && void 0 !== o) for(e in t)Object.prototype.hasOwnProperty.call(t, e) && t[e].setValueRange(i, o, n);
    }, XC.prototype.isActive = function() {
        return !this.activator || this.activator.active;
    }, XC.prototype.setSize = function() {
        return this.canvas.setSize.apply(this.canvas, arguments);
    }, XC.prototype.canvasToDOM = function() {
        return this.canvas.canvasToDOM.apply(this.canvas, arguments);
    }, XC.prototype.DOMtoCanvas = function() {
        return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
    }, XC.prototype.findNode = function() {
        return this.clustering.findNode.apply(this.clustering, arguments);
    }, XC.prototype.isCluster = function() {
        return this.clustering.isCluster.apply(this.clustering, arguments);
    }, XC.prototype.openCluster = function() {
        return this.clustering.openCluster.apply(this.clustering, arguments);
    }, XC.prototype.cluster = function() {
        return this.clustering.cluster.apply(this.clustering, arguments);
    }, XC.prototype.getNodesInCluster = function() {
        return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
    }, XC.prototype.clusterByConnection = function() {
        return this.clustering.clusterByConnection.apply(this.clustering, arguments);
    }, XC.prototype.clusterByHubsize = function() {
        return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
    }, XC.prototype.updateClusteredNode = function() {
        return this.clustering.updateClusteredNode.apply(this.clustering, arguments);
    }, XC.prototype.getClusteredEdges = function() {
        return this.clustering.getClusteredEdges.apply(this.clustering, arguments);
    }, XC.prototype.getBaseEdge = function() {
        return this.clustering.getBaseEdge.apply(this.clustering, arguments);
    }, XC.prototype.getBaseEdges = function() {
        return this.clustering.getBaseEdges.apply(this.clustering, arguments);
    }, XC.prototype.updateEdge = function() {
        return this.clustering.updateEdge.apply(this.clustering, arguments);
    }, XC.prototype.clusterOutliers = function() {
        return this.clustering.clusterOutliers.apply(this.clustering, arguments);
    }, XC.prototype.getSeed = function() {
        return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
    }, XC.prototype.enableEditMode = function() {
        return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
    }, XC.prototype.disableEditMode = function() {
        return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
    }, XC.prototype.addNodeMode = function() {
        return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
    }, XC.prototype.editNode = function() {
        return this.manipulation.editNode.apply(this.manipulation, arguments);
    }, XC.prototype.editNodeMode = function() {
        return console.warn("Deprecated: Please use editNode instead of editNodeMode."), this.manipulation.editNode.apply(this.manipulation, arguments);
    }, XC.prototype.addEdgeMode = function() {
        return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
    }, XC.prototype.editEdgeMode = function() {
        return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
    }, XC.prototype.deleteSelected = function() {
        return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
    }, XC.prototype.getPositions = function() {
        return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
    }, XC.prototype.getPosition = function() {
        return this.nodesHandler.getPosition.apply(this.nodesHandler, arguments);
    }, XC.prototype.storePositions = function() {
        return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
    }, XC.prototype.moveNode = function() {
        return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
    }, XC.prototype.getBoundingBox = function() {
        return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
    }, XC.prototype.getConnectedNodes = function(t) {
        return void 0 !== this.body.nodes[t] ? this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments) : this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
    }, XC.prototype.getConnectedEdges = function() {
        return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
    }, XC.prototype.startSimulation = function() {
        return this.physics.startSimulation.apply(this.physics, arguments);
    }, XC.prototype.stopSimulation = function() {
        return this.physics.stopSimulation.apply(this.physics, arguments);
    }, XC.prototype.stabilize = function() {
        return this.physics.stabilize.apply(this.physics, arguments);
    }, XC.prototype.getSelection = function() {
        return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
    }, XC.prototype.setSelection = function() {
        return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
    }, XC.prototype.getSelectedNodes = function() {
        return this.selectionHandler.getSelectedNodeIds.apply(this.selectionHandler, arguments);
    }, XC.prototype.getSelectedEdges = function() {
        return this.selectionHandler.getSelectedEdgeIds.apply(this.selectionHandler, arguments);
    }, XC.prototype.getNodeAt = function() {
        var t = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, XC.prototype.getEdgeAt = function() {
        var t = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
        return void 0 !== t && void 0 !== t.id ? t.id : t;
    }, XC.prototype.selectNodes = function() {
        return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
    }, XC.prototype.selectEdges = function() {
        return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
    }, XC.prototype.unselectAll = function() {
        this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments), this.selectionHandler.commitWithoutEmitting.apply(this.selectionHandler), this.redraw();
    }, XC.prototype.redraw = function() {
        return this.renderer.redraw.apply(this.renderer, arguments);
    }, XC.prototype.getScale = function() {
        return this.view.getScale.apply(this.view, arguments);
    }, XC.prototype.getViewPosition = function() {
        return this.view.getViewPosition.apply(this.view, arguments);
    }, XC.prototype.fit = function() {
        return this.view.fit.apply(this.view, arguments);
    }, XC.prototype.moveTo = function() {
        return this.view.moveTo.apply(this.view, arguments);
    }, XC.prototype.focus = function() {
        return this.view.focus.apply(this.view, arguments);
    }, XC.prototype.releaseNode = function() {
        return this.view.releaseNode.apply(this.view, arguments);
    }, XC.prototype.getOptionsFromConfigurator = function() {
        var t = {};
        return this.configurator && (t = this.configurator.getOptions.apply(this.configurator)), t;
    };
    var GC = Km;
    t.Network = XC, t.NetworkImages = eb, t.networkDOTParser = $m, t.networkGephiParser = Qm, t.networkOptions = qC, t.parseDOTNetwork = GC, t.parseGephiNetwork = Zm, Object.defineProperty(t, "__esModule", {
        value: !0
    });
});

},{"vis-data/peer/umd/vis-data.js":"4gm9C"}],"4gm9C":[function(require,module,exports) {
var global = arguments[3];
/**
 * vis-data
 * http://visjs.org/
 *
 * Manage unstructured data using DataSet. Add, update, and remove data, and listen for changes in the data.
 *
 * @version 7.1.4
 * @date    2022-03-15T15:23:59.245Z
 *
 * @copyright (c) 2011-2017 Almende B.V, http://almende.com
 * @copyright (c) 2017-2019 visjs contributors, https://github.com/visjs
 *
 * @license
 * vis.js is dual licensed under both
 *
 *   1. The Apache 2.0 License
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   and
 *
 *   2. The MIT License
 *      http://opensource.org/licenses/MIT
 *
 * vis.js may be distributed under either license.
 */ (function(global, factory) {
    factory(exports);
})(this, function(exports1) {
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    var defineProperty$e = {
        exports: {}
    };
    var check = function(it) {
        return it && it.Math == Math && it;
    }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global$M = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof commonjsGlobal == "object" && commonjsGlobal) || function() {
        return this;
    }() || Function("return this")();
    var fails$r = function(exec) {
        try {
            return !!exec();
        } catch (error) {
            return true;
        }
    };
    var fails$q = fails$r;
    var functionBindNative = !fails$q(function() {
        var test = (function() {
        /* empty */ }).bind(); // eslint-disable-next-line no-prototype-builtins -- safe
        return typeof test != "function" || test.hasOwnProperty("prototype");
    });
    var NATIVE_BIND$4 = functionBindNative;
    var FunctionPrototype$3 = Function.prototype;
    var apply$6 = FunctionPrototype$3.apply;
    var call$c = FunctionPrototype$3.call; // eslint-disable-next-line es/no-reflect -- safe
    var functionApply = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND$4 ? call$c.bind(apply$6) : function() {
        return call$c.apply(apply$6, arguments);
    });
    var NATIVE_BIND$3 = functionBindNative;
    var FunctionPrototype$2 = Function.prototype;
    var bind$d = FunctionPrototype$2.bind;
    var call$b = FunctionPrototype$2.call;
    var uncurryThis$t = NATIVE_BIND$3 && bind$d.bind(call$b, call$b);
    var functionUncurryThis = NATIVE_BIND$3 ? function(fn) {
        return fn && uncurryThis$t(fn);
    } : function(fn) {
        return fn && function() {
            return call$b.apply(fn, arguments);
        };
    };
    // https://tc39.es/ecma262/#sec-iscallable
    var isCallable$h = function(argument) {
        return typeof argument == "function";
    };
    var objectGetOwnPropertyDescriptor = {};
    var fails$p = fails$r; // Detect IE8's incomplete defineProperty implementation
    var descriptors = !fails$p(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty({}, 1, {
            get: function() {
                return 7;
            }
        })[1] != 7;
    });
    var NATIVE_BIND$2 = functionBindNative;
    var call$a = Function.prototype.call;
    var functionCall = NATIVE_BIND$2 ? call$a.bind(call$a) : function() {
        return call$a.apply(call$a, arguments);
    };
    var objectPropertyIsEnumerable = {};
    var $propertyIsEnumerable$2 = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getOwnPropertyDescriptor$5 = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug
    var NASHORN_BUG = getOwnPropertyDescriptor$5 && !$propertyIsEnumerable$2.call({
        1: 2
    }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
    objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor$5(this, V);
        return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable$2;
    var createPropertyDescriptor$5 = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };
    var uncurryThis$s = functionUncurryThis;
    var toString$9 = uncurryThis$s({}.toString);
    var stringSlice$1 = uncurryThis$s("".slice);
    var classofRaw$1 = function(it) {
        return stringSlice$1(toString$9(it), 8, -1);
    };
    var global$L = global$M;
    var uncurryThis$r = functionUncurryThis;
    var fails$o = fails$r;
    var classof$f = classofRaw$1;
    var Object$9 = global$L.Object;
    var split = uncurryThis$r("".split); // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var indexedObject = fails$o(function() {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins -- safe
        return !Object$9("z").propertyIsEnumerable(0);
    }) ? function(it) {
        return classof$f(it) == "String" ? split(it, "") : Object$9(it);
    } : Object$9;
    var global$K = global$M;
    var TypeError$j = global$K.TypeError; // `RequireObjectCoercible` abstract operation
    // https://tc39.es/ecma262/#sec-requireobjectcoercible
    var requireObjectCoercible$5 = function(it) {
        if (it == undefined) throw TypeError$j("Can't call method on " + it);
        return it;
    };
    var IndexedObject$3 = indexedObject;
    var requireObjectCoercible$4 = requireObjectCoercible$5;
    var toIndexedObject$b = function(it) {
        return IndexedObject$3(requireObjectCoercible$4(it));
    };
    var isCallable$g = isCallable$h;
    var isObject$f = function(it) {
        return typeof it == "object" ? it !== null : isCallable$g(it);
    };
    var path$q = {};
    var path$p = path$q;
    var global$J = global$M;
    var isCallable$f = isCallable$h;
    var aFunction = function(variable) {
        return isCallable$f(variable) ? variable : undefined;
    };
    var getBuiltIn$9 = function(namespace, method) {
        return arguments.length < 2 ? aFunction(path$p[namespace]) || aFunction(global$J[namespace]) : path$p[namespace] && path$p[namespace][method] || global$J[namespace] && global$J[namespace][method];
    };
    var uncurryThis$q = functionUncurryThis;
    var objectIsPrototypeOf = uncurryThis$q({}.isPrototypeOf);
    var getBuiltIn$8 = getBuiltIn$9;
    var engineUserAgent = getBuiltIn$8("navigator", "userAgent") || "";
    var global$I = global$M;
    var userAgent$3 = engineUserAgent;
    var process = global$I.process;
    var Deno = global$I.Deno;
    var versions = process && process.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match, version;
    if (v8) {
        match = v8.split("."); // in old Chrome, versions of V8 isn't V8 = Chrome / 10
        // but their correct versions are not interesting for us
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    } // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
    // so check `userAgent` even if `.v8` exists, but 0
    if (!version && userAgent$3) {
        match = userAgent$3.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
            match = userAgent$3.match(/Chrome\/(\d+)/);
            if (match) version = +match[1];
        }
    }
    var engineV8Version = version;
    /* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION$2 = engineV8Version;
    var fails$n = fails$r; // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
    var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$n(function() {
        var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
        // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION$2 && V8_VERSION$2 < 41;
    });
    /* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL$2 = nativeSymbol;
    var useSymbolAsUid = NATIVE_SYMBOL$2 && !Symbol.sham && typeof Symbol.iterator == "symbol";
    var global$H = global$M;
    var getBuiltIn$7 = getBuiltIn$9;
    var isCallable$e = isCallable$h;
    var isPrototypeOf$i = objectIsPrototypeOf;
    var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;
    var Object$8 = global$H.Object;
    var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function(it) {
        return typeof it == "symbol";
    } : function(it) {
        var $Symbol = getBuiltIn$7("Symbol");
        return isCallable$e($Symbol) && isPrototypeOf$i($Symbol.prototype, Object$8(it));
    };
    var global$G = global$M;
    var String$4 = global$G.String;
    var tryToString$4 = function(argument) {
        try {
            return String$4(argument);
        } catch (error) {
            return "Object";
        }
    };
    var global$F = global$M;
    var isCallable$d = isCallable$h;
    var tryToString$3 = tryToString$4;
    var TypeError$i = global$F.TypeError; // `Assert: IsCallable(argument) is true`
    var aCallable$7 = function(argument) {
        if (isCallable$d(argument)) return argument;
        throw TypeError$i(tryToString$3(argument) + " is not a function");
    };
    var aCallable$6 = aCallable$7; // `GetMethod` abstract operation
    // https://tc39.es/ecma262/#sec-getmethod
    var getMethod$3 = function(V, P) {
        var func = V[P];
        return func == null ? undefined : aCallable$6(func);
    };
    var global$E = global$M;
    var call$9 = functionCall;
    var isCallable$c = isCallable$h;
    var isObject$e = isObject$f;
    var TypeError$h = global$E.TypeError; // `OrdinaryToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-ordinarytoprimitive
    var ordinaryToPrimitive$1 = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input))) return val;
        if (isCallable$c(fn = input.valueOf) && !isObject$e(val = call$9(fn, input))) return val;
        if (pref !== "string" && isCallable$c(fn = input.toString) && !isObject$e(val = call$9(fn, input))) return val;
        throw TypeError$h("Can't convert object to primitive value");
    };
    var shared$4 = {
        exports: {}
    };
    var global$D = global$M; // eslint-disable-next-line es/no-object-defineproperty -- safe
    var defineProperty$d = Object.defineProperty;
    var setGlobal$1 = function(key, value) {
        try {
            defineProperty$d(global$D, key, {
                value: value,
                configurable: true,
                writable: true
            });
        } catch (error) {
            global$D[key] = value;
        }
        return value;
    };
    var global$C = global$M;
    var setGlobal = setGlobal$1;
    var SHARED = "__core-js_shared__";
    var store$3 = global$C[SHARED] || setGlobal(SHARED, {});
    var sharedStore = store$3;
    var store$2 = sharedStore;
    (shared$4.exports = function(key, value) {
        return store$2[key] || (store$2[key] = value !== undefined ? value : {});
    })("versions", []).push({
        version: "3.21.1",
        mode: "pure",
        copyright: "\xa9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
    });
    var global$B = global$M;
    var requireObjectCoercible$3 = requireObjectCoercible$5;
    var Object$7 = global$B.Object; // `ToObject` abstract operation
    // https://tc39.es/ecma262/#sec-toobject
    var toObject$e = function(argument) {
        return Object$7(requireObjectCoercible$3(argument));
    };
    var uncurryThis$p = functionUncurryThis;
    var toObject$d = toObject$e;
    var hasOwnProperty = uncurryThis$p({}.hasOwnProperty); // `HasOwnProperty` abstract operation
    // https://tc39.es/ecma262/#sec-hasownproperty
    var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject$d(it), key);
    };
    var uncurryThis$o = functionUncurryThis;
    var id$1 = 0;
    var postfix = Math.random();
    var toString$8 = uncurryThis$o(1.0.toString);
    var uid$4 = function(key) {
        return "Symbol(" + (key === undefined ? "" : key) + ")_" + toString$8(++id$1 + postfix, 36);
    };
    var global$A = global$M;
    var shared$3 = shared$4.exports;
    var hasOwn$f = hasOwnProperty_1;
    var uid$3 = uid$4;
    var NATIVE_SYMBOL$1 = nativeSymbol;
    var USE_SYMBOL_AS_UID = useSymbolAsUid;
    var WellKnownSymbolsStore$1 = shared$3("wks");
    var Symbol$2 = global$A.Symbol;
    var symbolFor = Symbol$2 && Symbol$2["for"];
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$2 : Symbol$2 && Symbol$2.withoutSetter || uid$3;
    var wellKnownSymbol$j = function(name) {
        if (!hasOwn$f(WellKnownSymbolsStore$1, name) || !(NATIVE_SYMBOL$1 || typeof WellKnownSymbolsStore$1[name] == "string")) {
            var description = "Symbol." + name;
            if (NATIVE_SYMBOL$1 && hasOwn$f(Symbol$2, name)) WellKnownSymbolsStore$1[name] = Symbol$2[name];
            else if (USE_SYMBOL_AS_UID && symbolFor) WellKnownSymbolsStore$1[name] = symbolFor(description);
            else WellKnownSymbolsStore$1[name] = createWellKnownSymbol(description);
        }
        return WellKnownSymbolsStore$1[name];
    };
    var global$z = global$M;
    var call$8 = functionCall;
    var isObject$d = isObject$f;
    var isSymbol$2 = isSymbol$3;
    var getMethod$2 = getMethod$3;
    var ordinaryToPrimitive = ordinaryToPrimitive$1;
    var wellKnownSymbol$i = wellKnownSymbol$j;
    var TypeError$g = global$z.TypeError;
    var TO_PRIMITIVE$1 = wellKnownSymbol$i("toPrimitive"); // `ToPrimitive` abstract operation
    // https://tc39.es/ecma262/#sec-toprimitive
    var toPrimitive$1 = function(input, pref) {
        if (!isObject$d(input) || isSymbol$2(input)) return input;
        var exoticToPrim = getMethod$2(input, TO_PRIMITIVE$1);
        var result;
        if (exoticToPrim) {
            if (pref === undefined) pref = "default";
            result = call$8(exoticToPrim, input, pref);
            if (!isObject$d(result) || isSymbol$2(result)) return result;
            throw TypeError$g("Can't convert object to primitive value");
        }
        if (pref === undefined) pref = "number";
        return ordinaryToPrimitive(input, pref);
    };
    var toPrimitive = toPrimitive$1;
    var isSymbol$1 = isSymbol$3; // `ToPropertyKey` abstract operation
    // https://tc39.es/ecma262/#sec-topropertykey
    var toPropertyKey$4 = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol$1(key) ? key : key + "";
    };
    var global$y = global$M;
    var isObject$c = isObject$f;
    var document$1 = global$y.document; // typeof document.createElement is 'object' in old IE
    var EXISTS$1 = isObject$c(document$1) && isObject$c(document$1.createElement);
    var documentCreateElement$1 = function(it) {
        return EXISTS$1 ? document$1.createElement(it) : {};
    };
    var DESCRIPTORS$h = descriptors;
    var fails$m = fails$r;
    var createElement = documentCreateElement$1; // Thanks to IE8 for its funny defineProperty
    var ie8DomDefine = !DESCRIPTORS$h && !fails$m(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty(createElement("div"), "a", {
            get: function() {
                return 7;
            }
        }).a != 7;
    });
    var DESCRIPTORS$g = descriptors;
    var call$7 = functionCall;
    var propertyIsEnumerableModule$2 = objectPropertyIsEnumerable;
    var createPropertyDescriptor$4 = createPropertyDescriptor$5;
    var toIndexedObject$a = toIndexedObject$b;
    var toPropertyKey$3 = toPropertyKey$4;
    var hasOwn$e = hasOwnProperty_1;
    var IE8_DOM_DEFINE$1 = ie8DomDefine; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    objectGetOwnPropertyDescriptor.f = DESCRIPTORS$g ? $getOwnPropertyDescriptor$2 : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject$a(O);
        P = toPropertyKey$3(P);
        if (IE8_DOM_DEFINE$1) try {
            return $getOwnPropertyDescriptor$2(O, P);
        } catch (error) {
        /* empty */ }
        if (hasOwn$e(O, P)) return createPropertyDescriptor$4(!call$7(propertyIsEnumerableModule$2.f, O, P), O[P]);
    };
    var fails$l = fails$r;
    var isCallable$b = isCallable$h;
    var replacement = /#|\.prototype\./;
    var isForced$1 = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable$b(detection) ? fails$l(detection) : !!detection;
    };
    var normalize = isForced$1.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced$1.data = {};
    var NATIVE = isForced$1.NATIVE = "N";
    var POLYFILL = isForced$1.POLYFILL = "P";
    var isForced_1 = isForced$1;
    var uncurryThis$n = functionUncurryThis;
    var aCallable$5 = aCallable$7;
    var NATIVE_BIND$1 = functionBindNative;
    var bind$c = uncurryThis$n(uncurryThis$n.bind); // optional / simple context binding
    var functionBindContext = function(fn, that) {
        aCallable$5(fn);
        return that === undefined ? fn : NATIVE_BIND$1 ? bind$c(fn, that) : function() {
            return fn.apply(that, arguments);
        };
    };
    var objectDefineProperty = {};
    var DESCRIPTORS$f = descriptors;
    var fails$k = fails$r; // V8 ~ Chrome 36-
    // https://bugs.chromium.org/p/v8/issues/detail?id=3334
    var v8PrototypeDefineBug = DESCRIPTORS$f && fails$k(function() {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty(function() {
        /* empty */ }, "prototype", {
            value: 42,
            writable: false
        }).prototype != 42;
    });
    var global$x = global$M;
    var isObject$b = isObject$f;
    var String$3 = global$x.String;
    var TypeError$f = global$x.TypeError; // `Assert: Type(argument) is Object`
    var anObject$b = function(argument) {
        if (isObject$b(argument)) return argument;
        throw TypeError$f(String$3(argument) + " is not an object");
    };
    var global$w = global$M;
    var DESCRIPTORS$e = descriptors;
    var IE8_DOM_DEFINE = ie8DomDefine;
    var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
    var anObject$a = anObject$b;
    var toPropertyKey$2 = toPropertyKey$4;
    var TypeError$e = global$w.TypeError; // eslint-disable-next-line es/no-object-defineproperty -- safe
    var $defineProperty$1 = Object.defineProperty; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE$1 = "configurable";
    var WRITABLE = "writable"; // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    objectDefineProperty.f = DESCRIPTORS$e ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
        anObject$a(O);
        P = toPropertyKey$2(P);
        anObject$a(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
            var current = $getOwnPropertyDescriptor$1(O, P);
            if (current && current[WRITABLE]) {
                O[P] = Attributes.value;
                Attributes = {
                    configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
                    enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
                    writable: false
                };
            }
        }
        return $defineProperty$1(O, P, Attributes);
    } : $defineProperty$1 : function defineProperty(O, P, Attributes) {
        anObject$a(O);
        P = toPropertyKey$2(P);
        anObject$a(Attributes);
        if (IE8_DOM_DEFINE) try {
            return $defineProperty$1(O, P, Attributes);
        } catch (error) {
        /* empty */ }
        if ("get" in Attributes || "set" in Attributes) throw TypeError$e("Accessors not supported");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
    };
    var DESCRIPTORS$d = descriptors;
    var definePropertyModule$4 = objectDefineProperty;
    var createPropertyDescriptor$3 = createPropertyDescriptor$5;
    var createNonEnumerableProperty$6 = DESCRIPTORS$d ? function(object, key, value) {
        return definePropertyModule$4.f(object, key, createPropertyDescriptor$3(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };
    var global$v = global$M;
    var apply$5 = functionApply;
    var uncurryThis$m = functionUncurryThis;
    var isCallable$a = isCallable$h;
    var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;
    var isForced = isForced_1;
    var path$o = path$q;
    var bind$b = functionBindContext;
    var createNonEnumerableProperty$5 = createNonEnumerableProperty$6;
    var hasOwn$d = hasOwnProperty_1;
    var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
            if (this instanceof Wrapper) {
                switch(arguments.length){
                    case 0:
                        return new NativeConstructor();
                    case 1:
                        return new NativeConstructor(a);
                    case 2:
                        return new NativeConstructor(a, b);
                }
                return new NativeConstructor(a, b, c);
            }
            return apply$5(NativeConstructor, this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
    };
    /*
    options.target      - name of the target object
    options.global      - target is the global object
    options.stat        - export as static methods of target
    options.proto       - export as prototype methods of target
    options.real        - real prototype method for the `pure` version
    options.forced      - export even if the native feature is available
    options.bind        - bind methods to the target, required for the `pure` version
    options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
    options.unsafe      - use the simple assignment of property instead of delete + defineProperty
    options.sham        - add a flag to not completely full polyfills
    options.enumerable  - export as enumerable property
    options.noTargetGet - prevent calling a getter on target
    options.name        - the .name of the function if it does not match the key
  */ var _export = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;
        var nativeSource = GLOBAL ? global$v : STATIC ? global$v[TARGET] : (global$v[TARGET] || {}).prototype;
        var target = GLOBAL ? path$o : path$o[TARGET] || createNonEnumerableProperty$5(path$o, TARGET, {})[TARGET];
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for(key in source){
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced); // contains in native
            USE_NATIVE = !FORCED && nativeSource && hasOwn$d(nativeSource, key);
            targetProperty = target[key];
            if (USE_NATIVE) {
                if (options.noTargetGet) {
                    descriptor = getOwnPropertyDescriptor$4(nativeSource, key);
                    nativeProperty = descriptor && descriptor.value;
                } else nativeProperty = nativeSource[key]; // export native or implementation
            }
            sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
            if (USE_NATIVE && typeof targetProperty == typeof sourceProperty) continue; // bind timers to global for call from export context
            if (options.bind && USE_NATIVE) resultProperty = bind$b(sourceProperty, global$v); // wrap global constructors for prevent changs in this version
            else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
            else if (PROTO && isCallable$a(sourceProperty)) resultProperty = uncurryThis$m(sourceProperty); // default case
            else resultProperty = sourceProperty; // add a flag to not completely full polyfills
            if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty$5(resultProperty, "sham", true);
            createNonEnumerableProperty$5(target, key, resultProperty);
            if (PROTO) {
                VIRTUAL_PROTOTYPE = TARGET + "Prototype";
                if (!hasOwn$d(path$o, VIRTUAL_PROTOTYPE)) createNonEnumerableProperty$5(path$o, VIRTUAL_PROTOTYPE, {});
                 // export virtual prototype methods
                createNonEnumerableProperty$5(path$o[VIRTUAL_PROTOTYPE], key, sourceProperty); // export real prototype methods
                if (options.real && targetPrototype && !targetPrototype[key]) createNonEnumerableProperty$5(targetPrototype, key, sourceProperty);
            }
        }
    };
    var $$C = _export;
    var DESCRIPTORS$c = descriptors;
    var defineProperty$c = objectDefineProperty.f; // `Object.defineProperty` method
    // https://tc39.es/ecma262/#sec-object.defineproperty
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    $$C({
        target: "Object",
        stat: true,
        forced: Object.defineProperty !== defineProperty$c,
        sham: !DESCRIPTORS$c
    }, {
        defineProperty: defineProperty$c
    });
    var path$n = path$q;
    var Object$6 = path$n.Object;
    var defineProperty$b = defineProperty$e.exports = function defineProperty(it, key, desc) {
        return Object$6.defineProperty(it, key, desc);
    };
    if (Object$6.defineProperty.sham) defineProperty$b.sham = true;
    var parent$V = defineProperty$e.exports;
    var defineProperty$a = parent$V;
    var parent$U = defineProperty$a;
    var defineProperty$9 = parent$U;
    var parent$T = defineProperty$9;
    var defineProperty$8 = parent$T;
    var defineProperty$7 = defineProperty$8;
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            defineProperty$7(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        defineProperty$7(Constructor, "prototype", {
            writable: false
        });
        return Constructor;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) defineProperty$7(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
        else obj[key] = value;
        return obj;
    }
    var uncurryThis$l = functionUncurryThis;
    var arraySlice$5 = uncurryThis$l([].slice);
    var global$u = global$M;
    var uncurryThis$k = functionUncurryThis;
    var aCallable$4 = aCallable$7;
    var isObject$a = isObject$f;
    var hasOwn$c = hasOwnProperty_1;
    var arraySlice$4 = arraySlice$5;
    var NATIVE_BIND = functionBindNative;
    var Function$2 = global$u.Function;
    var concat$6 = uncurryThis$k([].concat);
    var join = uncurryThis$k([].join);
    var factories = {};
    var construct$4 = function(C, argsLength, args) {
        if (!hasOwn$c(factories, argsLength)) {
            for(var list = [], i = 0; i < argsLength; i++)list[i] = "a[" + i + "]";
            factories[argsLength] = Function$2("C,a", "return new C(" + join(list, ",") + ")");
        }
        return factories[argsLength](C, args);
    }; // `Function.prototype.bind` method implementation
    // https://tc39.es/ecma262/#sec-function.prototype.bind
    var functionBind = NATIVE_BIND ? Function$2.bind : function bind(that) {
        var F = aCallable$4(this);
        var Prototype = F.prototype;
        var partArgs = arraySlice$4(arguments, 1);
        var boundFunction = function /* args... */ bound() {
            var args = concat$6(partArgs, arraySlice$4(arguments));
            return this instanceof boundFunction ? construct$4(F, args.length, args) : F.apply(that, args);
        };
        if (isObject$a(Prototype)) boundFunction.prototype = Prototype;
        return boundFunction;
    };
    var $$B = _export;
    var bind$a = functionBind; // `Function.prototype.bind` method
    // https://tc39.es/ecma262/#sec-function.prototype.bind
    $$B({
        target: "Function",
        proto: true,
        forced: Function.bind !== bind$a
    }, {
        bind: bind$a
    });
    var path$m = path$q;
    var entryVirtual$k = function(CONSTRUCTOR) {
        return path$m[CONSTRUCTOR + "Prototype"];
    };
    var entryVirtual$j = entryVirtual$k;
    var bind$9 = entryVirtual$j("Function").bind;
    var isPrototypeOf$h = objectIsPrototypeOf;
    var method$e = bind$9;
    var FunctionPrototype$1 = Function.prototype;
    var bind$8 = function(it) {
        var own = it.bind;
        return it === FunctionPrototype$1 || isPrototypeOf$h(FunctionPrototype$1, it) && own === FunctionPrototype$1.bind ? method$e : own;
    };
    var parent$S = bind$8;
    var bind$7 = parent$S;
    var bind$6 = bind$7;
    var ceil = Math.ceil;
    var floor$1 = Math.floor; // `ToIntegerOrInfinity` abstract operation
    // https://tc39.es/ecma262/#sec-tointegerorinfinity
    var toIntegerOrInfinity$4 = function(argument) {
        var number = +argument; // eslint-disable-next-line no-self-compare -- safe
        return number !== number || number === 0 ? 0 : (number > 0 ? floor$1 : ceil)(number);
    };
    var toIntegerOrInfinity$3 = toIntegerOrInfinity$4;
    var min$2 = Math.min; // `ToLength` abstract operation
    // https://tc39.es/ecma262/#sec-tolength
    var toLength$1 = function(argument) {
        return argument > 0 ? min$2(toIntegerOrInfinity$3(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
    };
    var toLength = toLength$1; // `LengthOfArrayLike` abstract operation
    // https://tc39.es/ecma262/#sec-lengthofarraylike
    var lengthOfArrayLike$d = function(obj) {
        return toLength(obj.length);
    };
    var global$t = global$M;
    var aCallable$3 = aCallable$7;
    var toObject$c = toObject$e;
    var IndexedObject$2 = indexedObject;
    var lengthOfArrayLike$c = lengthOfArrayLike$d;
    var TypeError$d = global$t.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation
    var createMethod$5 = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
            aCallable$3(callbackfn);
            var O = toObject$c(that);
            var self1 = IndexedObject$2(O);
            var length = lengthOfArrayLike$c(O);
            var index = IS_RIGHT ? length - 1 : 0;
            var i = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2) while(true){
                if (index in self1) {
                    memo = self1[index];
                    index += i;
                    break;
                }
                index += i;
                if (IS_RIGHT ? index < 0 : length <= index) throw TypeError$d("Reduce of empty array with no initial value");
            }
            for(; IS_RIGHT ? index >= 0 : length > index; index += i)if (index in self1) memo = callbackfn(memo, self1[index], index, O);
            return memo;
        };
    };
    var arrayReduce = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod$5(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod$5(true)
    };
    var fails$j = fails$r;
    var arrayMethodIsStrict$5 = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails$j(function() {
            // eslint-disable-next-line no-useless-call -- required for testing
            method.call(null, argument || function() {
                return 1;
            }, 1);
        });
    };
    var classof$e = classofRaw$1;
    var global$s = global$M;
    var engineIsNode = classof$e(global$s.process) == "process";
    var $$A = _export;
    var $reduce = arrayReduce.left;
    var arrayMethodIsStrict$4 = arrayMethodIsStrict$5;
    var CHROME_VERSION = engineV8Version;
    var IS_NODE = engineIsNode;
    var STRICT_METHOD$4 = arrayMethodIsStrict$4("reduce"); // Chrome 80-82 has a critical bug
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
    // https://tc39.es/ecma262/#sec-array.prototype.reduce
    $$A({
        target: "Array",
        proto: true,
        forced: !STRICT_METHOD$4 || CHROME_BUG
    }, {
        reduce: function reduce(callbackfn) {
            var length = arguments.length;
            return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
        }
    });
    var entryVirtual$i = entryVirtual$k;
    var reduce$3 = entryVirtual$i("Array").reduce;
    var isPrototypeOf$g = objectIsPrototypeOf;
    var method$d = reduce$3;
    var ArrayPrototype$e = Array.prototype;
    var reduce$2 = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype$e || isPrototypeOf$g(ArrayPrototype$e, it) && own === ArrayPrototype$e.reduce ? method$d : own;
    };
    var parent$R = reduce$2;
    var reduce$1 = parent$R;
    var reduce = reduce$1;
    var classof$d = classofRaw$1; // `IsArray` abstract operation
    // https://tc39.es/ecma262/#sec-isarray
    // eslint-disable-next-line es/no-array-isarray -- safe
    var isArray$d = Array.isArray || function isArray(argument) {
        return classof$d(argument) == "Array";
    };
    var wellKnownSymbol$h = wellKnownSymbol$j;
    var TO_STRING_TAG$3 = wellKnownSymbol$h("toStringTag");
    var test$2 = {};
    test$2[TO_STRING_TAG$3] = "z";
    var toStringTagSupport = String(test$2) === "[object z]";
    var global$r = global$M;
    var TO_STRING_TAG_SUPPORT$2 = toStringTagSupport;
    var isCallable$9 = isCallable$h;
    var classofRaw = classofRaw$1;
    var wellKnownSymbol$g = wellKnownSymbol$j;
    var TO_STRING_TAG$2 = wellKnownSymbol$g("toStringTag");
    var Object$5 = global$r.Object; // ES3 wrong here
    var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
    }()) == "Arguments"; // fallback for IE11 Script Access Denied error
    var tryGet = function(it, key) {
        try {
            return it[key];
        } catch (error) {
        /* empty */ }
    }; // getting tag from ES6+ `Object.prototype.toString`
    var classof$c = TO_STRING_TAG_SUPPORT$2 ? classofRaw : function(it) {
        var O, tag, result;
        return it === undefined ? "Undefined" : it === null ? "Null" // @@toStringTag case
         : typeof (tag = tryGet(O = Object$5(it), TO_STRING_TAG$2)) == "string" ? tag // builtinTag case
         : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
         : (result = classofRaw(O)) == "Object" && isCallable$9(O.callee) ? "Arguments" : result;
    };
    var uncurryThis$j = functionUncurryThis;
    var isCallable$8 = isCallable$h;
    var store$1 = sharedStore;
    var functionToString = uncurryThis$j(Function.toString); // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
    if (!isCallable$8(store$1.inspectSource)) store$1.inspectSource = function(it) {
        return functionToString(it);
    };
    var inspectSource$2 = store$1.inspectSource;
    var uncurryThis$i = functionUncurryThis;
    var fails$i = fails$r;
    var isCallable$7 = isCallable$h;
    var classof$b = classof$c;
    var getBuiltIn$6 = getBuiltIn$9;
    var inspectSource$1 = inspectSource$2;
    var noop = function() {
    /* empty */ };
    var empty = [];
    var construct$3 = getBuiltIn$6("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec$2 = uncurryThis$i(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
    var isConstructorModern = function isConstructor(argument) {
        if (!isCallable$7(argument)) return false;
        try {
            construct$3(noop, empty, argument);
            return true;
        } catch (error) {
            return false;
        }
    };
    var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable$7(argument)) return false;
        switch(classof$b(argument)){
            case "AsyncFunction":
            case "GeneratorFunction":
            case "AsyncGeneratorFunction":
                return false;
        }
        try {
            // we can't check .prototype since constructors produced by .bind haven't it
            // `Function#toString` throws on some built-it function in some legacy engines
            // (for example, `DOMQuad` and similar in FF41-)
            return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));
        } catch (error) {
            return true;
        }
    };
    isConstructorLegacy.sham = true; // `IsConstructor` abstract operation
    // https://tc39.es/ecma262/#sec-isconstructor
    var isConstructor$4 = !construct$3 || fails$i(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
            called = true;
        }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
    var global$q = global$M;
    var isArray$c = isArray$d;
    var isConstructor$3 = isConstructor$4;
    var isObject$9 = isObject$f;
    var wellKnownSymbol$f = wellKnownSymbol$j;
    var SPECIES$3 = wellKnownSymbol$f("species");
    var Array$5 = global$q.Array; // a part of `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesConstructor$1 = function(originalArray) {
        var C;
        if (isArray$c(originalArray)) {
            C = originalArray.constructor; // cross-realm fallback
            if (isConstructor$3(C) && (C === Array$5 || isArray$c(C.prototype))) C = undefined;
            else if (isObject$9(C)) {
                C = C[SPECIES$3];
                if (C === null) C = undefined;
            }
        }
        return C === undefined ? Array$5 : C;
    };
    var arraySpeciesConstructor = arraySpeciesConstructor$1; // `ArraySpeciesCreate` abstract operation
    // https://tc39.es/ecma262/#sec-arrayspeciescreate
    var arraySpeciesCreate$4 = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
    var bind$5 = functionBindContext;
    var uncurryThis$h = functionUncurryThis;
    var IndexedObject$1 = indexedObject;
    var toObject$b = toObject$e;
    var lengthOfArrayLike$b = lengthOfArrayLike$d;
    var arraySpeciesCreate$3 = arraySpeciesCreate$4;
    var push$5 = uncurryThis$h([].push); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
    var createMethod$4 = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
            var O = toObject$b($this);
            var self1 = IndexedObject$1(O);
            var boundFunction = bind$5(callbackfn, that);
            var length = lengthOfArrayLike$b(self1);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate$3;
            var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
            var value, result;
            for(; length > index; index++)if (NO_HOLES || index in self1) {
                value = self1[index];
                result = boundFunction(value, index, O);
                if (TYPE) {
                    if (IS_MAP) target[index] = result; // map
                    else if (result) switch(TYPE){
                        case 3:
                            return true;
                        // some
                        case 5:
                            return value;
                        // find
                        case 6:
                            return index;
                        // findIndex
                        case 2:
                            push$5(target, value);
                    }
                    else switch(TYPE){
                        case 4:
                            return false;
                        // every
                        case 7:
                            push$5(target, value);
                    }
                }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
    };
    var arrayIteration = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod$4(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod$4(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod$4(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod$4(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod$4(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod$4(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod$4(6),
        // `Array.prototype.filterReject` method
        // https://github.com/tc39/proposal-array-filtering
        filterReject: createMethod$4(7)
    };
    var fails$h = fails$r;
    var wellKnownSymbol$e = wellKnownSymbol$j;
    var V8_VERSION$1 = engineV8Version;
    var SPECIES$2 = wellKnownSymbol$e("species");
    var arrayMethodHasSpeciesSupport$5 = function(METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION$1 >= 51 || !fails$h(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES$2] = function() {
                return {
                    foo: 1
                };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
        });
    };
    var $$z = _export;
    var $filter = arrayIteration.filter;
    var arrayMethodHasSpeciesSupport$4 = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport$4("filter"); // `Array.prototype.filter` method
    // https://tc39.es/ecma262/#sec-array.prototype.filter
    // with adding support of @@species
    $$z({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$3
    }, {
        filter: function filter(callbackfn) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var entryVirtual$h = entryVirtual$k;
    var filter$3 = entryVirtual$h("Array").filter;
    var isPrototypeOf$f = objectIsPrototypeOf;
    var method$c = filter$3;
    var ArrayPrototype$d = Array.prototype;
    var filter$2 = function(it) {
        var own = it.filter;
        return it === ArrayPrototype$d || isPrototypeOf$f(ArrayPrototype$d, it) && own === ArrayPrototype$d.filter ? method$c : own;
    };
    var parent$Q = filter$2;
    var filter$1 = parent$Q;
    var filter = filter$1;
    var $$y = _export;
    var $map = arrayIteration.map;
    var arrayMethodHasSpeciesSupport$3 = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport$3("map"); // `Array.prototype.map` method
    // https://tc39.es/ecma262/#sec-array.prototype.map
    // with adding support of @@species
    $$y({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$2
    }, {
        map: function map(callbackfn) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var entryVirtual$g = entryVirtual$k;
    var map$6 = entryVirtual$g("Array").map;
    var isPrototypeOf$e = objectIsPrototypeOf;
    var method$b = map$6;
    var ArrayPrototype$c = Array.prototype;
    var map$5 = function(it) {
        var own = it.map;
        return it === ArrayPrototype$c || isPrototypeOf$e(ArrayPrototype$c, it) && own === ArrayPrototype$c.map ? method$b : own;
    };
    var parent$P = map$5;
    var map$4 = parent$P;
    var map$3 = map$4;
    var global$p = global$M;
    var isArray$b = isArray$d;
    var lengthOfArrayLike$a = lengthOfArrayLike$d;
    var bind$4 = functionBindContext;
    var TypeError$c = global$p.TypeError; // `FlattenIntoArray` abstract operation
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var flattenIntoArray$1 = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind$4(mapper, thisArg) : false;
        var element, elementLen;
        while(sourceIndex < sourceLen){
            if (sourceIndex in source) {
                element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
                if (depth > 0 && isArray$b(element)) {
                    elementLen = lengthOfArrayLike$a(element);
                    targetIndex = flattenIntoArray$1(target, original, element, elementLen, targetIndex, depth - 1) - 1;
                } else {
                    if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError$c("Exceed the acceptable array length");
                    target[targetIndex] = element;
                }
                targetIndex++;
            }
            sourceIndex++;
        }
        return targetIndex;
    };
    var flattenIntoArray_1 = flattenIntoArray$1;
    var $$x = _export;
    var flattenIntoArray = flattenIntoArray_1;
    var aCallable$2 = aCallable$7;
    var toObject$a = toObject$e;
    var lengthOfArrayLike$9 = lengthOfArrayLike$d;
    var arraySpeciesCreate$2 = arraySpeciesCreate$4; // `Array.prototype.flatMap` method
    // https://tc39.es/ecma262/#sec-array.prototype.flatmap
    $$x({
        target: "Array",
        proto: true
    }, {
        flatMap: function flatMap(callbackfn) {
            var O = toObject$a(this);
            var sourceLen = lengthOfArrayLike$9(O);
            var A;
            aCallable$2(callbackfn);
            A = arraySpeciesCreate$2(O, 0);
            A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            return A;
        }
    });
    var entryVirtual$f = entryVirtual$k;
    var flatMap$3 = entryVirtual$f("Array").flatMap;
    var isPrototypeOf$d = objectIsPrototypeOf;
    var method$a = flatMap$3;
    var ArrayPrototype$b = Array.prototype;
    var flatMap$2 = function(it) {
        var own = it.flatMap;
        return it === ArrayPrototype$b || isPrototypeOf$d(ArrayPrototype$b, it) && own === ArrayPrototype$b.flatMap ? method$a : own;
    };
    var parent$O = flatMap$2;
    var flatMap$1 = parent$O;
    var flatMap = flatMap$1;
    /**
   * Create new data pipe.
   *
   * @param from - The source data set or data view.
   * @remarks
   * Example usage:
   * ```typescript
   * interface AppItem {
   *   whoami: string;
   *   appData: unknown;
   *   visData: VisItem;
   * }
   * interface VisItem {
   *   id: number;
   *   label: string;
   *   color: string;
   *   x: number;
   *   y: number;
   * }
   *
   * const ds1 = new DataSet<AppItem, "whoami">([], { fieldId: "whoami" });
   * const ds2 = new DataSet<VisItem, "id">();
   *
   * const pipe = createNewDataPipeFrom(ds1)
   *   .filter((item): boolean => item.enabled === true)
   *   .map<VisItem, "id">((item): VisItem => item.visData)
   *   .to(ds2);
   *
   * pipe.start();
   * ```
   * @returns A factory whose methods can be used to configure the pipe.
   */ function createNewDataPipeFrom(from) {
        return new DataPipeUnderConstruction(from);
    }
    /**
   * Internal implementation of the pipe. This should be accessible only through
   * `createNewDataPipeFrom` from the outside.
   *
   * @typeParam SI - Source item type.
   * @typeParam SP - Source item type's id property name.
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */ var SimpleDataPipe = /*#__PURE__*/ function() {
        /**
     * Bound listeners for use with `DataInterface['on' | 'off']`.
     */ /**
     * Create a new data pipe.
     *
     * @param _source - The data set or data view that will be observed.
     * @param _transformers - An array of transforming functions to be used to
     * filter or transform the items in the pipe.
     * @param _target - The data set or data view that will receive the items.
     */ function SimpleDataPipe(_source, _transformers, _target) {
            var _context, _context2, _context3;
            _classCallCheck(this, SimpleDataPipe);
            _defineProperty(this, "_source", void 0);
            _defineProperty(this, "_transformers", void 0);
            _defineProperty(this, "_target", void 0);
            _defineProperty(this, "_listeners", {
                add: bind$6(_context = this._add).call(_context, this),
                remove: bind$6(_context2 = this._remove).call(_context2, this),
                update: bind$6(_context3 = this._update).call(_context3, this)
            });
            this._source = _source;
            this._transformers = _transformers;
            this._target = _target;
        }
        /** @inheritDoc */ _createClass(SimpleDataPipe, [
            {
                key: "all",
                value: function all() {
                    this._target.update(this._transformItems(this._source.get()));
                    return this;
                }
            },
            {
                key: "start",
                value: function start() {
                    this._source.on("add", this._listeners.add);
                    this._source.on("remove", this._listeners.remove);
                    this._source.on("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "stop",
                value: function stop() {
                    this._source.off("add", this._listeners.add);
                    this._source.off("remove", this._listeners.remove);
                    this._source.off("update", this._listeners.update);
                    return this;
                }
            },
            {
                key: "_transformItems",
                value: function _transformItems(items) {
                    var _context4;
                    return reduce(_context4 = this._transformers).call(_context4, function(items, transform) {
                        return transform(items);
                    }, items);
                }
            },
            {
                key: "_add",
                value: function _add(_name, payload) {
                    if (payload == null) return;
                    this._target.add(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_update",
                value: function _update(_name, payload) {
                    if (payload == null) return;
                    this._target.update(this._transformItems(this._source.get(payload.items)));
                }
            },
            {
                key: "_remove",
                value: function _remove(_name, payload) {
                    if (payload == null) return;
                    this._target.remove(this._transformItems(payload.oldData));
                }
            }
        ]);
        return SimpleDataPipe;
    }();
    /**
   * Internal implementation of the pipe factory. This should be accessible
   * only through `createNewDataPipeFrom` from the outside.
   *
   * @typeParam TI - Target item type.
   * @typeParam TP - Target item type's id property name.
   */ var DataPipeUnderConstruction = /*#__PURE__*/ function() {
        /**
     * Array transformers used to transform items within the pipe. This is typed
     * as any for the sake of simplicity.
     */ /**
     * Create a new data pipe factory. This is an internal constructor that
     * should never be called from outside of this file.
     *
     * @param _source - The source data set or data view for this pipe.
     */ function DataPipeUnderConstruction(_source) {
            _classCallCheck(this, DataPipeUnderConstruction);
            _defineProperty(this, "_source", void 0);
            _defineProperty(this, "_transformers", []);
            this._source = _source;
        }
        /**
     * Filter the items.
     *
     * @param callback - A filtering function that returns true if given item
     * should be piped and false if not.
     * @returns This factory for further configuration.
     */ _createClass(DataPipeUnderConstruction, [
            {
                key: "filter",
                value: function filter$1(callback) {
                    this._transformers.push(function(input) {
                        return filter(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    this._transformers.push(function(input) {
                        return map$3(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "flatMap",
                value: function flatMap$1(callback) {
                    this._transformers.push(function(input) {
                        return flatMap(input).call(input, callback);
                    });
                    return this;
                }
            },
            {
                key: "to",
                value: function to(target) {
                    return new SimpleDataPipe(this._source, this._transformers, target);
                }
            }
        ]);
        return DataPipeUnderConstruction;
    }();
    var global$o = global$M;
    var classof$a = classof$c;
    var String$2 = global$o.String;
    var toString$7 = function(argument) {
        if (classof$a(argument) === "Symbol") throw TypeError("Cannot convert a Symbol value to a string");
        return String$2(argument);
    };
    var uncurryThis$g = functionUncurryThis;
    var toIntegerOrInfinity$2 = toIntegerOrInfinity$4;
    var toString$6 = toString$7;
    var requireObjectCoercible$2 = requireObjectCoercible$5;
    var charAt$2 = uncurryThis$g("".charAt);
    var charCodeAt$1 = uncurryThis$g("".charCodeAt);
    var stringSlice = uncurryThis$g("".slice);
    var createMethod$3 = function(CONVERT_TO_STRING) {
        return function($this, pos) {
            var S = toString$6(requireObjectCoercible$2($this));
            var position = toIntegerOrInfinity$2(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? "" : undefined;
            first = charCodeAt$1(S, position);
            return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = charCodeAt$1(S, position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? charAt$2(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
    };
    var stringMultibyte = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod$3(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod$3(true)
    };
    var global$n = global$M;
    var isCallable$6 = isCallable$h;
    var inspectSource = inspectSource$2;
    var WeakMap$1 = global$n.WeakMap;
    var nativeWeakMap = isCallable$6(WeakMap$1) && /native code/.test(inspectSource(WeakMap$1));
    var shared$2 = shared$4.exports;
    var uid$2 = uid$4;
    var keys$7 = shared$2("keys");
    var sharedKey$4 = function(key) {
        return keys$7[key] || (keys$7[key] = uid$2(key));
    };
    var hiddenKeys$6 = {};
    var NATIVE_WEAK_MAP = nativeWeakMap;
    var global$m = global$M;
    var uncurryThis$f = functionUncurryThis;
    var isObject$8 = isObject$f;
    var createNonEnumerableProperty$4 = createNonEnumerableProperty$6;
    var hasOwn$b = hasOwnProperty_1;
    var shared$1 = sharedStore;
    var sharedKey$3 = sharedKey$4;
    var hiddenKeys$5 = hiddenKeys$6;
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError$b = global$m.TypeError;
    var WeakMap = global$m.WeakMap;
    var set$3, get, has;
    var enforce = function(it) {
        return has(it) ? get(it) : set$3(it, {});
    };
    var getterFor = function(TYPE) {
        return function(it) {
            var state;
            if (!isObject$8(it) || (state = get(it)).type !== TYPE) throw TypeError$b("Incompatible receiver, " + TYPE + " required");
            return state;
        };
    };
    if (NATIVE_WEAK_MAP || shared$1.state) {
        var store = shared$1.state || (shared$1.state = new WeakMap());
        var wmget = uncurryThis$f(store.get);
        var wmhas = uncurryThis$f(store.has);
        var wmset = uncurryThis$f(store.set);
        set$3 = function(it, metadata) {
            if (wmhas(store, it)) throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            wmset(store, it, metadata);
            return metadata;
        };
        get = function(it) {
            return wmget(store, it) || {};
        };
        has = function(it) {
            return wmhas(store, it);
        };
    } else {
        var STATE = sharedKey$3("state");
        hiddenKeys$5[STATE] = true;
        set$3 = function(it, metadata) {
            if (hasOwn$b(it, STATE)) throw new TypeError$b(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty$4(it, STATE, metadata);
            return metadata;
        };
        get = function(it) {
            return hasOwn$b(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
            return hasOwn$b(it, STATE);
        };
    }
    var internalState = {
        set: set$3,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
    };
    var DESCRIPTORS$b = descriptors;
    var hasOwn$a = hasOwnProperty_1;
    var FunctionPrototype = Function.prototype; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    var getDescriptor = DESCRIPTORS$b && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn$a(FunctionPrototype, "name"); // additional protection from minified / mangled / dropped function names
    var PROPER = EXISTS && (function something() {
    /* empty */ }).name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS$b || DESCRIPTORS$b && getDescriptor(FunctionPrototype, "name").configurable);
    var functionName = {
        EXISTS: EXISTS,
        PROPER: PROPER,
        CONFIGURABLE: CONFIGURABLE
    };
    var objectDefineProperties = {};
    var toIntegerOrInfinity$1 = toIntegerOrInfinity$4;
    var max$3 = Math.max;
    var min$1 = Math.min; // Helper for a popular repeating case of the spec:
    // Let integer be ? ToInteger(index).
    // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
    var toAbsoluteIndex$5 = function(index, length) {
        var integer = toIntegerOrInfinity$1(index);
        return integer < 0 ? max$3(integer + length, 0) : min$1(integer, length);
    };
    var toIndexedObject$9 = toIndexedObject$b;
    var toAbsoluteIndex$4 = toAbsoluteIndex$5;
    var lengthOfArrayLike$8 = lengthOfArrayLike$d; // `Array.prototype.{ indexOf, includes }` methods implementation
    var createMethod$2 = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
            var O = toIndexedObject$9($this);
            var length = lengthOfArrayLike$8(O);
            var index = toAbsoluteIndex$4(fromIndex, length);
            var value; // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el != el) while(length > index){
                value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check
                if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
            }
            else for(; length > index; index++){
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            }
            return !IS_INCLUDES && -1;
        };
    };
    var arrayIncludes = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod$2(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod$2(false)
    };
    var uncurryThis$e = functionUncurryThis;
    var hasOwn$9 = hasOwnProperty_1;
    var toIndexedObject$8 = toIndexedObject$b;
    var indexOf = arrayIncludes.indexOf;
    var hiddenKeys$4 = hiddenKeys$6;
    var push$4 = uncurryThis$e([].push);
    var objectKeysInternal = function(object, names) {
        var O = toIndexedObject$8(object);
        var i = 0;
        var result = [];
        var key;
        for(key in O)!hasOwn$9(hiddenKeys$4, key) && hasOwn$9(O, key) && push$4(result, key); // Don't enum bug & hidden keys
        while(names.length > i)if (hasOwn$9(O, key = names[i++])) ~indexOf(result, key) || push$4(result, key);
        return result;
    };
    var enumBugKeys$3 = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
    ];
    var internalObjectKeys$1 = objectKeysInternal;
    var enumBugKeys$2 = enumBugKeys$3; // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    // eslint-disable-next-line es/no-object-keys -- safe
    var objectKeys$4 = Object.keys || function keys(O) {
        return internalObjectKeys$1(O, enumBugKeys$2);
    };
    var DESCRIPTORS$a = descriptors;
    var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
    var definePropertyModule$3 = objectDefineProperty;
    var anObject$9 = anObject$b;
    var toIndexedObject$7 = toIndexedObject$b;
    var objectKeys$3 = objectKeys$4; // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    objectDefineProperties.f = DESCRIPTORS$a && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject$9(O);
        var props = toIndexedObject$7(Properties);
        var keys = objectKeys$3(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while(length > index)definePropertyModule$3.f(O, key = keys[index++], props[key]);
        return O;
    };
    var getBuiltIn$5 = getBuiltIn$9;
    var html$1 = getBuiltIn$5("document", "documentElement");
    /* global ActiveXObject -- old IE, WSH */ var anObject$8 = anObject$b;
    var definePropertiesModule$1 = objectDefineProperties;
    var enumBugKeys$1 = enumBugKeys$3;
    var hiddenKeys$3 = hiddenKeys$6;
    var html = html$1;
    var documentCreateElement = documentCreateElement$1;
    var sharedKey$2 = sharedKey$4;
    var GT = ">";
    var LT = "<";
    var PROTOTYPE$1 = "prototype";
    var SCRIPT = "script";
    var IE_PROTO$1 = sharedKey$2("IE_PROTO");
    var EmptyConstructor = function() {
    /* empty */ };
    var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
    var NullProtoObjectViaActiveX = function(activeXDocument) {
        activeXDocument.write(scriptTag(""));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak
        return temp;
    }; // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var NullProtoObjectViaIFrame = function() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
    }; // Check for document.domain and active x support
    // No need to use active x approach when document.domain is not set
    // see https://github.com/es-shims/es5-shim/issues/150
    // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
    // avoid IE GC bug
    var activeXDocument;
    var NullProtoObject = function() {
        try {
            activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        /* ignore */ }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) // old IE
         : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument); // WSH
        var length = enumBugKeys$1.length;
        while(length--)delete NullProtoObject[PROTOTYPE$1][enumBugKeys$1[length]];
        return NullProtoObject();
    };
    hiddenKeys$3[IE_PROTO$1] = true; // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    var objectCreate = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
            EmptyConstructor[PROTOTYPE$1] = anObject$8(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO$1] = O;
        } else result = NullProtoObject();
        return Properties === undefined ? result : definePropertiesModule$1.f(result, Properties);
    };
    var fails$g = fails$r;
    var correctPrototypeGetter = !fails$g(function() {
        function F() {
        /* empty */ }
        F.prototype.constructor = null; // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
        return Object.getPrototypeOf(new F()) !== F.prototype;
    });
    var global$l = global$M;
    var hasOwn$8 = hasOwnProperty_1;
    var isCallable$5 = isCallable$h;
    var toObject$9 = toObject$e;
    var sharedKey$1 = sharedKey$4;
    var CORRECT_PROTOTYPE_GETTER$1 = correctPrototypeGetter;
    var IE_PROTO = sharedKey$1("IE_PROTO");
    var Object$4 = global$l.Object;
    var ObjectPrototype$2 = Object$4.prototype; // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER$1 ? Object$4.getPrototypeOf : function(O) {
        var object = toObject$9(O);
        if (hasOwn$8(object, IE_PROTO)) return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable$5(constructor) && object instanceof constructor) return constructor.prototype;
        return object instanceof Object$4 ? ObjectPrototype$2 : null;
    };
    var createNonEnumerableProperty$3 = createNonEnumerableProperty$6;
    var redefine$4 = function(target, key, value, options) {
        if (options && options.enumerable) target[key] = value;
        else createNonEnumerableProperty$3(target, key, value);
    };
    var fails$f = fails$r;
    var isCallable$4 = isCallable$h;
    var create$a = objectCreate;
    var getPrototypeOf$6 = objectGetPrototypeOf;
    var redefine$3 = redefine$4;
    var wellKnownSymbol$d = wellKnownSymbol$j;
    var ITERATOR$5 = wellKnownSymbol$d("iterator");
    var BUGGY_SAFARI_ITERATORS$1 = false; // `%IteratorPrototype%` object
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
    var IteratorPrototype$1, PrototypeOfArrayIteratorPrototype, arrayIterator;
    /* eslint-disable es/no-array-prototype-keys -- safe */ if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`
        if (!("next" in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
        else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf$6(getPrototypeOf$6(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$1 = PrototypeOfArrayIteratorPrototype;
        }
    }
    var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$1 == undefined || fails$f(function() {
        var test = {}; // FF44- legacy iterators case
        return IteratorPrototype$1[ITERATOR$5].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$1 = {};
    else IteratorPrototype$1 = create$a(IteratorPrototype$1); // `%IteratorPrototype%[@@iterator]()` method
    // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
    if (!isCallable$4(IteratorPrototype$1[ITERATOR$5])) redefine$3(IteratorPrototype$1, ITERATOR$5, function() {
        return this;
    });
    var iteratorsCore = {
        IteratorPrototype: IteratorPrototype$1,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
    };
    var TO_STRING_TAG_SUPPORT$1 = toStringTagSupport;
    var classof$9 = classof$c; // `Object.prototype.toString` method implementation
    // https://tc39.es/ecma262/#sec-object.prototype.tostring
    var objectToString = TO_STRING_TAG_SUPPORT$1 ? ({}).toString : function toString() {
        return "[object " + classof$9(this) + "]";
    };
    var TO_STRING_TAG_SUPPORT = toStringTagSupport;
    var defineProperty$6 = objectDefineProperty.f;
    var createNonEnumerableProperty$2 = createNonEnumerableProperty$6;
    var hasOwn$7 = hasOwnProperty_1;
    var toString$5 = objectToString;
    var wellKnownSymbol$c = wellKnownSymbol$j;
    var TO_STRING_TAG$1 = wellKnownSymbol$c("toStringTag");
    var setToStringTag$5 = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
            var target = STATIC ? it : it.prototype;
            if (!hasOwn$7(target, TO_STRING_TAG$1)) defineProperty$6(target, TO_STRING_TAG$1, {
                configurable: true,
                value: TAG
            });
            if (SET_METHOD && !TO_STRING_TAG_SUPPORT) createNonEnumerableProperty$2(target, "toString", toString$5);
        }
    };
    var iterators = {};
    var IteratorPrototype = iteratorsCore.IteratorPrototype;
    var create$9 = objectCreate;
    var createPropertyDescriptor$2 = createPropertyDescriptor$5;
    var setToStringTag$4 = setToStringTag$5;
    var Iterators$5 = iterators;
    var returnThis$1 = function() {
        return this;
    };
    var createIteratorConstructor$1 = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create$9(IteratorPrototype, {
            next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next)
        });
        setToStringTag$4(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators$5[TO_STRING_TAG] = returnThis$1;
        return IteratorConstructor;
    };
    var global$k = global$M;
    var isCallable$3 = isCallable$h;
    var String$1 = global$k.String;
    var TypeError$a = global$k.TypeError;
    var aPossiblePrototype$1 = function(argument) {
        if (typeof argument == "object" || isCallable$3(argument)) return argument;
        throw TypeError$a("Can't set " + String$1(argument) + " as a prototype");
    };
    /* eslint-disable no-proto -- safe */ var uncurryThis$d = functionUncurryThis;
    var anObject$7 = anObject$b;
    var aPossiblePrototype = aPossiblePrototype$1; // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    // eslint-disable-next-line es/no-object-setprototypeof -- safe
    var objectSetPrototypeOf = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            setter = uncurryThis$d(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
            setter(test, []);
            CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        /* empty */ }
        return function setPrototypeOf(O, proto) {
            anObject$7(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter(O, proto);
            else O.__proto__ = proto;
            return O;
        };
    }() : undefined);
    var $$w = _export;
    var call$6 = functionCall;
    var FunctionName = functionName;
    var createIteratorConstructor = createIteratorConstructor$1;
    var getPrototypeOf$5 = objectGetPrototypeOf;
    var setToStringTag$3 = setToStringTag$5;
    var redefine$2 = redefine$4;
    var wellKnownSymbol$b = wellKnownSymbol$j;
    var Iterators$4 = iterators;
    var IteratorsCore = iteratorsCore;
    var PROPER_FUNCTION_NAME$1 = FunctionName.PROPER;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR$4 = wellKnownSymbol$b("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
        return this;
    };
    var defineIterator$3 = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch(KIND){
                case KEYS:
                    return function keys() {
                        return new IteratorConstructor(this, KIND);
                    };
                case VALUES:
                    return function values() {
                        return new IteratorConstructor(this, KIND);
                    };
                case ENTRIES:
                    return function entries() {
                        return new IteratorConstructor(this, KIND);
                    };
            }
            return function() {
                return new IteratorConstructor(this);
            };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR$4] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native
        if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf$5(anyNativeIterator.call(new Iterable()));
            if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                setToStringTag$3(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                Iterators$4[TO_STRING_TAG] = returnThis;
            }
        } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
        if (PROPER_FUNCTION_NAME$1 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
                return call$6(nativeIterator, this);
            };
        } // export additional methods
        if (DEFAULT) {
            methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
            };
            if (FORCED) {
                for(KEY in methods)if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) redefine$2(IterablePrototype, KEY, methods[KEY]);
            } else $$w({
                target: NAME,
                proto: true,
                forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
            }, methods);
        } // define iterator
        if (FORCED && IterablePrototype[ITERATOR$4] !== defaultIterator) redefine$2(IterablePrototype, ITERATOR$4, defaultIterator, {
            name: DEFAULT
        });
        Iterators$4[NAME] = defaultIterator;
        return methods;
    };
    var charAt$1 = stringMultibyte.charAt;
    var toString$4 = toString$7;
    var InternalStateModule$4 = internalState;
    var defineIterator$2 = defineIterator$3;
    var STRING_ITERATOR = "String Iterator";
    var setInternalState$4 = InternalStateModule$4.set;
    var getInternalState$2 = InternalStateModule$4.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
    defineIterator$2(String, "String", function(iterated) {
        setInternalState$4(this, {
            type: STRING_ITERATOR,
            string: toString$4(iterated),
            index: 0
        }); // `%StringIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
    }, function next() {
        var state = getInternalState$2(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
            value: undefined,
            done: true
        };
        point = charAt$1(string, index);
        state.index += point.length;
        return {
            value: point,
            done: false
        };
    });
    var call$5 = functionCall;
    var anObject$6 = anObject$b;
    var getMethod$1 = getMethod$3;
    var iteratorClose$2 = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject$6(iterator);
        try {
            innerResult = getMethod$1(iterator, "return");
            if (!innerResult) {
                if (kind === "throw") throw value;
                return value;
            }
            innerResult = call$5(innerResult, iterator);
        } catch (error) {
            innerError = true;
            innerResult = error;
        }
        if (kind === "throw") throw value;
        if (innerError) throw innerResult;
        anObject$6(innerResult);
        return value;
    };
    var anObject$5 = anObject$b;
    var iteratorClose$1 = iteratorClose$2; // call something on iterator step with safe closing on error
    var callWithSafeIterationClosing$1 = function(iterator, fn, value, ENTRIES) {
        try {
            return ENTRIES ? fn(anObject$5(value)[0], value[1]) : fn(value);
        } catch (error) {
            iteratorClose$1(iterator, "throw", error);
        }
    };
    var wellKnownSymbol$a = wellKnownSymbol$j;
    var Iterators$3 = iterators;
    var ITERATOR$3 = wellKnownSymbol$a("iterator");
    var ArrayPrototype$a = Array.prototype; // check on default Array iterator
    var isArrayIteratorMethod$2 = function(it) {
        return it !== undefined && (Iterators$3.Array === it || ArrayPrototype$a[ITERATOR$3] === it);
    };
    var toPropertyKey$1 = toPropertyKey$4;
    var definePropertyModule$2 = objectDefineProperty;
    var createPropertyDescriptor$1 = createPropertyDescriptor$5;
    var createProperty$6 = function(object, key, value) {
        var propertyKey = toPropertyKey$1(key);
        if (propertyKey in object) definePropertyModule$2.f(object, propertyKey, createPropertyDescriptor$1(0, value));
        else object[propertyKey] = value;
    };
    var classof$8 = classof$c;
    var getMethod = getMethod$3;
    var Iterators$2 = iterators;
    var wellKnownSymbol$9 = wellKnownSymbol$j;
    var ITERATOR$2 = wellKnownSymbol$9("iterator");
    var getIteratorMethod$8 = function(it) {
        if (it != undefined) return getMethod(it, ITERATOR$2) || getMethod(it, "@@iterator") || Iterators$2[classof$8(it)];
    };
    var global$j = global$M;
    var call$4 = functionCall;
    var aCallable$1 = aCallable$7;
    var anObject$4 = anObject$b;
    var tryToString$2 = tryToString$4;
    var getIteratorMethod$7 = getIteratorMethod$8;
    var TypeError$9 = global$j.TypeError;
    var getIterator$7 = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod$7(argument) : usingIterator;
        if (aCallable$1(iteratorMethod)) return anObject$4(call$4(iteratorMethod, argument));
        throw TypeError$9(tryToString$2(argument) + " is not iterable");
    };
    var global$i = global$M;
    var bind$3 = functionBindContext;
    var call$3 = functionCall;
    var toObject$8 = toObject$e;
    var callWithSafeIterationClosing = callWithSafeIterationClosing$1;
    var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
    var isConstructor$2 = isConstructor$4;
    var lengthOfArrayLike$7 = lengthOfArrayLike$d;
    var createProperty$5 = createProperty$6;
    var getIterator$6 = getIterator$7;
    var getIteratorMethod$6 = getIteratorMethod$8;
    var Array$4 = global$i.Array; // `Array.from` method implementation
    // https://tc39.es/ecma262/#sec-array.from
    var arrayFrom = function from(arrayLike) {
        var O = toObject$8(arrayLike);
        var IS_CONSTRUCTOR = isConstructor$2(this);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        if (mapping) mapfn = bind$3(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
        var iteratorMethod = getIteratorMethod$6(O);
        var index = 0;
        var length, result, step, iterator, next, value; // if the target is not iterable or it's an array with the default iterator - use a simple case
        if (iteratorMethod && !(this == Array$4 && isArrayIteratorMethod$1(iteratorMethod))) {
            iterator = getIterator$6(O, iteratorMethod);
            next = iterator.next;
            result = IS_CONSTRUCTOR ? new this() : [];
            for(; !(step = call$3(next, iterator)).done; index++){
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [
                    step.value,
                    index
                ], true) : step.value;
                createProperty$5(result, index, value);
            }
        } else {
            length = lengthOfArrayLike$7(O);
            result = IS_CONSTRUCTOR ? new this(length) : Array$4(length);
            for(; length > index; index++){
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty$5(result, index, value);
            }
        }
        result.length = index;
        return result;
    };
    var wellKnownSymbol$8 = wellKnownSymbol$j;
    var ITERATOR$1 = wellKnownSymbol$8("iterator");
    var SAFE_CLOSING = false;
    try {
        var called = 0;
        var iteratorWithReturn = {
            next: function() {
                return {
                    done: !!called++
                };
            },
            "return": function() {
                SAFE_CLOSING = true;
            }
        };
        iteratorWithReturn[ITERATOR$1] = function() {
            return this;
        }; // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
        Array.from(iteratorWithReturn, function() {
            throw 2;
        });
    } catch (error) {
    /* empty */ }
    var checkCorrectnessOfIteration$1 = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;
        try {
            var object = {};
            object[ITERATOR$1] = function() {
                return {
                    next: function() {
                        return {
                            done: ITERATION_SUPPORT = true
                        };
                    }
                };
            };
            exec(object);
        } catch (error) {
        /* empty */ }
        return ITERATION_SUPPORT;
    };
    var $$v = _export;
    var from$6 = arrayFrom;
    var checkCorrectnessOfIteration = checkCorrectnessOfIteration$1;
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        // eslint-disable-next-line es/no-array-from -- required for testing
        Array.from(iterable);
    }); // `Array.from` method
    // https://tc39.es/ecma262/#sec-array.from
    $$v({
        target: "Array",
        stat: true,
        forced: INCORRECT_ITERATION
    }, {
        from: from$6
    });
    var path$l = path$q;
    var from$5 = path$l.Array.from;
    var parent$N = from$5;
    var from$4 = parent$N;
    var from$3 = from$4;
    var toIndexedObject$6 = toIndexedObject$b;
    var Iterators$1 = iterators;
    var InternalStateModule$3 = internalState;
    objectDefineProperty.f;
    var defineIterator$1 = defineIterator$3;
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState$3 = InternalStateModule$3.set;
    var getInternalState$1 = InternalStateModule$3.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
    // https://tc39.es/ecma262/#sec-array.prototype.entries
    // `Array.prototype.keys` method
    // https://tc39.es/ecma262/#sec-array.prototype.keys
    // `Array.prototype.values` method
    // https://tc39.es/ecma262/#sec-array.prototype.values
    // `Array.prototype[@@iterator]` method
    // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
    // `CreateArrayIterator` internal method
    // https://tc39.es/ecma262/#sec-createarrayiterator
    defineIterator$1(Array, "Array", function(iterated, kind) {
        setInternalState$3(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject$6(iterated),
            // target
            index: 0,
            // next index
            kind: kind // kind
        }); // `%ArrayIteratorPrototype%.next` method
    // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
    }, function() {
        var state = getInternalState$1(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
            state.target = undefined;
            return {
                value: undefined,
                done: true
            };
        }
        if (kind == "keys") return {
            value: index,
            done: false
        };
        if (kind == "values") return {
            value: target[index],
            done: false
        };
        return {
            value: [
                index,
                target[index]
            ],
            done: false
        };
    }, "values"); // argumentsList[@@iterator] is %ArrayProto_values%
    // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
    // https://tc39.es/ecma262/#sec-createmappedargumentsobject
    Iterators$1.Arguments = Iterators$1.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    var getIteratorMethod$5 = getIteratorMethod$8;
    var getIteratorMethod_1 = getIteratorMethod$5;
    // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
    var domIterables = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
    };
    var DOMIterables$4 = domIterables;
    var global$h = global$M;
    var classof$7 = classof$c;
    var createNonEnumerableProperty$1 = createNonEnumerableProperty$6;
    var Iterators = iterators;
    var wellKnownSymbol$7 = wellKnownSymbol$j;
    var TO_STRING_TAG = wellKnownSymbol$7("toStringTag");
    for(var COLLECTION_NAME in DOMIterables$4){
        var Collection = global$h[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof$7(CollectionPrototype) !== TO_STRING_TAG) createNonEnumerableProperty$1(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        Iterators[COLLECTION_NAME] = Iterators.Array;
    }
    var parent$M = getIteratorMethod_1;
    var getIteratorMethod$4 = parent$M;
    var parent$L = getIteratorMethod$4;
    var getIteratorMethod$3 = parent$L;
    var parent$K = getIteratorMethod$3;
    var getIteratorMethod$2 = parent$K;
    var getIteratorMethod$1 = getIteratorMethod$2;
    var objectGetOwnPropertyNames = {};
    var internalObjectKeys = objectKeysInternal;
    var enumBugKeys = enumBugKeys$3;
    var hiddenKeys$2 = enumBugKeys.concat("length", "prototype"); // `Object.getOwnPropertyNames` method
    // https://tc39.es/ecma262/#sec-object.getownpropertynames
    // eslint-disable-next-line es/no-object-getownpropertynames -- safe
    objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys$2);
    };
    var objectGetOwnPropertyNamesExternal = {};
    var global$g = global$M;
    var toAbsoluteIndex$3 = toAbsoluteIndex$5;
    var lengthOfArrayLike$6 = lengthOfArrayLike$d;
    var createProperty$4 = createProperty$6;
    var Array$3 = global$g.Array;
    var max$2 = Math.max;
    var arraySliceSimple = function(O, start, end) {
        var length = lengthOfArrayLike$6(O);
        var k = toAbsoluteIndex$3(start, length);
        var fin = toAbsoluteIndex$3(end === undefined ? length : end, length);
        var result = Array$3(max$2(fin - k, 0));
        for(var n = 0; k < fin; k++, n++)createProperty$4(result, n, O[k]);
        result.length = n;
        return result;
    };
    /* eslint-disable es/no-object-getownpropertynames -- safe */ var classof$6 = classofRaw$1;
    var toIndexedObject$5 = toIndexedObject$b;
    var $getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
    var arraySlice$3 = arraySliceSimple;
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
        try {
            return $getOwnPropertyNames$1(it);
        } catch (error) {
            return arraySlice$3(windowNames);
        }
    }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    objectGetOwnPropertyNamesExternal.f = function getOwnPropertyNames(it) {
        return windowNames && classof$6(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames$1(toIndexedObject$5(it));
    };
    var objectGetOwnPropertySymbols = {};
    objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;
    var wellKnownSymbolWrapped = {};
    var wellKnownSymbol$6 = wellKnownSymbol$j;
    wellKnownSymbolWrapped.f = wellKnownSymbol$6;
    var path$k = path$q;
    var hasOwn$6 = hasOwnProperty_1;
    var wrappedWellKnownSymbolModule$1 = wellKnownSymbolWrapped;
    var defineProperty$5 = objectDefineProperty.f;
    var defineWellKnownSymbol$l = function(NAME) {
        var Symbol1 = path$k.Symbol || (path$k.Symbol = {});
        if (!hasOwn$6(Symbol1, NAME)) defineProperty$5(Symbol1, NAME, {
            value: wrappedWellKnownSymbolModule$1.f(NAME)
        });
    };
    var $$u = _export;
    var global$f = global$M;
    var getBuiltIn$4 = getBuiltIn$9;
    var apply$4 = functionApply;
    var call$2 = functionCall;
    var uncurryThis$c = functionUncurryThis;
    var DESCRIPTORS$9 = descriptors;
    var NATIVE_SYMBOL = nativeSymbol;
    var fails$e = fails$r;
    var hasOwn$5 = hasOwnProperty_1;
    var isArray$a = isArray$d;
    var isCallable$2 = isCallable$h;
    var isObject$7 = isObject$f;
    var isPrototypeOf$c = objectIsPrototypeOf;
    var isSymbol = isSymbol$3;
    var anObject$3 = anObject$b;
    var toObject$7 = toObject$e;
    var toIndexedObject$4 = toIndexedObject$b;
    var toPropertyKey = toPropertyKey$4;
    var $toString = toString$7;
    var createPropertyDescriptor = createPropertyDescriptor$5;
    var nativeObjectCreate = objectCreate;
    var objectKeys$2 = objectKeys$4;
    var getOwnPropertyNamesModule$2 = objectGetOwnPropertyNames;
    var getOwnPropertyNamesExternal = objectGetOwnPropertyNamesExternal;
    var getOwnPropertySymbolsModule$2 = objectGetOwnPropertySymbols;
    var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
    var definePropertyModule$1 = objectDefineProperty;
    var definePropertiesModule = objectDefineProperties;
    var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
    var arraySlice$2 = arraySlice$5;
    var redefine$1 = redefine$4;
    var shared = shared$4.exports;
    var sharedKey = sharedKey$4;
    var hiddenKeys$1 = hiddenKeys$6;
    var uid$1 = uid$4;
    var wellKnownSymbol$5 = wellKnownSymbol$j;
    var wrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
    var defineWellKnownSymbol$k = defineWellKnownSymbol$l;
    var setToStringTag$2 = setToStringTag$5;
    var InternalStateModule$2 = internalState;
    var $forEach$1 = arrayIteration.forEach;
    var HIDDEN = sharedKey("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var TO_PRIMITIVE = wellKnownSymbol$5("toPrimitive");
    var setInternalState$2 = InternalStateModule$2.set;
    var getInternalState = InternalStateModule$2.getterFor(SYMBOL);
    var ObjectPrototype$1 = Object[PROTOTYPE];
    var $Symbol = global$f.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var TypeError$8 = global$f.TypeError;
    var QObject = global$f.QObject;
    var $stringify$1 = getBuiltIn$4("JSON", "stringify");
    var nativeGetOwnPropertyDescriptor$1 = getOwnPropertyDescriptorModule$1.f;
    var nativeDefineProperty = definePropertyModule$1.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule$1.f;
    var push$3 = uncurryThis$c([].push);
    var AllSymbols = shared("symbols");
    var ObjectPrototypeSymbols = shared("op-symbols");
    var StringToSymbolRegistry = shared("string-to-symbol-registry");
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    var WellKnownSymbolsStore = shared("wks"); // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDescriptor = DESCRIPTORS$9 && fails$e(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
            get: function() {
                return nativeDefineProperty(this, "a", {
                    value: 7
                }).a;
            }
        })).a != 7;
    }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype$1, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) nativeDefineProperty(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
    } : nativeDefineProperty;
    var wrap$1 = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
        setInternalState$2(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
        });
        if (!DESCRIPTORS$9) symbol.description = description;
        return symbol;
    };
    var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject$3(O);
        var key = toPropertyKey(P);
        anObject$3(Attributes);
        if (hasOwn$5(AllSymbols, key)) {
            if (!Attributes.enumerable) {
                if (!hasOwn$5(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
                O[HIDDEN][key] = true;
            } else {
                if (hasOwn$5(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
                Attributes = nativeObjectCreate(Attributes, {
                    enumerable: createPropertyDescriptor(0, false)
                });
            }
            return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
    };
    var $defineProperties = function defineProperties(O, Properties) {
        anObject$3(O);
        var properties = toIndexedObject$4(Properties);
        var keys = objectKeys$2(properties).concat($getOwnPropertySymbols(properties));
        $forEach$1(keys, function(key) {
            if (!DESCRIPTORS$9 || call$2($propertyIsEnumerable$1, properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
    };
    var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };
    var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = call$2(nativePropertyIsEnumerable, this, P);
        if (this === ObjectPrototype$1 && hasOwn$5(AllSymbols, P) && !hasOwn$5(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !hasOwn$5(this, P) || !hasOwn$5(AllSymbols, P) || hasOwn$5(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject$4(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype$1 && hasOwn$5(AllSymbols, key) && !hasOwn$5(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
        if (descriptor && hasOwn$5(AllSymbols, key) && !(hasOwn$5(it, HIDDEN) && it[HIDDEN][key])) descriptor.enumerable = true;
        return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject$4(O));
        var result = [];
        $forEach$1(names, function(key) {
            if (!hasOwn$5(AllSymbols, key) && !hasOwn$5(hiddenKeys$1, key)) push$3(result, key);
        });
        return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$4(O));
        var result = [];
        $forEach$1(names, function(key) {
            if (hasOwn$5(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn$5(ObjectPrototype$1, key))) push$3(result, AllSymbols[key]);
        });
        return result;
    }; // `Symbol` constructor
    // https://tc39.es/ecma262/#sec-symbol-constructor
    if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol1() {
            if (isPrototypeOf$c(SymbolPrototype, this)) throw TypeError$8("Symbol is not a constructor");
            var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
            var tag = uid$1(description);
            var setter = function(value) {
                if (this === ObjectPrototype$1) call$2(setter, ObjectPrototypeSymbols, value);
                if (hasOwn$5(this, HIDDEN) && hasOwn$5(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (DESCRIPTORS$9 && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, {
                configurable: true,
                set: setter
            });
            return wrap$1(tag, description);
        };
        SymbolPrototype = $Symbol[PROTOTYPE];
        redefine$1(SymbolPrototype, "toString", function toString() {
            return getInternalState(this).tag;
        });
        redefine$1($Symbol, "withoutSetter", function(description) {
            return wrap$1(uid$1(description), description);
        });
        propertyIsEnumerableModule$1.f = $propertyIsEnumerable$1;
        definePropertyModule$1.f = $defineProperty;
        definePropertiesModule.f = $defineProperties;
        getOwnPropertyDescriptorModule$1.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule$2.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule$2.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
            return wrap$1(wellKnownSymbol$5(name), name);
        };
        if (DESCRIPTORS$9) // https://github.com/tc39/proposal-Symbol-description
        nativeDefineProperty(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
                return getInternalState(this).description;
            }
        });
    }
    $$u({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL
    }, {
        Symbol: $Symbol
    });
    $forEach$1(objectKeys$2(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol$k(name);
    });
    $$u({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL
    }, {
        // `Symbol.for` method
        // https://tc39.es/ecma262/#sec-symbol.for
        "for": function(key) {
            var string = $toString(key);
            if (hasOwn$5(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.es/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError$8(sym + " is not a symbol");
            if (hasOwn$5(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
            USE_SETTER = true;
        },
        useSimple: function() {
            USE_SETTER = false;
        }
    });
    $$u({
        target: "Object",
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS$9
    }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $$u({
        target: "Object",
        stat: true,
        forced: !NATIVE_SYMBOL
    }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
    }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
    // https://bugs.chromium.org/p/v8/issues/detail?id=3443
    $$u({
        target: "Object",
        stat: true,
        forced: fails$e(function() {
            getOwnPropertySymbolsModule$2.f(1);
        })
    }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return getOwnPropertySymbolsModule$2.f(toObject$7(it));
        }
    }); // `JSON.stringify` method behavior with symbols
    // https://tc39.es/ecma262/#sec-json.stringify
    if ($stringify$1) {
        var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails$e(function() {
            var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}
            return $stringify$1([
                symbol
            ]) != "[null]" // WebKit converts symbol values to JSON as null
             || $stringify$1({
                a: symbol
            }) != "{}" // V8 throws on boxed symbols
             || $stringify$1(Object(symbol)) != "{}";
        });
        $$u({
            target: "JSON",
            stat: true,
            forced: FORCED_JSON_STRINGIFY
        }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify(it, replacer, space) {
                var args = arraySlice$2(arguments);
                var $replacer = replacer;
                if (!isObject$7(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
                if (!isArray$a(replacer)) replacer = function(key, value) {
                    if (isCallable$2($replacer)) value = call$2($replacer, this, key, value);
                    if (!isSymbol(value)) return value;
                };
                args[1] = replacer;
                return apply$4($stringify$1, null, args);
            }
        });
    } // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    if (!SymbolPrototype[TO_PRIMITIVE]) {
        var valueOf = SymbolPrototype.valueOf; // eslint-disable-next-line no-unused-vars -- required for .length
        redefine$1(SymbolPrototype, TO_PRIMITIVE, function(hint) {
            // TODO: improve hint logic
            return call$2(valueOf, this);
        });
    } // `Symbol.prototype[@@toStringTag]` property
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
    setToStringTag$2($Symbol, SYMBOL);
    hiddenKeys$1[HIDDEN] = true;
    var path$j = path$q;
    var getOwnPropertySymbols$2 = path$j.Object.getOwnPropertySymbols;
    var parent$J = getOwnPropertySymbols$2;
    var getOwnPropertySymbols$1 = parent$J;
    var getOwnPropertySymbols = getOwnPropertySymbols$1;
    var getOwnPropertyDescriptor$3 = {
        exports: {}
    };
    var $$t = _export;
    var fails$d = fails$r;
    var toIndexedObject$3 = toIndexedObject$b;
    var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
    var DESCRIPTORS$8 = descriptors;
    var FAILS_ON_PRIMITIVES$3 = fails$d(function() {
        nativeGetOwnPropertyDescriptor(1);
    });
    var FORCED$5 = !DESCRIPTORS$8 || FAILS_ON_PRIMITIVES$3; // `Object.getOwnPropertyDescriptor` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
    $$t({
        target: "Object",
        stat: true,
        forced: FORCED$5,
        sham: !DESCRIPTORS$8
    }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
            return nativeGetOwnPropertyDescriptor(toIndexedObject$3(it), key);
        }
    });
    var path$i = path$q;
    var Object$3 = path$i.Object;
    var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor$3.exports = function getOwnPropertyDescriptor(it, key) {
        return Object$3.getOwnPropertyDescriptor(it, key);
    };
    if (Object$3.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor$2.sham = true;
    var parent$I = getOwnPropertyDescriptor$3.exports;
    var getOwnPropertyDescriptor$1 = parent$I;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptor$1;
    var getBuiltIn$3 = getBuiltIn$9;
    var uncurryThis$b = functionUncurryThis;
    var getOwnPropertyNamesModule$1 = objectGetOwnPropertyNames;
    var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
    var anObject$2 = anObject$b;
    var concat$5 = uncurryThis$b([].concat); // all object keys, includes non-enumerable and symbols
    var ownKeys$6 = getBuiltIn$3("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule$1.f(anObject$2(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
        return getOwnPropertySymbols ? concat$5(keys, getOwnPropertySymbols(it)) : keys;
    };
    var $$s = _export;
    var DESCRIPTORS$7 = descriptors;
    var ownKeys$5 = ownKeys$6;
    var toIndexedObject$2 = toIndexedObject$b;
    var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
    var createProperty$3 = createProperty$6; // `Object.getOwnPropertyDescriptors` method
    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
    $$s({
        target: "Object",
        stat: true,
        sham: !DESCRIPTORS$7
    }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
            var O = toIndexedObject$2(object);
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            var keys = ownKeys$5(O);
            var result = {};
            var index = 0;
            var key, descriptor;
            while(keys.length > index){
                descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
                if (descriptor !== undefined) createProperty$3(result, key, descriptor);
            }
            return result;
        }
    });
    var path$h = path$q;
    var getOwnPropertyDescriptors$2 = path$h.Object.getOwnPropertyDescriptors;
    var parent$H = getOwnPropertyDescriptors$2;
    var getOwnPropertyDescriptors$1 = parent$H;
    var getOwnPropertyDescriptors = getOwnPropertyDescriptors$1;
    var defineProperties$4 = {
        exports: {}
    };
    var $$r = _export;
    var DESCRIPTORS$6 = descriptors;
    var defineProperties$3 = objectDefineProperties.f; // `Object.defineProperties` method
    // https://tc39.es/ecma262/#sec-object.defineproperties
    // eslint-disable-next-line es/no-object-defineproperties -- safe
    $$r({
        target: "Object",
        stat: true,
        forced: Object.defineProperties !== defineProperties$3,
        sham: !DESCRIPTORS$6
    }, {
        defineProperties: defineProperties$3
    });
    var path$g = path$q;
    var Object$2 = path$g.Object;
    var defineProperties$2 = defineProperties$4.exports = function defineProperties(T, D) {
        return Object$2.defineProperties(T, D);
    };
    if (Object$2.defineProperties.sham) defineProperties$2.sham = true;
    var parent$G = defineProperties$4.exports;
    var defineProperties$1 = parent$G;
    var defineProperties = defineProperties$1;
    var defineProperty$4 = defineProperty$a;
    var $$q = _export;
    var isArray$9 = isArray$d; // `Array.isArray` method
    // https://tc39.es/ecma262/#sec-array.isarray
    $$q({
        target: "Array",
        stat: true
    }, {
        isArray: isArray$9
    });
    var path$f = path$q;
    var isArray$8 = path$f.Array.isArray;
    var parent$F = isArray$8;
    var isArray$7 = parent$F;
    var parent$E = isArray$7;
    var isArray$6 = parent$E;
    var parent$D = isArray$6;
    var isArray$5 = parent$D;
    var isArray$4 = isArray$5;
    function _arrayWithHoles(arr) {
        if (isArray$4(arr)) return arr;
    }
    var $$p = _export;
    var global$e = global$M;
    var fails$c = fails$r;
    var isArray$3 = isArray$d;
    var isObject$6 = isObject$f;
    var toObject$6 = toObject$e;
    var lengthOfArrayLike$5 = lengthOfArrayLike$d;
    var createProperty$2 = createProperty$6;
    var arraySpeciesCreate$1 = arraySpeciesCreate$4;
    var arrayMethodHasSpeciesSupport$2 = arrayMethodHasSpeciesSupport$5;
    var wellKnownSymbol$4 = wellKnownSymbol$j;
    var V8_VERSION = engineV8Version;
    var IS_CONCAT_SPREADABLE = wellKnownSymbol$4("isConcatSpreadable");
    var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
    var TypeError$7 = global$e.TypeError; // We can't use this feature detection in V8 since it causes
    // deoptimization and serious performance degradation
    // https://github.com/zloirock/core-js/issues/679
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails$c(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
    });
    var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport$2("concat");
    var isConcatSpreadable = function(O) {
        if (!isObject$6(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray$3(O);
    };
    var FORCED$4 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
    // https://tc39.es/ecma262/#sec-array.prototype.concat
    // with adding support of @@isConcatSpreadable and @@species
    $$p({
        target: "Array",
        proto: true,
        forced: FORCED$4
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        concat: function concat(arg) {
            var O = toObject$6(this);
            var A = arraySpeciesCreate$1(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for(i = -1, length = arguments.length; i < length; i++){
                E = i === -1 ? O : arguments[i];
                if (isConcatSpreadable(E)) {
                    len = lengthOfArrayLike$5(E);
                    if (n + len > MAX_SAFE_INTEGER$1) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    for(k = 0; k < len; k++, n++)if (k in E) createProperty$2(A, n, E[k]);
                } else {
                    if (n >= MAX_SAFE_INTEGER$1) throw TypeError$7(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                    createProperty$2(A, n++, E);
                }
            }
            A.length = n;
            return A;
        }
    });
    var defineWellKnownSymbol$j = defineWellKnownSymbol$l; // `Symbol.asyncIterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.asynciterator
    defineWellKnownSymbol$j("asyncIterator");
    var defineWellKnownSymbol$i = defineWellKnownSymbol$l; // `Symbol.hasInstance` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.hasinstance
    defineWellKnownSymbol$i("hasInstance");
    var defineWellKnownSymbol$h = defineWellKnownSymbol$l; // `Symbol.isConcatSpreadable` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
    defineWellKnownSymbol$h("isConcatSpreadable");
    var defineWellKnownSymbol$g = defineWellKnownSymbol$l; // `Symbol.iterator` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.iterator
    defineWellKnownSymbol$g("iterator");
    var defineWellKnownSymbol$f = defineWellKnownSymbol$l; // `Symbol.match` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.match
    defineWellKnownSymbol$f("match");
    var defineWellKnownSymbol$e = defineWellKnownSymbol$l; // `Symbol.matchAll` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.matchall
    defineWellKnownSymbol$e("matchAll");
    var defineWellKnownSymbol$d = defineWellKnownSymbol$l; // `Symbol.replace` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.replace
    defineWellKnownSymbol$d("replace");
    var defineWellKnownSymbol$c = defineWellKnownSymbol$l; // `Symbol.search` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.search
    defineWellKnownSymbol$c("search");
    var defineWellKnownSymbol$b = defineWellKnownSymbol$l; // `Symbol.species` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.species
    defineWellKnownSymbol$b("species");
    var defineWellKnownSymbol$a = defineWellKnownSymbol$l; // `Symbol.split` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.split
    defineWellKnownSymbol$a("split");
    var defineWellKnownSymbol$9 = defineWellKnownSymbol$l; // `Symbol.toPrimitive` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.toprimitive
    defineWellKnownSymbol$9("toPrimitive");
    var defineWellKnownSymbol$8 = defineWellKnownSymbol$l; // `Symbol.toStringTag` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.tostringtag
    defineWellKnownSymbol$8("toStringTag");
    var defineWellKnownSymbol$7 = defineWellKnownSymbol$l; // `Symbol.unscopables` well-known symbol
    // https://tc39.es/ecma262/#sec-symbol.unscopables
    defineWellKnownSymbol$7("unscopables");
    var global$d = global$M;
    var setToStringTag$1 = setToStringTag$5; // JSON[@@toStringTag] property
    // https://tc39.es/ecma262/#sec-json-@@tostringtag
    setToStringTag$1(global$d.JSON, "JSON", true);
    var path$e = path$q;
    var symbol$5 = path$e.Symbol;
    var parent$C = symbol$5;
    var symbol$4 = parent$C;
    var parent$B = symbol$4;
    var symbol$3 = parent$B;
    var defineWellKnownSymbol$6 = defineWellKnownSymbol$l; // `Symbol.asyncDispose` well-known symbol
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol$6("asyncDispose");
    var defineWellKnownSymbol$5 = defineWellKnownSymbol$l; // `Symbol.dispose` well-known symbol
    // https://github.com/tc39/proposal-using-statement
    defineWellKnownSymbol$5("dispose");
    var defineWellKnownSymbol$4 = defineWellKnownSymbol$l; // `Symbol.matcher` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol$4("matcher");
    var defineWellKnownSymbol$3 = defineWellKnownSymbol$l; // `Symbol.metadata` well-known symbol
    // https://github.com/tc39/proposal-decorators
    defineWellKnownSymbol$3("metadata");
    var defineWellKnownSymbol$2 = defineWellKnownSymbol$l; // `Symbol.observable` well-known symbol
    // https://github.com/tc39/proposal-observable
    defineWellKnownSymbol$2("observable");
    var defineWellKnownSymbol$1 = defineWellKnownSymbol$l; // `Symbol.patternMatch` well-known symbol
    // https://github.com/tc39/proposal-pattern-matching
    defineWellKnownSymbol$1("patternMatch");
    var defineWellKnownSymbol = defineWellKnownSymbol$l;
    defineWellKnownSymbol("replaceAll");
    var parent$A = symbol$3; // TODO: Remove from `core-js@4`
    // TODO: Remove from `core-js@4`
    var symbol$2 = parent$A;
    var symbol$1 = symbol$2;
    function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof symbol$1 !== "undefined" && getIteratorMethod$1(arr) || arr["@@iterator"];
        if (_i == null) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
            for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    var $$o = _export;
    var global$c = global$M;
    var isArray$2 = isArray$d;
    var isConstructor$1 = isConstructor$4;
    var isObject$5 = isObject$f;
    var toAbsoluteIndex$2 = toAbsoluteIndex$5;
    var lengthOfArrayLike$4 = lengthOfArrayLike$d;
    var toIndexedObject$1 = toIndexedObject$b;
    var createProperty$1 = createProperty$6;
    var wellKnownSymbol$3 = wellKnownSymbol$j;
    var arrayMethodHasSpeciesSupport$1 = arrayMethodHasSpeciesSupport$5;
    var un$Slice = arraySlice$5;
    var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1("slice");
    var SPECIES$1 = wellKnownSymbol$3("species");
    var Array$2 = global$c.Array;
    var max$1 = Math.max; // `Array.prototype.slice` method
    // https://tc39.es/ecma262/#sec-array.prototype.slice
    // fallback for not array-like ES3 strings and DOM objects
    $$o({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT$1
    }, {
        slice: function slice(start, end) {
            var O = toIndexedObject$1(this);
            var length = lengthOfArrayLike$4(O);
            var k = toAbsoluteIndex$2(start, length);
            var fin = toAbsoluteIndex$2(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray$2(O)) {
                Constructor = O.constructor; // cross-realm fallback
                if (isConstructor$1(Constructor) && (Constructor === Array$2 || isArray$2(Constructor.prototype))) Constructor = undefined;
                else if (isObject$5(Constructor)) {
                    Constructor = Constructor[SPECIES$1];
                    if (Constructor === null) Constructor = undefined;
                }
                if (Constructor === Array$2 || Constructor === undefined) return un$Slice(O, k, fin);
            }
            result = new (Constructor === undefined ? Array$2 : Constructor)(max$1(fin - k, 0));
            for(n = 0; k < fin; k++, n++)if (k in O) createProperty$1(result, n, O[k]);
            result.length = n;
            return result;
        }
    });
    var entryVirtual$e = entryVirtual$k;
    var slice$6 = entryVirtual$e("Array").slice;
    var isPrototypeOf$b = objectIsPrototypeOf;
    var method$9 = slice$6;
    var ArrayPrototype$9 = Array.prototype;
    var slice$5 = function(it) {
        var own = it.slice;
        return it === ArrayPrototype$9 || isPrototypeOf$b(ArrayPrototype$9, it) && own === ArrayPrototype$9.slice ? method$9 : own;
    };
    var parent$z = slice$5;
    var slice$4 = parent$z;
    var parent$y = slice$4;
    var slice$3 = parent$y;
    var parent$x = slice$3;
    var slice$2 = parent$x;
    var slice$1 = slice$2;
    var parent$w = from$4;
    var from$2 = parent$w;
    var parent$v = from$2;
    var from$1 = parent$v;
    var from = from$1;
    function _arrayLikeToArray$4(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _unsupportedIterableToArray$4(o, minLen) {
        var _context;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
        var n = slice$1(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest();
    }
    var WrappedWellKnownSymbolModule = wellKnownSymbolWrapped;
    var iterator$5 = WrappedWellKnownSymbolModule.f("iterator");
    var parent$u = iterator$5;
    var iterator$4 = parent$u;
    var parent$t = iterator$4;
    var iterator$3 = parent$t;
    var parent$s = iterator$3;
    var iterator$2 = parent$s;
    var iterator$1 = iterator$2;
    function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof symbol$1 && "symbol" == typeof iterator$1 ? function(obj) {
            return typeof obj;
        } : function(obj) {
            return obj && "function" == typeof symbol$1 && obj.constructor === symbol$1 && obj !== symbol$1.prototype ? "symbol" : typeof obj;
        }, _typeof(obj);
    }
    function _arrayWithoutHoles(arr) {
        if (isArray$4(arr)) return _arrayLikeToArray$4(arr);
    }
    function _iterableToArray(iter) {
        if (typeof symbol$1 !== "undefined" && getIteratorMethod$1(iter) != null || iter["@@iterator"] != null) return from(iter);
    }
    function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread();
    }
    var symbol = symbol$4;
    var entryVirtual$d = entryVirtual$k;
    var concat$4 = entryVirtual$d("Array").concat;
    var isPrototypeOf$a = objectIsPrototypeOf;
    var method$8 = concat$4;
    var ArrayPrototype$8 = Array.prototype;
    var concat$3 = function(it) {
        var own = it.concat;
        return it === ArrayPrototype$8 || isPrototypeOf$a(ArrayPrototype$8, it) && own === ArrayPrototype$8.concat ? method$8 : own;
    };
    var parent$r = concat$3;
    var concat$2 = parent$r;
    var concat$1 = concat$2;
    var slice = slice$4;
    var $$n = _export;
    var ownKeys$4 = ownKeys$6; // `Reflect.ownKeys` method
    // https://tc39.es/ecma262/#sec-reflect.ownkeys
    $$n({
        target: "Reflect",
        stat: true
    }, {
        ownKeys: ownKeys$4
    });
    var path$d = path$q;
    var ownKeys$3 = path$d.Reflect.ownKeys;
    var parent$q = ownKeys$3;
    var ownKeys$2 = parent$q;
    var ownKeys$1 = ownKeys$2;
    var isArray$1 = isArray$7;
    var $$m = _export;
    var toObject$5 = toObject$e;
    var nativeKeys = objectKeys$4;
    var fails$b = fails$r;
    var FAILS_ON_PRIMITIVES$2 = fails$b(function() {
        nativeKeys(1);
    }); // `Object.keys` method
    // https://tc39.es/ecma262/#sec-object.keys
    $$m({
        target: "Object",
        stat: true,
        forced: FAILS_ON_PRIMITIVES$2
    }, {
        keys: function keys(it) {
            return nativeKeys(toObject$5(it));
        }
    });
    var path$c = path$q;
    var keys$6 = path$c.Object.keys;
    var parent$p = keys$6;
    var keys$5 = parent$p;
    var keys$4 = keys$5;
    var $$l = _export;
    var global$b = global$M;
    var uncurryThis$a = functionUncurryThis;
    var Date$1 = global$b.Date;
    var getTime = uncurryThis$a(Date$1.prototype.getTime); // `Date.now` method
    // https://tc39.es/ecma262/#sec-date.now
    $$l({
        target: "Date",
        stat: true
    }, {
        now: function now() {
            return getTime(new Date$1());
        }
    });
    var path$b = path$q;
    path$b.Date.now;
    var $forEach = arrayIteration.forEach;
    var arrayMethodIsStrict$3 = arrayMethodIsStrict$5;
    var STRICT_METHOD$3 = arrayMethodIsStrict$3("forEach"); // `Array.prototype.forEach` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    var arrayForEach = !STRICT_METHOD$3 ? function forEach(callbackfn) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    } : [].forEach;
    var $$k = _export;
    var forEach$5 = arrayForEach; // `Array.prototype.forEach` method
    // https://tc39.es/ecma262/#sec-array.prototype.foreach
    // eslint-disable-next-line es/no-array-prototype-foreach -- safe
    $$k({
        target: "Array",
        proto: true,
        forced: [].forEach != forEach$5
    }, {
        forEach: forEach$5
    });
    var entryVirtual$c = entryVirtual$k;
    var forEach$4 = entryVirtual$c("Array").forEach;
    var parent$o = forEach$4;
    var forEach$3 = parent$o;
    var classof$5 = classof$c;
    var hasOwn$4 = hasOwnProperty_1;
    var isPrototypeOf$9 = objectIsPrototypeOf;
    var method$7 = forEach$3;
    var ArrayPrototype$7 = Array.prototype;
    var DOMIterables$3 = {
        DOMTokenList: true,
        NodeList: true
    };
    var forEach$2 = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype$7 || isPrototypeOf$9(ArrayPrototype$7, it) && own === ArrayPrototype$7.forEach || hasOwn$4(DOMIterables$3, classof$5(it)) ? method$7 : own;
    };
    var forEach$1 = forEach$2;
    var $$j = _export;
    var uncurryThis$9 = functionUncurryThis;
    var isArray = isArray$d;
    var un$Reverse = uncurryThis$9([].reverse);
    var test$1 = [
        1,
        2
    ]; // `Array.prototype.reverse` method
    // https://tc39.es/ecma262/#sec-array.prototype.reverse
    // fix for Safari 12.0 bug
    // https://bugs.webkit.org/show_bug.cgi?id=188794
    $$j({
        target: "Array",
        proto: true,
        forced: String(test$1) === String(test$1.reverse())
    }, {
        reverse: function reverse() {
            // eslint-disable-next-line no-self-assign -- dirty hack
            if (isArray(this)) this.length = this.length;
            return un$Reverse(this);
        }
    });
    var entryVirtual$b = entryVirtual$k;
    var reverse$3 = entryVirtual$b("Array").reverse;
    var isPrototypeOf$8 = objectIsPrototypeOf;
    var method$6 = reverse$3;
    var ArrayPrototype$6 = Array.prototype;
    var reverse$2 = function(it) {
        var own = it.reverse;
        return it === ArrayPrototype$6 || isPrototypeOf$8(ArrayPrototype$6, it) && own === ArrayPrototype$6.reverse ? method$6 : own;
    };
    var parent$n = reverse$2;
    var reverse$1 = parent$n;
    var reverse = reverse$1;
    var $$i = _export;
    var global$a = global$M;
    var toAbsoluteIndex$1 = toAbsoluteIndex$5;
    var toIntegerOrInfinity = toIntegerOrInfinity$4;
    var lengthOfArrayLike$3 = lengthOfArrayLike$d;
    var toObject$4 = toObject$e;
    var arraySpeciesCreate = arraySpeciesCreate$4;
    var createProperty = createProperty$6;
    var arrayMethodHasSpeciesSupport = arrayMethodHasSpeciesSupport$5;
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
    var TypeError$6 = global$a.TypeError;
    var max = Math.max;
    var min = Math.min;
    var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
    var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded"; // `Array.prototype.splice` method
    // https://tc39.es/ecma262/#sec-array.prototype.splice
    // with adding support of @@species
    $$i({
        target: "Array",
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
    }, {
        splice: function splice(start, deleteCount) {
            var O = toObject$4(this);
            var len = lengthOfArrayLike$3(O);
            var actualStart = toAbsoluteIndex$1(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from, to;
            if (argumentsLength === 0) insertCount = actualDeleteCount = 0;
            else if (argumentsLength === 1) {
                insertCount = 0;
                actualDeleteCount = len - actualStart;
            } else {
                insertCount = argumentsLength - 2;
                actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) throw TypeError$6(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            A = arraySpeciesCreate(O, actualDeleteCount);
            for(k = 0; k < actualDeleteCount; k++){
                from = actualStart + k;
                if (from in O) createProperty(A, k, O[from]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
                for(k = actualStart; k < len - actualDeleteCount; k++){
                    from = k + actualDeleteCount;
                    to = k + insertCount;
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                }
                for(k = len; k > len - actualDeleteCount + insertCount; k--)delete O[k - 1];
            } else if (insertCount > actualDeleteCount) for(k = len - actualDeleteCount; k > actualStart; k--){
                from = k + actualDeleteCount - 1;
                to = k + insertCount - 1;
                if (from in O) O[to] = O[from];
                else delete O[to];
            }
            for(k = 0; k < insertCount; k++)O[k + actualStart] = arguments[k + 2];
            O.length = len - actualDeleteCount + insertCount;
            return A;
        }
    });
    var entryVirtual$a = entryVirtual$k;
    var splice$3 = entryVirtual$a("Array").splice;
    var isPrototypeOf$7 = objectIsPrototypeOf;
    var method$5 = splice$3;
    var ArrayPrototype$5 = Array.prototype;
    var splice$2 = function(it) {
        var own = it.splice;
        return it === ArrayPrototype$5 || isPrototypeOf$7(ArrayPrototype$5, it) && own === ArrayPrototype$5.splice ? method$5 : own;
    };
    var parent$m = splice$2;
    var splice$1 = parent$m;
    var splice = splice$1;
    var DESCRIPTORS$5 = descriptors;
    var uncurryThis$8 = functionUncurryThis;
    var call$1 = functionCall;
    var fails$a = fails$r;
    var objectKeys$1 = objectKeys$4;
    var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
    var propertyIsEnumerableModule = objectPropertyIsEnumerable;
    var toObject$3 = toObject$e;
    var IndexedObject = indexedObject; // eslint-disable-next-line es/no-object-assign -- safe
    var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing
    var defineProperty$3 = Object.defineProperty;
    var concat = uncurryThis$8([].concat); // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    var objectAssign = !$assign || fails$a(function() {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS$5 && $assign({
            b: 1
        }, $assign(defineProperty$3({}, "a", {
            enumerable: true,
            get: function() {
                defineProperty$3(this, "b", {
                    value: 3,
                    enumerable: false
                });
            }
        }), {
            b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)
        var A = {};
        var B = {}; // eslint-disable-next-line es/no-symbol -- safe
        var symbol = Symbol();
        var alphabet = "abcdefghijklmnopqrst";
        A[symbol] = 7;
        alphabet.split("").forEach(function(chr) {
            B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys$1($assign({}, B)).join("") != alphabet;
    }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars -- required for `.length`
        var T = toObject$3(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;
        while(argumentsLength > index){
            var S = IndexedObject(arguments[index++]);
            var keys = getOwnPropertySymbols ? concat(objectKeys$1(S), getOwnPropertySymbols(S)) : objectKeys$1(S);
            var length = keys.length;
            var j = 0;
            var key;
            while(length > j){
                key = keys[j++];
                if (!DESCRIPTORS$5 || call$1(propertyIsEnumerable, S, key)) T[key] = S[key];
            }
        }
        return T;
    } : $assign;
    var $$h = _export;
    var assign$5 = objectAssign; // `Object.assign` method
    // https://tc39.es/ecma262/#sec-object.assign
    // eslint-disable-next-line es/no-object-assign -- required for testing
    $$h({
        target: "Object",
        stat: true,
        forced: Object.assign !== assign$5
    }, {
        assign: assign$5
    });
    var path$a = path$q;
    var assign$4 = path$a.Object.assign;
    var parent$l = assign$4;
    var assign$3 = parent$l;
    var assign$2 = assign$3;
    var $$g = _export;
    var $includes = arrayIncludes.includes;
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    $$g({
        target: "Array",
        proto: true
    }, {
        includes: function includes(el) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
    }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    var entryVirtual$9 = entryVirtual$k;
    entryVirtual$9("Array").includes;
    var isObject$4 = isObject$f;
    var classof$4 = classofRaw$1;
    var wellKnownSymbol$2 = wellKnownSymbol$j;
    var MATCH$1 = wellKnownSymbol$2("match"); // `IsRegExp` abstract operation
    // https://tc39.es/ecma262/#sec-isregexp
    var isRegexp = function(it) {
        var isRegExp;
        return isObject$4(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$4(it) == "RegExp");
    };
    var global$9 = global$M;
    var isRegExp = isRegexp;
    var TypeError$5 = global$9.TypeError;
    var notARegexp = function(it) {
        if (isRegExp(it)) throw TypeError$5("The method doesn't accept regular expressions");
        return it;
    };
    var wellKnownSymbol$1 = wellKnownSymbol$j;
    var MATCH = wellKnownSymbol$1("match");
    var correctIsRegexpLogic = function(METHOD_NAME) {
        var regexp = /./;
        try {
            "/./"[METHOD_NAME](regexp);
        } catch (error1) {
            try {
                regexp[MATCH] = false;
                return "/./"[METHOD_NAME](regexp);
            } catch (error2) {
            /* empty */ }
        }
        return false;
    };
    var $$f = _export;
    var uncurryThis$7 = functionUncurryThis;
    var notARegExp = notARegexp;
    var requireObjectCoercible$1 = requireObjectCoercible$5;
    var toString$3 = toString$7;
    var correctIsRegExpLogic = correctIsRegexpLogic;
    var stringIndexOf = uncurryThis$7("".indexOf); // `String.prototype.includes` method
    // https://tc39.es/ecma262/#sec-string.prototype.includes
    $$f({
        target: "String",
        proto: true,
        forced: !correctIsRegExpLogic("includes")
    }, {
        includes: function includes(searchString) {
            return !!~stringIndexOf(toString$3(requireObjectCoercible$1(this)), toString$3(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var entryVirtual$8 = entryVirtual$k;
    entryVirtual$8("String").includes;
    var $$e = _export;
    var fails$9 = fails$r;
    var toObject$2 = toObject$e;
    var nativeGetPrototypeOf = objectGetPrototypeOf;
    var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;
    var FAILS_ON_PRIMITIVES$1 = fails$9(function() {
        nativeGetPrototypeOf(1);
    }); // `Object.getPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.getprototypeof
    $$e({
        target: "Object",
        stat: true,
        forced: FAILS_ON_PRIMITIVES$1,
        sham: !CORRECT_PROTOTYPE_GETTER
    }, {
        getPrototypeOf: function getPrototypeOf(it) {
            return nativeGetPrototypeOf(toObject$2(it));
        }
    });
    var path$9 = path$q;
    var getPrototypeOf$4 = path$9.Object.getPrototypeOf;
    var parent$k = getPrototypeOf$4;
    var getPrototypeOf$3 = parent$k;
    var DESCRIPTORS$4 = descriptors;
    var uncurryThis$6 = functionUncurryThis;
    var objectKeys = objectKeys$4;
    var toIndexedObject = toIndexedObject$b;
    var $propertyIsEnumerable = objectPropertyIsEnumerable.f;
    var propertyIsEnumerable = uncurryThis$6($propertyIsEnumerable);
    var push$2 = uncurryThis$6([].push); // `Object.{ entries, values }` methods implementation
    var createMethod$1 = function(TO_ENTRIES) {
        return function(it) {
            var O = toIndexedObject(it);
            var keys = objectKeys(O);
            var length = keys.length;
            var i = 0;
            var result = [];
            var key;
            while(length > i){
                key = keys[i++];
                if (!DESCRIPTORS$4 || propertyIsEnumerable(O, key)) push$2(result, TO_ENTRIES ? [
                    key,
                    O[key]
                ] : O[key]);
            }
            return result;
        };
    };
    var objectToArray = {
        // `Object.entries` method
        // https://tc39.es/ecma262/#sec-object.entries
        entries: createMethod$1(true),
        // `Object.values` method
        // https://tc39.es/ecma262/#sec-object.values
        values: createMethod$1(false)
    };
    var $$d = _export;
    var $values = objectToArray.values; // `Object.values` method
    // https://tc39.es/ecma262/#sec-object.values
    $$d({
        target: "Object",
        stat: true
    }, {
        values: function values(O) {
            return $values(O);
        }
    });
    var path$8 = path$q;
    path$8.Object.values;
    var whitespaces$3 = "	\n\v\f\r \xa0              　\u2028\u2029\uFEFF";
    var uncurryThis$5 = functionUncurryThis;
    var requireObjectCoercible = requireObjectCoercible$5;
    var toString$2 = toString$7;
    var whitespaces$2 = whitespaces$3;
    var replace$1 = uncurryThis$5("".replace);
    var whitespace = "[" + whitespaces$2 + "]";
    var ltrim = RegExp("^" + whitespace + whitespace + "*");
    var rtrim = RegExp(whitespace + whitespace + "*$"); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
    var createMethod = function(TYPE) {
        return function($this) {
            var string = toString$2(requireObjectCoercible($this));
            if (TYPE & 1) string = replace$1(string, ltrim, "");
            if (TYPE & 2) string = replace$1(string, rtrim, "");
            return string;
        };
    };
    var stringTrim = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
    };
    var global$8 = global$M;
    var fails$8 = fails$r;
    var uncurryThis$4 = functionUncurryThis;
    var toString$1 = toString$7;
    var trim = stringTrim.trim;
    var whitespaces$1 = whitespaces$3;
    var $parseInt$1 = global$8.parseInt;
    var Symbol$1 = global$8.Symbol;
    var ITERATOR = Symbol$1 && Symbol$1.iterator;
    var hex = /^[+-]?0x/i;
    var exec$1 = uncurryThis$4(hex.exec);
    var FORCED$3 = $parseInt$1(whitespaces$1 + "08") !== 8 || $parseInt$1(whitespaces$1 + "0x16") !== 22 // MS Edge 18- broken with boxed symbols
     || ITERATOR && !fails$8(function() {
        $parseInt$1(Object(ITERATOR));
    }); // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    var numberParseInt = FORCED$3 ? function parseInt1(string, radix) {
        var S = trim(toString$1(string));
        return $parseInt$1(S, radix >>> 0 || (exec$1(hex, S) ? 16 : 10));
    } : $parseInt$1;
    var $$c = _export;
    var $parseInt = numberParseInt; // `parseInt` method
    // https://tc39.es/ecma262/#sec-parseint-string-radix
    $$c({
        global: true,
        forced: parseInt != $parseInt
    }, {
        parseInt: $parseInt
    });
    var path$7 = path$q;
    path$7.parseInt;
    /* eslint-disable es/no-array-prototype-indexof -- required for testing */ var $$b = _export;
    var uncurryThis$3 = functionUncurryThis;
    var $IndexOf = arrayIncludes.indexOf;
    var arrayMethodIsStrict$2 = arrayMethodIsStrict$5;
    var un$IndexOf = uncurryThis$3([].indexOf);
    var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([
        1
    ], 1, -0) < 0;
    var STRICT_METHOD$2 = arrayMethodIsStrict$2("indexOf"); // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    $$b({
        target: "Array",
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD$2
    }, {
        indexOf: function indexOf(searchElement) {
            var fromIndex = arguments.length > 1 ? arguments[1] : undefined;
            return NEGATIVE_ZERO // convert -0 to +0
             ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
        }
    });
    var entryVirtual$7 = entryVirtual$k;
    entryVirtual$7("Array").indexOf;
    var PROPER_FUNCTION_NAME = functionName.PROPER;
    var fails$7 = fails$r;
    var whitespaces = whitespaces$3;
    var non = "​\x85᠎"; // check that a method works with the correct list
    // of whitespaces and has a correct name
    var stringTrimForced = function(METHOD_NAME) {
        return fails$7(function() {
            return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
    };
    var $$a = _export;
    var $trim = stringTrim.trim;
    var forcedStringTrimMethod = stringTrimForced; // `String.prototype.trim` method
    // https://tc39.es/ecma262/#sec-string.prototype.trim
    $$a({
        target: "String",
        proto: true,
        forced: forcedStringTrimMethod("trim")
    }, {
        trim: function trim() {
            return $trim(this);
        }
    });
    var entryVirtual$6 = entryVirtual$k;
    entryVirtual$6("String").trim;
    var $$9 = _export;
    var DESCRIPTORS$3 = descriptors;
    var create$8 = objectCreate; // `Object.create` method
    // https://tc39.es/ecma262/#sec-object.create
    $$9({
        target: "Object",
        stat: true,
        sham: !DESCRIPTORS$3
    }, {
        create: create$8
    });
    var path$6 = path$q;
    var Object$1 = path$6.Object;
    var create$7 = function create(P, D) {
        return Object$1.create(P, D);
    };
    var parent$j = create$7;
    var create$6 = parent$j;
    var create$5 = create$6;
    var $$8 = _export;
    var global$7 = global$M;
    var getBuiltIn$2 = getBuiltIn$9;
    var apply$3 = functionApply;
    var uncurryThis$2 = functionUncurryThis;
    var fails$6 = fails$r;
    var Array$1 = global$7.Array;
    var $stringify = getBuiltIn$2("JSON", "stringify");
    var exec = uncurryThis$2(/./.exec);
    var charAt = uncurryThis$2("".charAt);
    var charCodeAt = uncurryThis$2("".charCodeAt);
    var replace = uncurryThis$2("".replace);
    var numberToString = uncurryThis$2(1.0.toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var fix = function(match, offset, string) {
        var prev = charAt(string, offset - 1);
        var next = charAt(string, offset + 1);
        if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) return "\\u" + numberToString(charCodeAt(match, 0), 16);
        return match;
    };
    var FORCED$2 = fails$6(function() {
        return $stringify("\uDF06\uD834") !== '"\udf06\ud834"' || $stringify("\uDEAD") !== '"\udead"';
    });
    if ($stringify) // `JSON.stringify` method
    // https://tc39.es/ecma262/#sec-json.stringify
    // https://github.com/tc39/proposal-well-formed-stringify
    $$8({
        target: "JSON",
        stat: true,
        forced: FORCED$2
    }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        stringify: function stringify(it, replacer, space) {
            for(var i = 0, l = arguments.length, args = Array$1(l); i < l; i++)args[i] = arguments[i];
            var result = apply$3($stringify, null, args);
            return typeof result == "string" ? replace(result, tester, fix) : result;
        }
    });
    var path$5 = path$q;
    var apply$2 = functionApply; // eslint-disable-next-line es/no-json -- safe
    if (!path$5.JSON) path$5.JSON = {
        stringify: JSON.stringify
    }; // eslint-disable-next-line no-unused-vars -- required for `.length`
    var stringify$3 = function stringify(it, replacer, space) {
        return apply$2(path$5.JSON.stringify, null, arguments);
    };
    var parent$i = stringify$3;
    var stringify$2 = parent$i;
    var stringify$1 = stringify$2;
    var global$6 = global$M;
    var TypeError$4 = global$6.TypeError;
    var validateArgumentsLength$1 = function(passed, required) {
        if (passed < required) throw TypeError$4("Not enough arguments");
        return passed;
    };
    var $$7 = _export;
    var global$5 = global$M;
    var apply$1 = functionApply;
    var isCallable$1 = isCallable$h;
    var userAgent$2 = engineUserAgent;
    var arraySlice$1 = arraySlice$5;
    var validateArgumentsLength = validateArgumentsLength$1;
    var MSIE = /MSIE .\./.test(userAgent$2); // <- dirty ie9- check
    var Function$1 = global$5.Function;
    var wrap = function(scheduler) {
        return function(handler, timeout) {
            var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
            var fn = isCallable$1(handler) ? handler : Function$1(handler);
            var args = boundArgs ? arraySlice$1(arguments, 2) : undefined;
            return scheduler(boundArgs ? function() {
                apply$1(fn, this, args);
            } : fn, timeout);
        };
    }; // ie9- setTimeout & setInterval additional parameters fix
    // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
    $$7({
        global: true,
        bind: true,
        forced: MSIE
    }, {
        // `setTimeout` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
        setTimeout: wrap(global$5.setTimeout),
        // `setInterval` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
        setInterval: wrap(global$5.setInterval)
    });
    var path$4 = path$q;
    var setTimeout$2 = path$4.setTimeout;
    var setTimeout$1 = setTimeout$2;
    var toObject$1 = toObject$e;
    var toAbsoluteIndex = toAbsoluteIndex$5;
    var lengthOfArrayLike$2 = lengthOfArrayLike$d; // `Array.prototype.fill` method implementation
    // https://tc39.es/ecma262/#sec-array.prototype.fill
    var arrayFill = function fill(value) {
        var O = toObject$1(this);
        var length = lengthOfArrayLike$2(O);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
        while(endPos > index)O[index++] = value;
        return O;
    };
    var $$6 = _export;
    var fill = arrayFill;
    // https://tc39.es/ecma262/#sec-array.prototype.fill
    $$6({
        target: "Array",
        proto: true
    }, {
        fill: fill
    }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
    var entryVirtual$5 = entryVirtual$k;
    entryVirtual$5("Array").fill;
    var componentEmitter = {
        exports: {}
    };
    (function(module) {
        module.exports = Emitter;
        /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */ function Emitter(obj) {
            if (obj) return mixin(obj);
        }
        /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */ function mixin(obj) {
            for(var key in Emitter.prototype)obj[key] = Emitter.prototype[key];
            return obj;
        }
        /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */ Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {};
            (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
            return this;
        };
        /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */ Emitter.prototype.once = function(event, fn) {
            function on() {
                this.off(event, on);
                fn.apply(this, arguments);
            }
            on.fn = fn;
            this.on(event, on);
            return this;
        };
        /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */ Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
            this._callbacks = this._callbacks || {}; // all
            if (0 == arguments.length) {
                this._callbacks = {};
                return this;
            } // specific event
            var callbacks = this._callbacks["$" + event];
            if (!callbacks) return this; // remove all handlers
            if (1 == arguments.length) {
                delete this._callbacks["$" + event];
                return this;
            } // remove specific handler
            var cb;
            for(var i = 0; i < callbacks.length; i++){
                cb = callbacks[i];
                if (cb === fn || cb.fn === fn) {
                    callbacks.splice(i, 1);
                    break;
                }
            } // Remove event specific arrays for event types that no
            // one is subscribed for to avoid memory leak.
            if (callbacks.length === 0) delete this._callbacks["$" + event];
            return this;
        };
        /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */ Emitter.prototype.emit = function(event) {
            this._callbacks = this._callbacks || {};
            var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
            for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
            if (callbacks) {
                callbacks = callbacks.slice(0);
                for(var i = 0, len = callbacks.length; i < len; ++i)callbacks[i].apply(this, args);
            }
            return this;
        };
        /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */ Emitter.prototype.listeners = function(event) {
            this._callbacks = this._callbacks || {};
            return this._callbacks["$" + event] || [];
        };
        /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */ Emitter.prototype.hasListeners = function(event) {
            return !!this.listeners(event).length;
        };
    })(componentEmitter);
    var Emitter = componentEmitter.exports;
    /*! Hammer.JS - v2.0.17-rc - 2019-12-16
   * http://naver.github.io/egjs
   *
   * Forked By Naver egjs
   * Copyright (c) hammerjs
   * Licensed under the MIT license */ function _extends() {
        _extends = Object.assign || function(target) {
            for(var i = 1; i < arguments.length; i++){
                var source = arguments[i];
                for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
            }
            return target;
        };
        return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
    }
    function _assertThisInitialized$1(self1) {
        if (self1 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self1;
    }
    /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} target
   * @param {...Object} objects_to_assign
   * @returns {Object} target
   */ var assign;
    if (typeof Object.assign !== "function") assign = function assign(target) {
        if (target === undefined || target === null) throw new TypeError("Cannot convert undefined or null to object");
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign = Object.assign;
    var assign$1 = assign;
    var VENDOR_PREFIXES = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ];
    var TEST_ELEMENT = typeof document === "undefined" ? {
        style: {}
    } : document.createElement("div");
    var TYPE_FUNCTION = "function";
    var round = Math.round, abs = Math.abs;
    var now = Date.now;
    /**
   * @private
   * get the prefixed property
   * @param {Object} obj
   * @param {String} property
   * @returns {String|Undefined} prefixed
   */ function prefixed(obj, property) {
        var prefix;
        var prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /* eslint-disable no-new-func, no-nested-ternary */ var win;
    if (typeof window === "undefined") // window is undefined in node.js
    win = {};
    else win = window;
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {};
        var cssSupports = win.CSS && win.CSS.supports;
        [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            return touchMap[val] = cssSupports ? win.CSS.supports("touch-action", val) : true;
        });
        return touchMap;
    }
    var TOUCH_ACTION_COMPUTE = "compute";
    var TOUCH_ACTION_AUTO = "auto";
    var TOUCH_ACTION_MANIPULATION = "manipulation"; // not implemented
    var TOUCH_ACTION_NONE = "none";
    var TOUCH_ACTION_PAN_X = "pan-x";
    var TOUCH_ACTION_PAN_Y = "pan-y";
    var TOUCH_ACTION_MAP = getTouchActionProps();
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = "ontouchstart" in win;
    var SUPPORT_POINTER_EVENTS = prefixed(win, "PointerEvent") !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = "touch";
    var INPUT_TYPE_PEN = "pen";
    var INPUT_TYPE_MOUSE = "mouse";
    var INPUT_TYPE_KINECT = "kinect";
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        "x",
        "y"
    ];
    var PROPS_CLIENT_XY = [
        "clientX",
        "clientY"
    ];
    /**
   * @private
   * walk objects and arrays
   * @param {Object} obj
   * @param {Function} iterator
   * @param {Object} context
   */ function each(obj, iterator, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
    }
    /**
   * @private
   * let a boolean value also be a function that must return a boolean
   * this first item in args will be used as the context
   * @param {Boolean|Function} val
   * @param {Array} [args]
   * @returns {Boolean}
   */ function boolOrFn(val, args) {
        if (typeof val === TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
   * @private
   * small indexOf wrapper
   * @param {String} str
   * @param {String} find
   * @returns {Boolean} found
   */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
   * @private
   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
   * @param {String} actions
   * @returns {*}
   */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
         // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
         // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    /**
   * @private
   * Touch Action
   * sets the touchAction property or uses the js alternative
   * @param {Manager} manager
   * @param {String} value
   * @constructor
   */ var TouchAction = /*#__PURE__*/ function() {
        function TouchAction(manager, value) {
            this.manager = manager;
            this.set(value);
        }
        /**
     * @private
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */ var _proto = TouchAction.prototype;
        _proto.set = function set(value) {
            // find out the touch-action by the event handlers
            if (value === TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        };
        /**
     * @private
     * just re-set the touchAction value
     */ _proto.update = function update() {
            this.set(this.manager.options.touchAction);
        };
        /**
     * @private
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */ _proto.compute = function compute() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(" "));
        };
        /**
     * @private
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */ _proto.preventDefaults = function preventDefaults(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection; // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                // do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        };
        /**
     * @private
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */ _proto.preventSrc = function preventSrc(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        };
        return TouchAction;
    }();
    /**
   * @private
   * find if a node is in the given parent
   * @method hasParent
   * @param {HTMLElement} node
   * @param {HTMLElement} parent
   * @return {Boolean} found
   */ function hasParent(node, parent) {
        while(node){
            if (node === parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
   * @private
   * get the center of all the pointers
   * @param {Array} pointers
   * @return {Object} center contains `x` and `y` properties
   */ function getCenter(pointers) {
        var pointersLength = pointers.length; // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0;
        var y = 0;
        var i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
   * @private
   * create a simple clone from the input used for storage of firstInput and firstMultiple
   * @param {Object} input
   * @returns {Object} clonedInputData
   */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
   * @private
   * calculate the absolute distance between two points
   * @param {Object} p1 {x, y}
   * @param {Object} p2 {x, y}
   * @param {Array} [props] containing x and y keys
   * @return {Number} distance
   */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
   * @private
   * calculate the angle between two coordinates
   * @param {Object} p1
   * @param {Object} p2
   * @param {Array} [props] containing x and y keys
   * @return {Number} angle
   */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]];
        var y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
   * @private
   * get the direction between two points
   * @param {Number} x
   * @param {Number} y
   * @return {Number} direction
   */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    function computeDeltaXY(session, input) {
        var center = input.center; // let { offsetDelta:offset = {}, prevDelta = {}, prevInput = {} } = session;
        // jscs throwing error on defalut destructured values and without defaults tests fail
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
   * @private
   * calculate the velocity between two points. unit is in px per ms.
   * @param {Number} deltaTime
   * @param {Number} x
   * @param {Number} y
   * @return {Object} velocity `x` and `y`
   */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
   * @private
   * calculate the scale factor between two pointersets
   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} scale
   */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    /**
   * @private
   * calculate the rotation degrees between two pointersets
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} rotation
   */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
   * @private
   * velocity is calculated every x ms
   * @param {Object} session
   * @param {Object} input
   */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input;
        var deltaTime = input.timeStamp - last.timeStamp;
        var velocity;
        var velocityX;
        var velocityY;
        var direction;
        if (input.eventType !== INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
  * @private
   * extend the data with some usable properties like scale, rotate, velocity etc
   * @param {Object} manager
   * @param {Object} input
   */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length; // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
         // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput, firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input); // find the correct target
        var target = manager.element;
        var srcEvent = input.srcEvent;
        var srcEventTarget;
        if (srcEvent.composedPath) srcEventTarget = srcEvent.composedPath()[0];
        else if (srcEvent.path) srcEventTarget = srcEvent.path[0];
        else srcEventTarget = srcEvent.target;
        if (hasParent(srcEventTarget, target)) target = srcEventTarget;
        input.target = target;
    }
    /**
   * @private
   * handle input events
   * @param {Manager} manager
   * @param {String} eventType
   * @param {Object} input
   */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {};
         // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType; // compute scale, rotation etc
        computeInputData(manager, input); // emit secret event
        manager.emit("hammer.input", input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
   * @private
   * split string on whitespace
   * @param {String} str
   * @returns {Array} words
   */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
   * @private
   * addEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
   * @private
   * removeEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
   * @private
   * get the window object of an element
   * @param {HTMLElement} element
   * @returns {DocumentView|Window}
   */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window;
    }
    /**
   * @private
   * create new input type manager
   * @param {Manager} manager
   * @param {Function} callback
   * @returns {Input}
   * @constructor
   */ var Input = /*#__PURE__*/ function() {
        function Input(manager, callback) {
            var self1 = this;
            this.manager = manager;
            this.callback = callback;
            this.element = manager.element;
            this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
            // so when disabled the input events are completely bypassed.
            this.domHandler = function(ev) {
                if (boolOrFn(manager.options.enable, [
                    manager
                ])) self1.handler(ev);
            };
            this.init();
        }
        /**
     * @private
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */ var _proto = Input.prototype;
        _proto.handler = function handler() {};
        /**
     * @private
     * bind the events
     */ _proto.init = function init() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        /**
     * @private
     * unbind the events
     */ _proto.destroy = function destroy() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        };
        return Input;
    }();
    /**
   * @private
   * find if a array contains the object using indexOf or a simple polyFill
   * @param {Array} src
   * @param {String} find
   * @param {String} [findByKey]
   * @return {Boolean|Number} false when not found, or the index
   */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) // do not use === here, test fails
                return i;
                i++;
            }
            return -1;
        }
    }
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    }; // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = "pointerdown";
    var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel"; // IE10 has prefixed support, and case-sensitive
    if (win.MSPointerEvent && !win.PointerEvent) {
        POINTER_ELEMENT_EVENTS = "MSPointerDown";
        POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
    }
    /**
   * @private
   * Pointer events input
   * @constructor
   * @extends Input
   */ var PointerEventInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(PointerEventInput, _Input);
        function PointerEventInput() {
            var _this;
            var proto = PointerEventInput.prototype;
            proto.evEl = POINTER_ELEMENT_EVENTS;
            proto.evWin = POINTER_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.store = _this.manager.session.pointerEvents = [];
            return _this;
        }
        /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */ var _proto = PointerEventInput.prototype;
        _proto.handler = function handler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType === INPUT_TYPE_TOUCH; // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, "pointerId"); // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
             // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
             // update the event in the store
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store.splice(storeIndex, 1);
        };
        return PointerEventInput;
    }(Input);
    /**
   * @private
   * convert array-like objects to real arrays
   * @param {Object} obj
   * @returns {Array}
   */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
   * @private
   * unique array with objects based on a key (like 'id') or just by the array's value
   * @param {Array} src [{id:1},{id:2},{id:1}]
   * @param {String} [key]
   * @param {Boolean} [sort=False]
   * @returns {Array} [{id:1},{id:2}]
   */ function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) results.push(src[i]);
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
   * @private
   * Multi-user touch events input
   * @constructor
   * @extends Input
   */ var TouchInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(TouchInput, _Input);
        function TouchInput() {
            var _this;
            TouchInput.prototype.evTarget = TOUCH_TARGET_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.targetIds = {}; // this.evTarget = TOUCH_TARGET_EVENTS;
            return _this;
        }
        var _proto = TouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return TouchInput;
    }(Input);
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds; // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i;
        var targetTouches;
        var changedTouches = toArray(ev.changedTouches);
        var changedTargetTouches = [];
        var target = this.target; // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        }); // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        } // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
             // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
            changedTargetTouches
        ];
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = "mousedown";
    var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
    /**
   * @private
   * Mouse events input
   * @constructor
   * @extends Input
   */ var MouseInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(MouseInput, _Input);
        function MouseInput() {
            var _this;
            var proto = MouseInput.prototype;
            proto.evEl = MOUSE_ELEMENT_EVENTS;
            proto.evWin = MOUSE_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.pressed = false; // mousedown state
            return _this;
        }
        /**
     * @private
     * handle mouse events
     * @param {Object} ev
     */ var _proto = MouseInput.prototype;
        _proto.handler = function handler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
             // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        };
        return MouseInput;
    }(Input);
    /**
   * @private
   * Combined touch and mouse input
   *
   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
   * This because touch devices also emit mouse events while doing a touch.
   *
   * @constructor
   * @extends Input
   */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function setLastTouch(eventData) {
        var _eventData$changedPoi = eventData.changedPointers, touch = _eventData$changedPoi[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            var lts = this.lastTouches;
            this.lastTouches.push(lastTouch);
            var removeLastTouch = function removeLastTouch() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX;
        var y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x);
            var dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var TouchMouseInput = /*#__PURE__*/ function() {
        var TouchMouseInput = /*#__PURE__*/ function(_Input) {
            _inheritsLoose(TouchMouseInput, _Input);
            function TouchMouseInput(_manager, callback) {
                var _this;
                _this = _Input.call(this, _manager, callback) || this;
                _this.handler = function(manager, inputEvent, inputData) {
                    var isTouch = inputData.pointerType === INPUT_TYPE_TOUCH;
                    var isMouse = inputData.pointerType === INPUT_TYPE_MOUSE;
                    if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
                     // when we're in a touch event, record touches to  de-dupe synthetic mouse event
                    if (isTouch) recordTouches.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputEvent, inputData);
                    else if (isMouse && isSyntheticEvent.call(_assertThisInitialized$1(_assertThisInitialized$1(_this)), inputData)) return;
                    _this.callback(manager, inputEvent, inputData);
                };
                _this.touch = new TouchInput(_this.manager, _this.handler);
                _this.mouse = new MouseInput(_this.manager, _this.handler);
                _this.primaryTouch = null;
                _this.lastTouches = [];
                return _this;
            }
            /**
       * @private
       * handle mouse and touch events
       * @param {Hammer} manager
       * @param {String} inputEvent
       * @param {Object} inputData
       */ var _proto = TouchMouseInput.prototype;
            /**
       * @private
       * remove the event listeners
       */ _proto.destroy = function destroy() {
                this.touch.destroy();
                this.mouse.destroy();
            };
            return TouchMouseInput;
        }(Input);
        return TouchMouseInput;
    }();
    /**
   * @private
   * create new input type manager
   * called by the Manager constructor
   * @param {Hammer} manager
   * @returns {Input}
   */ function createInputInstance(manager) {
        var Type; // let inputClass = manager.options.inputClass;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput;
        else if (!SUPPORT_TOUCH) Type = MouseInput;
        else Type = TouchMouseInput;
        return new Type(manager, inputHandler);
    }
    /**
   * @private
   * if the argument is an array, we want to execute the fn on each entry
   * if it aint an array we don't want to do a thing.
   * this is used by all the methods that accept a single and array argument.
   * @param {*|Array} arg
   * @param {String} fn
   * @param {Object} [context]
   * @returns {Boolean}
   */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
   * @private
   * get a unique id
   * @returns {number} uniqueId
   */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
   * @private
   * get a recognizer by name if it is bound to a manager
   * @param {Recognizer|String} otherRecognizer
   * @param {Recognizer} recognizer
   * @returns {Recognizer}
   */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
   * @private
   * get a usable string, used as event postfix
   * @param {constant} state
   * @returns {String} state
   */ function stateStr(state) {
        if (state & STATE_CANCELLED) return "cancel";
        else if (state & STATE_ENDED) return "end";
        else if (state & STATE_CHANGED) return "move";
        else if (state & STATE_BEGAN) return "start";
        return "";
    }
    /**
   * @private
   * Recognizer flow explained; *
   * All recognizers have the initial state of POSSIBLE when a input session starts.
   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
   * Example session for mouse-input: mousedown -> mousemove -> mouseup
   *
   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
   * which determines with state it should be.
   *
   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
   * POSSIBLE to give it another change on the next cycle.
   *
   *               Possible
   *                  |
   *            +-----+---------------+
   *            |                     |
   *      +-----+-----+               |
   *      |           |               |
   *   Failed      Cancelled          |
   *                          +-------+------+
   *                          |              |
   *                      Recognized       Began
   *                                         |
   *                                      Changed
   *                                         |
   *                                  Ended/Recognized
   */ /**
   * @private
   * Recognizer
   * Every recognizer needs to extend from this class.
   * @constructor
   * @param {Object} options
   */ var Recognizer = /*#__PURE__*/ function() {
        function Recognizer(options) {
            if (options === void 0) options = {};
            this.options = _extends({
                enable: true
            }, options);
            this.id = uniqueId();
            this.manager = null; // default is enable true
            this.state = STATE_POSSIBLE;
            this.simultaneous = {};
            this.requireFail = [];
        }
        /**
     * @private
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */ var _proto = Recognizer.prototype;
        _proto.set = function set(options) {
            assign$1(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        };
        /**
     * @private
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.recognizeWith = function recognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        };
        /**
     * @private
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.dropRecognizeWith = function dropRecognizeWith(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        };
        /**
     * @private
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.requireFailure = function requireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "requireFailure", this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        };
        /**
     * @private
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ _proto.dropRequireFailure = function dropRequireFailure(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        };
        /**
     * @private
     * has require failures boolean
     * @returns {boolean}
     */ _proto.hasRequireFailures = function hasRequireFailures() {
            return this.requireFail.length > 0;
        };
        /**
     * @private
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */ _proto.canRecognizeWith = function canRecognizeWith(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        };
        /**
     * @private
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */ _proto.emit = function emit(input) {
            var self1 = this;
            var state = this.state;
            function emit(event) {
                self1.manager.emit(event, input);
            } // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self1.options.event + stateStr(state));
            emit(self1.options.event); // simple 'eventName' events
            if (input.additionalEvent) // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
             // panend and pancancel
            if (state >= STATE_ENDED) emit(self1.options.event + stateStr(state));
        };
        /**
     * @private
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */ _proto.tryEmit = function tryEmit(input) {
            if (this.canEmit()) return this.emit(input);
             // it's failing anyway
            this.state = STATE_FAILED;
        };
        /**
     * @private
     * can we emit?
     * @returns {boolean}
     */ _proto.canEmit = function canEmit() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        };
        /**
     * @private
     * update the recognizer
     * @param {Object} inputData
     */ _proto.recognize = function recognize(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign$1({}, inputData); // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            } // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone); // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        };
        /**
     * @private
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {constant} STATE
     */ /* jshint ignore:start */ _proto.process = function process(inputData) {};
        /* jshint ignore:end */ /**
     * @private
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */ _proto.getTouchAction = function getTouchAction() {};
        /**
     * @private
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */ _proto.reset = function reset() {};
        return Recognizer;
    }();
    /**
   * @private
   * A tap is recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
   * a single tap.
   *
   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
   * multi-taps being recognized.
   * @constructor
   * @extends Recognizer
   */ var TapRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(TapRecognizer, _Recognizer);
        function TapRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _Recognizer.call(this, _extends({
                event: "tap",
                pointers: 1,
                taps: 1,
                interval: 300,
                // max time between the multi-tap taps
                time: 250,
                // max time of the pointer to be down (like finger on the screen)
                threshold: 9,
                // a minimal movement is ok, but keep it low
                posThreshold: 10
            }, options)) || this; // previous time and center,
            // used for tap counting
            _this.pTime = false;
            _this.pCenter = false;
            _this._timer = null;
            _this._input = null;
            _this.count = 0;
            return _this;
        }
        var _proto = TapRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
             // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType !== INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input; // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeout(function() {
                            _this2.state = STATE_RECOGNIZED;
                            _this2.tryEmit();
                        }, options.interval);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        };
        _proto.failTimeout = function failTimeout() {
            var _this3 = this;
            this._timer = setTimeout(function() {
                _this3.state = STATE_FAILED;
            }, this.options.interval);
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit() {
            if (this.state === STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        };
        return TapRecognizer;
    }(Recognizer);
    /**
   * @private
   * This recognizer is just used as a base for the simple attribute recognizers.
   * @constructor
   * @extends Recognizer
   */ var AttrRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(AttrRecognizer, _Recognizer);
        function AttrRecognizer(options) {
            if (options === void 0) options = {};
            return _Recognizer.call(this, _extends({
                pointers: 1
            }, options)) || this;
        }
        /**
     * @private
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */ var _proto = AttrRecognizer.prototype;
        _proto.attrTest = function attrTest(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        };
        /**
     * @private
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */ _proto.process = function process(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        };
        return AttrRecognizer;
    }(Recognizer);
    /**
   * @private
   * direction cons to string
   * @param {constant} direction
   * @returns {String}
   */ function directionStr(direction) {
        if (direction === DIRECTION_DOWN) return "down";
        else if (direction === DIRECTION_UP) return "up";
        else if (direction === DIRECTION_LEFT) return "left";
        else if (direction === DIRECTION_RIGHT) return "right";
        return "";
    }
    /**
   * @private
   * Pan
   * Recognized when the pointer is down and moved in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */ var PanRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PanRecognizer, _AttrRecognizer);
        function PanRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _AttrRecognizer.call(this, _extends({
                event: "pan",
                threshold: 10,
                pointers: 1,
                direction: DIRECTION_ALL
            }, options)) || this;
            _this.pX = null;
            _this.pY = null;
            return _this;
        }
        var _proto = PanRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        };
        _proto.directionTest = function directionTest(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY; // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x !== this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y !== this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        };
        _proto.attrTest = function attrTest(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        };
        _proto.emit = function emit(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PanRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Swipe
   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */ var SwipeRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(SwipeRecognizer, _AttrRecognizer);
        function SwipeRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "swipe",
                threshold: 10,
                velocity: 0.3,
                direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                pointers: 1
            }, options)) || this;
        }
        var _proto = SwipeRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        };
        _proto.attrTest = function attrTest(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return _AttrRecognizer.prototype.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        };
        _proto.emit = function emit(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        };
        return SwipeRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Pinch
   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
   * @constructor
   * @extends AttrRecognizer
   */ var PinchRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(PinchRecognizer, _AttrRecognizer);
        function PinchRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "pinch",
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = PinchRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        };
        _proto.emit = function emit(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? "in" : "out";
                input.additionalEvent = this.options.event + inOut;
            }
            _AttrRecognizer.prototype.emit.call(this, input);
        };
        return PinchRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Rotate
   * Recognized when two or more pointer are moving in a circular motion.
   * @constructor
   * @extends AttrRecognizer
   */ var RotateRecognizer = /*#__PURE__*/ function(_AttrRecognizer) {
        _inheritsLoose(RotateRecognizer, _AttrRecognizer);
        function RotateRecognizer(options) {
            if (options === void 0) options = {};
            return _AttrRecognizer.call(this, _extends({
                event: "rotate",
                threshold: 0,
                pointers: 2
            }, options)) || this;
        }
        var _proto = RotateRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_NONE
            ];
        };
        _proto.attrTest = function attrTest(input) {
            return _AttrRecognizer.prototype.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        };
        return RotateRecognizer;
    }(AttrRecognizer);
    /**
   * @private
   * Press
   * Recognized when the pointer is down for x ms without any movement.
   * @constructor
   * @extends Recognizer
   */ var PressRecognizer = /*#__PURE__*/ function(_Recognizer) {
        _inheritsLoose(PressRecognizer, _Recognizer);
        function PressRecognizer(options) {
            var _this;
            if (options === void 0) options = {};
            _this = _Recognizer.call(this, _extends({
                event: "press",
                pointers: 1,
                time: 251,
                // minimal time of the pointer to be pressed
                threshold: 9
            }, options)) || this;
            _this._timer = null;
            _this._input = null;
            return _this;
        }
        var _proto = PressRecognizer.prototype;
        _proto.getTouchAction = function getTouchAction() {
            return [
                TOUCH_ACTION_AUTO
            ];
        };
        _proto.process = function process(input) {
            var _this2 = this;
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input; // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeout(function() {
                    _this2.state = STATE_RECOGNIZED;
                    _this2.tryEmit();
                }, options.time);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        };
        _proto.reset = function reset() {
            clearTimeout(this._timer);
        };
        _proto.emit = function emit(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + "up", input);
            else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        };
        return PressRecognizer;
    }(Recognizer);
    var defaults = {
        /**
     * @private
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */ domEvents: false,
        /**
     * @private
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
     * @private
     * @type {Boolean}
     * @default true
     */ enable: true,
        /**
     * @private
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */ inputTarget: null,
        /**
     * @private
     * force an input class
     * @type {Null|Function}
     * @default null
     */ inputClass: null,
        /**
     * @private
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */ cssProps: {
            /**
       * @private
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */ userSelect: "none",
            /**
       * @private
       * Disable the Windows Phone grippers when pressing an element.
       * @type {String}
       * @default 'none'
       */ touchSelect: "none",
            /**
       * @private
       * Disables the default callout shown when you touch and hold a touch target.
       * On iOS, when you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       * @type {String}
       * @default 'none'
       */ touchCallout: "none",
            /**
       * @private
       * Specifies whether zooming is enabled. Used by IE10>
       * @type {String}
       * @default 'none'
       */ contentZooming: "none",
            /**
       * @private
       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */ userDrag: "none",
            /**
       * @private
       * Overrides the highlight color shown when the user taps a link or a JavaScript
       * clickable element in iOS. This property obeys the alpha value, if specified.
       * @type {String}
       * @default 'rgba(0,0,0,0)'
       */ tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    /**
   * @private
   * Default recognizer setup when calling `Hammer()`
   * When creating a new Manager these will be skipped.
   * This is separated with other defaults because of tree-shaking.
   * @type {Array}
   */ var preset = [
        [
            RotateRecognizer,
            {
                enable: false
            }
        ],
        [
            PinchRecognizer,
            {
                enable: false
            },
            [
                "rotate"
            ]
        ],
        [
            SwipeRecognizer,
            {
                direction: DIRECTION_HORIZONTAL
            }
        ],
        [
            PanRecognizer,
            {
                direction: DIRECTION_HORIZONTAL
            },
            [
                "swipe"
            ]
        ],
        [
            TapRecognizer
        ],
        [
            TapRecognizer,
            {
                event: "doubletap",
                taps: 2
            },
            [
                "tap"
            ]
        ],
        [
            PressRecognizer
        ]
    ];
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
   * @private
   * add/remove the css properties as defined in manager.options.cssProps
   * @param {Manager} manager
   * @param {Boolean} add
   */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || "";
        });
        if (!add) manager.oldCssProps = {};
    }
    /**
   * @private
   * trigger dom event
   * @param {String} event
   * @param {Object} data
   */ function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent("Event");
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    /**
  * @private
   * Manager
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */ var Manager = /*#__PURE__*/ function() {
        function Manager(element, options) {
            var _this = this;
            this.options = assign$1({}, defaults, options || {});
            this.options.inputTarget = this.options.inputTarget || element;
            this.handlers = {};
            this.session = {};
            this.recognizers = [];
            this.oldCssProps = {};
            this.element = element;
            this.input = createInputInstance(this);
            this.touchAction = new TouchAction(this, this.options.touchAction);
            toggleCssProps(this, true);
            each(this.options.recognizers, function(item) {
                var recognizer = _this.add(new item[0](item[1]));
                item[2] && recognizer.recognizeWith(item[2]);
                item[3] && recognizer.requireFailure(item[3]);
            }, this);
        }
        /**
     * @private
     * set options
     * @param {Object} options
     * @returns {Manager}
     */ var _proto = Manager.prototype;
        _proto.set = function set(options) {
            assign$1(this.options, options); // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        };
        /**
     * @private
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */ _proto.stop = function stop(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        };
        /**
     * @private
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */ _proto.recognize = function recognize(inputData) {
            var session = this.session;
            if (session.stopped) return;
             // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers; // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                session.curRecognizer = null;
                curRecognizer = null;
            }
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer === curRecognizer || recognizer.canRecognizeWith(curRecognizer))) // 3
                recognizer.recognize(inputData);
                else recognizer.reset();
                 // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    session.curRecognizer = recognizer;
                    curRecognizer = recognizer;
                }
                i++;
            }
        };
        /**
     * @private
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */ _proto.get = function get(recognizer) {
            if (recognizer instanceof Recognizer) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event === recognizer) return recognizers[i];
            }
            return null;
        };
        /**
     * @private add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */ _proto.add = function add(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) return this;
             // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        };
        /**
     * @private
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */ _proto.remove = function remove(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) return this;
            var targetRecognizer = this.get(recognizer); // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, targetRecognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        };
        /**
     * @private
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */ _proto.on = function on(events, handler) {
            if (events === undefined || handler === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        };
        /**
     * @private unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */ _proto.off = function off(events, handler) {
            if (events === undefined) return this;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        };
        /**
     * @private emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */ _proto.emit = function emit(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data);
             // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data);
                i++;
            }
        };
        /**
     * @private
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */ _proto.destroy = function destroy() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        };
        return Manager;
    }();
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
    var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
   * @private
   * Touch events input
   * @constructor
   * @extends Input
   */ var SingleTouchInput = /*#__PURE__*/ function(_Input) {
        _inheritsLoose(SingleTouchInput, _Input);
        function SingleTouchInput() {
            var _this;
            var proto = SingleTouchInput.prototype;
            proto.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
            proto.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
            _this = _Input.apply(this, arguments) || this;
            _this.started = false;
            return _this;
        }
        var _proto = SingleTouchInput.prototype;
        _proto.handler = function handler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        };
        return SingleTouchInput;
    }(Input);
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), "identifier", true);
        return [
            all,
            changed
        ];
    }
    /**
   * @private
   * wrap a method with a deprecation warning and stack trace
   * @param {Function} method
   * @param {String} name
   * @param {String} message
   * @returns {Function} A new function wrapping the supplied method.
   */ function deprecate(method, name, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
        return function() {
            var e = new Error("get-stack-trace");
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
            var log = window.console && (window.console.warn || window.console.log);
            if (log) log.call(window.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
   * @private
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} dest
   * @param {Object} src
   * @param {Boolean} [merge=false]
   * @returns {Object} dest
   */ var extend = deprecate(function(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while(i < keys.length){
            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];
            i++;
        }
        return dest;
    }, "extend", "Use `assign`.");
    /**
   * @private
   * merge the values from src in the dest.
   * means that properties that exist in dest will not be overwritten by src
   * @param {Object} dest
   * @param {Object} src
   * @returns {Object} dest
   */ var merge$1 = deprecate(function(dest, src) {
        return extend(dest, src, true);
    }, "merge", "Use `assign`.");
    /**
   * @private
   * simple class inheritance
   * @param {Function} child
   * @param {Function} base
   * @param {Object} [properties]
   */ function inherit(child, base, properties) {
        var baseP = base.prototype;
        var childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign$1(childP, properties);
    }
    /**
   * @private
   * simple function bind
   * @param {Function} fn
   * @param {Object} context
   * @returns {Function}
   */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
   * @private
   * Simple way to create a manager with a default set of recognizers.
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */ var Hammer = /*#__PURE__*/ function() {
        var Hammer = /**
      * @private
      * @const {string}
      */ function Hammer(element, options) {
            if (options === void 0) options = {};
            return new Manager(element, _extends({
                recognizers: preset.concat()
            }, options));
        };
        Hammer.VERSION = "2.0.17-rc";
        Hammer.DIRECTION_ALL = DIRECTION_ALL;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.DIRECTION_LEFT = DIRECTION_LEFT;
        Hammer.DIRECTION_RIGHT = DIRECTION_RIGHT;
        Hammer.DIRECTION_UP = DIRECTION_UP;
        Hammer.DIRECTION_HORIZONTAL = DIRECTION_HORIZONTAL;
        Hammer.DIRECTION_VERTICAL = DIRECTION_VERTICAL;
        Hammer.DIRECTION_NONE = DIRECTION_NONE;
        Hammer.DIRECTION_DOWN = DIRECTION_DOWN;
        Hammer.INPUT_START = INPUT_START;
        Hammer.INPUT_MOVE = INPUT_MOVE;
        Hammer.INPUT_END = INPUT_END;
        Hammer.INPUT_CANCEL = INPUT_CANCEL;
        Hammer.STATE_POSSIBLE = STATE_POSSIBLE;
        Hammer.STATE_BEGAN = STATE_BEGAN;
        Hammer.STATE_CHANGED = STATE_CHANGED;
        Hammer.STATE_ENDED = STATE_ENDED;
        Hammer.STATE_RECOGNIZED = STATE_RECOGNIZED;
        Hammer.STATE_CANCELLED = STATE_CANCELLED;
        Hammer.STATE_FAILED = STATE_FAILED;
        Hammer.Manager = Manager;
        Hammer.Input = Input;
        Hammer.TouchAction = TouchAction;
        Hammer.TouchInput = TouchInput;
        Hammer.MouseInput = MouseInput;
        Hammer.PointerEventInput = PointerEventInput;
        Hammer.TouchMouseInput = TouchMouseInput;
        Hammer.SingleTouchInput = SingleTouchInput;
        Hammer.Recognizer = Recognizer;
        Hammer.AttrRecognizer = AttrRecognizer;
        Hammer.Tap = TapRecognizer;
        Hammer.Pan = PanRecognizer;
        Hammer.Swipe = SwipeRecognizer;
        Hammer.Pinch = PinchRecognizer;
        Hammer.Rotate = RotateRecognizer;
        Hammer.Press = PressRecognizer;
        Hammer.on = addEventListeners;
        Hammer.off = removeEventListeners;
        Hammer.each = each;
        Hammer.merge = merge$1;
        Hammer.extend = extend;
        Hammer.bindFn = bindFn;
        Hammer.assign = assign$1;
        Hammer.inherit = inherit;
        Hammer.bindFn = bindFn;
        Hammer.prefixed = prefixed;
        Hammer.toArray = toArray;
        Hammer.inArray = inArray;
        Hammer.uniqueArray = uniqueArray;
        Hammer.splitStr = splitStr;
        Hammer.boolOrFn = boolOrFn;
        Hammer.hasParent = hasParent;
        Hammer.addEventListeners = addEventListeners;
        Hammer.removeEventListeners = removeEventListeners;
        Hammer.defaults = assign$1({}, defaults, {
            preset: preset
        });
        return Hammer;
    }(); //  style loader but by script tag, not by the loader.
    var RealHammer = Hammer;
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
        var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
        if (!it) {
            if (isArray$1(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
        var _context21;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
        var n = slice(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$3(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    /**
   * Use this symbol to delete properies in deepObjectAssign.
   */ var DELETE = symbol("DELETE");
    /**
   * Pure version of deepObjectAssign, it doesn't modify any of it's arguments.
   *
   * @param base - The base object that fullfils the whole interface T.
   * @param updates - Updates that may change or delete props.
   * @returns A brand new instance with all the supplied objects deeply merged.
   */ function pureDeepObjectAssign(base) {
        var _context;
        for(var _len = arguments.length, updates = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)updates[_key - 1] = arguments[_key];
        return deepObjectAssign.apply(void 0, concat$1(_context = [
            {},
            base
        ]).call(_context, updates));
    }
    /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */ function deepObjectAssign() {
        var merged = deepObjectAssignNonentry.apply(void 0, arguments);
        stripDelete(merged);
        return merged;
    }
    /**
   * Deep version of object assign with additional deleting by the DELETE symbol.
   *
   * @remarks
   * This doesn't strip the DELETE symbols so they may end up in the final object.
   * @param values - Objects to be deeply merged.
   * @returns The first object from values.
   */ function deepObjectAssignNonentry() {
        for(var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)values[_key2] = arguments[_key2];
        if (values.length < 2) return values[0];
        else if (values.length > 2) {
            var _context2;
            return deepObjectAssignNonentry.apply(void 0, concat$1(_context2 = [
                deepObjectAssign(values[0], values[1])
            ]).call(_context2, _toConsumableArray(slice(values).call(values, 2))));
        }
        var a = values[0];
        var b = values[1];
        var _iterator = _createForOfIteratorHelper$3(ownKeys$1(b)), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var prop = _step.value;
                if (!Object.prototype.propertyIsEnumerable.call(b, prop)) ;
                else if (b[prop] === DELETE) delete a[prop];
                else if (a[prop] !== null && b[prop] !== null && _typeof(a[prop]) === "object" && _typeof(b[prop]) === "object" && !isArray$1(a[prop]) && !isArray$1(b[prop])) a[prop] = deepObjectAssignNonentry(a[prop], b[prop]);
                else a[prop] = clone(b[prop]);
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return a;
    }
    /**
   * Deep clone given object or array. In case of primitive simply return.
   *
   * @param a - Anything.
   * @returns Deep cloned object/array or unchanged a.
   */ function clone(a) {
        if (isArray$1(a)) return map$3(a).call(a, function(value) {
            return clone(value);
        });
        else if (_typeof(a) === "object" && a !== null) return deepObjectAssignNonentry({}, a);
        else return a;
    }
    /**
   * Strip DELETE from given object.
   *
   * @param a - Object which may contain DELETE but won't after this is executed.
   */ function stripDelete(a) {
        for(var _i = 0, _Object$keys = keys$4(a); _i < _Object$keys.length; _i++){
            var prop = _Object$keys[_i];
            if (a[prop] === DELETE) delete a[prop];
            else if (_typeof(a[prop]) === "object" && a[prop] !== null) stripDelete(a[prop]);
        }
    }
    /**
   * Setup a mock hammer.js object, for unit testing.
   *
   * Inspiration: https://github.com/uber/deck.gl/pull/658
   *
   * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
   */ function hammerMock() {
        var noop = function noop() {};
        return {
            on: noop,
            off: noop,
            destroy: noop,
            emit: noop,
            get: function get() {
                return {
                    set: noop
                };
            }
        };
    }
    var Hammer$1 = typeof window !== "undefined" ? window.Hammer || RealHammer : function() {
        // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
        return hammerMock();
    };
    /**
   * Turn an element into an clickToUse element.
   * When not active, the element has a transparent overlay. When the overlay is
   * clicked, the mode is changed to active.
   * When active, the element is displayed with a blue border around it, and
   * the interactive contents of the element can be used. When clicked outside
   * the element, the elements mode is changed to inactive.
   *
   * @param {Element} container
   * @class Activator
   */ function Activator$1(container) {
        var _this = this, _context3;
        this._cleanupQueue = [];
        this.active = false;
        this._dom = {
            container: container,
            overlay: document.createElement("div")
        };
        this._dom.overlay.classList.add("vis-overlay");
        this._dom.container.appendChild(this._dom.overlay);
        this._cleanupQueue.push(function() {
            _this._dom.overlay.parentNode.removeChild(_this._dom.overlay);
        });
        var hammer = Hammer$1(this._dom.overlay);
        hammer.on("tap", bind$6(_context3 = this._onTapOverlay).call(_context3, this));
        this._cleanupQueue.push(function() {
            hammer.destroy(); // FIXME: cleaning up hammer instances doesn't work (Timeline not removed
        // from memory)
        }); // block all touch events (except tap)
        var events = [
            "tap",
            "doubletap",
            "press",
            "pinch",
            "pan",
            "panstart",
            "panmove",
            "panend"
        ];
        forEach$1(events).call(events, function(event) {
            hammer.on(event, function(event) {
                event.srcEvent.stopPropagation();
            });
        }); // attach a click event to the window, in order to deactivate when clicking outside the timeline
        if (document && document.body) {
            this._onClick = function(event) {
                if (!_hasParent(event.target, container)) _this.deactivate();
            };
            document.body.addEventListener("click", this._onClick);
            this._cleanupQueue.push(function() {
                document.body.removeEventListener("click", _this._onClick);
            });
        } // prepare escape key listener for deactivating when active
        this._escListener = function(event) {
            if ("key" in event ? event.key === "Escape" : event.keyCode === 27) _this.deactivate();
        };
    } // turn into an event emitter
    Emitter(Activator$1.prototype); // The currently active activator
    Activator$1.current = null;
    /**
   * Destroy the activator. Cleans up all created DOM and event listeners
   */ Activator$1.prototype.destroy = function() {
        var _context4, _context5;
        this.deactivate();
        var _iterator2 = _createForOfIteratorHelper$3(reverse(_context4 = splice(_context5 = this._cleanupQueue).call(_context5, 0)).call(_context4)), _step2;
        try {
            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                var callback = _step2.value;
                callback();
            }
        } catch (err) {
            _iterator2.e(err);
        } finally{
            _iterator2.f();
        }
    };
    /**
   * Activate the element
   * Overlay is hidden, element is decorated with a blue shadow border
   */ Activator$1.prototype.activate = function() {
        // we allow only one active activator at a time
        if (Activator$1.current) Activator$1.current.deactivate();
        Activator$1.current = this;
        this.active = true;
        this._dom.overlay.style.display = "none";
        this._dom.container.classList.add("vis-active");
        this.emit("change");
        this.emit("activate"); // ugly hack: bind ESC after emitting the events, as the Network rebinds all
        // keyboard events on a 'change' event
        document.body.addEventListener("keydown", this._escListener);
    };
    /**
   * Deactivate the element
   * Overlay is displayed on top of the element
   */ Activator$1.prototype.deactivate = function() {
        this.active = false;
        this._dom.overlay.style.display = "block";
        this._dom.container.classList.remove("vis-active");
        document.body.removeEventListener("keydown", this._escListener);
        this.emit("change");
        this.emit("deactivate");
    };
    /**
   * Handle a tap event: activate the container
   *
   * @param {Event}  event   The event
   * @private
   */ Activator$1.prototype._onTapOverlay = function(event) {
        // activate the container
        this.activate();
        event.srcEvent.stopPropagation();
    };
    /**
   * Test whether the element has the requested parent element somewhere in
   * its chain of parent nodes.
   *
   * @param {HTMLElement} element
   * @param {HTMLElement} parent
   * @returns {boolean} Returns true when the parent is found somewhere in the
   *                    chain of parent nodes.
   * @private
   */ function _hasParent(element, parent) {
        while(element){
            if (element === parent) return true;
            element = element.parentNode;
        }
        return false;
    } // utility functions
    var global$4 = global$M;
    var isConstructor = isConstructor$4;
    var tryToString$1 = tryToString$4;
    var TypeError$3 = global$4.TypeError; // `Assert: IsConstructor(argument) is true`
    var aConstructor$1 = function(argument) {
        if (isConstructor(argument)) return argument;
        throw TypeError$3(tryToString$1(argument) + " is not a constructor");
    };
    var $$5 = _export;
    var getBuiltIn$1 = getBuiltIn$9;
    var apply = functionApply;
    var bind$2 = functionBind;
    var aConstructor = aConstructor$1;
    var anObject$1 = anObject$b;
    var isObject$3 = isObject$f;
    var create$4 = objectCreate;
    var fails$5 = fails$r;
    var nativeConstruct = getBuiltIn$1("Reflect", "construct");
    var ObjectPrototype = Object.prototype;
    var push$1 = [].push; // `Reflect.construct` method
    // https://tc39.es/ecma262/#sec-reflect.construct
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails$5(function() {
        function F() {
        /* empty */ }
        return !(nativeConstruct(function() {
        /* empty */ }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails$5(function() {
        nativeConstruct(function() {
        /* empty */ });
    });
    var FORCED$1 = NEW_TARGET_BUG || ARGS_BUG;
    $$5({
        target: "Reflect",
        stat: true,
        forced: FORCED$1,
        sham: FORCED$1
    }, {
        construct: function construct(Target, args) {
            aConstructor(Target);
            anObject$1(args);
            var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
            if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
            if (Target == newTarget) {
                // w/o altered newTarget, optimization for 0-4 arguments
                switch(args.length){
                    case 0:
                        return new Target();
                    case 1:
                        return new Target(args[0]);
                    case 2:
                        return new Target(args[0], args[1]);
                    case 3:
                        return new Target(args[0], args[1], args[2]);
                    case 4:
                        return new Target(args[0], args[1], args[2], args[3]);
                } // w/o altered newTarget, lot of arguments case
                var $args = [
                    null
                ];
                apply(push$1, $args, args);
                return new (apply(bind$2, Target, $args))();
            } // with altered newTarget, not support built-in constructors
            var proto = newTarget.prototype;
            var instance = create$4(isObject$3(proto) ? proto : ObjectPrototype);
            var result = apply(Target, instance, args);
            return isObject$3(result) ? result : instance;
        }
    });
    var path$3 = path$q;
    var construct$2 = path$3.Reflect.construct;
    var parent$h = construct$2;
    var construct$1 = parent$h;
    var construct = construct$1;
    function _assertThisInitialized(self1) {
        if (self1 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self1;
    }
    var parent$g = create$6;
    var create$3 = parent$g;
    var parent$f = create$3;
    var create$2 = parent$f;
    var create$1 = create$2;
    var $$4 = _export;
    var setPrototypeOf$5 = objectSetPrototypeOf; // `Object.setPrototypeOf` method
    // https://tc39.es/ecma262/#sec-object.setprototypeof
    $$4({
        target: "Object",
        stat: true
    }, {
        setPrototypeOf: setPrototypeOf$5
    });
    var path$2 = path$q;
    var setPrototypeOf$4 = path$2.Object.setPrototypeOf;
    var parent$e = setPrototypeOf$4;
    var setPrototypeOf$3 = parent$e;
    var parent$d = setPrototypeOf$3;
    var setPrototypeOf$2 = parent$d;
    var parent$c = setPrototypeOf$2;
    var setPrototypeOf$1 = parent$c;
    var setPrototypeOf = setPrototypeOf$1;
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = create$1(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        defineProperty$7(subClass, "prototype", {
            writable: false
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _possibleConstructorReturn(self1, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
        else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self1);
    }
    var parent$b = getPrototypeOf$3;
    var getPrototypeOf$2 = parent$b;
    var parent$a = getPrototypeOf$2;
    var getPrototypeOf$1 = parent$a;
    var getPrototypeOf = getPrototypeOf$1;
    function _getPrototypeOf(o) {
        _getPrototypeOf = setPrototypeOf ? getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    var runtime = {
        exports: {}
    };
    /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */ (function(module) {
        var runtime = function(exports1) {
            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var undefined$1; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
            function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                return obj[key];
            }
            try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({}, "");
            } catch (err) {
                define = function(obj, key, value) {
                    return obj[key] = value;
                };
            }
            function wrap(innerFn, outerFn, self1, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self1, context);
                return generator;
            }
            exports1.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }
            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {};
            define(IteratorPrototype, iteratorSymbol, function() {
                return this;
            });
            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype = NativeIteratorPrototype;
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = GeneratorFunctionPrototype;
            define(Gp, "constructor", GeneratorFunctionPrototype);
            define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
            GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                [
                    "next",
                    "throw",
                    "return"
                ].forEach(function(method) {
                    define(prototype, method, function(arg) {
                        return this._invoke(method, arg);
                    });
                });
            }
            exports1.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
            };
            exports1.mark = function(genFun) {
                if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            }; // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports1.awrap = function(arg) {
                return {
                    __await: arg
                };
            };
            function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") reject(record.arg);
                    else {
                        var result = record.arg;
                        var value = result.value;
                        if (value && typeof value === "object" && hasOwn.call(value, "__await")) return PromiseImpl.resolve(value.__await).then(function(value) {
                            invoke("next", value, resolve, reject);
                        }, function(err) {
                            invoke("throw", err, resolve, reject);
                        });
                        return PromiseImpl.resolve(value).then(function(unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration.
                            result.value = unwrapped;
                            resolve(result);
                        }, function(error) {
                            // If a rejected Promise was yielded, throw the rejection back
                            // into the async generator function so it can be handled there.
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }
                var previousPromise;
                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new PromiseImpl(function(resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }
                    return previousPromise = // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // invocations of the iterator.
                    callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                } // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
            }
            defineIteratorMethods(AsyncIterator.prototype);
            define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
                return this;
            });
            exports1.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports1.async = function(innerFn, outerFn, self1, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self1, tryLocsList), PromiseImpl);
                return exports1.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                 : iter.next().then(function(result) {
                    return result.done ? result.value : iter.next();
                });
            };
            function makeInvokeMethod(innerFn, self1, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                    if (state === GenStateExecuting) throw new Error("Generator is already running");
                    if (state === GenStateCompleted) {
                        if (method === "throw") throw arg;
                         // Be forgiving, per 25.3.3.3.3 of the spec:
                        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                        return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while(true){
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }
                        if (context.method === "next") // Setting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        context.sent = context._sent = context.arg;
                        else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }
                            context.dispatchException(context.arg);
                        } else if (context.method === "return") context.abrupt("return", context.arg);
                        state = GenStateExecuting;
                        var record = tryCatch(innerFn, self1, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                            if (record.arg === ContinueSentinel) continue;
                            return {
                                value: record.arg,
                                done: context.done
                            };
                        } else if (record.type === "throw") {
                            state = GenStateCompleted; // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            } // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method always terminates the yield* loop.
                    context.delegate = null;
                    if (context.method === "throw") {
                        // Note: ["return"] must be used for ES3 parsing compatibility.
                        if (delegate.iterator["return"]) {
                            // If the delegate iterator has a return method, give it a
                            // chance to clean up.
                            context.method = "return";
                            context.arg = undefined$1;
                            maybeInvokeDelegate(delegate, context);
                            if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                            // "return" to "throw", let that override the TypeError below.
                            return ContinueSentinel;
                        }
                        context.method = "throw";
                        context.arg = new TypeError("The iterator does not provide a 'throw' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }
                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined$1;
                    }
                } else // Re-yield the result returned by the delegate method.
                return info;
                 // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            } // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);
            define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            define(Gp, iteratorSymbol, function() {
                return this;
            });
            define(Gp, "toString", function() {
                return "[object Generator]";
            });
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) entry.catchLoc = locs[1];
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [
                    {
                        tryLoc: "root"
                    }
                ];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            exports1.keys = function(object) {
                var keys = [];
                for(var key in object)keys.push(key);
                keys.reverse(); // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                    while(keys.length){
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    } // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next.done = true;
                    return next;
                };
            };
            function values(iterable) {
                if (iterable) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) return iteratorMethod.call(iterable);
                    if (typeof iterable.next === "function") return iterable;
                    if (!isNaN(iterable.length)) {
                        var i = -1, next = function next() {
                            while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                                next.value = iterable[i];
                                next.done = false;
                                return next;
                            }
                            next.value = undefined$1;
                            next.done = true;
                            return next;
                        };
                        return next.next = next;
                    }
                } // Return an iterator with no values.
                return {
                    next: doneResult
                };
            }
            exports1.values = values;
            function doneResult() {
                return {
                    value: undefined$1,
                    done: true
                };
            }
            Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                    this.prev = 0;
                    this.next = 0; // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined$1;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                        for(var name in this)// Not sure about the optimal order of these conditions:
                        if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined$1;
                    }
                },
                stop: function() {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") throw rootRecord.arg;
                    return this.rval;
                },
                dispatchException: function(exception) {
                    if (this.done) throw exception;
                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;
                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined$1;
                        }
                        return !!caught;
                    }
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                        // it, so set the completion value of the entire function to
                        // throw the exception.
                        return handle("end");
                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                                else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                            } else throw new Error("try statement without catch or finally");
                        }
                    }
                },
                abrupt: function(type, arg) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
                    // location outside the try/catch block.
                    finallyEntry = null;
                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }
                    return this.complete(record);
                },
                complete: function(record, afterLoc) {
                    if (record.type === "throw") throw record.arg;
                    if (record.type === "break" || record.type === "continue") this.next = record.arg;
                    else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
                    return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },
                "catch": function(tryLoc) {
                    for(var i = this.tryEntries.length - 1; i >= 0; --i){
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    } // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };
                    if (this.method === "next") // Deliberately forget the last sent value so that we don't
                    // accidentally pass it on to the delegate.
                    this.arg = undefined$1;
                    return ContinueSentinel;
                }
            }; // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports1;
        }(// as the regeneratorRuntime namespace. Otherwise create a new empty
        // object. Either way, the resulting object will be used to initialize
        // the regeneratorRuntime variable at the top of this file.
        module.exports);
        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, in modern engines
            // we can explicitly access globalThis. In older engines we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            if (typeof globalThis === "object") globalThis.regeneratorRuntime = runtime;
            else Function("r", "regeneratorRuntime = r")(runtime);
        }
    })(runtime);
    var regenerator = runtime.exports;
    var internalMetadata = {
        exports: {}
    };
    var fails$4 = fails$r;
    var arrayBufferNonExtensible = fails$4(function() {
        if (typeof ArrayBuffer == "function") {
            var buffer = new ArrayBuffer(8); // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
            if (Object.isExtensible(buffer)) Object.defineProperty(buffer, "a", {
                value: 8
            });
        }
    });
    var fails$3 = fails$r;
    var isObject$2 = isObject$f;
    var classof$3 = classofRaw$1;
    var ARRAY_BUFFER_NON_EXTENSIBLE = arrayBufferNonExtensible; // eslint-disable-next-line es/no-object-isextensible -- safe
    var $isExtensible = Object.isExtensible;
    var FAILS_ON_PRIMITIVES = fails$3(function() {
        $isExtensible(1);
    }); // `Object.isExtensible` method
    // https://tc39.es/ecma262/#sec-object.isextensible
    var objectIsExtensible = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
        if (!isObject$2(it)) return false;
        if (ARRAY_BUFFER_NON_EXTENSIBLE && classof$3(it) == "ArrayBuffer") return false;
        return $isExtensible ? $isExtensible(it) : true;
    } : $isExtensible;
    var fails$2 = fails$r;
    var freezing = !fails$2(function() {
        // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
        return Object.isExtensible(Object.preventExtensions({}));
    });
    var $$3 = _export;
    var uncurryThis$1 = functionUncurryThis;
    var hiddenKeys = hiddenKeys$6;
    var isObject$1 = isObject$f;
    var hasOwn$3 = hasOwnProperty_1;
    var defineProperty$2 = objectDefineProperty.f;
    var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
    var getOwnPropertyNamesExternalModule = objectGetOwnPropertyNamesExternal;
    var isExtensible = objectIsExtensible;
    var uid = uid$4;
    var FREEZING = freezing;
    var REQUIRED = false;
    var METADATA = uid("meta");
    var id = 0;
    var setMetadata = function(it) {
        defineProperty$2(it, METADATA, {
            value: {
                objectID: "O" + id++,
                // object ID
                weakData: {} // weak collections IDs
            }
        });
    };
    var fastKey$1 = function(it, create) {
        // return a primitive with prefix
        if (!isObject$1(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!hasOwn$3(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return "F"; // not necessary to add metadata
            if (!create) return "E"; // add missing metadata
            setMetadata(it); // return object ID
        }
        return it[METADATA].objectID;
    };
    var getWeakData = function(it, create) {
        if (!hasOwn$3(it, METADATA)) {
            // can't set metadata to uncaught frozen object
            if (!isExtensible(it)) return true; // not necessary to add metadata
            if (!create) return false; // add missing metadata
            setMetadata(it); // return the store of weak collections IDs
        }
        return it[METADATA].weakData;
    }; // add metadata on freeze-family methods calling
    var onFreeze = function(it) {
        if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn$3(it, METADATA)) setMetadata(it);
        return it;
    };
    var enable = function() {
        meta.enable = function() {
        /* empty */ };
        REQUIRED = true;
        var getOwnPropertyNames = getOwnPropertyNamesModule.f;
        var splice = uncurryThis$1([].splice);
        var test = {};
        test[METADATA] = 1; // prevent exposing of metadata key
        if (getOwnPropertyNames(test).length) {
            getOwnPropertyNamesModule.f = function(it) {
                var result = getOwnPropertyNames(it);
                for(var i = 0, length = result.length; i < length; i++)if (result[i] === METADATA) {
                    splice(result, i, 1);
                    break;
                }
                return result;
            };
            $$3({
                target: "Object",
                stat: true,
                forced: true
            }, {
                getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
            });
        }
    };
    var meta = internalMetadata.exports = {
        enable: enable,
        fastKey: fastKey$1,
        getWeakData: getWeakData,
        onFreeze: onFreeze
    };
    hiddenKeys[METADATA] = true;
    var global$3 = global$M;
    var bind$1 = functionBindContext;
    var call = functionCall;
    var anObject = anObject$b;
    var tryToString = tryToString$4;
    var isArrayIteratorMethod = isArrayIteratorMethod$2;
    var lengthOfArrayLike$1 = lengthOfArrayLike$d;
    var isPrototypeOf$6 = objectIsPrototypeOf;
    var getIterator$5 = getIterator$7;
    var getIteratorMethod = getIteratorMethod$8;
    var iteratorClose = iteratorClose$2;
    var TypeError$2 = global$3.TypeError;
    var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
    };
    var ResultPrototype = Result.prototype;
    var iterate$2 = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind$1(unboundFunction, that);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
            if (iterator) iteratorClose(iterator, "normal", condition);
            return new Result(true, condition);
        };
        var callFn = function(value) {
            if (AS_ENTRIES) {
                anObject(value);
                return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            }
            return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_ITERATOR) iterator = iterable;
        else {
            iterFn = getIteratorMethod(iterable);
            if (!iterFn) throw TypeError$2(tryToString(iterable) + " is not iterable"); // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
                for(index = 0, length = lengthOfArrayLike$1(iterable); length > index; index++){
                    result = callFn(iterable[index]);
                    if (result && isPrototypeOf$6(ResultPrototype, result)) return result;
                }
                return new Result(false);
            }
            iterator = getIterator$5(iterable, iterFn);
        }
        next = iterator.next;
        while(!(step = call(next, iterator)).done){
            try {
                result = callFn(step.value);
            } catch (error) {
                iteratorClose(iterator, "throw", error);
            }
            if (typeof result == "object" && result && isPrototypeOf$6(ResultPrototype, result)) return result;
        }
        return new Result(false);
    };
    var global$2 = global$M;
    var isPrototypeOf$5 = objectIsPrototypeOf;
    var TypeError$1 = global$2.TypeError;
    var anInstance$2 = function(it, Prototype) {
        if (isPrototypeOf$5(Prototype, it)) return it;
        throw TypeError$1("Incorrect invocation");
    };
    var $$2 = _export;
    var global$1 = global$M;
    var InternalMetadataModule = internalMetadata.exports;
    var fails$1 = fails$r;
    var createNonEnumerableProperty = createNonEnumerableProperty$6;
    var iterate$1 = iterate$2;
    var anInstance$1 = anInstance$2;
    var isCallable = isCallable$h;
    var isObject = isObject$f;
    var setToStringTag = setToStringTag$5;
    var defineProperty$1 = objectDefineProperty.f;
    var forEach = arrayIteration.forEach;
    var DESCRIPTORS$2 = descriptors;
    var InternalStateModule$1 = internalState;
    var setInternalState$1 = InternalStateModule$1.set;
    var internalStateGetterFor$1 = InternalStateModule$1.getterFor;
    var collection$2 = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global$1[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var exported = {};
        var Constructor;
        if (!DESCRIPTORS$2 || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails$1(function() {
            new NativeConstructor().entries().next();
        }))) {
            // create collection constructor
            Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
            InternalMetadataModule.enable();
        } else {
            Constructor = wrapper(function(target, iterable) {
                setInternalState$1(anInstance$1(target, Prototype), {
                    type: CONSTRUCTOR_NAME,
                    collection: new NativeConstructor()
                });
                if (iterable != undefined) iterate$1(iterable, target[ADDER], {
                    that: target,
                    AS_ENTRIES: IS_MAP
                });
            });
            var Prototype = Constructor.prototype;
            var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
            forEach([
                "add",
                "clear",
                "delete",
                "forEach",
                "get",
                "has",
                "set",
                "keys",
                "values",
                "entries"
            ], function(KEY) {
                var IS_ADDER = KEY == "add" || KEY == "set";
                if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) createNonEnumerableProperty(Prototype, KEY, function(a, b) {
                    var collection = getInternalState(this).collection;
                    if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == "get" ? undefined : false;
                    var result = collection[KEY](a === 0 ? 0 : a, b);
                    return IS_ADDER ? this : result;
                });
            });
            IS_WEAK || defineProperty$1(Prototype, "size", {
                configurable: true,
                get: function() {
                    return getInternalState(this).collection.size;
                }
            });
        }
        setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
        exported[CONSTRUCTOR_NAME] = Constructor;
        $$2({
            global: true,
            forced: true
        }, exported);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
    };
    var redefine = redefine$4;
    var redefineAll$1 = function(target, src, options) {
        for(var key in src)if (options && options.unsafe && target[key]) target[key] = src[key];
        else redefine(target, key, src[key], options);
        return target;
    };
    var getBuiltIn = getBuiltIn$9;
    var definePropertyModule = objectDefineProperty;
    var wellKnownSymbol = wellKnownSymbol$j;
    var DESCRIPTORS$1 = descriptors;
    var SPECIES = wellKnownSymbol("species");
    var setSpecies$1 = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS$1 && Constructor && !Constructor[SPECIES]) defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function() {
                return this;
            }
        });
    };
    var defineProperty = objectDefineProperty.f;
    var create = objectCreate;
    var redefineAll = redefineAll$1;
    var bind = functionBindContext;
    var anInstance = anInstance$2;
    var iterate = iterate$2;
    var defineIterator = defineIterator$3;
    var setSpecies = setSpecies$1;
    var DESCRIPTORS = descriptors;
    var fastKey = internalMetadata.exports.fastKey;
    var InternalStateModule = internalState;
    var setInternalState = InternalStateModule.set;
    var internalStateGetterFor = InternalStateModule.getterFor;
    var collectionStrong$2 = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
            var Constructor = wrapper(function(that, iterable) {
                anInstance(that, Prototype);
                setInternalState(that, {
                    type: CONSTRUCTOR_NAME,
                    index: create(null),
                    first: undefined,
                    last: undefined,
                    size: 0
                });
                if (!DESCRIPTORS) that.size = 0;
                if (iterable != undefined) iterate(iterable, that[ADDER], {
                    that: that,
                    AS_ENTRIES: IS_MAP
                });
            });
            var Prototype = Constructor.prototype;
            var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var define = function(that, key, value) {
                var state = getInternalState(that);
                var entry = getEntry(that, key);
                var previous, index; // change existing entry
                if (entry) entry.value = value; // create new entry
                else {
                    state.last = entry = {
                        index: index = fastKey(key, true),
                        key: key,
                        value: value,
                        previous: previous = state.last,
                        next: undefined,
                        removed: false
                    };
                    if (!state.first) state.first = entry;
                    if (previous) previous.next = entry;
                    if (DESCRIPTORS) state.size++;
                    else that.size++; // add to index
                    if (index !== "F") state.index[index] = entry;
                }
                return that;
            };
            var getEntry = function(that, key) {
                var state = getInternalState(that); // fast case
                var index = fastKey(key);
                var entry;
                if (index !== "F") return state.index[index]; // frozen object case
                for(entry = state.first; entry; entry = entry.next){
                    if (entry.key == key) return entry;
                }
            };
            redefineAll(Prototype, {
                // `{ Map, Set }.prototype.clear()` methods
                // https://tc39.es/ecma262/#sec-map.prototype.clear
                // https://tc39.es/ecma262/#sec-set.prototype.clear
                clear: function clear() {
                    var that = this;
                    var state = getInternalState(that);
                    var data = state.index;
                    var entry = state.first;
                    while(entry){
                        entry.removed = true;
                        if (entry.previous) entry.previous = entry.previous.next = undefined;
                        delete data[entry.index];
                        entry = entry.next;
                    }
                    state.first = state.last = undefined;
                    if (DESCRIPTORS) state.size = 0;
                    else that.size = 0;
                },
                // `{ Map, Set }.prototype.delete(key)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.delete
                // https://tc39.es/ecma262/#sec-set.prototype.delete
                "delete": function(key) {
                    var that = this;
                    var state = getInternalState(that);
                    var entry = getEntry(that, key);
                    if (entry) {
                        var next = entry.next;
                        var prev = entry.previous;
                        delete state.index[entry.index];
                        entry.removed = true;
                        if (prev) prev.next = next;
                        if (next) next.previous = prev;
                        if (state.first == entry) state.first = next;
                        if (state.last == entry) state.last = prev;
                        if (DESCRIPTORS) state.size--;
                        else that.size--;
                    }
                    return !!entry;
                },
                // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.foreach
                // https://tc39.es/ecma262/#sec-set.prototype.foreach
                forEach: function forEach(callbackfn) {
                    var state = getInternalState(this);
                    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    var entry;
                    while(entry = entry ? entry.next : state.first){
                        boundFunction(entry.value, entry.key, this); // revert to the last existing entry
                        while(entry && entry.removed)entry = entry.previous;
                    }
                },
                // `{ Map, Set}.prototype.has(key)` methods
                // https://tc39.es/ecma262/#sec-map.prototype.has
                // https://tc39.es/ecma262/#sec-set.prototype.has
                has: function has(key) {
                    return !!getEntry(this, key);
                }
            });
            redefineAll(Prototype, IS_MAP ? {
                // `Map.prototype.get(key)` method
                // https://tc39.es/ecma262/#sec-map.prototype.get
                get: function get(key) {
                    var entry = getEntry(this, key);
                    return entry && entry.value;
                },
                // `Map.prototype.set(key, value)` method
                // https://tc39.es/ecma262/#sec-map.prototype.set
                set: function set(key, value) {
                    return define(this, key === 0 ? 0 : key, value);
                }
            } : {
                // `Set.prototype.add(value)` method
                // https://tc39.es/ecma262/#sec-set.prototype.add
                add: function add(value) {
                    return define(this, value = value === 0 ? 0 : value, value);
                }
            });
            if (DESCRIPTORS) defineProperty(Prototype, "size", {
                get: function() {
                    return getInternalState(this).size;
                }
            });
            return Constructor;
        },
        setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
            var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
            var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
            var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
            // https://tc39.es/ecma262/#sec-map.prototype.entries
            // https://tc39.es/ecma262/#sec-map.prototype.keys
            // https://tc39.es/ecma262/#sec-map.prototype.values
            // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
            // https://tc39.es/ecma262/#sec-set.prototype.entries
            // https://tc39.es/ecma262/#sec-set.prototype.keys
            // https://tc39.es/ecma262/#sec-set.prototype.values
            // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
            defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
                setInternalState(this, {
                    type: ITERATOR_NAME,
                    target: iterated,
                    state: getInternalCollectionState(iterated),
                    kind: kind,
                    last: undefined
                });
            }, function() {
                var state = getInternalIteratorState(this);
                var kind = state.kind;
                var entry = state.last; // revert to the last existing entry
                while(entry && entry.removed)entry = entry.previous; // get next entry
                if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
                    // or finish the iteration
                    state.target = undefined;
                    return {
                        value: undefined,
                        done: true
                    };
                } // return step by kind
                if (kind == "keys") return {
                    value: entry.key,
                    done: false
                };
                if (kind == "values") return {
                    value: entry.value,
                    done: false
                };
                return {
                    value: [
                        entry.key,
                        entry.value
                    ],
                    done: false
                };
            }, IS_MAP ? "entries" : "values", !IS_MAP, true); // `{ Map, Set }.prototype[@@species]` accessors
            // https://tc39.es/ecma262/#sec-get-map-@@species
            // https://tc39.es/ecma262/#sec-get-set-@@species
            setSpecies(CONSTRUCTOR_NAME);
        }
    };
    var collection$1 = collection$2;
    var collectionStrong$1 = collectionStrong$2; // `Map` constructor
    // https://tc39.es/ecma262/#sec-map-objects
    collection$1("Map", function(init) {
        return function Map() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong$1);
    var path$1 = path$q;
    var map$2 = path$1.Map;
    var parent$9 = map$2;
    var map$1 = parent$9;
    var map = map$1;
    var $$1 = _export;
    var $some = arrayIteration.some;
    var arrayMethodIsStrict$1 = arrayMethodIsStrict$5;
    var STRICT_METHOD$1 = arrayMethodIsStrict$1("some"); // `Array.prototype.some` method
    // https://tc39.es/ecma262/#sec-array.prototype.some
    $$1({
        target: "Array",
        proto: true,
        forced: !STRICT_METHOD$1
    }, {
        some: function some(callbackfn) {
            return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
    });
    var entryVirtual$4 = entryVirtual$k;
    var some$3 = entryVirtual$4("Array").some;
    var isPrototypeOf$4 = objectIsPrototypeOf;
    var method$4 = some$3;
    var ArrayPrototype$4 = Array.prototype;
    var some$2 = function(it) {
        var own = it.some;
        return it === ArrayPrototype$4 || isPrototypeOf$4(ArrayPrototype$4, it) && own === ArrayPrototype$4.some ? method$4 : own;
    };
    var parent$8 = some$2;
    var some$1 = parent$8;
    var some = some$1;
    var entryVirtual$3 = entryVirtual$k;
    var keys$3 = entryVirtual$3("Array").keys;
    var parent$7 = keys$3;
    var keys$2 = parent$7;
    var classof$2 = classof$c;
    var hasOwn$2 = hasOwnProperty_1;
    var isPrototypeOf$3 = objectIsPrototypeOf;
    var method$3 = keys$2;
    var ArrayPrototype$3 = Array.prototype;
    var DOMIterables$2 = {
        DOMTokenList: true,
        NodeList: true
    };
    var keys$1 = function(it) {
        var own = it.keys;
        return it === ArrayPrototype$3 || isPrototypeOf$3(ArrayPrototype$3, it) && own === ArrayPrototype$3.keys || hasOwn$2(DOMIterables$2, classof$2(it)) ? method$3 : own;
    };
    var keys = keys$1;
    var arraySlice = arraySliceSimple;
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
    };
    var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;
        while(i < length){
            j = i;
            element = array[i];
            while(j && comparefn(array[j - 1], element) > 0)array[j] = array[--j];
            if (j !== i++) array[j] = element;
        }
        return array;
    };
    var merge = function(array, left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        while(lindex < llength || rindex < rlength)array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
        return array;
    };
    var arraySort = mergeSort;
    var userAgent$1 = engineUserAgent;
    var firefox = userAgent$1.match(/firefox\/(\d+)/i);
    var engineFfVersion = !!firefox && +firefox[1];
    var UA = engineUserAgent;
    var engineIsIeOrEdge = /MSIE|Trident/.test(UA);
    var userAgent = engineUserAgent;
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    var engineWebkitVersion = !!webkit && +webkit[1];
    var $ = _export;
    var uncurryThis = functionUncurryThis;
    var aCallable = aCallable$7;
    var toObject = toObject$e;
    var lengthOfArrayLike = lengthOfArrayLike$d;
    var toString = toString$7;
    var fails = fails$r;
    var internalSort = arraySort;
    var arrayMethodIsStrict = arrayMethodIsStrict$5;
    var FF = engineFfVersion;
    var IE_OR_EDGE = engineIsIeOrEdge;
    var V8 = engineV8Version;
    var WEBKIT = engineWebkitVersion;
    var test = [];
    var un$Sort = uncurryThis(test.sort);
    var push = uncurryThis(test.push); // IE8-
    var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(undefined);
    }); // V8 bug
    var FAILS_ON_NULL = fails(function() {
        test.sort(null);
    }); // Old WebKit
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
        // feature detection can be too slow, so check engines versions
        if (V8) return V8 < 70;
        if (FF && FF > 3) return;
        if (IE_OR_EDGE) return true;
        if (WEBKIT) return WEBKIT < 603;
        var result = "";
        var code, chr, value, index; // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
        for(code = 65; code < 76; code++){
            chr = String.fromCharCode(code);
            switch(code){
                case 66:
                case 69:
                case 70:
                case 72:
                    value = 3;
                    break;
                case 68:
                case 71:
                    value = 4;
                    break;
                default:
                    value = 2;
            }
            for(index = 0; index < 47; index++)test.push({
                k: chr + index,
                v: value
            });
        }
        test.sort(function(a, b) {
            return b.v - a.v;
        });
        for(index = 0; index < test.length; index++){
            chr = test[index].k.charAt(0);
            if (result.charAt(result.length - 1) !== chr) result += chr;
        }
        return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
        return function(x, y) {
            if (y === undefined) return -1;
            if (x === undefined) return 1;
            if (comparefn !== undefined) return +comparefn(x, y) || 0;
            return toString(x) > toString(y) ? 1 : -1;
        };
    }; // `Array.prototype.sort` method
    // https://tc39.es/ecma262/#sec-array.prototype.sort
    $({
        target: "Array",
        proto: true,
        forced: FORCED
    }, {
        sort: function sort(comparefn) {
            if (comparefn !== undefined) aCallable(comparefn);
            var array = toObject(this);
            if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);
            var items = [];
            var arrayLength = lengthOfArrayLike(array);
            var itemsLength, index;
            for(index = 0; index < arrayLength; index++)if (index in array) push(items, array[index]);
            internalSort(items, getSortCompare(comparefn));
            itemsLength = items.length;
            index = 0;
            while(index < itemsLength)array[index] = items[index++];
            while(index < arrayLength)delete array[index++];
            return array;
        }
    });
    var entryVirtual$2 = entryVirtual$k;
    var sort$3 = entryVirtual$2("Array").sort;
    var isPrototypeOf$2 = objectIsPrototypeOf;
    var method$2 = sort$3;
    var ArrayPrototype$2 = Array.prototype;
    var sort$2 = function(it) {
        var own = it.sort;
        return it === ArrayPrototype$2 || isPrototypeOf$2(ArrayPrototype$2, it) && own === ArrayPrototype$2.sort ? method$2 : own;
    };
    var parent$6 = sort$2;
    var sort$1 = parent$6;
    var sort = sort$1;
    var entryVirtual$1 = entryVirtual$k;
    var values$3 = entryVirtual$1("Array").values;
    var parent$5 = values$3;
    var values$2 = parent$5;
    var classof$1 = classof$c;
    var hasOwn$1 = hasOwnProperty_1;
    var isPrototypeOf$1 = objectIsPrototypeOf;
    var method$1 = values$2;
    var ArrayPrototype$1 = Array.prototype;
    var DOMIterables$1 = {
        DOMTokenList: true,
        NodeList: true
    };
    var values$1 = function(it) {
        var own = it.values;
        return it === ArrayPrototype$1 || isPrototypeOf$1(ArrayPrototype$1, it) && own === ArrayPrototype$1.values || hasOwn$1(DOMIterables$1, classof$1(it)) ? method$1 : own;
    };
    var values = values$1;
    var iterator = iterator$4;
    var entryVirtual = entryVirtual$k;
    var entries$3 = entryVirtual("Array").entries;
    var parent$4 = entries$3;
    var entries$2 = parent$4;
    var classof = classof$c;
    var hasOwn = hasOwnProperty_1;
    var isPrototypeOf = objectIsPrototypeOf;
    var method = entries$2;
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
    };
    var entries$1 = function(it) {
        var own = it.entries;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
    var entries = entries$1;
    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
        // lazy load so that environments that need to polyfill have a chance to do so
        if (!getRandomValues) {
            // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
            // find the complete implementation of crypto (msCrypto) on IE11.
            getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
            if (!getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
        return getRandomValues(rnds8);
    }
    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    function validate(uuid) {
        return typeof uuid === "string" && REGEX.test(uuid);
    }
    /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */ var byteToHex = [];
    for(var i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).substr(1));
    function stringify(arr) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
        // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
        var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
        // of the following:
        // - One or more input array values don't map to a hex octet (leading to
        // "undefined" in the uuid)
        // - Invalid input values for the RFC `version` or `variant` fields
        if (!validate(uuid)) throw TypeError("Stringified UUID is invalid");
        return uuid;
    }
    function v4(options, buf, offset) {
        options = options || {};
        var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        rnds[6] = rnds[6] & 0x0f | 0x40;
        rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
        if (buf) {
            offset = offset || 0;
            for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
            return buf;
        }
        return stringify(rnds);
    }
    /**
   * Determine whether a value can be used as an id.
   *
   * @param value - Input value of unknown type.
   * @returns True if the value is valid id, false otherwise.
   */ function isId(value) {
        return typeof value === "string" || typeof value === "number";
    }
    /**
   * A queue.
   *
   * @typeParam T - The type of method names to be replaced by queued versions.
   */ var Queue = /*#__PURE__*/ function() {
        /** Delay in milliseconds. If defined the queue will be periodically flushed. */ /** Maximum number of entries in the queue before it will be flushed. */ /**
     * Construct a new Queue.
     *
     * @param options - Queue configuration.
     */ function Queue(options) {
            _classCallCheck(this, Queue);
            _defineProperty(this, "delay", void 0);
            _defineProperty(this, "max", void 0);
            _defineProperty(this, "_queue", []);
            _defineProperty(this, "_timeout", null);
            _defineProperty(this, "_extended", null);
            // options
            this.delay = null;
            this.max = Infinity;
            this.setOptions(options);
        }
        /**
     * Update the configuration of the queue.
     *
     * @param options - Queue configuration.
     */ _createClass(Queue, [
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && typeof options.delay !== "undefined") this.delay = options.delay;
                    if (options && typeof options.max !== "undefined") this.max = options.max;
                    this._flushIfNeeded();
                }
            },
            {
                key: "destroy",
                value: /**
       * Destroy the queue. The queue will first flush all queued actions, and in case it has extended an object, will restore the original object.
       */ function destroy() {
                    this.flush();
                    if (this._extended) {
                        var object = this._extended.object;
                        var methods = this._extended.methods;
                        for(var i = 0; i < methods.length; i++){
                            var method = methods[i];
                            if (method.original) // @TODO: better solution?
                            object[method.name] = method.original;
                            else // @TODO: better solution?
                            delete object[method.name];
                        }
                        this._extended = null;
                    }
                }
            },
            {
                key: "replace",
                value: function replace(object, method) {
                    /* eslint-disable-next-line @typescript-eslint/no-this-alias -- Function this is necessary in the function bellow, so class this has to be saved into a variable here. */ var me = this;
                    var original = object[method];
                    if (!original) throw new Error("Method " + method + " undefined");
                    object[method] = function() {
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        // add this call to the queue
                        me.queue({
                            args: args,
                            fn: original,
                            context: this
                        });
                    };
                }
            },
            {
                key: "queue",
                value: function queue(entry) {
                    if (typeof entry === "function") this._queue.push({
                        fn: entry
                    });
                    else this._queue.push(entry);
                    this._flushIfNeeded();
                }
            },
            {
                key: "_flushIfNeeded",
                value: function _flushIfNeeded() {
                    var _this = this;
                    // flush when the maximum is exceeded.
                    if (this._queue.length > this.max) this.flush();
                     // flush after a period of inactivity when a delay is configured
                    if (this._timeout != null) {
                        clearTimeout(this._timeout);
                        this._timeout = null;
                    }
                    if (this.queue.length > 0 && typeof this.delay === "number") this._timeout = setTimeout$1(function() {
                        _this.flush();
                    }, this.delay);
                }
            },
            {
                key: "flush",
                value: function flush() {
                    var _context, _context2;
                    forEach$1(_context = splice(_context2 = this._queue).call(_context2, 0)).call(_context, function(entry) {
                        entry.fn.apply(entry.context || entry.fn, entry.args || []);
                    });
                }
            }
        ], [
            {
                key: "extend",
                value: function extend(object, options) {
                    var queue = new Queue(options);
                    if (object.flush !== undefined) throw new Error("Target object already has a property flush");
                    object.flush = function() {
                        queue.flush();
                    };
                    var methods = [
                        {
                            name: "flush",
                            original: undefined
                        }
                    ];
                    if (options && options.replace) for(var i = 0; i < options.replace.length; i++){
                        var name = options.replace[i];
                        methods.push({
                            name: name,
                            // @TODO: better solution?
                            original: object[name]
                        }); // @TODO: better solution?
                        queue.replace(object, name);
                    }
                    queue._extended = {
                        object: object,
                        methods: methods
                    };
                    return queue;
                }
            }
        ]);
        return Queue;
    }();
    /**
   * [[DataSet]] code that can be reused in [[DataView]] or other similar implementations of [[DataInterface]].
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataSetPart = /*#__PURE__*/ function() {
        function DataSetPart() {
            _classCallCheck(this, DataSetPart);
            _defineProperty(this, "_subscribers", {
                "*": [],
                add: [],
                remove: [],
                update: []
            });
            _defineProperty(this, "subscribe", DataSetPart.prototype.on);
            _defineProperty(this, "unsubscribe", DataSetPart.prototype.off);
        }
        _createClass(DataSetPart, [
            {
                key: "_trigger",
                value: /**
       * Trigger an event
       *
       * @param event - Event name.
       * @param payload - Event payload.
       * @param senderId - Id of the sender.
       */ function _trigger(event, payload, senderId) {
                    var _context, _context2;
                    if (event === "*") throw new Error("Cannot trigger event *");
                    forEach$1(_context = concat$1(_context2 = []).call(_context2, _toConsumableArray(this._subscribers[event]), _toConsumableArray(this._subscribers["*"]))).call(_context, function(subscriber) {
                        subscriber(event, payload, senderId != null ? senderId : null);
                    });
                }
            },
            {
                key: "on",
                value: function on(event, callback) {
                    if (typeof callback === "function") this._subscribers[event].push(callback);
                     // @TODO: Maybe throw for invalid callbacks?
                }
            },
            {
                key: "off",
                value: function off(event, callback) {
                    var _context3;
                    this._subscribers[event] = filter(_context3 = this._subscribers[event]).call(_context3, function(subscriber) {
                        return subscriber !== callback;
                    });
                }
            }
        ]);
        return DataSetPart;
    }();
    var collection = collection$2;
    var collectionStrong = collectionStrong$2; // `Set` constructor
    // https://tc39.es/ecma262/#sec-set-objects
    collection("Set", function(init) {
        return function Set() {
            return init(this, arguments.length ? arguments[0] : undefined);
        };
    }, collectionStrong);
    var path = path$q;
    var set$2 = path.Set;
    var parent$3 = set$2;
    var set$1 = parent$3;
    var set = set$1;
    var getIterator$4 = getIterator$7;
    var getIterator_1 = getIterator$4;
    var parent$2 = getIterator_1;
    var getIterator$3 = parent$2;
    var parent$1 = getIterator$3;
    var getIterator$2 = parent$1;
    var parent = getIterator$2;
    var getIterator$1 = parent;
    var getIterator = getIterator$1;
    var _Symbol$iterator;
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
        var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
        if (!it) {
            if (isArray$1(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
        var _context10;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
        var n = slice(_context10 = Object.prototype.toString.call(o)).call(_context10, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$3(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    _Symbol$iterator = iterator;
    /**
   * Data stream
   *
   * @remarks
   * [[DataStream]] offers an always up to date stream of items from a [[DataSet]] or [[DataView]].
   * That means that the stream is evaluated at the time of iteration, conversion to another data type or when [[cache]] is called, not when the [[DataStream]] was created.
   * Multiple invocations of for example [[toItemArray]] may yield different results (if the data source like for example [[DataSet]] gets modified).
   * @typeParam Item - The item type this stream is going to work with.
   */ var DataStream = /*#__PURE__*/ function() {
        /**
     * Create a new data stream.
     *
     * @param pairs - The id, item pairs.
     */ function DataStream(pairs) {
            _classCallCheck(this, DataStream);
            _defineProperty(this, "_pairs", void 0);
            this._pairs = pairs;
        }
        /**
     * Return an iterable of key, value pairs for every entry in the stream.
     */ _createClass(DataStream, [
            {
                key: _Symbol$iterator,
                value: /*#__PURE__*/ regenerator.mark(function value() {
                    var _iterator, _step, _step$value, id, item;
                    return regenerator.wrap(function value$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                _iterator = _createForOfIteratorHelper$2(this._pairs);
                                _context.prev = 1;
                                _iterator.s();
                            case 3:
                                if ((_step = _iterator.n()).done) {
                                    _context.next = 9;
                                    break;
                                }
                                _step$value = _slicedToArray(_step.value, 2), id = _step$value[0], item = _step$value[1];
                                _context.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context.next = 3;
                                break;
                            case 9:
                                _context.next = 14;
                                break;
                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context["catch"](1);
                                _iterator.e(_context.t0);
                            case 14:
                                _context.prev = 14;
                                _iterator.f();
                                return _context.finish(14);
                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }, value, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "entries",
                value: /*#__PURE__*/ regenerator.mark(function entries() {
                    var _iterator2, _step2, _step2$value, id, item;
                    return regenerator.wrap(function entries$(_context2) {
                        while(true)switch(_context2.prev = _context2.next){
                            case 0:
                                _iterator2 = _createForOfIteratorHelper$2(this._pairs);
                                _context2.prev = 1;
                                _iterator2.s();
                            case 3:
                                if ((_step2 = _iterator2.n()).done) {
                                    _context2.next = 9;
                                    break;
                                }
                                _step2$value = _slicedToArray(_step2.value, 2), id = _step2$value[0], item = _step2$value[1];
                                _context2.next = 7;
                                return [
                                    id,
                                    item
                                ];
                            case 7:
                                _context2.next = 3;
                                break;
                            case 9:
                                _context2.next = 14;
                                break;
                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](1);
                                _iterator2.e(_context2.t0);
                            case 14:
                                _context2.prev = 14;
                                _iterator2.f();
                                return _context2.finish(14);
                            case 17:
                            case "end":
                                return _context2.stop();
                        }
                    }, entries, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "keys",
                value: /*#__PURE__*/ regenerator.mark(function keys() {
                    var _iterator3, _step3, _step3$value, id;
                    return regenerator.wrap(function keys$(_context3) {
                        while(true)switch(_context3.prev = _context3.next){
                            case 0:
                                _iterator3 = _createForOfIteratorHelper$2(this._pairs);
                                _context3.prev = 1;
                                _iterator3.s();
                            case 3:
                                if ((_step3 = _iterator3.n()).done) {
                                    _context3.next = 9;
                                    break;
                                }
                                _step3$value = _slicedToArray(_step3.value, 1), id = _step3$value[0];
                                _context3.next = 7;
                                return id;
                            case 7:
                                _context3.next = 3;
                                break;
                            case 9:
                                _context3.next = 14;
                                break;
                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3["catch"](1);
                                _iterator3.e(_context3.t0);
                            case 14:
                                _context3.prev = 14;
                                _iterator3.f();
                                return _context3.finish(14);
                            case 17:
                            case "end":
                                return _context3.stop();
                        }
                    }, keys, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "values",
                value: /*#__PURE__*/ regenerator.mark(function values() {
                    var _iterator4, _step4, _step4$value, item;
                    return regenerator.wrap(function values$(_context4) {
                        while(true)switch(_context4.prev = _context4.next){
                            case 0:
                                _iterator4 = _createForOfIteratorHelper$2(this._pairs);
                                _context4.prev = 1;
                                _iterator4.s();
                            case 3:
                                if ((_step4 = _iterator4.n()).done) {
                                    _context4.next = 9;
                                    break;
                                }
                                _step4$value = _slicedToArray(_step4.value, 2), item = _step4$value[1];
                                _context4.next = 7;
                                return item;
                            case 7:
                                _context4.next = 3;
                                break;
                            case 9:
                                _context4.next = 14;
                                break;
                            case 11:
                                _context4.prev = 11;
                                _context4.t0 = _context4["catch"](1);
                                _iterator4.e(_context4.t0);
                            case 14:
                                _context4.prev = 14;
                                _iterator4.f();
                                return _context4.finish(14);
                            case 17:
                            case "end":
                                return _context4.stop();
                        }
                    }, values, this, [
                        [
                            1,
                            11,
                            14,
                            17
                        ]
                    ]);
                })
            },
            {
                key: "toIdArray",
                value: function toIdArray() {
                    var _context5;
                    return map$3(_context5 = _toConsumableArray(this._pairs)).call(_context5, function(pair) {
                        return pair[0];
                    });
                }
            },
            {
                key: "toItemArray",
                value: function toItemArray() {
                    var _context6;
                    return map$3(_context6 = _toConsumableArray(this._pairs)).call(_context6, function(pair) {
                        return pair[1];
                    });
                }
            },
            {
                key: "toEntryArray",
                value: function toEntryArray() {
                    return _toConsumableArray(this._pairs);
                }
            },
            {
                key: "toObjectMap",
                value: function toObjectMap() {
                    var map = create$5(null);
                    var _iterator5 = _createForOfIteratorHelper$2(this._pairs), _step5;
                    try {
                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                            var _step5$value = _slicedToArray(_step5.value, 2), id = _step5$value[0], item = _step5$value[1];
                            map[id] = item;
                        }
                    } catch (err) {
                        _iterator5.e(err);
                    } finally{
                        _iterator5.f();
                    }
                    return map;
                }
            },
            {
                key: "toMap",
                value: function toMap() {
                    return new map(this._pairs);
                }
            },
            {
                key: "toIdSet",
                value: function toIdSet() {
                    return new set(this.toIdArray());
                }
            },
            {
                key: "toItemSet",
                value: function toItemSet() {
                    return new set(this.toItemArray());
                }
            },
            {
                key: "cache",
                value: function cache() {
                    return new DataStream(_toConsumableArray(this._pairs));
                }
            },
            {
                key: "distinct",
                value: function distinct(callback) {
                    var set$1 = new set();
                    var _iterator6 = _createForOfIteratorHelper$2(this._pairs), _step6;
                    try {
                        for(_iterator6.s(); !(_step6 = _iterator6.n()).done;){
                            var _step6$value = _slicedToArray(_step6.value, 2), id = _step6$value[0], item = _step6$value[1];
                            set$1.add(callback(item, id));
                        }
                    } catch (err) {
                        _iterator6.e(err);
                    } finally{
                        _iterator6.f();
                    }
                    return set$1;
                }
            },
            {
                key: "filter",
                value: function filter(callback) {
                    var pairs = this._pairs;
                    return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/ regenerator.mark(function _callee() {
                        var _iterator7, _step7, _step7$value, id, item;
                        return regenerator.wrap(function _callee$(_context7) {
                            while(true)switch(_context7.prev = _context7.next){
                                case 0:
                                    _iterator7 = _createForOfIteratorHelper$2(pairs);
                                    _context7.prev = 1;
                                    _iterator7.s();
                                case 3:
                                    if ((_step7 = _iterator7.n()).done) {
                                        _context7.next = 10;
                                        break;
                                    }
                                    _step7$value = _slicedToArray(_step7.value, 2), id = _step7$value[0], item = _step7$value[1];
                                    if (!callback(item, id)) {
                                        _context7.next = 8;
                                        break;
                                    }
                                    _context7.next = 8;
                                    return [
                                        id,
                                        item
                                    ];
                                case 8:
                                    _context7.next = 3;
                                    break;
                                case 10:
                                    _context7.next = 15;
                                    break;
                                case 12:
                                    _context7.prev = 12;
                                    _context7.t0 = _context7["catch"](1);
                                    _iterator7.e(_context7.t0);
                                case 15:
                                    _context7.prev = 15;
                                    _iterator7.f();
                                    return _context7.finish(15);
                                case 18:
                                case "end":
                                    return _context7.stop();
                            }
                        }, _callee, null, [
                            [
                                1,
                                12,
                                15,
                                18
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "forEach",
                value: function forEach(callback) {
                    var _iterator8 = _createForOfIteratorHelper$2(this._pairs), _step8;
                    try {
                        for(_iterator8.s(); !(_step8 = _iterator8.n()).done;){
                            var _step8$value = _slicedToArray(_step8.value, 2), id = _step8$value[0], item = _step8$value[1];
                            callback(item, id);
                        }
                    } catch (err) {
                        _iterator8.e(err);
                    } finally{
                        _iterator8.f();
                    }
                }
            },
            {
                key: "map",
                value: function map(callback) {
                    var pairs = this._pairs;
                    return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/ regenerator.mark(function _callee2() {
                        var _iterator9, _step9, _step9$value, id, item;
                        return regenerator.wrap(function _callee2$(_context8) {
                            while(true)switch(_context8.prev = _context8.next){
                                case 0:
                                    _iterator9 = _createForOfIteratorHelper$2(pairs);
                                    _context8.prev = 1;
                                    _iterator9.s();
                                case 3:
                                    if ((_step9 = _iterator9.n()).done) {
                                        _context8.next = 9;
                                        break;
                                    }
                                    _step9$value = _slicedToArray(_step9.value, 2), id = _step9$value[0], item = _step9$value[1];
                                    _context8.next = 7;
                                    return [
                                        id,
                                        callback(item, id)
                                    ];
                                case 7:
                                    _context8.next = 3;
                                    break;
                                case 9:
                                    _context8.next = 14;
                                    break;
                                case 11:
                                    _context8.prev = 11;
                                    _context8.t0 = _context8["catch"](1);
                                    _iterator9.e(_context8.t0);
                                case 14:
                                    _context8.prev = 14;
                                    _iterator9.f();
                                    return _context8.finish(14);
                                case 17:
                                case "end":
                                    return _context8.stop();
                            }
                        }, _callee2, null, [
                            [
                                1,
                                11,
                                14,
                                17
                            ]
                        ]);
                    })));
                }
            },
            {
                key: "max",
                value: function max(callback) {
                    var iter = getIterator(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var maxItem = curr.value[1];
                    var maxValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value = _slicedToArray(curr.value, 2), id = _curr$value[0], item = _curr$value[1];
                        var _value = callback(item, id);
                        if (_value > maxValue) {
                            maxValue = _value;
                            maxItem = item;
                        }
                    }
                    return maxItem;
                }
            },
            {
                key: "min",
                value: function min(callback) {
                    var iter = getIterator(this._pairs);
                    var curr = iter.next();
                    if (curr.done) return null;
                    var minItem = curr.value[1];
                    var minValue = callback(curr.value[1], curr.value[0]);
                    while(!(curr = iter.next()).done){
                        var _curr$value2 = _slicedToArray(curr.value, 2), id = _curr$value2[0], item = _curr$value2[1];
                        var _value2 = callback(item, id);
                        if (_value2 < minValue) {
                            minValue = _value2;
                            minItem = item;
                        }
                    }
                    return minItem;
                }
            },
            {
                key: "reduce",
                value: function reduce(callback, accumulator) {
                    var _iterator10 = _createForOfIteratorHelper$2(this._pairs), _step10;
                    try {
                        for(_iterator10.s(); !(_step10 = _iterator10.n()).done;){
                            var _step10$value = _slicedToArray(_step10.value, 2), id = _step10$value[0], item = _step10$value[1];
                            accumulator = callback(accumulator, item, id);
                        }
                    } catch (err) {
                        _iterator10.e(err);
                    } finally{
                        _iterator10.f();
                    }
                    return accumulator;
                }
            },
            {
                key: "sort",
                value: function sort$1(callback) {
                    var _this = this;
                    return new DataStream(_defineProperty({}, iterator, function() {
                        var _context9;
                        return getIterator(sort(_context9 = _toConsumableArray(_this._pairs)).call(_context9, function(_ref, _ref2) {
                            var _ref3 = _slicedToArray(_ref, 2), idA = _ref3[0], itemA = _ref3[1];
                            var _ref4 = _slicedToArray(_ref2, 2), idB = _ref4[0], itemB = _ref4[1];
                            return callback(itemA, itemB, idA, idB);
                        }));
                    }));
                }
            }
        ]);
        return DataStream;
    }();
    function ownKeys(object, enumerableOnly) {
        var keys = keys$4(object);
        if (getOwnPropertySymbols) {
            var symbols = getOwnPropertySymbols(object);
            enumerableOnly && (symbols = filter(symbols).call(symbols, function(sym) {
                return getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
        }
        return keys;
    }
    function _objectSpread(target) {
        for(var i = 1; i < arguments.length; i++){
            var _context10, _context11;
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? forEach$1(_context10 = ownKeys(Object(source), !0)).call(_context10, function(key) {
                _defineProperty(target, key, source[key]);
            }) : getOwnPropertyDescriptors ? defineProperties(target, getOwnPropertyDescriptors(source)) : forEach$1(_context11 = ownKeys(Object(source))).call(_context11, function(key) {
                defineProperty$4(target, key, getOwnPropertyDescriptor(source, key));
            });
        }
        return target;
    }
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
        var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
        if (!it) {
            if (isArray$1(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
        var _context9;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = slice(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$3(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !construct) return false;
        if (construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(construct(Boolean, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
   * Add an id to given item if it doesn't have one already.
   *
   * @remarks
   * The item will be modified.
   * @param item - The item that will have an id after a call to this function.
   * @param idProp - The key of the id property.
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   * @returns true
   */ function ensureFullItem(item, idProp) {
        if (item[idProp] == null) // generate an id
        item[idProp] = v4();
        return item;
    }
    /**
   * # DataSet
   *
   * Vis.js comes with a flexible DataSet, which can be used to hold and
   * manipulate unstructured data and listen for changes in the data. The DataSet
   * is key/value based. Data items can be added, updated and removed from the
   * DataSet, and one can subscribe to changes in the DataSet. The data in the
   * DataSet can be filtered and ordered. Data can be normalized when appending it
   * to the DataSet as well.
   *
   * ## Example
   *
   * The following example shows how to use a DataSet.
   *
   * ```javascript
   * // create a DataSet
   * var options = {};
   * var data = new vis.DataSet(options);
   *
   * // add items
   * // note that the data items can contain different properties and data formats
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // subscribe to any change in the DataSet
   * data.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an existing item
   * data.update({id: 2, group: 1});
   *
   * // remove an item
   * data.remove(4);
   *
   * // get all ids
   * var ids = data.getIds();
   * console.log('ids', ids);
   *
   * // get a specific item
   * var item1 = data.get(1);
   * console.log('item1', item1);
   *
   * // retrieve a filtered subset of the data
   * var items = data.get({
   *   filter: function (item) {
   *     return item.group == 1;
   *   }
   * });
   * console.log('filtered items', items);
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataSet = /*#__PURE__*/ function(_DataSetPart) {
        _inherits(DataSet, _DataSetPart);
        var _super = _createSuper$1(DataSet);
        /**
     * Construct a new DataSet.
     *
     * @param data - Initial data or options.
     * @param options - Options (type error if data is also options).
     */ function DataSet(data, options) {
            var _this;
            _classCallCheck(this, DataSet);
            _this = _super.call(this); // correctly read optional arguments
            _defineProperty(_assertThisInitialized(_this), "flush", void 0);
            _defineProperty(_assertThisInitialized(_this), "length", void 0);
            _defineProperty(_assertThisInitialized(_this), "_options", void 0);
            _defineProperty(_assertThisInitialized(_this), "_data", void 0);
            _defineProperty(_assertThisInitialized(_this), "_idProp", void 0);
            _defineProperty(_assertThisInitialized(_this), "_queue", null);
            if (data && !isArray$1(data)) {
                options = data;
                data = [];
            }
            _this._options = options || {};
            _this._data = new map(); // map with data indexed by id
            _this.length = 0; // number of items in the DataSet
            _this._idProp = _this._options.fieldId || "id"; // name of the field containing id
            // add initial data when provided
            if (data && data.length) _this.add(data);
            _this.setOptions(options);
            return _this;
        }
        /**
     * Set new options.
     *
     * @param options - The new options.
     */ _createClass(DataSet, [
            {
                key: "idProp",
                get: /** Flush all queued calls. */ /** @inheritDoc */ /** @inheritDoc */ function get() {
                    return this._idProp;
                }
            },
            {
                key: "setOptions",
                value: function setOptions(options) {
                    if (options && options.queue !== undefined) {
                        if (options.queue === false) // delete queue if loaded
                        {
                            if (this._queue) {
                                this._queue.destroy();
                                this._queue = null;
                            }
                        } else {
                            // create queue and update its options
                            if (!this._queue) this._queue = Queue.extend(this, {
                                replace: [
                                    "add",
                                    "update",
                                    "remove"
                                ]
                            });
                            if (options.queue && _typeof(options.queue) === "object") this._queue.setOptions(options.queue);
                        }
                    }
                }
            },
            {
                key: "add",
                value: function add(data, senderId) {
                    var _this2 = this;
                    var addedIds = [];
                    var id;
                    if (isArray$1(data)) {
                        // Array
                        var idsToAdd = map$3(data).call(data, function(d) {
                            return d[_this2._idProp];
                        });
                        if (some(idsToAdd).call(idsToAdd, function(id) {
                            return _this2._data.has(id);
                        })) throw new Error("A duplicate id was found in the parameter array.");
                        for(var i = 0, len = data.length; i < len; i++){
                            id = this._addItem(data[i]);
                            addedIds.push(id);
                        }
                    } else if (data && _typeof(data) === "object") {
                        // Single item
                        id = this._addItem(data);
                        addedIds.push(id);
                    } else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    return addedIds;
                }
            },
            {
                key: "update",
                value: function update(data, senderId) {
                    var _this3 = this;
                    var addedIds = [];
                    var updatedIds = [];
                    var oldData = [];
                    var updatedData = [];
                    var idProp = this._idProp;
                    var addOrUpdate = function addOrUpdate(item) {
                        var origId = item[idProp];
                        if (origId != null && _this3._data.has(origId)) {
                            var fullItem = item; // it has an id, therefore it is a fullitem
                            var oldItem = assign$2({}, _this3._data.get(origId)); // update item
                            var id = _this3._updateItem(fullItem);
                            updatedIds.push(id);
                            updatedData.push(fullItem);
                            oldData.push(oldItem);
                        } else {
                            // add new item
                            var _id = _this3._addItem(item);
                            addedIds.push(_id);
                        }
                    };
                    if (isArray$1(data)) {
                        // Array
                        for(var i = 0, len = data.length; i < len; i++)if (data[i] && _typeof(data[i]) === "object") addOrUpdate(data[i]);
                        else console.warn("Ignoring input item, which is not an object at index " + i);
                    } else if (data && _typeof(data) === "object") // Single item
                    addOrUpdate(data);
                    else throw new Error("Unknown dataType");
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) {
                        var props = {
                            items: updatedIds,
                            oldData: oldData,
                            data: updatedData
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                    }
                    return concat$1(addedIds).call(addedIds, updatedIds);
                }
            },
            {
                key: "updateOnly",
                value: function updateOnly(data, senderId) {
                    var _context, _this4 = this;
                    if (!isArray$1(data)) data = [
                        data
                    ];
                    var updateEventData = map$3(_context = map$3(data).call(data, function(update) {
                        var oldData = _this4._data.get(update[_this4._idProp]);
                        if (oldData == null) throw new Error("Updating non-existent items is not allowed.");
                        return {
                            oldData: oldData,
                            update: update
                        };
                    })).call(_context, function(_ref) {
                        var oldData = _ref.oldData, update = _ref.update;
                        var id = oldData[_this4._idProp];
                        var updatedData = pureDeepObjectAssign(oldData, update);
                        _this4._data.set(id, updatedData);
                        return {
                            id: id,
                            oldData: oldData,
                            updatedData: updatedData
                        };
                    });
                    if (updateEventData.length) {
                        var props = {
                            items: map$3(updateEventData).call(updateEventData, function(value) {
                                return value.id;
                            }),
                            oldData: map$3(updateEventData).call(updateEventData, function(value) {
                                return value.oldData;
                            }),
                            data: map$3(updateEventData).call(updateEventData, function(value) {
                                return value.updatedData;
                            })
                        }; // TODO: remove deprecated property 'data' some day
                        //Object.defineProperty(props, 'data', {
                        //  'get': (function() {
                        //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
                        //    return updatedData;
                        //  }).bind(this)
                        //});
                        this._trigger("update", props, senderId);
                        return props.items;
                    } else return [];
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    // @TODO: Woudn't it be better to split this into multiple methods?
                    // parse the arguments
                    var id = undefined;
                    var ids = undefined;
                    var options = undefined;
                    if (isId(first)) {
                        // get(id [, options])
                        id = first;
                        options = second;
                    } else if (isArray$1(first)) {
                        // get(ids [, options])
                        ids = first;
                        options = second;
                    } else // get([, options])
                    options = first;
                     // determine the return type
                    var returnType = options && options.returnType === "Object" ? "Object" : "Array"; // @TODO: WTF is this? Or am I missing something?
                    // var returnType
                    // if (options && options.returnType) {
                    //   var allowedValues = ['Array', 'Object']
                    //   returnType =
                    //     allowedValues.indexOf(options.returnType) == -1
                    //       ? 'Array'
                    //       : options.returnType
                    // } else {
                    //   returnType = 'Array'
                    // }
                    // build options
                    var filter$1 = options && filter(options);
                    var items = [];
                    var item = undefined;
                    var itemIds = undefined;
                    var itemId = undefined; // convert items
                    if (id != null) {
                        // return a single item
                        item = this._data.get(id);
                        if (item && filter$1 && !filter$1(item)) item = undefined;
                    } else if (ids != null) // return a subset of items
                    for(var i = 0, len = ids.length; i < len; i++){
                        item = this._data.get(ids[i]);
                        if (item != null && (!filter$1 || filter$1(item))) items.push(item);
                    }
                    else {
                        var _context2;
                        // return all items
                        itemIds = _toConsumableArray(keys(_context2 = this._data).call(_context2));
                        for(var _i = 0, _len = itemIds.length; _i < _len; _i++){
                            itemId = itemIds[_i];
                            item = this._data.get(itemId);
                            if (item != null && (!filter$1 || filter$1(item))) items.push(item);
                        }
                    } // order the results
                    if (options && options.order && id == undefined) this._sort(items, options.order);
                     // filter fields of the items
                    if (options && options.fields) {
                        var fields = options.fields;
                        if (id != undefined && item != null) item = this._filterFields(item, fields);
                        else for(var _i2 = 0, _len2 = items.length; _i2 < _len2; _i2++)items[_i2] = this._filterFields(items[_i2], fields);
                    } // return the results
                    if (returnType == "Object") {
                        var result = {};
                        for(var _i3 = 0, _len3 = items.length; _i3 < _len3; _i3++){
                            var resultant = items[_i3]; // @TODO: Shoudn't this be this._fieldId?
                            // result[resultant.id] = resultant
                            var _id2 = resultant[this._idProp];
                            result[_id2] = resultant;
                        }
                        return result;
                    } else {
                        if (id != null) {
                            var _item;
                            // a single item
                            return (_item = item) !== null && _item !== void 0 ? _item : null;
                        } else // just return our array
                        return items;
                    }
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    var data = this._data;
                    var filter$1 = options && filter(options);
                    var order = options && options.order;
                    var itemIds = _toConsumableArray(keys(data).call(data));
                    var ids = [];
                    if (filter$1) {
                        // get filtered items
                        if (order) {
                            // create ordered list
                            var items = [];
                            for(var i = 0, len = itemIds.length; i < len; i++){
                                var id = itemIds[i];
                                var item = this._data.get(id);
                                if (item != null && filter$1(item)) items.push(item);
                            }
                            this._sort(items, order);
                            for(var _i4 = 0, _len4 = items.length; _i4 < _len4; _i4++)ids.push(items[_i4][this._idProp]);
                        } else // create unordered list
                        for(var _i5 = 0, _len5 = itemIds.length; _i5 < _len5; _i5++){
                            var _id3 = itemIds[_i5];
                            var _item2 = this._data.get(_id3);
                            if (_item2 != null && filter$1(_item2)) ids.push(_item2[this._idProp]);
                        }
                    } else {
                        // get all items
                        if (order) {
                            // create an ordered list
                            var _items = [];
                            for(var _i6 = 0, _len6 = itemIds.length; _i6 < _len6; _i6++){
                                var _id4 = itemIds[_i6];
                                _items.push(data.get(_id4));
                            }
                            this._sort(_items, order);
                            for(var _i7 = 0, _len7 = _items.length; _i7 < _len7; _i7++)ids.push(_items[_i7][this._idProp]);
                        } else // create unordered list
                        for(var _i8 = 0, _len8 = itemIds.length; _i8 < _len8; _i8++){
                            var _id5 = itemIds[_i8];
                            var _item3 = data.get(_id5);
                            if (_item3 != null) ids.push(_item3[this._idProp]);
                        }
                    }
                    return ids;
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this;
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    var filter$1 = options && filter(options);
                    var data = this._data;
                    var itemIds = _toConsumableArray(keys(data).call(data));
                    if (options && options.order) {
                        // execute forEach on ordered list
                        var items = this.get(options);
                        for(var i = 0, len = items.length; i < len; i++){
                            var item = items[i];
                            var id = item[this._idProp];
                            callback(item, id);
                        }
                    } else // unordered
                    for(var _i9 = 0, _len9 = itemIds.length; _i9 < _len9; _i9++){
                        var _id6 = itemIds[_i9];
                        var _item4 = this._data.get(_id6);
                        if (_item4 != null && (!filter$1 || filter$1(_item4))) callback(_item4, _id6);
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    var filter$1 = options && filter(options);
                    var mappedItems = [];
                    var data = this._data;
                    var itemIds = _toConsumableArray(keys(data).call(data)); // convert and filter items
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = this._data.get(id);
                        if (item != null && (!filter$1 || filter$1(item))) mappedItems.push(callback(item, id));
                    } // order items
                    if (options && options.order) this._sort(mappedItems, options.order);
                    return mappedItems;
                }
            },
            {
                key: "_filterFields",
                value: function _filterFields(item, fields) {
                    var _context3;
                    if (!item) // item is null
                    return item;
                    return reduce(_context3 = isArray$1(fields) ? fields : keys$4(fields)).call(_context3, function(filteredItem, field) {
                        filteredItem[field] = item[field];
                        return filteredItem;
                    }, {});
                }
            },
            {
                key: "_sort",
                value: function _sort(items, order) {
                    if (typeof order === "string") {
                        // order by provided field name
                        var name = order; // field name
                        sort(items).call(items, function(a, b) {
                            // @TODO: How to treat missing properties?
                            var av = a[name];
                            var bv = b[name];
                            return av > bv ? 1 : av < bv ? -1 : 0;
                        });
                    } else if (typeof order === "function") // order by sort function
                    sort(items).call(items, order);
                    else // TODO: extend order by an Object {field:string, direction:string}
                    //       where direction can be 'asc' or 'desc'
                    throw new TypeError("Order must be a function or a string");
                }
            },
            {
                key: "remove",
                value: function remove(id, senderId) {
                    var removedIds = [];
                    var removedItems = []; // force everything to be an array for simplicity
                    var ids = isArray$1(id) ? id : [
                        id
                    ];
                    for(var i = 0, len = ids.length; i < len; i++){
                        var item = this._remove(ids[i]);
                        if (item) {
                            var itemId = item[this._idProp];
                            if (itemId != null) {
                                removedIds.push(itemId);
                                removedItems.push(item);
                            }
                        }
                    }
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                    return removedIds;
                }
            },
            {
                key: "_remove",
                value: function _remove(id) {
                    // @TODO: It origianlly returned the item although the docs say id.
                    // The code expects the item, so probably an error in the docs.
                    var ident; // confirm the id to use based on the args type
                    if (isId(id)) ident = id;
                    else if (id && _typeof(id) === "object") ident = id[this._idProp]; // look for the identifier field using ._idProp
                     // do the removing if the item is found
                    if (ident != null && this._data.has(ident)) {
                        var item = this._data.get(ident) || null;
                        this._data.delete(ident);
                        --this.length;
                        return item;
                    }
                    return null;
                }
            },
            {
                key: "clear",
                value: function clear(senderId) {
                    var _context4;
                    var ids = _toConsumableArray(keys(_context4 = this._data).call(_context4));
                    var items = [];
                    for(var i = 0, len = ids.length; i < len; i++)items.push(this._data.get(ids[i]));
                    this._data.clear();
                    this.length = 0;
                    this._trigger("remove", {
                        items: ids,
                        oldData: items
                    }, senderId);
                    return ids;
                }
            },
            {
                key: "max",
                value: function max(field) {
                    var _context5;
                    var max = null;
                    var maxField = null;
                    var _iterator = _createForOfIteratorHelper$1(values(_context5 = this._data).call(_context5)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var item = _step.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (maxField == null || itemField > maxField)) {
                                max = item;
                                maxField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                    return max || null;
                }
            },
            {
                key: "min",
                value: function min(field) {
                    var _context6;
                    var min = null;
                    var minField = null;
                    var _iterator2 = _createForOfIteratorHelper$1(values(_context6 = this._data).call(_context6)), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var item = _step2.value;
                            var itemField = item[field];
                            if (typeof itemField === "number" && (minField == null || itemField < minField)) {
                                min = item;
                                minField = itemField;
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                    return min || null;
                }
            },
            {
                key: "distinct",
                value: function distinct(prop) {
                    var data = this._data;
                    var itemIds = _toConsumableArray(keys(data).call(data));
                    var values = [];
                    var count = 0;
                    for(var i = 0, len = itemIds.length; i < len; i++){
                        var id = itemIds[i];
                        var item = data.get(id);
                        var value = item[prop];
                        var exists = false;
                        for(var j = 0; j < count; j++)if (values[j] == value) {
                            exists = true;
                            break;
                        }
                        if (!exists && value !== undefined) {
                            values[count] = value;
                            count++;
                        }
                    }
                    return values;
                }
            },
            {
                key: "_addItem",
                value: function _addItem(item) {
                    var fullItem = ensureFullItem(item, this._idProp);
                    var id = fullItem[this._idProp]; // check whether this id is already taken
                    if (this._data.has(id)) // item already exists
                    throw new Error("Cannot add item: item with id " + id + " already exists");
                    this._data.set(id, fullItem);
                    ++this.length;
                    return id;
                }
            },
            {
                key: "_updateItem",
                value: function _updateItem(update) {
                    var id = update[this._idProp];
                    if (id == null) throw new Error("Cannot update item: item has no id (item: " + stringify$1(update) + ")");
                    var item = this._data.get(id);
                    if (!item) // item doesn't exist
                    throw new Error("Cannot update item: no item with id " + id + " found");
                    this._data.set(id, _objectSpread(_objectSpread({}, item), update));
                    return id;
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    if (ids) {
                        var data = this._data;
                        return new DataStream(_defineProperty({}, iterator, /*#__PURE__*/ regenerator.mark(function _callee() {
                            var _iterator3, _step3, id, item;
                            return regenerator.wrap(function _callee$(_context7) {
                                while(true)switch(_context7.prev = _context7.next){
                                    case 0:
                                        _iterator3 = _createForOfIteratorHelper$1(ids);
                                        _context7.prev = 1;
                                        _iterator3.s();
                                    case 3:
                                        if ((_step3 = _iterator3.n()).done) {
                                            _context7.next = 11;
                                            break;
                                        }
                                        id = _step3.value;
                                        item = data.get(id);
                                        if (!(item != null)) {
                                            _context7.next = 9;
                                            break;
                                        }
                                        _context7.next = 9;
                                        return [
                                            id,
                                            item
                                        ];
                                    case 9:
                                        _context7.next = 3;
                                        break;
                                    case 11:
                                        _context7.next = 16;
                                        break;
                                    case 13:
                                        _context7.prev = 13;
                                        _context7.t0 = _context7["catch"](1);
                                        _iterator3.e(_context7.t0);
                                    case 16:
                                        _context7.prev = 16;
                                        _iterator3.f();
                                        return _context7.finish(16);
                                    case 19:
                                    case "end":
                                        return _context7.stop();
                                }
                            }, _callee, null, [
                                [
                                    1,
                                    13,
                                    16,
                                    19
                                ]
                            ]);
                        })));
                    } else {
                        var _context8;
                        return new DataStream(_defineProperty({}, iterator, bind$6(_context8 = entries(this._data)).call(_context8, this._data)));
                    }
                }
            }
        ]);
        return DataSet;
    }(DataSetPart);
    function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof symbol !== "undefined" && getIteratorMethod$1(o) || o["@@iterator"];
        if (!it) {
            if (isArray$1(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                var F = function F() {};
                return {
                    s: F,
                    n: function n() {
                        if (i >= o.length) return {
                            done: true
                        };
                        return {
                            done: false,
                            value: o[i++]
                        };
                    },
                    e: function e(_e) {
                        throw _e;
                    },
                    f: F
                };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return {
            s: function s() {
                it = it.call(o);
            },
            n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
            },
            e: function e(_e2) {
                didErr = true;
                err = _e2;
            },
            f: function f() {
                try {
                    if (!normalCompletion && it.return != null) it.return();
                } finally{
                    if (didErr) throw err;
                }
            }
        };
    }
    function _unsupportedIterableToArray(o, minLen) {
        var _context5;
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = slice(_context5 = Object.prototype.toString.call(o)).call(_context5, 8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return from$3(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
        };
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !construct) return false;
        if (construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(construct(Boolean, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    /**
   * DataView
   *
   * A DataView offers a filtered and/or formatted view on a DataSet. One can subscribe to changes in a DataView, and easily get filtered or formatted data without having to specify filters and field types all the time.
   *
   * ## Example
   * ```javascript
   * // create a DataSet
   * var data = new vis.DataSet();
   * data.add([
   *   {id: 1, text: 'item 1', date: new Date(2013, 6, 20), group: 1, first: true},
   *   {id: 2, text: 'item 2', date: '2013-06-23', group: 2},
   *   {id: 3, text: 'item 3', date: '2013-06-25', group: 2},
   *   {id: 4, text: 'item 4'}
   * ]);
   *
   * // create a DataView
   * // the view will only contain items having a property group with value 1,
   * // and will only output fields id, text, and date.
   * var view = new vis.DataView(data, {
   *   filter: function (item) {
   *     return (item.group == 1);
   *   },
   *   fields: ['id', 'text', 'date']
   * });
   *
   * // subscribe to any change in the DataView
   * view.on('*', function (event, properties, senderId) {
   *   console.log('event', event, properties);
   * });
   *
   * // update an item in the data set
   * data.update({id: 2, group: 1});
   *
   * // get all ids in the view
   * var ids = view.getIds();
   * console.log('ids', ids); // will output [1, 2]
   *
   * // get all items in the view
   * var items = view.get();
   * ```
   *
   * @typeParam Item - Item type that may or may not have an id.
   * @typeParam IdProp - Name of the property that contains the id.
   */ var DataView = /*#__PURE__*/ function(_DataSetPart) {
        _inherits(DataView, _DataSetPart);
        var _super = _createSuper(DataView);
        /**
     * Create a DataView.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @param options - Options to configure this data view.
     */ function DataView(data, options) {
            var _context;
            var _this;
            _classCallCheck(this, DataView);
            _this = _super.call(this);
            _defineProperty(_assertThisInitialized(_this), "length", 0);
            _defineProperty(_assertThisInitialized(_this), "_listener", void 0);
            _defineProperty(_assertThisInitialized(_this), "_data", void 0);
            _defineProperty(_assertThisInitialized(_this), "_ids", new set());
            _defineProperty(_assertThisInitialized(_this), "_options", void 0);
            _this._options = options || {};
            _this._listener = bind$6(_context = _this._onEvent).call(_context, _assertThisInitialized(_this));
            _this.setData(data);
            return _this;
        } // TODO: implement a function .config() to dynamically update things like configured filter
        // and trigger changes accordingly
        /**
     * Set a data source for the view.
     *
     * @param data - The instance containing data (directly or indirectly).
     * @remarks
     * Note that when the data view is bound to a data set it won't be garbage
     * collected unless the data set is too. Use `dataView.setData(null)` or
     * `dataView.dispose()` to enable garbage collection before you lose the last
     * reference.
     */ _createClass(DataView, [
            {
                key: "idProp",
                get: /** @inheritDoc */ /** @inheritDoc */ function get() {
                    return this.getDataSet().idProp;
                }
            },
            {
                key: "setData",
                value: function setData(data) {
                    if (this._data) {
                        // unsubscribe from current dataset
                        if (this._data.off) this._data.off("*", this._listener);
                         // trigger a remove of all items in memory
                        var ids = this._data.getIds({
                            filter: filter(this._options)
                        });
                        var items = this._data.get(ids);
                        this._ids.clear();
                        this.length = 0;
                        this._trigger("remove", {
                            items: ids,
                            oldData: items
                        });
                    }
                    if (data != null) {
                        this._data = data; // trigger an add of all added items
                        var _ids = this._data.getIds({
                            filter: filter(this._options)
                        });
                        for(var i = 0, len = _ids.length; i < len; i++){
                            var id = _ids[i];
                            this._ids.add(id);
                        }
                        this.length = _ids.length;
                        this._trigger("add", {
                            items: _ids
                        });
                    } else this._data = new DataSet();
                     // subscribe to new dataset
                    if (this._data.on) this._data.on("*", this._listener);
                }
            },
            {
                key: "refresh",
                value: function refresh() {
                    var ids = this._data.getIds({
                        filter: filter(this._options)
                    });
                    var oldIds = _toConsumableArray(this._ids);
                    var newIds = {};
                    var addedIds = [];
                    var removedIds = [];
                    var removedItems = []; // check for additions
                    for(var i = 0, len = ids.length; i < len; i++){
                        var id = ids[i];
                        newIds[id] = true;
                        if (!this._ids.has(id)) {
                            addedIds.push(id);
                            this._ids.add(id);
                        }
                    } // check for removals
                    for(var _i = 0, _len = oldIds.length; _i < _len; _i++){
                        var _id = oldIds[_i];
                        var item = this._data.get(_id);
                        if (item == null) // @TODO: Investigate.
                        // Doesn't happen during tests or examples.
                        // Is it really impossible or could it eventually happen?
                        // How to handle it if it does? The types guarantee non-nullable items.
                        console.error("If you see this, report it please.");
                        else if (!newIds[_id]) {
                            removedIds.push(_id);
                            removedItems.push(item);
                            this._ids.delete(_id);
                        }
                    }
                    this.length += addedIds.length - removedIds.length; // trigger events
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    });
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    });
                }
            },
            {
                key: "get",
                value: function get(first, second) {
                    if (this._data == null) return null;
                     // parse the arguments
                    var ids = null;
                    var options;
                    if (isId(first) || isArray$1(first)) {
                        ids = first;
                        options = second;
                    } else options = first;
                     // extend the options with the default options and provided options
                    var viewOptions = assign$2({}, this._options, options); // create a combined filter method when needed
                    var thisFilter = filter(this._options);
                    var optionsFilter = options && filter(options);
                    if (thisFilter && optionsFilter) viewOptions.filter = function(item) {
                        return thisFilter(item) && optionsFilter(item);
                    };
                    if (ids == null) return this._data.get(viewOptions);
                    else return this._data.get(ids, viewOptions);
                }
            },
            {
                key: "getIds",
                value: function getIds(options) {
                    if (this._data.length) {
                        var defaultFilter = filter(this._options);
                        var optionsFilter = options != null ? filter(options) : null;
                        var filter$1;
                        if (optionsFilter) {
                            if (defaultFilter) filter$1 = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter$1 = optionsFilter;
                        } else filter$1 = defaultFilter;
                        return this._data.getIds({
                            filter: filter$1,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "forEach",
                value: function forEach(callback, options) {
                    if (this._data) {
                        var _context2;
                        var defaultFilter = filter(this._options);
                        var optionsFilter = options && filter(options);
                        var filter$1;
                        if (optionsFilter) {
                            if (defaultFilter) filter$1 = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter$1 = optionsFilter;
                        } else filter$1 = defaultFilter;
                        forEach$1(_context2 = this._data).call(_context2, callback, {
                            filter: filter$1,
                            order: options && options.order
                        });
                    }
                }
            },
            {
                key: "map",
                value: function map(callback, options) {
                    if (this._data) {
                        var _context3;
                        var defaultFilter = filter(this._options);
                        var optionsFilter = options && filter(options);
                        var filter$1;
                        if (optionsFilter) {
                            if (defaultFilter) filter$1 = function filter(item) {
                                return defaultFilter(item) && optionsFilter(item);
                            };
                            else filter$1 = optionsFilter;
                        } else filter$1 = defaultFilter;
                        return map$3(_context3 = this._data).call(_context3, callback, {
                            filter: filter$1,
                            order: options && options.order
                        });
                    } else return [];
                }
            },
            {
                key: "getDataSet",
                value: function getDataSet() {
                    return this._data.getDataSet();
                }
            },
            {
                key: "stream",
                value: function stream(ids) {
                    var _context4;
                    return this._data.stream(ids || _defineProperty({}, iterator, bind$6(_context4 = keys(this._ids)).call(_context4, this._ids)));
                }
            },
            {
                key: "dispose",
                value: function dispose() {
                    var _this$_data;
                    if ((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.off) this._data.off("*", this._listener);
                    var message = "This data view has already been disposed of.";
                    var replacement = {
                        get: function get() {
                            throw new Error(message);
                        },
                        set: function set() {
                            throw new Error(message);
                        },
                        configurable: false
                    };
                    var _iterator = _createForOfIteratorHelper(ownKeys$1(DataView.prototype)), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var key = _step.value;
                            defineProperty$4(this, key, replacement);
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
            },
            {
                key: "_onEvent",
                value: function _onEvent(event, params, senderId) {
                    if (!params || !params.items || !this._data) return;
                    var ids = params.items;
                    var addedIds = [];
                    var updatedIds = [];
                    var removedIds = [];
                    var oldItems = [];
                    var updatedItems = [];
                    var removedItems = [];
                    switch(event){
                        case "add":
                            // filter the ids of the added items
                            for(var i = 0, len = ids.length; i < len; i++){
                                var id = ids[i];
                                var item = this.get(id);
                                if (item) {
                                    this._ids.add(id);
                                    addedIds.push(id);
                                }
                            }
                            break;
                        case "update":
                            // determine the event from the views viewpoint: an updated
                            // item can be added, updated, or removed from this view.
                            for(var _i2 = 0, _len2 = ids.length; _i2 < _len2; _i2++){
                                var _id2 = ids[_i2];
                                var _item = this.get(_id2);
                                if (_item) {
                                    if (this._ids.has(_id2)) {
                                        updatedIds.push(_id2);
                                        updatedItems.push(params.data[_i2]);
                                        oldItems.push(params.oldData[_i2]);
                                    } else {
                                        this._ids.add(_id2);
                                        addedIds.push(_id2);
                                    }
                                } else if (this._ids.has(_id2)) {
                                    this._ids.delete(_id2);
                                    removedIds.push(_id2);
                                    removedItems.push(params.oldData[_i2]);
                                }
                            }
                            break;
                        case "remove":
                            // filter the ids of the removed items
                            for(var _i3 = 0, _len3 = ids.length; _i3 < _len3; _i3++){
                                var _id3 = ids[_i3];
                                if (this._ids.has(_id3)) {
                                    this._ids.delete(_id3);
                                    removedIds.push(_id3);
                                    removedItems.push(params.oldData[_i3]);
                                }
                            }
                            break;
                    }
                    this.length += addedIds.length - removedIds.length;
                    if (addedIds.length) this._trigger("add", {
                        items: addedIds
                    }, senderId);
                    if (updatedIds.length) this._trigger("update", {
                        items: updatedIds,
                        oldData: oldItems,
                        data: updatedItems
                    }, senderId);
                    if (removedIds.length) this._trigger("remove", {
                        items: removedIds,
                        oldData: removedItems
                    }, senderId);
                }
            }
        ]);
        return DataView;
    }(DataSetPart);
    /**
   * Check that given value is compatible with Vis Data Set interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */ function isDataSetLike(idProp, v) {
        return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof v.add === "function" && typeof v.clear === "function" && typeof v.distinct === "function" && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.max === "function" && typeof v.min === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.remove === "function" && typeof v.setOptions === "function" && typeof v.stream === "function" && typeof v.update === "function" && typeof v.updateOnly === "function";
    }
    /**
   * Check that given value is compatible with Vis Data View interface.
   *
   * @param idProp - The expected property to contain item id.
   * @param v - The value to be tested.
   * @returns True if all expected values and methods match, false otherwise.
   */ function isDataViewLike(idProp, v) {
        return _typeof(v) === "object" && v !== null && idProp === v.idProp && typeof forEach$1(v) === "function" && typeof v.get === "function" && typeof v.getDataSet === "function" && typeof v.getIds === "function" && typeof v.length === "number" && typeof map$3(v) === "function" && typeof v.off === "function" && typeof v.on === "function" && typeof v.stream === "function" && isDataSetLike(idProp, v.getDataSet());
    }
    exports1.DELETE = DELETE;
    exports1.DataSet = DataSet;
    exports1.DataStream = DataStream;
    exports1.DataView = DataView;
    exports1.Queue = Queue;
    exports1.createNewDataPipeFrom = createNewDataPipeFrom;
    exports1.isDataSetLike = isDataSetLike;
    exports1.isDataViewLike = isDataViewLike;
    Object.defineProperty(exports1, "__esModule", {
        value: true
    });
});

},{}],"eDXlY":[function(require,module,exports) {
var convert = require("./convert"), func = convert("defaultsDeep", require("../defaultsDeep"));
func.placeholder = require("./placeholder");
module.exports = func;

},{"./convert":"jYjrT","../defaultsDeep":"7UOYF","./placeholder":"cfCjP"}],"jYjrT":[function(require,module,exports) {
var baseConvert = require("./_baseConvert"), util = require("./_util");
/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */ function convert(name, func, options) {
    return baseConvert(util, name, func, options);
}
module.exports = convert;

},{"./_baseConvert":"hkO5P","./_util":"bsP4w"}],"hkO5P":[function(require,module,exports) {
var mapping = require("./_mapping"), fallbackHolder = require("./placeholder");
/** Built-in value reference. */ var push = Array.prototype.push;
/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */ function baseArity(func, n) {
    return n == 2 ? function(a, b) {
        return func.apply(undefined, arguments);
    } : function(a) {
        return func.apply(undefined, arguments);
    };
}
/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */ function baseAry(func, n) {
    return n == 2 ? function(a, b) {
        return func(a, b);
    } : function(a) {
        return func(a);
    };
}
/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */ function cloneArray(array) {
    var length = array ? array.length : 0, result = Array(length);
    while(length--)result[length] = array[length];
    return result;
}
/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */ function createCloner(func) {
    return function(object) {
        return func({}, object);
    };
}
/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */ function flatSpread(func, start) {
    return function() {
        var length = arguments.length, lastIndex = length - 1, args = Array(length);
        while(length--)args[length] = arguments[length];
        var array = args[start], otherArgs = args.slice(0, start);
        if (array) push.apply(otherArgs, array);
        if (start != lastIndex) push.apply(otherArgs, args.slice(start + 1));
        return func.apply(this, otherArgs);
    };
}
/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */ function wrapImmutable(func, cloner) {
    return function() {
        var length = arguments.length;
        if (!length) return;
        var args = Array(length);
        while(length--)args[length] = arguments[length];
        var result = args[0] = cloner.apply(undefined, args);
        func.apply(undefined, args);
        return result;
    };
}
/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */ function baseConvert(util, name, func, options) {
    var isLib = typeof name == "function", isObj = name === Object(name);
    if (isObj) {
        options = func;
        func = name;
        name = undefined;
    }
    if (func == null) throw new TypeError;
    options || (options = {});
    var config = {
        "cap": "cap" in options ? options.cap : true,
        "curry": "curry" in options ? options.curry : true,
        "fixed": "fixed" in options ? options.fixed : true,
        "immutable": "immutable" in options ? options.immutable : true,
        "rearg": "rearg" in options ? options.rearg : true
    };
    var defaultHolder = isLib ? func : fallbackHolder, forceCurry = "curry" in options && options.curry, forceFixed = "fixed" in options && options.fixed, forceRearg = "rearg" in options && options.rearg, pristine = isLib ? func.runInContext() : undefined;
    var helpers = isLib ? func : {
        "ary": util.ary,
        "assign": util.assign,
        "clone": util.clone,
        "curry": util.curry,
        "forEach": util.forEach,
        "isArray": util.isArray,
        "isError": util.isError,
        "isFunction": util.isFunction,
        "isWeakMap": util.isWeakMap,
        "iteratee": util.iteratee,
        "keys": util.keys,
        "rearg": util.rearg,
        "toInteger": util.toInteger,
        "toPath": util.toPath
    };
    var ary = helpers.ary, assign = helpers.assign, clone = helpers.clone, curry = helpers.curry, each = helpers.forEach, isArray = helpers.isArray, isError = helpers.isError, isFunction = helpers.isFunction, isWeakMap = helpers.isWeakMap, keys = helpers.keys, rearg = helpers.rearg, toInteger = helpers.toInteger, toPath = helpers.toPath;
    var aryMethodKeys = keys(mapping.aryMethod);
    var wrappers = {
        "castArray": function(castArray) {
            return function() {
                var value = arguments[0];
                return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
            };
        },
        "iteratee": function(iteratee) {
            return function() {
                var func = arguments[0], arity = arguments[1], result = iteratee(func, arity), length = result.length;
                if (config.cap && typeof arity == "number") {
                    arity = arity > 2 ? arity - 2 : 1;
                    return length && length <= arity ? result : baseAry(result, arity);
                }
                return result;
            };
        },
        "mixin": function(mixin) {
            return function(source) {
                var func = this;
                if (!isFunction(func)) return mixin(func, Object(source));
                var pairs = [];
                each(keys(source), function(key) {
                    if (isFunction(source[key])) pairs.push([
                        key,
                        func.prototype[key]
                    ]);
                });
                mixin(func, Object(source));
                each(pairs, function(pair) {
                    var value = pair[1];
                    if (isFunction(value)) func.prototype[pair[0]] = value;
                    else delete func.prototype[pair[0]];
                });
                return func;
            };
        },
        "nthArg": function(nthArg) {
            return function(n) {
                var arity = n < 0 ? 1 : toInteger(n) + 1;
                return curry(nthArg(n), arity);
            };
        },
        "rearg": function(rearg) {
            return function(func, indexes) {
                var arity = indexes ? indexes.length : 0;
                return curry(rearg(func, indexes), arity);
            };
        },
        "runInContext": function(runInContext) {
            return function(context) {
                return baseConvert(util, runInContext(context), options);
            };
        }
    };
    /*--------------------------------------------------------------------------*/ /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */ function castCap(name, func) {
        if (config.cap) {
            var indexes = mapping.iterateeRearg[name];
            if (indexes) return iterateeRearg(func, indexes);
            var n = !isLib && mapping.iterateeAry[name];
            if (n) return iterateeAry(func, n);
        }
        return func;
    }
    /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */ function castCurry(name, func, n) {
        return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
    }
    /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */ function castFixed(name, func, n) {
        if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
            var data = mapping.methodSpread[name], start = data && data.start;
            return start === undefined ? ary(func, n) : flatSpread(func, start);
        }
        return func;
    }
    /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */ function castRearg(name, func, n) {
        return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
    }
    /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */ function cloneByPath(object, path) {
        path = toPath(path);
        var index = -1, length = path.length, lastIndex = length - 1, result = clone(Object(object)), nested = result;
        while(nested != null && ++index < length){
            var key = path[index], value = nested[key];
            if (value != null && !(isFunction(value) || isError(value) || isWeakMap(value))) nested[key] = clone(index == lastIndex ? value : Object(value));
            nested = nested[key];
        }
        return result;
    }
    /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */ function convertLib(options) {
        return _.runInContext.convert(options)(undefined);
    }
    /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */ function createConverter(name, func) {
        var realName = mapping.aliasToReal[name] || name, methodName = mapping.remap[realName] || realName, oldOptions = options;
        return function(options) {
            var newUtil = isLib ? pristine : helpers, newFunc = isLib ? pristine[methodName] : func, newOptions = assign(assign({}, oldOptions), options);
            return baseConvert(newUtil, realName, newFunc, newOptions);
        };
    }
    /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */ function iterateeAry(func, n) {
        return overArg(func, function(func) {
            return typeof func == "function" ? baseAry(func, n) : func;
        });
    }
    /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */ function iterateeRearg(func, indexes) {
        return overArg(func, function(func) {
            var n = indexes.length;
            return baseArity(rearg(baseAry(func, n), indexes), n);
        });
    }
    /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function() {
            var length = arguments.length;
            if (!length) return func();
            var args = Array(length);
            while(length--)args[length] = arguments[length];
            var index = config.rearg ? 0 : length - 1;
            args[index] = transform(args[index]);
            return func.apply(undefined, args);
        };
    }
    /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */ function wrap(name, func, placeholder) {
        var result, realName = mapping.aliasToReal[name] || name, wrapped = func, wrapper = wrappers[realName];
        if (wrapper) wrapped = wrapper(func);
        else if (config.immutable) {
            if (mapping.mutate.array[realName]) wrapped = wrapImmutable(func, cloneArray);
            else if (mapping.mutate.object[realName]) wrapped = wrapImmutable(func, createCloner(func));
            else if (mapping.mutate.set[realName]) wrapped = wrapImmutable(func, cloneByPath);
        }
        each(aryMethodKeys, function(aryKey) {
            each(mapping.aryMethod[aryKey], function(otherName) {
                if (realName == otherName) {
                    var data = mapping.methodSpread[realName], afterRearg = data && data.afterRearg;
                    result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
                    result = castCap(realName, result);
                    result = castCurry(realName, result, aryKey);
                    return false;
                }
            });
            return !result;
        });
        result || (result = wrapped);
        if (result == func) result = forceCurry ? curry(result, 1) : function() {
            return func.apply(this, arguments);
        };
        result.convert = createConverter(realName, func);
        result.placeholder = func.placeholder = placeholder;
        return result;
    }
    /*--------------------------------------------------------------------------*/ if (!isObj) return wrap(name, func, defaultHolder);
    var _ = func;
    // Convert methods by ary cap.
    var pairs = [];
    each(aryMethodKeys, function(aryKey) {
        each(mapping.aryMethod[aryKey], function(key) {
            var func = _[mapping.remap[key] || key];
            if (func) pairs.push([
                key,
                wrap(key, func, _)
            ]);
        });
    });
    // Convert remaining methods.
    each(keys(_), function(key) {
        var func = _[key];
        if (typeof func == "function") {
            var length = pairs.length;
            while(length--){
                if (pairs[length][0] == key) return;
            }
            func.convert = createConverter(key, func);
            pairs.push([
                key,
                func
            ]);
        }
    });
    // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
    each(pairs, function(pair) {
        _[pair[0]] = pair[1];
    });
    _.convert = convertLib;
    _.placeholder = _;
    // Assign aliases.
    each(keys(_), function(key) {
        each(mapping.realToAlias[key] || [], function(alias) {
            _[alias] = _[key];
        });
    });
    return _;
}
module.exports = baseConvert;

},{"./_mapping":"cHfRU","./placeholder":"cfCjP"}],"cHfRU":[function(require,module,exports) {
/** Used to map aliases to their real names. */ exports.aliasToReal = {
    // Lodash aliases.
    "each": "forEach",
    "eachRight": "forEachRight",
    "entries": "toPairs",
    "entriesIn": "toPairsIn",
    "extend": "assignIn",
    "extendAll": "assignInAll",
    "extendAllWith": "assignInAllWith",
    "extendWith": "assignInWith",
    "first": "head",
    // Methods that are curried variants of others.
    "conforms": "conformsTo",
    "matches": "isMatch",
    "property": "get",
    // Ramda aliases.
    "__": "placeholder",
    "F": "stubFalse",
    "T": "stubTrue",
    "all": "every",
    "allPass": "overEvery",
    "always": "constant",
    "any": "some",
    "anyPass": "overSome",
    "apply": "spread",
    "assoc": "set",
    "assocPath": "set",
    "complement": "negate",
    "compose": "flowRight",
    "contains": "includes",
    "dissoc": "unset",
    "dissocPath": "unset",
    "dropLast": "dropRight",
    "dropLastWhile": "dropRightWhile",
    "equals": "isEqual",
    "identical": "eq",
    "indexBy": "keyBy",
    "init": "initial",
    "invertObj": "invert",
    "juxt": "over",
    "omitAll": "omit",
    "nAry": "ary",
    "path": "get",
    "pathEq": "matchesProperty",
    "pathOr": "getOr",
    "paths": "at",
    "pickAll": "pick",
    "pipe": "flow",
    "pluck": "map",
    "prop": "get",
    "propEq": "matchesProperty",
    "propOr": "getOr",
    "props": "at",
    "symmetricDifference": "xor",
    "symmetricDifferenceBy": "xorBy",
    "symmetricDifferenceWith": "xorWith",
    "takeLast": "takeRight",
    "takeLastWhile": "takeRightWhile",
    "unapply": "rest",
    "unnest": "flatten",
    "useWith": "overArgs",
    "where": "conformsTo",
    "whereEq": "isMatch",
    "zipObj": "zipObject"
};
/** Used to map ary to method names. */ exports.aryMethod = {
    "1": [
        "assignAll",
        "assignInAll",
        "attempt",
        "castArray",
        "ceil",
        "create",
        "curry",
        "curryRight",
        "defaultsAll",
        "defaultsDeepAll",
        "floor",
        "flow",
        "flowRight",
        "fromPairs",
        "invert",
        "iteratee",
        "memoize",
        "method",
        "mergeAll",
        "methodOf",
        "mixin",
        "nthArg",
        "over",
        "overEvery",
        "overSome",
        "rest",
        "reverse",
        "round",
        "runInContext",
        "spread",
        "template",
        "trim",
        "trimEnd",
        "trimStart",
        "uniqueId",
        "words",
        "zipAll"
    ],
    "2": [
        "add",
        "after",
        "ary",
        "assign",
        "assignAllWith",
        "assignIn",
        "assignInAllWith",
        "at",
        "before",
        "bind",
        "bindAll",
        "bindKey",
        "chunk",
        "cloneDeepWith",
        "cloneWith",
        "concat",
        "conformsTo",
        "countBy",
        "curryN",
        "curryRightN",
        "debounce",
        "defaults",
        "defaultsDeep",
        "defaultTo",
        "delay",
        "difference",
        "divide",
        "drop",
        "dropRight",
        "dropRightWhile",
        "dropWhile",
        "endsWith",
        "eq",
        "every",
        "filter",
        "find",
        "findIndex",
        "findKey",
        "findLast",
        "findLastIndex",
        "findLastKey",
        "flatMap",
        "flatMapDeep",
        "flattenDepth",
        "forEach",
        "forEachRight",
        "forIn",
        "forInRight",
        "forOwn",
        "forOwnRight",
        "get",
        "groupBy",
        "gt",
        "gte",
        "has",
        "hasIn",
        "includes",
        "indexOf",
        "intersection",
        "invertBy",
        "invoke",
        "invokeMap",
        "isEqual",
        "isMatch",
        "join",
        "keyBy",
        "lastIndexOf",
        "lt",
        "lte",
        "map",
        "mapKeys",
        "mapValues",
        "matchesProperty",
        "maxBy",
        "meanBy",
        "merge",
        "mergeAllWith",
        "minBy",
        "multiply",
        "nth",
        "omit",
        "omitBy",
        "overArgs",
        "pad",
        "padEnd",
        "padStart",
        "parseInt",
        "partial",
        "partialRight",
        "partition",
        "pick",
        "pickBy",
        "propertyOf",
        "pull",
        "pullAll",
        "pullAt",
        "random",
        "range",
        "rangeRight",
        "rearg",
        "reject",
        "remove",
        "repeat",
        "restFrom",
        "result",
        "sampleSize",
        "some",
        "sortBy",
        "sortedIndex",
        "sortedIndexOf",
        "sortedLastIndex",
        "sortedLastIndexOf",
        "sortedUniqBy",
        "split",
        "spreadFrom",
        "startsWith",
        "subtract",
        "sumBy",
        "take",
        "takeRight",
        "takeRightWhile",
        "takeWhile",
        "tap",
        "throttle",
        "thru",
        "times",
        "trimChars",
        "trimCharsEnd",
        "trimCharsStart",
        "truncate",
        "union",
        "uniqBy",
        "uniqWith",
        "unset",
        "unzipWith",
        "without",
        "wrap",
        "xor",
        "zip",
        "zipObject",
        "zipObjectDeep"
    ],
    "3": [
        "assignInWith",
        "assignWith",
        "clamp",
        "differenceBy",
        "differenceWith",
        "findFrom",
        "findIndexFrom",
        "findLastFrom",
        "findLastIndexFrom",
        "getOr",
        "includesFrom",
        "indexOfFrom",
        "inRange",
        "intersectionBy",
        "intersectionWith",
        "invokeArgs",
        "invokeArgsMap",
        "isEqualWith",
        "isMatchWith",
        "flatMapDepth",
        "lastIndexOfFrom",
        "mergeWith",
        "orderBy",
        "padChars",
        "padCharsEnd",
        "padCharsStart",
        "pullAllBy",
        "pullAllWith",
        "rangeStep",
        "rangeStepRight",
        "reduce",
        "reduceRight",
        "replace",
        "set",
        "slice",
        "sortedIndexBy",
        "sortedLastIndexBy",
        "transform",
        "unionBy",
        "unionWith",
        "update",
        "xorBy",
        "xorWith",
        "zipWith"
    ],
    "4": [
        "fill",
        "setWith",
        "updateWith"
    ]
};
/** Used to map ary to rearg configs. */ exports.aryRearg = {
    "2": [
        1,
        0
    ],
    "3": [
        2,
        0,
        1
    ],
    "4": [
        3,
        2,
        0,
        1
    ]
};
/** Used to map method names to their iteratee ary. */ exports.iterateeAry = {
    "dropRightWhile": 1,
    "dropWhile": 1,
    "every": 1,
    "filter": 1,
    "find": 1,
    "findFrom": 1,
    "findIndex": 1,
    "findIndexFrom": 1,
    "findKey": 1,
    "findLast": 1,
    "findLastFrom": 1,
    "findLastIndex": 1,
    "findLastIndexFrom": 1,
    "findLastKey": 1,
    "flatMap": 1,
    "flatMapDeep": 1,
    "flatMapDepth": 1,
    "forEach": 1,
    "forEachRight": 1,
    "forIn": 1,
    "forInRight": 1,
    "forOwn": 1,
    "forOwnRight": 1,
    "map": 1,
    "mapKeys": 1,
    "mapValues": 1,
    "partition": 1,
    "reduce": 2,
    "reduceRight": 2,
    "reject": 1,
    "remove": 1,
    "some": 1,
    "takeRightWhile": 1,
    "takeWhile": 1,
    "times": 1,
    "transform": 2
};
/** Used to map method names to iteratee rearg configs. */ exports.iterateeRearg = {
    "mapKeys": [
        1
    ],
    "reduceRight": [
        1,
        0
    ]
};
/** Used to map method names to rearg configs. */ exports.methodRearg = {
    "assignInAllWith": [
        1,
        0
    ],
    "assignInWith": [
        1,
        2,
        0
    ],
    "assignAllWith": [
        1,
        0
    ],
    "assignWith": [
        1,
        2,
        0
    ],
    "differenceBy": [
        1,
        2,
        0
    ],
    "differenceWith": [
        1,
        2,
        0
    ],
    "getOr": [
        2,
        1,
        0
    ],
    "intersectionBy": [
        1,
        2,
        0
    ],
    "intersectionWith": [
        1,
        2,
        0
    ],
    "isEqualWith": [
        1,
        2,
        0
    ],
    "isMatchWith": [
        2,
        1,
        0
    ],
    "mergeAllWith": [
        1,
        0
    ],
    "mergeWith": [
        1,
        2,
        0
    ],
    "padChars": [
        2,
        1,
        0
    ],
    "padCharsEnd": [
        2,
        1,
        0
    ],
    "padCharsStart": [
        2,
        1,
        0
    ],
    "pullAllBy": [
        2,
        1,
        0
    ],
    "pullAllWith": [
        2,
        1,
        0
    ],
    "rangeStep": [
        1,
        2,
        0
    ],
    "rangeStepRight": [
        1,
        2,
        0
    ],
    "setWith": [
        3,
        1,
        2,
        0
    ],
    "sortedIndexBy": [
        2,
        1,
        0
    ],
    "sortedLastIndexBy": [
        2,
        1,
        0
    ],
    "unionBy": [
        1,
        2,
        0
    ],
    "unionWith": [
        1,
        2,
        0
    ],
    "updateWith": [
        3,
        1,
        2,
        0
    ],
    "xorBy": [
        1,
        2,
        0
    ],
    "xorWith": [
        1,
        2,
        0
    ],
    "zipWith": [
        1,
        2,
        0
    ]
};
/** Used to map method names to spread configs. */ exports.methodSpread = {
    "assignAll": {
        "start": 0
    },
    "assignAllWith": {
        "start": 0
    },
    "assignInAll": {
        "start": 0
    },
    "assignInAllWith": {
        "start": 0
    },
    "defaultsAll": {
        "start": 0
    },
    "defaultsDeepAll": {
        "start": 0
    },
    "invokeArgs": {
        "start": 2
    },
    "invokeArgsMap": {
        "start": 2
    },
    "mergeAll": {
        "start": 0
    },
    "mergeAllWith": {
        "start": 0
    },
    "partial": {
        "start": 1
    },
    "partialRight": {
        "start": 1
    },
    "without": {
        "start": 1
    },
    "zipAll": {
        "start": 0
    }
};
/** Used to identify methods which mutate arrays or objects. */ exports.mutate = {
    "array": {
        "fill": true,
        "pull": true,
        "pullAll": true,
        "pullAllBy": true,
        "pullAllWith": true,
        "pullAt": true,
        "remove": true,
        "reverse": true
    },
    "object": {
        "assign": true,
        "assignAll": true,
        "assignAllWith": true,
        "assignIn": true,
        "assignInAll": true,
        "assignInAllWith": true,
        "assignInWith": true,
        "assignWith": true,
        "defaults": true,
        "defaultsAll": true,
        "defaultsDeep": true,
        "defaultsDeepAll": true,
        "merge": true,
        "mergeAll": true,
        "mergeAllWith": true,
        "mergeWith": true
    },
    "set": {
        "set": true,
        "setWith": true,
        "unset": true,
        "update": true,
        "updateWith": true
    }
};
/** Used to map real names to their aliases. */ exports.realToAlias = function() {
    var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {};
    for(var key in object){
        var value = object[key];
        if (hasOwnProperty.call(result, value)) result[value].push(key);
        else result[value] = [
            key
        ];
    }
    return result;
}();
/** Used to map method names to other names. */ exports.remap = {
    "assignAll": "assign",
    "assignAllWith": "assignWith",
    "assignInAll": "assignIn",
    "assignInAllWith": "assignInWith",
    "curryN": "curry",
    "curryRightN": "curryRight",
    "defaultsAll": "defaults",
    "defaultsDeepAll": "defaultsDeep",
    "findFrom": "find",
    "findIndexFrom": "findIndex",
    "findLastFrom": "findLast",
    "findLastIndexFrom": "findLastIndex",
    "getOr": "get",
    "includesFrom": "includes",
    "indexOfFrom": "indexOf",
    "invokeArgs": "invoke",
    "invokeArgsMap": "invokeMap",
    "lastIndexOfFrom": "lastIndexOf",
    "mergeAll": "merge",
    "mergeAllWith": "mergeWith",
    "padChars": "pad",
    "padCharsEnd": "padEnd",
    "padCharsStart": "padStart",
    "propertyOf": "get",
    "rangeStep": "range",
    "rangeStepRight": "rangeRight",
    "restFrom": "rest",
    "spreadFrom": "spread",
    "trimChars": "trim",
    "trimCharsEnd": "trimEnd",
    "trimCharsStart": "trimStart",
    "zipAll": "zip"
};
/** Used to track methods that skip fixing their arity. */ exports.skipFixed = {
    "castArray": true,
    "flow": true,
    "flowRight": true,
    "iteratee": true,
    "mixin": true,
    "rearg": true,
    "runInContext": true
};
/** Used to track methods that skip rearranging arguments. */ exports.skipRearg = {
    "add": true,
    "assign": true,
    "assignIn": true,
    "bind": true,
    "bindKey": true,
    "concat": true,
    "difference": true,
    "divide": true,
    "eq": true,
    "gt": true,
    "gte": true,
    "isEqual": true,
    "lt": true,
    "lte": true,
    "matchesProperty": true,
    "merge": true,
    "multiply": true,
    "overArgs": true,
    "partial": true,
    "partialRight": true,
    "propertyOf": true,
    "random": true,
    "range": true,
    "rangeRight": true,
    "subtract": true,
    "zip": true,
    "zipObject": true,
    "zipObjectDeep": true
};

},{}],"cfCjP":[function(require,module,exports) {
/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */ module.exports = {};

},{}],"bsP4w":[function(require,module,exports) {
module.exports = {
    "ary": require("../ary"),
    "assign": require("../_baseAssign"),
    "clone": require("../clone"),
    "curry": require("../curry"),
    "forEach": require("../_arrayEach"),
    "isArray": require("../isArray"),
    "isError": require("../isError"),
    "isFunction": require("../isFunction"),
    "isWeakMap": require("../isWeakMap"),
    "iteratee": require("../iteratee"),
    "keys": require("../_baseKeys"),
    "rearg": require("../rearg"),
    "toInteger": require("../toInteger"),
    "toPath": require("../toPath")
};

},{"../ary":"eX0eC","../_baseAssign":"fNRtQ","../clone":"edHVe","../curry":"2x299","../_arrayEach":"kMhnH","../isArray":"dZaTH","../isError":"8frBY","../isFunction":"cfti6","../isWeakMap":"io47w","../iteratee":"5r5GI","../_baseKeys":"c0eiI","../rearg":"bePiz","../toInteger":"ds6ZT","../toPath":"hH9yA"}],"eX0eC":[function(require,module,exports) {
var createWrap = require("./_createWrap");
/** Used to compose bitmasks for function metadata. */ var WRAP_ARY_FLAG = 128;
/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */ function ary(func, n, guard) {
    n = guard ? undefined : n;
    n = func && n == null ? func.length : n;
    return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}
module.exports = ary;

},{"./_createWrap":"1nVn1"}],"1nVn1":[function(require,module,exports) {
var baseSetData = require("./_baseSetData"), createBind = require("./_createBind"), createCurry = require("./_createCurry"), createHybrid = require("./_createHybrid"), createPartial = require("./_createPartial"), getData = require("./_getData"), mergeData = require("./_mergeData"), setData = require("./_setData"), setWrapToString = require("./_setWrapToString"), toInteger = require("./toInteger");
/** Error message constants. */ var FUNC_ERROR_TEXT = "Expected a function";
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    if (!isBindKey && typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
    var length = partials ? partials.length : 0;
    if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
    }
    ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
    arity = arity === undefined ? arity : toInteger(arity);
    length -= holders ? holders.length : 0;
    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials, holdersRight = holders;
        partials = holders = undefined;
    }
    var data = isBindKey ? undefined : getData(func);
    var newData = [
        func,
        bitmask,
        thisArg,
        partials,
        holders,
        partialsRight,
        holdersRight,
        argPos,
        ary,
        arity
    ];
    if (data) mergeData(newData, data);
    func = newData[0];
    bitmask = newData[1];
    thisArg = newData[2];
    partials = newData[3];
    holders = newData[4];
    arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
    else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
    else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
    else result = createHybrid.apply(undefined, newData);
    var setter = data ? baseSetData : setData;
    return setWrapToString(setter(result, newData), func, bitmask);
}
module.exports = createWrap;

},{"./_baseSetData":"fVuYJ","./_createBind":"79dWo","./_createCurry":"cOgCX","./_createHybrid":"hSF9w","./_createPartial":"1i1ov","./_getData":"2DAAe","./_mergeData":"g1yu3","./_setData":"fSNJE","./_setWrapToString":"d5KSW","./toInteger":"ds6ZT"}],"fVuYJ":[function(require,module,exports) {
var identity = require("./identity"), metaMap = require("./_metaMap");
/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var baseSetData = !metaMap ? identity : function(func, data) {
    metaMap.set(func, data);
    return func;
};
module.exports = baseSetData;

},{"./identity":"dgTUN","./_metaMap":"aUcED"}],"dgTUN":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
module.exports = identity;

},{}],"aUcED":[function(require,module,exports) {
var WeakMap = require("./_WeakMap");
/** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
module.exports = metaMap;

},{"./_WeakMap":"av50V"}],"av50V":[function(require,module,exports) {
var getNative = require("./_getNative"), root = require("./_root");
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, "WeakMap");
module.exports = WeakMap;

},{"./_getNative":"9PCIl","./_root":"dSYUs"}],"9PCIl":[function(require,module,exports) {
var baseIsNative = require("./_baseIsNative"), getValue = require("./_getValue");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"./_baseIsNative":"2U9Pn","./_getValue":"kKx5I"}],"2U9Pn":[function(require,module,exports) {
var isFunction = require("./isFunction"), isMasked = require("./_isMasked"), isObject = require("./isObject"), toSource = require("./_toSource");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"./isFunction":"cfti6","./_isMasked":"cMDzi","./isObject":"cGhqJ","./_toSource":"bYHc7"}],"cfti6":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), isObject = require("./isObject");
/** `Object#toString` result references. */ var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"lOnbo","./isObject":"cGhqJ"}],"lOnbo":[function(require,module,exports) {
var Symbol = require("./_Symbol"), getRawTag = require("./_getRawTag"), objectToString = require("./_objectToString");
/** `Object#toString` result references. */ var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"7lsL9","./_getRawTag":"995sO","./_objectToString":"bmE3g"}],"7lsL9":[function(require,module,exports) {
var root = require("./_root");
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"./_root":"dSYUs"}],"dSYUs":[function(require,module,exports) {
var freeGlobal = require("./_freeGlobal");
/** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
module.exports = root;

},{"./_freeGlobal":"kAk32"}],"kAk32":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"995sO":[function(require,module,exports) {
var Symbol = require("./_Symbol");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"7lsL9"}],"bmE3g":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"cGhqJ":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
}
module.exports = isObject;

},{}],"cMDzi":[function(require,module,exports) {
var coreJsData = require("./_coreJsData");
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"./_coreJsData":"6gJwQ"}],"6gJwQ":[function(require,module,exports) {
var root = require("./_root");
/** Used to detect overreaching core-js shims. */ var coreJsData = root["__core-js_shared__"];
module.exports = coreJsData;

},{"./_root":"dSYUs"}],"bYHc7":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + "";
        } catch (e1) {}
    }
    return "";
}
module.exports = toSource;

},{}],"kKx5I":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"79dWo":[function(require,module,exports) {
var createCtor = require("./_createCtor"), root = require("./_root");
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createBind(func, bitmask, thisArg) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
    function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
    }
    return wrapper;
}
module.exports = createBind;

},{"./_createCtor":"5ihhn","./_root":"dSYUs"}],"5ihhn":[function(require,module,exports) {
var baseCreate = require("./_baseCreate"), isObject = require("./isObject");
/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */ function createCtor(Ctor) {
    return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch(args.length){
            case 0:
                return new Ctor;
            case 1:
                return new Ctor(args[0]);
            case 2:
                return new Ctor(args[0], args[1]);
            case 3:
                return new Ctor(args[0], args[1], args[2]);
            case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
    };
}
module.exports = createCtor;

},{"./_baseCreate":"ef1VZ","./isObject":"cGhqJ"}],"ef1VZ":[function(require,module,exports) {
var isObject = require("./isObject");
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {}
    return function(proto) {
        if (!isObject(proto)) return {};
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = baseCreate;

},{"./isObject":"cGhqJ"}],"cOgCX":[function(require,module,exports) {
var apply = require("./_apply"), createCtor = require("./_createCtor"), createHybrid = require("./_createHybrid"), createRecurry = require("./_createRecurry"), getHolder = require("./_getHolder"), replaceHolders = require("./_replaceHolders"), root = require("./_root");
/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createCurry(func, bitmask, arity) {
    var Ctor = createCtor(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
        while(index--)args[index] = arguments[index];
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
    }
    return wrapper;
}
module.exports = createCurry;

},{"./_apply":"gUweg","./_createCtor":"5ihhn","./_createHybrid":"hSF9w","./_createRecurry":"9789e","./_getHolder":"2v0Bi","./_replaceHolders":"brLIY","./_root":"dSYUs"}],"gUweg":[function(require,module,exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
module.exports = apply;

},{}],"hSF9w":[function(require,module,exports) {
var composeArgs = require("./_composeArgs"), composeArgsRight = require("./_composeArgsRight"), countHolders = require("./_countHolders"), createCtor = require("./_createCtor"), createRecurry = require("./_createRecurry"), getHolder = require("./_getHolder"), reorder = require("./_reorder"), replaceHolders = require("./_replaceHolders"), root = require("./_root");
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_ARY_FLAG = 128, WRAP_FLIP_FLAG = 512;
/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
    function wrapper() {
        var length = arguments.length, args = Array(length), index = length;
        while(index--)args[index] = arguments[index];
        if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
        if (partials) args = composeArgs(args, partials, holders, isCurried);
        if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        length -= holdersCount;
        if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) args = reorder(args, argPos);
        else if (isFlip && length > 1) args.reverse();
        if (isAry && ary < length) args.length = ary;
        if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
        return fn.apply(thisBinding, args);
    }
    return wrapper;
}
module.exports = createHybrid;

},{"./_composeArgs":"9Sdbk","./_composeArgsRight":"diHiW","./_countHolders":"cQl2T","./_createCtor":"5ihhn","./_createRecurry":"9789e","./_getHolder":"2v0Bi","./_reorder":"4CCWQ","./_replaceHolders":"brLIY","./_root":"dSYUs"}],"9Sdbk":[function(require,module,exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgs(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
    while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
    while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
    while(rangeLength--)result[leftIndex++] = args[argsIndex++];
    return result;
}
module.exports = composeArgs;

},{}],"diHiW":[function(require,module,exports) {
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */ function composeArgsRight(args, partials, holders, isCurried) {
    var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
    while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
    var offset = argsIndex;
    while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
    while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
    return result;
}
module.exports = composeArgsRight;

},{}],"cQl2T":[function(require,module,exports) {
/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */ function countHolders(array, placeholder) {
    var length = array.length, result = 0;
    while(length--)if (array[length] === placeholder) ++result;
    return result;
}
module.exports = countHolders;

},{}],"9789e":[function(require,module,exports) {
var isLaziable = require("./_isLaziable"), setData = require("./_setData"), setWrapToString = require("./_setWrapToString");
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    var newData = [
        func,
        bitmask,
        thisArg,
        newPartials,
        newHolders,
        newPartialsRight,
        newHoldersRight,
        argPos,
        ary,
        arity
    ];
    var result = wrapFunc.apply(undefined, newData);
    if (isLaziable(func)) setData(result, newData);
    result.placeholder = placeholder;
    return setWrapToString(result, func, bitmask);
}
module.exports = createRecurry;

},{"./_isLaziable":"g1x7m","./_setData":"fSNJE","./_setWrapToString":"d5KSW"}],"g1x7m":[function(require,module,exports) {
var LazyWrapper = require("./_LazyWrapper"), getData = require("./_getData"), getFuncName = require("./_getFuncName"), lodash = require("./wrapperLodash");
/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */ function isLaziable(func) {
    var funcName = getFuncName(func), other = lodash[funcName];
    if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) return false;
    if (func === other) return true;
    var data = getData(other);
    return !!data && func === data[0];
}
module.exports = isLaziable;

},{"./_LazyWrapper":"jPVpf","./_getData":"2DAAe","./_getFuncName":"8QrGg","./wrapperLodash":"9NCzx"}],"jPVpf":[function(require,module,exports) {
var baseCreate = require("./_baseCreate"), baseLodash = require("./_baseLodash");
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */ function LazyWrapper(value) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__dir__ = 1;
    this.__filtered__ = false;
    this.__iteratees__ = [];
    this.__takeCount__ = MAX_ARRAY_LENGTH;
    this.__views__ = [];
}
// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;
module.exports = LazyWrapper;

},{"./_baseCreate":"ef1VZ","./_baseLodash":"dVpqq"}],"dVpqq":[function(require,module,exports) {
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */ function baseLodash() {
// No operation performed.
}
module.exports = baseLodash;

},{}],"2DAAe":[function(require,module,exports) {
var metaMap = require("./_metaMap"), noop = require("./noop");
/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */ var getData = !metaMap ? noop : function(func) {
    return metaMap.get(func);
};
module.exports = getData;

},{"./_metaMap":"aUcED","./noop":"dSFAq"}],"dSFAq":[function(require,module,exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */ function noop() {
// No operation performed.
}
module.exports = noop;

},{}],"8QrGg":[function(require,module,exports) {
var realNames = require("./_realNames");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */ function getFuncName(func) {
    var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
    while(length--){
        var data = array[length], otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) return data.name;
    }
    return result;
}
module.exports = getFuncName;

},{"./_realNames":"3Mfyk"}],"3Mfyk":[function(require,module,exports) {
/** Used to lookup unminified function names. */ var realNames = {};
module.exports = realNames;

},{}],"9NCzx":[function(require,module,exports) {
var LazyWrapper = require("./_LazyWrapper"), LodashWrapper = require("./_LodashWrapper"), baseLodash = require("./_baseLodash"), isArray = require("./isArray"), isObjectLike = require("./isObjectLike"), wrapperClone = require("./_wrapperClone");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */ function lodash(value) {
    if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) return value;
        if (hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
    }
    return new LodashWrapper(value);
}
// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;
module.exports = lodash;

},{"./_LazyWrapper":"jPVpf","./_LodashWrapper":"32oxQ","./_baseLodash":"dVpqq","./isArray":"dZaTH","./isObjectLike":"3BLi4","./_wrapperClone":"357TO"}],"32oxQ":[function(require,module,exports) {
var baseCreate = require("./_baseCreate"), baseLodash = require("./_baseLodash");
/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */ function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
    this.__index__ = 0;
    this.__values__ = undefined;
}
LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;
module.exports = LodashWrapper;

},{"./_baseCreate":"ef1VZ","./_baseLodash":"dVpqq"}],"dZaTH":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"3BLi4":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == "object";
}
module.exports = isObjectLike;

},{}],"357TO":[function(require,module,exports) {
var LazyWrapper = require("./_LazyWrapper"), LodashWrapper = require("./_LodashWrapper"), copyArray = require("./_copyArray");
/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */ function wrapperClone(wrapper) {
    if (wrapper instanceof LazyWrapper) return wrapper.clone();
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = copyArray(wrapper.__actions__);
    result.__index__ = wrapper.__index__;
    result.__values__ = wrapper.__values__;
    return result;
}
module.exports = wrapperClone;

},{"./_LazyWrapper":"jPVpf","./_LodashWrapper":"32oxQ","./_copyArray":"jJ8fu"}],"jJ8fu":[function(require,module,exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
module.exports = copyArray;

},{}],"fSNJE":[function(require,module,exports) {
var baseSetData = require("./_baseSetData"), shortOut = require("./_shortOut");
/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */ var setData = shortOut(baseSetData);
module.exports = setData;

},{"./_baseSetData":"fVuYJ","./_shortOut":"7ulLs"}],"7ulLs":[function(require,module,exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
module.exports = shortOut;

},{}],"d5KSW":[function(require,module,exports) {
var getWrapDetails = require("./_getWrapDetails"), insertWrapDetails = require("./_insertWrapDetails"), setToString = require("./_setToString"), updateWrapDetails = require("./_updateWrapDetails");
/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */ function setWrapToString(wrapper, reference, bitmask) {
    var source = reference + "";
    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}
module.exports = setWrapToString;

},{"./_getWrapDetails":"7sncX","./_insertWrapDetails":"56G4F","./_setToString":"b5kjI","./_updateWrapDetails":"jyT8K"}],"7sncX":[function(require,module,exports) {
/** Used to match wrap detail comments. */ var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */ function getWrapDetails(source) {
    var match = source.match(reWrapDetails);
    return match ? match[1].split(reSplitDetails) : [];
}
module.exports = getWrapDetails;

},{}],"56G4F":[function(require,module,exports) {
/** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */ function insertWrapDetails(source, details) {
    var length = details.length;
    if (!length) return source;
    var lastIndex = length - 1;
    details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
    details = details.join(length > 2 ? ", " : " ");
    return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
}
module.exports = insertWrapDetails;

},{}],"b5kjI":[function(require,module,exports) {
var baseSetToString = require("./_baseSetToString"), shortOut = require("./_shortOut");
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = shortOut(baseSetToString);
module.exports = setToString;

},{"./_baseSetToString":"lgihM","./_shortOut":"7ulLs"}],"lgihM":[function(require,module,exports) {
var constant = require("./constant"), defineProperty = require("./_defineProperty"), identity = require("./identity");
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
    });
};
module.exports = baseSetToString;

},{"./constant":"1HI6K","./_defineProperty":"cZOnw","./identity":"dgTUN"}],"1HI6K":[function(require,module,exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
module.exports = constant;

},{}],"cZOnw":[function(require,module,exports) {
var getNative = require("./_getNative");
var defineProperty = function() {
    try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
    } catch (e) {}
}();
module.exports = defineProperty;

},{"./_getNative":"9PCIl"}],"jyT8K":[function(require,module,exports) {
var arrayEach = require("./_arrayEach"), arrayIncludes = require("./_arrayIncludes");
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
/** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
    [
        "ary",
        WRAP_ARY_FLAG
    ],
    [
        "bind",
        WRAP_BIND_FLAG
    ],
    [
        "bindKey",
        WRAP_BIND_KEY_FLAG
    ],
    [
        "curry",
        WRAP_CURRY_FLAG
    ],
    [
        "curryRight",
        WRAP_CURRY_RIGHT_FLAG
    ],
    [
        "flip",
        WRAP_FLIP_FLAG
    ],
    [
        "partial",
        WRAP_PARTIAL_FLAG
    ],
    [
        "partialRight",
        WRAP_PARTIAL_RIGHT_FLAG
    ],
    [
        "rearg",
        WRAP_REARG_FLAG
    ]
];
/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */ function updateWrapDetails(details, bitmask) {
    arrayEach(wrapFlags, function(pair) {
        var value = "_." + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
    });
    return details.sort();
}
module.exports = updateWrapDetails;

},{"./_arrayEach":"kMhnH","./_arrayIncludes":"kfd3F"}],"kMhnH":[function(require,module,exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
module.exports = arrayEach;

},{}],"kfd3F":[function(require,module,exports) {
var baseIndexOf = require("./_baseIndexOf");
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
}
module.exports = arrayIncludes;

},{"./_baseIndexOf":"8NgWU"}],"8NgWU":[function(require,module,exports) {
var baseFindIndex = require("./_baseFindIndex"), baseIsNaN = require("./_baseIsNaN"), strictIndexOf = require("./_strictIndexOf");
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}
module.exports = baseIndexOf;

},{"./_baseFindIndex":"630D7","./_baseIsNaN":"47cqG","./_strictIndexOf":"8MeE0"}],"630D7":[function(require,module,exports) {
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : ++index < length){
        if (predicate(array[index], index, array)) return index;
    }
    return -1;
}
module.exports = baseFindIndex;

},{}],"47cqG":[function(require,module,exports) {
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
module.exports = baseIsNaN;

},{}],"8MeE0":[function(require,module,exports) {
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while(++index < length){
        if (array[index] === value) return index;
    }
    return -1;
}
module.exports = strictIndexOf;

},{}],"2v0Bi":[function(require,module,exports) {
/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */ function getHolder(func) {
    var object = func;
    return object.placeholder;
}
module.exports = getHolder;

},{}],"4CCWQ":[function(require,module,exports) {
var copyArray = require("./_copyArray"), isIndex = require("./_isIndex");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */ function reorder(array, indexes) {
    var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
    while(length--){
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
    }
    return array;
}
module.exports = reorder;

},{"./_copyArray":"jJ8fu","./_isIndex":"aJpx0"}],"aJpx0":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"brLIY":[function(require,module,exports) {
/** Used as the internal argument placeholder. */ var PLACEHOLDER = "__lodash_placeholder__";
/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */ function replaceHolders(array, placeholder) {
    var index = -1, length = array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
        }
    }
    return result;
}
module.exports = replaceHolders;

},{}],"1i1ov":[function(require,module,exports) {
var apply = require("./_apply"), createCtor = require("./_createCtor"), root = require("./_root");
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */ function createPartial(func, bitmask, thisArg, partials) {
    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
    function wrapper() {
        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
        while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
        return apply(fn, isBind ? thisArg : this, args);
    }
    return wrapper;
}
module.exports = createPartial;

},{"./_apply":"gUweg","./_createCtor":"5ihhn","./_root":"dSYUs"}],"g1yu3":[function(require,module,exports) {
var composeArgs = require("./_composeArgs"), composeArgsRight = require("./_composeArgsRight"), replaceHolders = require("./_replaceHolders");
/** Used as the internal argument placeholder. */ var PLACEHOLDER = "__lodash_placeholder__";
/** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */ function mergeData(data, source) {
    var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
    // Exit early if metadata can't be merged.
    if (!(isCommon || isCombo)) return data;
    // Use source `thisArg` if available.
    if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    }
    // Compose partial arguments.
    var value = source[3];
    if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    }
    // Compose partial right arguments.
    value = source[5];
    if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    }
    // Use source `argPos` if available.
    value = source[7];
    if (value) data[7] = value;
    // Use source `ary` if it's smaller.
    if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    // Use source `arity` if one is not provided.
    if (data[9] == null) data[9] = source[9];
    // Use source `func` and merge bitmasks.
    data[0] = source[0];
    data[1] = newBitmask;
    return data;
}
module.exports = mergeData;

},{"./_composeArgs":"9Sdbk","./_composeArgsRight":"diHiW","./_replaceHolders":"brLIY"}],"ds6ZT":[function(require,module,exports) {
var toFinite = require("./toFinite");
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
module.exports = toInteger;

},{"./toFinite":"dkCNj"}],"dkCNj":[function(require,module,exports) {
var toNumber = require("./toNumber");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 1.7976931348623157e+308;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) return value === 0 ? value : 0;
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
module.exports = toFinite;

},{"./toNumber":"12NaH"}],"12NaH":[function(require,module,exports) {
var baseTrim = require("./_baseTrim"), isObject = require("./isObject"), isSymbol = require("./isSymbol");
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == "number") return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") return value === 0 ? value : +value;
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = toNumber;

},{"./_baseTrim":"eUJZ3","./isObject":"cGhqJ","./isSymbol":"i3BHC"}],"eUJZ3":[function(require,module,exports) {
var trimmedEndIndex = require("./_trimmedEndIndex");
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
module.exports = baseTrim;

},{"./_trimmedEndIndex":"hHJmS"}],"hHJmS":[function(require,module,exports) {
/** Used to match a single whitespace character. */ var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index)));
    return index;
}
module.exports = trimmedEndIndex;

},{}],"i3BHC":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var symbolTag = "[object Symbol]";
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"./_baseGetTag":"lOnbo","./isObjectLike":"3BLi4"}],"fNRtQ":[function(require,module,exports) {
var copyObject = require("./_copyObject"), keys = require("./keys");
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
}
module.exports = baseAssign;

},{"./_copyObject":"gfA7W","./keys":"6fHVw"}],"gfA7W":[function(require,module,exports) {
var assignValue = require("./_assignValue"), baseAssignValue = require("./_baseAssignValue");
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
module.exports = copyObject;

},{"./_assignValue":"5M3eX","./_baseAssignValue":"fprBU"}],"5M3eX":[function(require,module,exports) {
var baseAssignValue = require("./_baseAssignValue"), eq = require("./eq");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignValue;

},{"./_baseAssignValue":"fprBU","./eq":"aVz5f"}],"fprBU":[function(require,module,exports) {
var defineProperty = require("./_defineProperty");
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;

},{"./_defineProperty":"cZOnw"}],"aVz5f":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"6fHVw":[function(require,module,exports) {
var arrayLikeKeys = require("./_arrayLikeKeys"), baseKeys = require("./_baseKeys"), isArrayLike = require("./isArrayLike");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"dquIQ","./_baseKeys":"c0eiI","./isArrayLike":"gMCbp"}],"dquIQ":[function(require,module,exports) {
var baseTimes = require("./_baseTimes"), isArguments = require("./isArguments"), isArray = require("./isArray"), isBuffer = require("./isBuffer"), isIndex = require("./_isIndex"), isTypedArray = require("./isTypedArray");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"odqYd","./isArguments":"8ReNj","./isArray":"dZaTH","./isBuffer":"cn85h","./_isIndex":"aJpx0","./isTypedArray":"6SVKk"}],"odqYd":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"8ReNj":[function(require,module,exports) {
var baseIsArguments = require("./_baseIsArguments"), isObjectLike = require("./isObjectLike");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
module.exports = isArguments;

},{"./_baseIsArguments":"gx70P","./isObjectLike":"3BLi4"}],"gx70P":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var argsTag = "[object Arguments]";
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"lOnbo","./isObjectLike":"3BLi4"}],"cn85h":[function(require,module,exports) {
var root = require("./_root"), stubFalse = require("./stubFalse");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"dSYUs","./stubFalse":"dx4uy"}],"dx4uy":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"6SVKk":[function(require,module,exports) {
var baseIsTypedArray = require("./_baseIsTypedArray"), baseUnary = require("./_baseUnary"), nodeUtil = require("./_nodeUtil");
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"lGSsl","./_baseUnary":"eJXq4","./_nodeUtil":"5edNe"}],"lGSsl":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), isLength = require("./isLength"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"lOnbo","./isLength":"hrTBx","./isObjectLike":"3BLi4"}],"hrTBx":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"eJXq4":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"5edNe":[function(require,module,exports) {
var freeGlobal = require("./_freeGlobal");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {}
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"kAk32"}],"c0eiI":[function(require,module,exports) {
var isPrototype = require("./_isPrototype"), nativeKeys = require("./_nativeKeys");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"iG4eR","./_nativeKeys":"k97u2"}],"iG4eR":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"k97u2":[function(require,module,exports) {
var overArg = require("./_overArg");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"dpUvl"}],"dpUvl":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"gMCbp":[function(require,module,exports) {
var isFunction = require("./isFunction"), isLength = require("./isLength");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"cfti6","./isLength":"hrTBx"}],"edHVe":[function(require,module,exports) {
var baseClone = require("./_baseClone");
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
}
module.exports = clone;

},{"./_baseClone":"2GC2p"}],"2GC2p":[function(require,module,exports) {
var Stack = require("./_Stack"), arrayEach = require("./_arrayEach"), assignValue = require("./_assignValue"), baseAssign = require("./_baseAssign"), baseAssignIn = require("./_baseAssignIn"), cloneBuffer = require("./_cloneBuffer"), copyArray = require("./_copyArray"), copySymbols = require("./_copySymbols"), copySymbolsIn = require("./_copySymbolsIn"), getAllKeys = require("./_getAllKeys"), getAllKeysIn = require("./_getAllKeysIn"), getTag = require("./_getTag"), initCloneArray = require("./_initCloneArray"), initCloneByTag = require("./_initCloneByTag"), initCloneObject = require("./_initCloneObject"), isArray = require("./isArray"), isBuffer = require("./isBuffer"), isMap = require("./isMap"), isObject = require("./isObject"), isSet = require("./isSet"), keys = require("./keys"), keysIn = require("./keysIn");
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!isObject(value)) return value;
    var isArr = isArray(value);
    if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) return copyArray(value, result);
    } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) return cloneBuffer(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {};
            result = initCloneByTag(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (isSet(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (isMap(value)) value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
module.exports = baseClone;

},{"./_Stack":"atP87","./_arrayEach":"kMhnH","./_assignValue":"5M3eX","./_baseAssign":"fNRtQ","./_baseAssignIn":"6Gpuu","./_cloneBuffer":"6zXd4","./_copyArray":"jJ8fu","./_copySymbols":"78Za0","./_copySymbolsIn":"lhZg2","./_getAllKeys":"d2kML","./_getAllKeysIn":"6BBOq","./_getTag":"cRPhM","./_initCloneArray":"1RKeS","./_initCloneByTag":"26ysD","./_initCloneObject":"dG1H0","./isArray":"dZaTH","./isBuffer":"cn85h","./isMap":"3qbv8","./isObject":"cGhqJ","./isSet":"bZrVh","./keys":"6fHVw","./keysIn":"c9sMs"}],"atP87":[function(require,module,exports) {
var ListCache = require("./_ListCache"), stackClear = require("./_stackClear"), stackDelete = require("./_stackDelete"), stackGet = require("./_stackGet"), stackHas = require("./_stackHas"), stackSet = require("./_stackSet");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"./_ListCache":"3UZeo","./_stackClear":"6CpyN","./_stackDelete":"dGFb0","./_stackGet":"6zFUp","./_stackHas":"3VJUX","./_stackSet":"ZfrYM"}],"3UZeo":[function(require,module,exports) {
var listCacheClear = require("./_listCacheClear"), listCacheDelete = require("./_listCacheDelete"), listCacheGet = require("./_listCacheGet"), listCacheHas = require("./_listCacheHas"), listCacheSet = require("./_listCacheSet");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"./_listCacheClear":"7AKQv","./_listCacheDelete":"j2Z5O","./_listCacheGet":"6Zrrs","./_listCacheHas":"i1CBK","./_listCacheSet":"2Rcur"}],"7AKQv":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"j2Z5O":[function(require,module,exports) {
var assocIndexOf = require("./_assocIndexOf");
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"./_assocIndexOf":"cRVsl"}],"cRVsl":[function(require,module,exports) {
var eq = require("./eq");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"./eq":"aVz5f"}],"6Zrrs":[function(require,module,exports) {
var assocIndexOf = require("./_assocIndexOf");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"./_assocIndexOf":"cRVsl"}],"i1CBK":[function(require,module,exports) {
var assocIndexOf = require("./_assocIndexOf");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"./_assocIndexOf":"cRVsl"}],"2Rcur":[function(require,module,exports) {
var assocIndexOf = require("./_assocIndexOf");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"./_assocIndexOf":"cRVsl"}],"6CpyN":[function(require,module,exports) {
var ListCache = require("./_ListCache");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"./_ListCache":"3UZeo"}],"dGFb0":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"6zFUp":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"3VJUX":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"ZfrYM":[function(require,module,exports) {
var ListCache = require("./_ListCache"), Map = require("./_Map"), MapCache = require("./_MapCache");
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"./_ListCache":"3UZeo","./_Map":"8YjF4","./_MapCache":"664I1"}],"8YjF4":[function(require,module,exports) {
var getNative = require("./_getNative"), root = require("./_root");
/* Built-in method references that are verified to be native. */ var Map = getNative(root, "Map");
module.exports = Map;

},{"./_getNative":"9PCIl","./_root":"dSYUs"}],"664I1":[function(require,module,exports) {
var mapCacheClear = require("./_mapCacheClear"), mapCacheDelete = require("./_mapCacheDelete"), mapCacheGet = require("./_mapCacheGet"), mapCacheHas = require("./_mapCacheHas"), mapCacheSet = require("./_mapCacheSet");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"./_mapCacheClear":"7kHs4","./_mapCacheDelete":"4ny9y","./_mapCacheGet":"gVeFY","./_mapCacheHas":"idSOY","./_mapCacheSet":"lXUJT"}],"7kHs4":[function(require,module,exports) {
var Hash = require("./_Hash"), ListCache = require("./_ListCache"), Map = require("./_Map");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        "hash": new Hash,
        "map": new (Map || ListCache),
        "string": new Hash
    };
}
module.exports = mapCacheClear;

},{"./_Hash":"jFMT5","./_ListCache":"3UZeo","./_Map":"8YjF4"}],"jFMT5":[function(require,module,exports) {
var hashClear = require("./_hashClear"), hashDelete = require("./_hashDelete"), hashGet = require("./_hashGet"), hashHas = require("./_hashHas"), hashSet = require("./_hashSet");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"./_hashClear":"f2NRo","./_hashDelete":"cCdgz","./_hashGet":"eKqTO","./_hashHas":"ghnqP","./_hashSet":"6i99R"}],"f2NRo":[function(require,module,exports) {
var nativeCreate = require("./_nativeCreate");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
module.exports = hashClear;

},{"./_nativeCreate":"6i8Uf"}],"6i8Uf":[function(require,module,exports) {
var getNative = require("./_getNative");
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, "create");
module.exports = nativeCreate;

},{"./_getNative":"9PCIl"}],"cCdgz":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"eKqTO":[function(require,module,exports) {
var nativeCreate = require("./_nativeCreate");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"./_nativeCreate":"6i8Uf"}],"ghnqP":[function(require,module,exports) {
var nativeCreate = require("./_nativeCreate");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"./_nativeCreate":"6i8Uf"}],"6i99R":[function(require,module,exports) {
var nativeCreate = require("./_nativeCreate");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"./_nativeCreate":"6i8Uf"}],"4ny9y":[function(require,module,exports) {
var getMapData = require("./_getMapData");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"./_getMapData":"aptgk"}],"aptgk":[function(require,module,exports) {
var isKeyable = require("./_isKeyable");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
module.exports = getMapData;

},{"./_isKeyable":"icylN"}],"icylN":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
module.exports = isKeyable;

},{}],"gVeFY":[function(require,module,exports) {
var getMapData = require("./_getMapData");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"./_getMapData":"aptgk"}],"idSOY":[function(require,module,exports) {
var getMapData = require("./_getMapData");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"./_getMapData":"aptgk"}],"lXUJT":[function(require,module,exports) {
var getMapData = require("./_getMapData");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"./_getMapData":"aptgk"}],"6Gpuu":[function(require,module,exports) {
var copyObject = require("./_copyObject"), keysIn = require("./keysIn");
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
}
module.exports = baseAssignIn;

},{"./_copyObject":"gfA7W","./keysIn":"c9sMs"}],"c9sMs":[function(require,module,exports) {
var arrayLikeKeys = require("./_arrayLikeKeys"), baseKeysIn = require("./_baseKeysIn"), isArrayLike = require("./isArrayLike");
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
module.exports = keysIn;

},{"./_arrayLikeKeys":"dquIQ","./_baseKeysIn":"23s7e","./isArrayLike":"gMCbp"}],"23s7e":[function(require,module,exports) {
var isObject = require("./isObject"), isPrototype = require("./_isPrototype"), nativeKeysIn = require("./_nativeKeysIn");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = baseKeysIn;

},{"./isObject":"cGhqJ","./_isPrototype":"iG4eR","./_nativeKeysIn":"5CFL0"}],"5CFL0":[function(require,module,exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = nativeKeysIn;

},{}],"6zXd4":[function(require,module,exports) {
var root = require("./_root");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;

},{"./_root":"dSYUs"}],"78Za0":[function(require,module,exports) {
var copyObject = require("./_copyObject"), getSymbols = require("./_getSymbols");
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
}
module.exports = copySymbols;

},{"./_copyObject":"gfA7W","./_getSymbols":"5p5Yd"}],"5p5Yd":[function(require,module,exports) {
var arrayFilter = require("./_arrayFilter"), stubArray = require("./stubArray");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"./_arrayFilter":"hmIQ7","./stubArray":"6TgRy"}],"hmIQ7":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"6TgRy":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"lhZg2":[function(require,module,exports) {
var copyObject = require("./_copyObject"), getSymbolsIn = require("./_getSymbolsIn");
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
}
module.exports = copySymbolsIn;

},{"./_copyObject":"gfA7W","./_getSymbolsIn":"dVaAc"}],"dVaAc":[function(require,module,exports) {
var arrayPush = require("./_arrayPush"), getPrototype = require("./_getPrototype"), getSymbols = require("./_getSymbols"), stubArray = require("./stubArray");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while(object){
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
    }
    return result;
};
module.exports = getSymbolsIn;

},{"./_arrayPush":"ivo5r","./_getPrototype":"8ASKT","./_getSymbols":"5p5Yd","./stubArray":"6TgRy"}],"ivo5r":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"8ASKT":[function(require,module,exports) {
var overArg = require("./_overArg");
/** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

},{"./_overArg":"dpUvl"}],"d2kML":[function(require,module,exports) {
var baseGetAllKeys = require("./_baseGetAllKeys"), getSymbols = require("./_getSymbols"), keys = require("./keys");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"./_baseGetAllKeys":"aeckf","./_getSymbols":"5p5Yd","./keys":"6fHVw"}],"aeckf":[function(require,module,exports) {
var arrayPush = require("./_arrayPush"), isArray = require("./isArray");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"./_arrayPush":"ivo5r","./isArray":"dZaTH"}],"6BBOq":[function(require,module,exports) {
var baseGetAllKeys = require("./_baseGetAllKeys"), getSymbolsIn = require("./_getSymbolsIn"), keysIn = require("./keysIn");
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
}
module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":"aeckf","./_getSymbolsIn":"dVaAc","./keysIn":"c9sMs"}],"cRPhM":[function(require,module,exports) {
var DataView = require("./_DataView"), Map = require("./_Map"), Promise = require("./_Promise"), Set = require("./_Set"), WeakMap = require("./_WeakMap"), baseGetTag = require("./_baseGetTag"), toSource = require("./_toSource");
/** `Object#toString` result references. */ var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
var dataViewTag = "[object DataView]";
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"./_DataView":"ejRu5","./_Map":"8YjF4","./_Promise":"jbvCt","./_Set":"4xGLf","./_WeakMap":"av50V","./_baseGetTag":"lOnbo","./_toSource":"bYHc7"}],"ejRu5":[function(require,module,exports) {
var getNative = require("./_getNative"), root = require("./_root");
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, "DataView");
module.exports = DataView;

},{"./_getNative":"9PCIl","./_root":"dSYUs"}],"jbvCt":[function(require,module,exports) {
var getNative = require("./_getNative"), root = require("./_root");
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, "Promise");
module.exports = Promise;

},{"./_getNative":"9PCIl","./_root":"dSYUs"}],"4xGLf":[function(require,module,exports) {
var getNative = require("./_getNative"), root = require("./_root");
/* Built-in method references that are verified to be native. */ var Set = getNative(root, "Set");
module.exports = Set;

},{"./_getNative":"9PCIl","./_root":"dSYUs"}],"1RKeS":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
module.exports = initCloneArray;

},{}],"26ysD":[function(require,module,exports) {
var cloneArrayBuffer = require("./_cloneArrayBuffer"), cloneDataView = require("./_cloneDataView"), cloneRegExp = require("./_cloneRegExp"), cloneSymbol = require("./_cloneSymbol"), cloneTypedArray = require("./_cloneTypedArray");
/** `Object#toString` result references. */ var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return cloneTypedArray(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return cloneRegExp(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return cloneSymbol(object);
    }
}
module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":"7fi2W","./_cloneDataView":"hEqzP","./_cloneRegExp":"aeJOQ","./_cloneSymbol":"5ScBc","./_cloneTypedArray":"7eG7Y"}],"7fi2W":[function(require,module,exports) {
var Uint8Array = require("./_Uint8Array");
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
module.exports = cloneArrayBuffer;

},{"./_Uint8Array":"6xFrA"}],"6xFrA":[function(require,module,exports) {
var root = require("./_root");
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

},{"./_root":"dSYUs"}],"hEqzP":[function(require,module,exports) {
var cloneArrayBuffer = require("./_cloneArrayBuffer");
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
module.exports = cloneDataView;

},{"./_cloneArrayBuffer":"7fi2W"}],"aeJOQ":[function(require,module,exports) {
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
module.exports = cloneRegExp;

},{}],"5ScBc":[function(require,module,exports) {
var Symbol = require("./_Symbol");
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
module.exports = cloneSymbol;

},{"./_Symbol":"7lsL9"}],"7eG7Y":[function(require,module,exports) {
var cloneArrayBuffer = require("./_cloneArrayBuffer");
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":"7fi2W"}],"dG1H0":[function(require,module,exports) {
var baseCreate = require("./_baseCreate"), getPrototype = require("./_getPrototype"), isPrototype = require("./_isPrototype");
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}
module.exports = initCloneObject;

},{"./_baseCreate":"ef1VZ","./_getPrototype":"8ASKT","./_isPrototype":"iG4eR"}],"3qbv8":[function(require,module,exports) {
var baseIsMap = require("./_baseIsMap"), baseUnary = require("./_baseUnary"), nodeUtil = require("./_nodeUtil");
/* Node.js helper references. */ var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

},{"./_baseIsMap":"9v3CD","./_baseUnary":"eJXq4","./_nodeUtil":"5edNe"}],"9v3CD":[function(require,module,exports) {
var getTag = require("./_getTag"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var mapTag = "[object Map]";
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
}
module.exports = baseIsMap;

},{"./_getTag":"cRPhM","./isObjectLike":"3BLi4"}],"bZrVh":[function(require,module,exports) {
var baseIsSet = require("./_baseIsSet"), baseUnary = require("./_baseUnary"), nodeUtil = require("./_nodeUtil");
/* Node.js helper references. */ var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

},{"./_baseIsSet":"7lzzg","./_baseUnary":"eJXq4","./_nodeUtil":"5edNe"}],"7lzzg":[function(require,module,exports) {
var getTag = require("./_getTag"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var setTag = "[object Set]";
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
}
module.exports = baseIsSet;

},{"./_getTag":"cRPhM","./isObjectLike":"3BLi4"}],"2x299":[function(require,module,exports) {
var createWrap = require("./_createWrap");
/** Used to compose bitmasks for function metadata. */ var WRAP_CURRY_FLAG = 8;
/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */ function curry(func, arity, guard) {
    arity = guard ? undefined : arity;
    var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
    result.placeholder = curry.placeholder;
    return result;
}
// Assign default placeholders.
curry.placeholder = {};
module.exports = curry;

},{"./_createWrap":"1nVn1"}],"8frBY":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), isObjectLike = require("./isObjectLike"), isPlainObject = require("./isPlainObject");
/** `Object#toString` result references. */ var domExcTag = "[object DOMException]", errorTag = "[object Error]";
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */ function isError(value) {
    if (!isObjectLike(value)) return false;
    var tag = baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
}
module.exports = isError;

},{"./_baseGetTag":"lOnbo","./isObjectLike":"3BLi4","./isPlainObject":"cvSNF"}],"cvSNF":[function(require,module,exports) {
var baseGetTag = require("./_baseGetTag"), getPrototype = require("./_getPrototype"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var objectTag = "[object Object]";
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;

},{"./_baseGetTag":"lOnbo","./_getPrototype":"8ASKT","./isObjectLike":"3BLi4"}],"io47w":[function(require,module,exports) {
var getTag = require("./_getTag"), isObjectLike = require("./isObjectLike");
/** `Object#toString` result references. */ var weakMapTag = "[object WeakMap]";
/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */ function isWeakMap(value) {
    return isObjectLike(value) && getTag(value) == weakMapTag;
}
module.exports = isWeakMap;

},{"./_getTag":"cRPhM","./isObjectLike":"3BLi4"}],"5r5GI":[function(require,module,exports) {
var baseClone = require("./_baseClone"), baseIteratee = require("./_baseIteratee");
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */ function iteratee(func) {
    return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
}
module.exports = iteratee;

},{"./_baseClone":"2GC2p","./_baseIteratee":"2fsgg"}],"2fsgg":[function(require,module,exports) {
var baseMatches = require("./_baseMatches"), baseMatchesProperty = require("./_baseMatchesProperty"), identity = require("./identity"), isArray = require("./isArray"), property = require("./property");
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == "function") return value;
    if (value == null) return identity;
    if (typeof value == "object") return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    return property(value);
}
module.exports = baseIteratee;

},{"./_baseMatches":"2mdwX","./_baseMatchesProperty":"48kxC","./identity":"dgTUN","./isArray":"dZaTH","./property":"8aSQI"}],"2mdwX":[function(require,module,exports) {
var baseIsMatch = require("./_baseIsMatch"), getMatchData = require("./_getMatchData"), matchesStrictComparable = require("./_matchesStrictComparable");
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
    };
}
module.exports = baseMatches;

},{"./_baseIsMatch":"joJZV","./_getMatchData":"48Qyi","./_matchesStrictComparable":"a9Bav"}],"joJZV":[function(require,module,exports) {
var Stack = require("./_Stack"), baseIsEqual = require("./_baseIsEqual");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while(++index < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new Stack;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
module.exports = baseIsMatch;

},{"./_Stack":"atP87","./_baseIsEqual":"7i3qr"}],"7i3qr":[function(require,module,exports) {
var baseIsEqualDeep = require("./_baseIsEqualDeep"), isObjectLike = require("./isObjectLike");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":"6GoQ9","./isObjectLike":"3BLi4"}],"6GoQ9":[function(require,module,exports) {
var Stack = require("./_Stack"), equalArrays = require("./_equalArrays"), equalByTag = require("./_equalByTag"), equalObjects = require("./_equalObjects"), getTag = require("./_getTag"), isArray = require("./isArray"), isBuffer = require("./isBuffer"), isTypedArray = require("./isTypedArray");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"./_Stack":"atP87","./_equalArrays":"dQBwf","./_equalByTag":"iqa6H","./_equalObjects":"klCEf","./_getTag":"cRPhM","./isArray":"dZaTH","./isBuffer":"cn85h","./isTypedArray":"6SVKk"}],"dQBwf":[function(require,module,exports) {
var SetCache = require("./_SetCache"), arraySome = require("./_arraySome"), cacheHas = require("./_cacheHas");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
}
module.exports = equalArrays;

},{"./_SetCache":"1SXrY","./_arraySome":"aLDHW","./_cacheHas":"70cVb"}],"1SXrY":[function(require,module,exports) {
var MapCache = require("./_MapCache"), setCacheAdd = require("./_setCacheAdd"), setCacheHas = require("./_setCacheHas");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"./_MapCache":"664I1","./_setCacheAdd":"cZViu","./_setCacheHas":"4zNID"}],"cZViu":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"4zNID":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"aLDHW":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"70cVb":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"iqa6H":[function(require,module,exports) {
var Symbol = require("./_Symbol"), Uint8Array = require("./_Uint8Array"), eq = require("./eq"), equalArrays = require("./_equalArrays"), mapToArray = require("./_mapToArray"), setToArray = require("./_setToArray");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + "";
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"./_Symbol":"7lsL9","./_Uint8Array":"6xFrA","./eq":"aVz5f","./_equalArrays":"dQBwf","./_mapToArray":"kAwkU","./_setToArray":"2qJif"}],"kAwkU":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"2qJif":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"klCEf":[function(require,module,exports) {
var getAllKeys = require("./_getAllKeys");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
}
module.exports = equalObjects;

},{"./_getAllKeys":"d2kML"}],"48Qyi":[function(require,module,exports) {
var isStrictComparable = require("./_isStrictComparable"), keys = require("./keys");
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = keys(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            isStrictComparable(value)
        ];
    }
    return result;
}
module.exports = getMatchData;

},{"./_isStrictComparable":"lpdGS","./keys":"6fHVw"}],"lpdGS":[function(require,module,exports) {
var isObject = require("./isObject");
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !isObject(value);
}
module.exports = isStrictComparable;

},{"./isObject":"cGhqJ"}],"a9Bav":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
module.exports = matchesStrictComparable;

},{}],"48kxC":[function(require,module,exports) {
var baseIsEqual = require("./_baseIsEqual"), get = require("./get"), hasIn = require("./hasIn"), isKey = require("./_isKey"), isStrictComparable = require("./_isStrictComparable"), matchesStrictComparable = require("./_matchesStrictComparable"), toKey = require("./_toKey");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
    return function(object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
module.exports = baseMatchesProperty;

},{"./_baseIsEqual":"7i3qr","./get":"8UELX","./hasIn":"57qii","./_isKey":"4wPWG","./_isStrictComparable":"lpdGS","./_matchesStrictComparable":"a9Bav","./_toKey":"bEgue"}],"8UELX":[function(require,module,exports) {
var baseGet = require("./_baseGet");
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
}
module.exports = get;

},{"./_baseGet":"kMRe3"}],"kMRe3":[function(require,module,exports) {
var castPath = require("./_castPath"), toKey = require("./_toKey");
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[toKey(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = baseGet;

},{"./_castPath":"apxk5","./_toKey":"bEgue"}],"apxk5":[function(require,module,exports) {
var isArray = require("./isArray"), isKey = require("./_isKey"), stringToPath = require("./_stringToPath"), toString = require("./toString");
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (isArray(value)) return value;
    return isKey(value, object) ? [
        value
    ] : stringToPath(toString(value));
}
module.exports = castPath;

},{"./isArray":"dZaTH","./_isKey":"4wPWG","./_stringToPath":"1m1j5","./toString":"joIdQ"}],"4wPWG":[function(require,module,exports) {
var isArray = require("./isArray"), isSymbol = require("./isSymbol");
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (isArray(value)) return false;
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

},{"./isArray":"dZaTH","./isSymbol":"i3BHC"}],"1m1j5":[function(require,module,exports) {
var memoizeCapped = require("./_memoizeCapped");
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
    });
    return result;
});
module.exports = stringToPath;

},{"./_memoizeCapped":"j3xlQ"}],"j3xlQ":[function(require,module,exports) {
var memoize = require("./memoize");
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = memoizeCapped;

},{"./memoize":"azHKC"}],"azHKC":[function(require,module,exports) {
var MapCache = require("./_MapCache");
/** Error message constants. */ var FUNC_ERROR_TEXT = "Expected a function";
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

},{"./_MapCache":"664I1"}],"joIdQ":[function(require,module,exports) {
var baseToString = require("./_baseToString");
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? "" : baseToString(value);
}
module.exports = toString;

},{"./_baseToString":"goDP8"}],"goDP8":[function(require,module,exports) {
var Symbol = require("./_Symbol"), arrayMap = require("./_arrayMap"), isArray = require("./isArray"), isSymbol = require("./isSymbol");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == "string") return value;
    if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + "";
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
module.exports = baseToString;

},{"./_Symbol":"7lsL9","./_arrayMap":"imI5Z","./isArray":"dZaTH","./isSymbol":"i3BHC"}],"imI5Z":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = arrayMap;

},{}],"bEgue":[function(require,module,exports) {
var isSymbol = require("./isSymbol");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) return value;
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
module.exports = toKey;

},{"./isSymbol":"i3BHC"}],"57qii":[function(require,module,exports) {
var baseHasIn = require("./_baseHasIn"), hasPath = require("./_hasPath");
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

},{"./_baseHasIn":"in8KZ","./_hasPath":"4QNMG"}],"in8KZ":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
module.exports = baseHasIn;

},{}],"4QNMG":[function(require,module,exports) {
var castPath = require("./_castPath"), isArguments = require("./isArguments"), isArray = require("./isArray"), isIndex = require("./_isIndex"), isLength = require("./isLength"), toKey = require("./_toKey");
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while(++index < length){
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || ++index != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

},{"./_castPath":"apxk5","./isArguments":"8ReNj","./isArray":"dZaTH","./_isIndex":"aJpx0","./isLength":"hrTBx","./_toKey":"bEgue"}],"8aSQI":[function(require,module,exports) {
var baseProperty = require("./_baseProperty"), basePropertyDeep = require("./_basePropertyDeep"), isKey = require("./_isKey"), toKey = require("./_toKey");
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

},{"./_baseProperty":"4HOmE","./_basePropertyDeep":"c9dhz","./_isKey":"4wPWG","./_toKey":"bEgue"}],"4HOmE":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
module.exports = baseProperty;

},{}],"c9dhz":[function(require,module,exports) {
var baseGet = require("./_baseGet");
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return baseGet(object, path);
    };
}
module.exports = basePropertyDeep;

},{"./_baseGet":"kMRe3"}],"bePiz":[function(require,module,exports) {
var createWrap = require("./_createWrap"), flatRest = require("./_flatRest");
/** Used to compose bitmasks for function metadata. */ var WRAP_REARG_FLAG = 256;
/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */ var rearg = flatRest(function(func, indexes) {
    return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});
module.exports = rearg;

},{"./_createWrap":"1nVn1","./_flatRest":"bmlRd"}],"bmlRd":[function(require,module,exports) {
var flatten = require("./flatten"), overRest = require("./_overRest"), setToString = require("./_setToString");
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */ function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + "");
}
module.exports = flatRest;

},{"./flatten":"71l7m","./_overRest":"16F1z","./_setToString":"b5kjI"}],"71l7m":[function(require,module,exports) {
var baseFlatten = require("./_baseFlatten");
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */ function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
}
module.exports = flatten;

},{"./_baseFlatten":"60rt9"}],"60rt9":[function(require,module,exports) {
var arrayPush = require("./_arrayPush"), isFlattenable = require("./_isFlattenable");
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */ function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while(++index < length){
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
            else arrayPush(result, value);
        } else if (!isStrict) result[result.length] = value;
    }
    return result;
}
module.exports = baseFlatten;

},{"./_arrayPush":"ivo5r","./_isFlattenable":"O762m"}],"O762m":[function(require,module,exports) {
var Symbol = require("./_Symbol"), isArguments = require("./isArguments"), isArray = require("./isArray");
/** Built-in value references. */ var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */ function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}
module.exports = isFlattenable;

},{"./_Symbol":"7lsL9","./isArguments":"8ReNj","./isArray":"dZaTH"}],"16F1z":[function(require,module,exports) {
var apply = require("./_apply");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
module.exports = overRest;

},{"./_apply":"gUweg"}],"hH9yA":[function(require,module,exports) {
var arrayMap = require("./_arrayMap"), copyArray = require("./_copyArray"), isArray = require("./isArray"), isSymbol = require("./isSymbol"), stringToPath = require("./_stringToPath"), toKey = require("./_toKey"), toString = require("./toString");
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */ function toPath(value) {
    if (isArray(value)) return arrayMap(value, toKey);
    return isSymbol(value) ? [
        value
    ] : copyArray(stringToPath(toString(value)));
}
module.exports = toPath;

},{"./_arrayMap":"imI5Z","./_copyArray":"jJ8fu","./isArray":"dZaTH","./isSymbol":"i3BHC","./_stringToPath":"1m1j5","./_toKey":"bEgue","./toString":"joIdQ"}],"7UOYF":[function(require,module,exports) {
var apply = require("./_apply"), baseRest = require("./_baseRest"), customDefaultsMerge = require("./_customDefaultsMerge"), mergeWith = require("./mergeWith");
/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */ var defaultsDeep = baseRest(function(args) {
    args.push(undefined, customDefaultsMerge);
    return apply(mergeWith, undefined, args);
});
module.exports = defaultsDeep;

},{"./_apply":"gUweg","./_baseRest":"kd260","./_customDefaultsMerge":"fX7iC","./mergeWith":"lSM2M"}],"kd260":[function(require,module,exports) {
var identity = require("./identity"), overRest = require("./_overRest"), setToString = require("./_setToString");
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
}
module.exports = baseRest;

},{"./identity":"dgTUN","./_overRest":"16F1z","./_setToString":"b5kjI"}],"fX7iC":[function(require,module,exports) {
var baseMerge = require("./_baseMerge"), isObject = require("./isObject");
/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack["delete"](srcValue);
    }
    return objValue;
}
module.exports = customDefaultsMerge;

},{"./_baseMerge":"lMODl","./isObject":"cGhqJ"}],"lMODl":[function(require,module,exports) {
var Stack = require("./_Stack"), assignMergeValue = require("./_assignMergeValue"), baseFor = require("./_baseFor"), baseMergeDeep = require("./_baseMergeDeep"), isObject = require("./isObject"), keysIn = require("./keysIn"), safeGet = require("./_safeGet");
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
module.exports = baseMerge;

},{"./_Stack":"atP87","./_assignMergeValue":"c7MYR","./_baseFor":"k0bbR","./_baseMergeDeep":"9JvYT","./isObject":"cGhqJ","./keysIn":"c9sMs","./_safeGet":"bXTnf"}],"c7MYR":[function(require,module,exports) {
var baseAssignValue = require("./_baseAssignValue"), eq = require("./eq");
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignMergeValue;

},{"./_baseAssignValue":"fprBU","./eq":"aVz5f"}],"k0bbR":[function(require,module,exports) {
var createBaseFor = require("./_createBaseFor");
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
module.exports = baseFor;

},{"./_createBaseFor":"hCIGA"}],"hCIGA":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;

},{}],"9JvYT":[function(require,module,exports) {
var assignMergeValue = require("./_assignMergeValue"), cloneBuffer = require("./_cloneBuffer"), cloneTypedArray = require("./_cloneTypedArray"), copyArray = require("./_copyArray"), initCloneObject = require("./_initCloneObject"), isArguments = require("./isArguments"), isArray = require("./isArray"), isArrayLikeObject = require("./isArrayLikeObject"), isBuffer = require("./isBuffer"), isFunction = require("./isFunction"), isObject = require("./isObject"), isPlainObject = require("./isPlainObject"), isTypedArray = require("./isTypedArray"), safeGet = require("./_safeGet"), toPlainObject = require("./toPlainObject");
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
module.exports = baseMergeDeep;

},{"./_assignMergeValue":"c7MYR","./_cloneBuffer":"6zXd4","./_cloneTypedArray":"7eG7Y","./_copyArray":"jJ8fu","./_initCloneObject":"dG1H0","./isArguments":"8ReNj","./isArray":"dZaTH","./isArrayLikeObject":"RyRVf","./isBuffer":"cn85h","./isFunction":"cfti6","./isObject":"cGhqJ","./isPlainObject":"cvSNF","./isTypedArray":"6SVKk","./_safeGet":"bXTnf","./toPlainObject":"9QCta"}],"RyRVf":[function(require,module,exports) {
var isArrayLike = require("./isArrayLike"), isObjectLike = require("./isObjectLike");
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
module.exports = isArrayLikeObject;

},{"./isArrayLike":"gMCbp","./isObjectLike":"3BLi4"}],"bXTnf":[function(require,module,exports) {
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") return;
    if (key == "__proto__") return;
    return object[key];
}
module.exports = safeGet;

},{}],"9QCta":[function(require,module,exports) {
var copyObject = require("./_copyObject"), keysIn = require("./keysIn");
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
module.exports = toPlainObject;

},{"./_copyObject":"gfA7W","./keysIn":"c9sMs"}],"lSM2M":[function(require,module,exports) {
var baseMerge = require("./_baseMerge"), createAssigner = require("./_createAssigner");
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
});
module.exports = mergeWith;

},{"./_baseMerge":"lMODl","./_createAssigner":"7RrvA"}],"7RrvA":[function(require,module,exports) {
var baseRest = require("./_baseRest"), isIterateeCall = require("./_isIterateeCall");
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while(++index < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
module.exports = createAssigner;

},{"./_baseRest":"kd260","./_isIterateeCall":"7JSn7"}],"7JSn7":[function(require,module,exports) {
var eq = require("./eq"), isArrayLike = require("./isArrayLike"), isIndex = require("./_isIndex"), isObject = require("./isObject");
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
    return false;
}
module.exports = isIterateeCall;

},{"./eq":"aVz5f","./isArrayLike":"gMCbp","./_isIndex":"aJpx0","./isObject":"cGhqJ"}],"9XEia":[function(require,module,exports) {
var baseIsEqual = require("./_baseIsEqual");
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function isEqual(value, other) {
    return baseIsEqual(value, other);
}
module.exports = isEqual;

},{"./_baseIsEqual":"7i3qr"}],"nyiqW":[function(require,module,exports) {
var baseDifference = require("./_baseDifference"), baseFlatten = require("./_baseFlatten"), baseRest = require("./_baseRest"), isArrayLikeObject = require("./isArrayLikeObject"), last = require("./last");
/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */ var differenceWith = baseRest(function(array, values) {
    var comparator = last(values);
    if (isArrayLikeObject(comparator)) comparator = undefined;
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
});
module.exports = differenceWith;

},{"./_baseDifference":"8PHHD","./_baseFlatten":"60rt9","./_baseRest":"kd260","./isArrayLikeObject":"RyRVf","./last":"fv3GK"}],"8PHHD":[function(require,module,exports) {
var SetCache = require("./_SetCache"), arrayIncludes = require("./_arrayIncludes"), arrayIncludesWith = require("./_arrayIncludesWith"), arrayMap = require("./_arrayMap"), baseUnary = require("./_baseUnary"), cacheHas = require("./_cacheHas");
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */ function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) return result;
    if (iteratee) values = arrayMap(values, baseUnary(iteratee));
    if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
    }
    outer: while(++index < length){
        var value = array[index], computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while(valuesIndex--){
                if (values[valuesIndex] === computed) continue outer;
            }
            result.push(value);
        } else if (!includes(values, computed, comparator)) result.push(value);
    }
    return result;
}
module.exports = baseDifference;

},{"./_SetCache":"1SXrY","./_arrayIncludes":"kfd3F","./_arrayIncludesWith":"ghsru","./_arrayMap":"imI5Z","./_baseUnary":"eJXq4","./_cacheHas":"70cVb"}],"ghsru":[function(require,module,exports) {
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */ function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (comparator(value, array[index])) return true;
    }
    return false;
}
module.exports = arrayIncludesWith;

},{}],"fv3GK":[function(require,module,exports) {
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */ function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
}
module.exports = last;

},{}],"bpcEQ":[function(require,module,exports) {
var arrayMap = require("./_arrayMap"), baseIntersection = require("./_baseIntersection"), baseRest = require("./_baseRest"), castArrayLikeObject = require("./_castArrayLikeObject"), last = require("./last");
/**
 * This method is like `_.intersection` except that it accepts `comparator`
 * which is invoked to compare elements of `arrays`. The order and references
 * of result values are determined by the first array. The comparator is
 * invoked with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.intersectionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }]
 */ var intersectionWith = baseRest(function(arrays) {
    var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
    comparator = typeof comparator == "function" ? comparator : undefined;
    if (comparator) mapped.pop();
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
});
module.exports = intersectionWith;

},{"./_arrayMap":"imI5Z","./_baseIntersection":"6oFMK","./_baseRest":"kd260","./_castArrayLikeObject":"4wzuj","./last":"fv3GK"}],"6oFMK":[function(require,module,exports) {
var SetCache = require("./_SetCache"), arrayIncludes = require("./_arrayIncludes"), arrayIncludesWith = require("./_arrayIncludesWith"), arrayMap = require("./_arrayMap"), baseUnary = require("./_baseUnary"), cacheHas = require("./_cacheHas");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */ function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
    while(othIndex--){
        var array = arrays[othIndex];
        if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
    }
    array = arrays[0];
    var index = -1, seen = caches[0];
    outer: while(++index < length && result.length < maxLength){
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;
            while(--othIndex){
                var cache = caches[othIndex];
                if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
            }
            if (seen) seen.push(computed);
            result.push(value);
        }
    }
    return result;
}
module.exports = baseIntersection;

},{"./_SetCache":"1SXrY","./_arrayIncludes":"kfd3F","./_arrayIncludesWith":"ghsru","./_arrayMap":"imI5Z","./_baseUnary":"eJXq4","./_cacheHas":"70cVb"}],"4wzuj":[function(require,module,exports) {
var isArrayLikeObject = require("./isArrayLikeObject");
/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */ function castArrayLikeObject(value) {
    return isArrayLikeObject(value) ? value : [];
}
module.exports = castArrayLikeObject;

},{"./isArrayLikeObject":"RyRVf"}]},["1xC6H","6FqiZ","4aBH6"], "4aBH6", "parcelRequire4542")

//# sourceMappingURL=index.2d3ace14.js.map
